#!/usr/bin/perl -wT
#
# Copyright (c) 2006, 2007 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use strict;
use Getopt::Std;
use Cwd qw(realpath);

#
# Add metadata to a template.
#
# Exit codes are important; they tell the web page what has happened so
# it can say something useful to the user. Fatal errors are mostly done
# with die(), but expected errors use this routine. At some point we will
# use the DB to communicate the actual error.
#
# $status < 0 - Fatal error. Something went wrong we did not expect.
# $status = 0 - Everything okay.
# $status > 0 - Expected error. User not allowed for some reason. 
# 
sub usage()
{
    print(STDERR
	  "Usage: template_metadata -a <action> -f <file> [-t type] ".
	  "<name> <guid/vers>\n".
	  "switches and arguments:\n".
	  "-a <action>    - add, delete or modify\n".
	  "-t <type>      - type if not generic user metadata (add only)\n".
	  "-f <file>      - file of metadata value\n".
	  "<name>         - Metadata name\n".
	  "<guid/vers>    - GUID and version of template\n");
    exit(-1);
}
my $optlist	 = "a:f:t:";
my %options      = ();
my $action;
my $template_guid;
my $template_vers;
my $metadata_name;
my $metadata_value;
my $metadata_type;
my $inputfile;

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS	= "@TBOPSEMAIL@";

# Locals
my $template;
my $instance;
# For the END block below.
my $cleaning    = 0;
my $justexit    = 1;

# Protos
sub ParseArgs();

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;
use libtblog;
use Template;

# Be careful not to exit on transient error
$libdb::DBQUERY_MAXTRIES = 0;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
#
# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Verify user and get his DB uid.
#
my $this_user = User->ThisUser();
if (! defined($this_user)) {
    tbdie("You ($UID) do not exist!");
}
my $user_dbid  = $this_user->dbid();
my $user_uid   = $this_user->uid();

# Now parse arguments.
ParseArgs();

#
# Grab template and do access check.
#
$template = Template->Lookup($template_guid, $template_vers);

if (!defined($template)) {
    tbdie("Experiment template $template_guid/$template_vers does not exist!");
}
if (! $template->AccessCheck($this_user, TB_EXPT_MODIFY)) {
    tberror("You do not have permission to add metadata to template ".
	    "$template_guid/$template_vers");
    exit(1);
}

if ($action ne "delete") {
    $metadata_value = `cat $inputfile`;

    if (! TBcheck_dbslot($metadata_value,
			 "experiment_template_metadata", "value",
			 TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
	tbdie("Improper characters in metadata value!");
    }
}

my $already_exists = $template->LookupMetadata($metadata_name);
tbdie("Could not lookup metadata name '$metadata_name'")
    if ($already_exists < 0);

if ($action eq "delete") {
    tbdie("Metadata name '$metadata_name' does not exist!")
	if (!$already_exists);
    
    $template->DeleteMetadata($metadata_name) == 0
	or tbdie("Could not delete metadata item '$metadata_name'");
}
elsif ($action eq "add") {
    tbdie("Metadata name '$metadata_name' already in use!")
	if ($already_exists);
    
    $template->NewMetadata($metadata_name, $metadata_value,
			   $this_user, $metadata_type) == 0
	or tbdie("Could not add new metadata item '$metadata_name'");
}
else {
    tbdie("Metadata name '$metadata_name' does not exist!")
	if (!$already_exists);
    
    $template->ModifyMetadata($metadata_name, $metadata_value, $this_user) == 0
	or tbdie("Could not modify metadata item '$metadata_name'");
}
exit(0);

#
# Parse command arguments. Once we return from getopts, all that are
# left are the required arguments.
#
sub ParseArgs()
{
    my %options;
    
    if (! getopts($optlist, \%options)) {
	usage();
    }

    if (@ARGV != 2) {
	usage();
    }

    #
    # Pick up metadata name and untaint.
    #
    $metadata_name = shift(@ARGV);

    if (! TBcheck_dbslot($metadata_name,
			 "experiment_template_metadata", "name",
			 TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
	tbdie("Improper metadata name!");
    }
    
    #
    # Pick up guid/version and untaint.
    #
    my $tmp = shift(@ARGV);

    if ($tmp =~ /^([\w]*)\/([\d]*)$/) {
	$template_guid = $1;
	$template_vers = $2;
    }
    else {
	usage();
    }

    if (!defined($options{"a"})) {
	tbdie("Must supply -a option");
    }
    $action = $options{"a"};
    usage()
	if ($action ne "add" && $action ne "modify" && $action ne "delete");

    if (defined($options{"t"})) {
	$metadata_type = $options{"t"};

	if (! TBcheck_dbslot($metadata_type,
			     "experiment_template_metadata", "metadata_type",
			     TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
	    tbdie("Improper metadata type!");
	}
    }

    if (defined($options{"f"})) {
	$inputfile = $options{"f"};

	# Note different taint check (allow /).
	if ($inputfile =~ /^([-\w\.\/]+)$/) {
	    $inputfile = $1;
	}
	else {
	    tbdie("Bad data in metadata file: $inputfile");
	}

	#
	# Called from ops interactively. Make sure NS file in /proj or /users.
	#
	# Use realpath to resolve any symlinks.
	#
	my $translated = realpath($inputfile);
	if ($translated =~ /^([-\w\.\/]+)$/) {
	    $inputfile = $1;
	}
	else {
	    tbdie("Bad data returned by realpath: $translated");
	}

	tbdie("$inputfile does not exist")
	    if (! -f $inputfile);

	#
	# The file must reside in an acceptible location. Since this script
	# runs as the caller, regular file permission checks ensure it is a
	# file the user is allowed to use.  So we don't have to be too tight
	# with the RE matching /tmp and /var/tmp files.  Note that the .txt
	# files are allowed since this script is invoked directly from web
	# interface which generates a name that should not be guessable.
	#
	if (! ($inputfile =~ /^\/tmp\/[-\w]+-\d+\.txt/) &&
	    ! ($inputfile =~ /^\/tmp\/\d+\.txt/) &&
	    ! ($inputfile =~ /^\/var\/tmp\/php\w+/) &&
	    ! TBValidUserDir($inputfile, 0)) {
	    tberror("$inputfile does not resolve to an allowed directory!");
	    # Note positive status; so error goes to user not tbops.
	    exit(1);
	}
    }
    elsif ($action ne "delete") {
	usage();
    }
}

