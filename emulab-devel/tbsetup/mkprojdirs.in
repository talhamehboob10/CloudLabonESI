#!/usr/bin/perl -w
#
# Copyright (c) 2000-2018 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;
use strict;

#
# Create (or recreate after dopey users remove things) the project
# directory hierarchy.
#
# This script always does the right thing, no need to run as admin.
#
sub usage()
{
    print STDERR "Usage: mkprojdirs [-a] <pid> [<gid>]\n";
    print STDERR "       mkprojdirs [-a] -A\n";
    print STDERR "Options:\n";
    print STDERR "  -a    - Create (re-create) all subgroups for pid(s)\n";
    print STDERR "  -A    - Create (re-create) all projects\n";
    print STDERR "  -v    - With -A option, report progress\n";
    exit(-1);
}
my $optlist    = "aAv";
my $verbose    = 0;
my $allpids    = 0;
my $allgroups  = 0;
my @projects   = ();

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS	= "@TBOPSEMAIL@";
my $CONTROL     = "@USERNODE@";
my $SSH         = "$TB/bin/sshtb";
my $ACCOUNTPROXY= "$TB/sbin/accountsetup";

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = '/bin:/usr/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use emdb;
use libtestbed;
use Project;
use Group;

# Defined in libtestbed.
my $PROJROOT    = PROJROOT();
my $GRPROOT     = GROUPROOT();

# Protos
sub fatal($);

#
# We don't want to run this script unless its the real version.
#
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be setuid! Maybe its a development version?\n");
}

#
# This script is setuid, so please do not run it as root. Hard to track
# what has happened.
# 
if ($UID == 0) {
    die("*** $0:\n".
	"    Please do not run this as root! Its already setuid!\n");
}

#
# Check args.
#
#
# Check args.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"v"})) {
    $verbose = 1;
}
if (defined($options{"a"})) {
    $allgroups = 1;
}
if (defined($options{"A"})) {
    $allpids = 1;
}
if ($allpids) {
    my $query_result =
	DBQueryFatal("select pid_idx from projects ".
		     "where approved=1");
    if (! $query_result->numrows) {
	fatal("No approved projects for -A option");
    }
    while (my ($pid_idx) = $query_result->fetchrow_array()) {
	my $project = Project->Lookup($pid_idx);
	if (!defined($project)) {
	    print STDERR "No database object for $pid_idx, skipping.\n";
	    next;
	}
	push(@projects, $project);
    }
}
else {
    usage()
	if (@ARGV < 1);

    my $project = Project->Lookup($ARGV[0]);
    if (!defined($project)) {
	fatal("No such project!")
    }
    @projects = ($project);
}

# Perl/ssh Sillyness.
$UID = $EUID;

foreach my $project (@projects) {
    my $pid = $project->pid();
    my @groups = ();

    if ($allgroups) {
	if ($project->GroupList(\@groups)) {
	    fatal("Could not get group list for project");
	}
	# GroupList() does not include project group.
	my $group = $project->GetProjectGroup();
	if (!defined($group)) {
	    fatal("Could not lookup default group for project!")
	}
	unshift(@groups, $group);
    }
    elsif (@ARGV > 1) {
	my $group = $project->LookupGroup($ARGV[1]);
	if (!defined($group)) {
	    fatal("Could not lookup group for project!")
	}
	push(@groups, $group);
    }
    else {
	my $group = $project->GetProjectGroup();
	if (!defined($group)) {
	    fatal("Could not lookup default group for project!")
	}
	push(@groups, $group);
    }
    if ($allpids && $verbose) {
	print "$pid\n";
    }
    #
    # Run command on control node for each group.
    #
    foreach my $group (@groups) {
	my $gid        = $group->gid();
	my $unix_gid   = $group->unix_gid();
	my $unix_name  = $group->unix_name();

	if ($allpids && $verbose) {
	    print "  $gid\n";
	}

	# Need proj/group leader for ownership.
	my $leader = $group->GetLeader();
	if (!defined($leader)) {
	    print STDERR "Could not get group leader for $group, skipping\n";
	    next;
	}
	my $unix_uid = $leader->unix_uid();

	my $cmdstr;
	if ($pid eq $gid) {
	    $cmdstr = "addproject $pid $unix_name $unix_gid $unix_uid";
	}
	else {
	    $cmdstr = "addgroup $gid $unix_name $unix_gid $unix_uid $pid";
	}
	if (system("$SSH -host $CONTROL $ACCOUNTPROXY $cmdstr")) {
	    my $message = "Failed on $CONTROL: '$ACCOUNTPROXY $cmdstr'";
	    if (!$allpids) {
		fatal($message);
	    }
	    else {
		print STDERR $message . "\n";
	    }
	}
    }
}
exit(0);

sub fatal($)
{
    my ($msg) = @_;

    die("*** $0:\n".
	"    $msg\n");
}
