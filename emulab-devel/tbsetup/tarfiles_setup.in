#!/usr/bin/perl -w
#
# Copyright (c) 2003-2011 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;
use Socket;
    
#
# Fetch all tarball(s) (and RPM(s)) for an experiment. Since we don't want to
# give users the chance to exploit bugs or features used in the program to do
# the fetching, we ssh over to ops to do the actual fetching.
# 
# As a side-effect, copies the contents of the tarfiles and rpms fields from
# virt_nodes to the nodes table. Any fetched tarballs (or RPMs) are entered
# into the nodes table as the location on local disk they were fetched to.
#
# Should be run _after_ the experiment has begun swapin - ie. when the
# virt_nodes have already been assigned to physical nodes.
#

sub usage()
{
    print "Usage: $0 [-q] pid eid\n";
 
    exit(-1);
}
my $optlist = "q";
my $quiet   = 0;

#
# Functions
#
sub verifyURL($);

#
# Configure variables
#
my $TB       = "@prefix@";
my $TBOPS    = "@TBOPSEMAIL@";
my $CONTROL  = "@USERNODE@";
my $TESTMODE = @TESTMODE@;

my $SAVEUID  = $UID;
my $MD5      = "/sbin/md5";

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "$TB/bin:$TB/sbin:/bin:/usr/bin:/sbin:/usr/sbin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

if ($TESTMODE) {
    # In testmode, drop privs (my devel tree at home is TESTMODE=1)
    $EUID = $UID;
}
elsif ($EUID != 0) {
    # We don't want to run this script unless its the real version.
    die("Must be root! Maybe its a development version?");
}

# This script is setuid, so please do not run it as root. Hard to track
# what has happened.
if ($UID == 0) {
    die("Please do not run this as root! Its already setuid!");
}

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libtestbed;
use libdb;
use libtblog;
use Template;
use libArchive;
use Experiment;
use User;

my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"q"})) {
    $quiet = 1;
}
if (@ARGV != 2) {
    usage();
}
my ($pid, $eid) = @ARGV;

my %tofetch   = ();
my %toarchive = ();

#
# Verify user and get his DB uid and other info for later.
#
my $this_user = User->ThisUser();
if (! defined($this_user)) {
    tbdie("You ($UID) do not exist!");
}
my $user_uid   = $this_user->uid();

#
# First, make sure the experiment exists
#
my $experiment = Experiment->Lookup($pid, $eid);
if (! $experiment) {
    tbdie("There is no experiment $eid in project $pid");
}

#
# User must have at least MODIFY permissions to use this script
#
if (!$experiment->AccessCheck($this_user, TB_EXPT_MODIFY())) {
    tbdie("You are not allowed to modify experiment $eid in project $pid");
}

#
# Get the experiment's directory - that's where we'll stash any files we
# fetch
#
my $expdir  = $experiment->UserDir();
my $exptidx = $experiment->idx();

#
# Get a list of all RPMs and tarballs to fetch
#
my $result = $experiment->TableLookUp("virt_nodes", "vname,rpms,tarfiles");

while (my ($vname, $rpms, $tarfiles) = $result->fetchrow()) {
    #
    # Find out the pnode where the this vnode is mapped, if any
    #
    my $physnode = $experiment->VnameToNode($vname);
    
    # The if block below is needed for simulated nodes which do not
    # have a reserved table entry. A tarfile specified for a simulated
    # node ends up on its host PC
    if (! defined($physnode)) {
	$physnode = $experiment->VnameToPmap($vname);
    }
    $rpms = ""
	if (!defined($rpms));
    $tarfiles = ""
	if (!defined($tarfiles));

    #
    # Go through the list of RPMs looking for files to fetch
    #
    foreach my $rpm (split(";", $rpms)) {
	if ($rpm =~ /^(http|https|ftp)/) {
	    #
	    # Veryify that they gave us a legal URL
	    #
	    my $URL = verifyURL($rpm);
	    if (!$URL) {
		tbdie("Invalid RPM URL given: $rpm");
	    }

	    #
	    # Build up a local filename using an MD5 hash of the URL, so that
	    # we can uniquely identify it, but don't have to worry about
	    # putting funny characters in filenames.
	    # 
	    my $md5 = `$MD5 -q -s '$URL'`;
	    chomp $md5;
	    # Have to untaint the hash
	    $md5 =~ /^(\w+)$/;
	    $md5 = $1;
	    my $localfile = $expdir . "/" . $md5 . ".rpm";

	    #
	    # Remember this RPM and put the local filename in the string that
	    # will be uploaded to the nodes table
	    #
	    $tofetch{$URL} = $localfile;
	    $toarchive{$localfile} = $localfile;
	    $rpms =~ s/$URL/$localfile/g;
	}
	elsif ($rpm =~ /^xxx:\/\/(.*)$/) {
	    #
	    # XXX (well, what else did you expect!). This is a template
	    # "url" that refers to a file in the template datastore tree.
	    #
	    my $instance = Template::Instance->LookupByExptidx($exptidx);
	    if (!defined($instance)) {
		tbdie("Invalid RPM URL for non-template experiment: $rpm");
	    }
	    my $localfile = $instance->path() . "/datastore/" . $1;

	    tbdie("$rpm cannot be found; $localfile does not exist")
		if (! -e $localfile);

	    # no need to archive these since they are saved in the template
	    $rpms =~ s/$rpm/$localfile/g;
	}
	else {
	    #
	    # Should be a regular path.
	    #
	    tbdie("$rpm cannot be found; local file does not exist")
		if (! -e $rpm);

	    $toarchive{$rpm} = $rpm;
	}
    }
    
    #
    # Same as above, for tarballs
    #
    foreach my $tar (split(";", $tarfiles)) {
	my ($dir,$tarfile) = split(" ",$tar);
	if ($tarfile =~ /^(http|https|ftp)/) {
	    my $URL = verifyURL($tarfile);
	    if (!$URL) {
		tbdie("Invalid tarball URL given: $tarfile");
	    }
	    my $md5 = `md5 -q -s '$URL'`;
	    chomp $md5;
	    $md5 =~ /^(\w+)$/;
	    $md5 = $1;
	    my $ext = $tarfile;
	    # Need to copy the extension from the URL to the file name so
	    # install-tarfile can figure out how to decompress it.
	    $ext =~ /(\.tar|\.tar\.Z|\.tar\.gz|\.tgz|\.tar\.bz2)$/;
	    $ext = $1;
	    my $localfile = $expdir . "/" . $md5 . $ext;
	    $toarchive{$localfile} = $localfile;
	    $tofetch{$URL} = $localfile;
	    $tarfiles =~ s/$URL/$localfile/g;
	}
	elsif ($tarfile =~ /^xxx:\/\/(.*)$/) {
	    #
	    # XXX (well, what else did you expect!). This is a template
	    # "url" that refers to a file in the template datastore tree.
	    #
	    my $instance = Template::Instance->LookupByExptidx($exptidx);
	    if (!defined($instance)) {
		tbdie("Invalid tarball URL for non-template experiment: ".
		      "$tarfile");
	    }
	    my $localfile = $instance->path() . "/datastore/" . $1;

	    tbdie("$tarfile cannot be found; $localfile does not exist")
		if (! -e $localfile);

	    # no need to archive these since they are saved in the template
	    $tarfiles =~ s/$tarfile/$localfile/g;
	}
	else {
	    #
	    # Should be a regular path.
	    #
	    tbdie("$tarfile cannot be found; local file does not exist")
		if (! -e $tarfile);

	    $toarchive{$tarfile} = $tarfile;
	}
    }

    #
    # Hack, hack, hack! We use ';' as a separator in the virt_nodes table, but
    # ":" in the nodes table. We should fix the latter
    #
    $tarfiles =~ s/;/:/g;
    $rpms =~ s/;/:/g;
    
    #
    # If this virtual node is allocated, update the nodes table
    #
    if (defined($physnode)) {
	$physnode->Update({'tarballs' => $tarfiles, 'rpms' => $rpms}) == 0
	    or tbdie("Could not update tarballs,rpms for $physnode");
    }
}

#
# In testmode, don't actually fetch anything
#
if ($TESTMODE) {
    exit(0);
}

#
# Actually fetch the tarballs
#
while (my ($URL, $localfile) = each %tofetch) {
    print "Fetching $URL to $localfile\n"
	if (!$quiet);

    #
    # Build up a new command line to do the fetch on ops
    #
    my $cmdargs = "$TB/bin/fetchtar.proxy ";
    $cmdargs .= " -q "
	if ($quiet);
    $cmdargs .= " -u $user_uid $URL $localfile ";

    #
    # Must flip to real root for the ssh, and then flip back afterwards.
    # 
    $EUID = $UID = 0;
    system("sshtb -host $CONTROL $cmdargs ");
    $EUID = $UID = $SAVEUID;

    if ($?) {
	tbdie("Fetch of Tarball/RPM failed: $URL");
    }
}

#
# Now add to the archive.
#
while (my ($localfile, $ignored) = each %toarchive) {
    # Lets not do this as root. 
    $EUID = $UID;
    libArchive::TBExperimentArchiveAddFile($pid, $eid, $localfile) == 0 or
	tbdie("Failed to add $localfile to the archive!");
    $EUID = 0;
}

#
# Check to make sure a URL for a tarball or RPM is valid, and return an
# untained version of it. Returns undefined if the URL is not valid.
#
sub verifyURL($) {
    my ($URL) = @_;
    if ($URL =~
	    /^((http|https|ftp):\/\/[\w.\-\/\@:~]+(\.tar|\.tar\.Z|\.tar\.gz|\.tgz|\.bz2|\.rpm))$/) {
	return $1;
    } else {
	return undef;
    }
}

exit 0;
