#
# Copyright (c) 2004-2017 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

#
# This file is intended to be included into another NS file. It is not
# a stand alone file.
# 
set myboss [$ns node]
set myops  [$ns node]
set myfs   [$ns node]

set srvtype  pc
set nodetype pcslow
set srvos    FBSD102-64-STD

tb-set-node-inner-elab-role $myboss boss+router
tb-set-node-inner-elab-role $myops  ops
tb-set-node-inner-elab-role $myfs   fs

if {[info exists ::TBCOMPAT::elabinelab_hardware("boss")]} {
    namespace eval TBCOMPAT {
        tb-set-hardware $myboss $elabinelab_hardware("boss")
    }
} elseif {[info exists ::TBCOMPAT::elabinelab_hardware(boss)]} {
    namespace eval TBCOMPAT {
        tb-set-hardware $myboss $elabinelab_hardware(boss)
    }
} else {
    tb-set-hardware $myboss $srvtype
}
if {[info exists ::TBCOMPAT::elabinelab_hardware("ops")]} {
    namespace eval TBCOMPAT {
        tb-set-hardware $myops $elabinelab_hardware("ops")
    }
} elseif {[info exists ::TBCOMPAT::elabinelab_hardware(ops)]} {
    namespace eval TBCOMPAT {
        tb-set-hardware $myops $elabinelab_hardware(ops)
    }
} else {
    tb-set-hardware $myops $srvtype
}
if {[info exists ::TBCOMPAT::elabinelab_hardware("fs")]} {
    namespace eval TBCOMPAT {
        tb-set-hardware $myfs $elabinelab_hardware("fs")
    }
} elseif {[info exists ::TBCOMPAT::elabinelab_hardware(fs)]} {
    namespace eval TBCOMPAT {
        tb-set-hardware $myfs $elabinelab_hardware(fs)
    }
} else {
    tb-set-hardware $myfs $srvtype
}

if {[info exists ::TBCOMPAT::elabinelab_fixnodes("boss")]} {
    namespace eval TBCOMPAT {
        tb-fix-node $myboss $elabinelab_fixnodes("boss")
    }
} elseif {[info exists ::TBCOMPAT::elabinelab_fixnodes(boss)]} {
    namespace eval TBCOMPAT {
        tb-fix-node $myboss $elabinelab_fixnodes(boss)
    }
}
if {[info exists ::TBCOMPAT::elabinelab_fixnodes("ops")]} {
    namespace eval TBCOMPAT {
        tb-fix-node $myops $elabinelab_fixnodes("ops")
    }
} elseif {[info exists ::TBCOMPAT::elabinelab_fixnodes(ops)]} {
    namespace eval TBCOMPAT {
        tb-fix-node $myops $elabinelab_fixnodes(ops)
    }
}
if {[info exists ::TBCOMPAT::elabinelab_fixnodes("fs")]} {
    namespace eval TBCOMPAT {
        tb-fix-node $myfs $elabinelab_fixnodes("fs")
    }
}

# Deal with tarfiles
set myboss_tarfiles ""
set myops_tarfiles  ""
set myfs_tarfiles  ""

if {${::TBCOMPAT::elabinelab_source_tarfile} != ""} {
    append myboss_tarfiles "/usr/src ${::TBCOMPAT::elabinelab_source_tarfile}"
    append myops_tarfiles  "/usr/src ${::TBCOMPAT::elabinelab_source_tarfile}"
    append myfs_tarfiles  "/usr/src ${::TBCOMPAT::elabinelab_source_tarfile}"
}

if {[info exists ::TBCOMPAT::elabinelab_tarfiles("boss")]} {
    if {$myboss_tarfiles != ""} {
	append myboss_tarfiles " "
    }
    namespace eval TBCOMPAT {
	append myboss_tarfiles $elabinelab_tarfiles("boss")
    }
} elseif {[info exists ::TBCOMPAT::elabinelab_tarfiles(boss)]} {
    if {$myboss_tarfiles != ""} {
	append myboss_tarfiles " "
    }
    namespace eval TBCOMPAT {
	append myboss_tarfiles $elabinelab_tarfiles(boss)
    }
}
if {[info exists ::TBCOMPAT::elabinelab_tarfiles("ops")]} {
    if {$myops_tarfiles != ""} {
	append myops_tarfiles " "
    }
    namespace eval TBCOMPAT {
	append myops_tarfiles $elabinelab_tarfiles("ops")
    }
} elseif {[info exists ::TBCOMPAT::elabinelab_tarfiles(ops)]} {
    if {$myops_tarfiles != ""} {
	append myops_tarfiles " "
    }
    namespace eval TBCOMPAT {
	append myops_tarfiles $elabinelab_tarfiles(ops)
    }
}
if {[info exists ::TBCOMPAT::elabinelab_tarfiles("fs")]} {
    if {$myfs_tarfiles != ""} {
	append myfs_tarfiles " "
    }
    namespace eval TBCOMPAT {
	append myfs_tarfiles $elabinelab_tarfiles("fs")
    }
} elseif {[info exists ::TBCOMPAT::elabinelab_tarfiles(fs)]} {
    if {$myfs_tarfiles != ""} {
	append myfs_tarfiles " "
    }
    namespace eval TBCOMPAT {
	append myfs_tarfiles $elabinelab_tarfiles(fs)
    }
}
if {$myboss_tarfiles != ""} {
    tb-set-node-tarfiles $myboss $myboss_tarfiles
}
if {$myops_tarfiles != ""} {
    tb-set-node-tarfiles $myops $myops_tarfiles
}
if {$myfs_tarfiles != ""} {
    tb-set-node-tarfiles $myfs $myfs_tarfiles
}

#
# This is passed in by the parser, when wrapping an existing experiment.
# The parser wrapper gets info about the wrapped experiment and passes it
# along in the TBCOMPAT namespace.
#
if { ${::TBCOMPAT::elabinelab_maxpcs} != 0 } {
    set maxpcs ${::TBCOMPAT::elabinelab_maxpcs}
} else {
    set maxpcs 0
}

set lanstr "myboss myops myfs "
for {set i 1} {$i <= $maxpcs} {incr i} {
	set name "mypc${i}"
	set $name [$ns node]
	append lanstr "[set $name] "
	tb-set-node-inner-elab-role [set $name] node

	if {[info exists ::TBCOMPAT::elabinelab_nodeos($name)]} {
	    namespace eval TBCOMPAT {
        	tb-set-node-os [set $name] $elabinelab_nodeos($name)
	    }
	}

	if {[info exists ::TBCOMPAT::elabinelab_fixnodes($name)]} {
	    namespace eval TBCOMPAT {
        	tb-fix-node [set $name] $elabinelab_fixnodes($name)
	    }
        } elseif {[info exists ::TBCOMPAT::elabinelab_hardware($name)]} {
	    namespace eval TBCOMPAT {
		tb-set-hardware [set $name] $elabinelab_hardware($name)
	    }
	} else {
	    tb-set-hardware [set $name] $nodetype
	}
}

if { ${::GLOBALS::elabinelab_singlenet} == 0 } {
    if { ${::TBCOMPAT::elabinelab_cnetspeed} != 0 } {
	set _cnetspeed ${::TBCOMPAT::elabinelab_cnetspeed}
    } else {
	set _cnetspeed 100
    }
    set publiclan [$ns make-lan $lanstr ${_cnetspeed}Mb 0ms]

    tb-set-ip-lan $myboss $publiclan 10.200.1.252
    tb-set-ip-lan $myops  $publiclan 10.200.1.253
    tb-set-ip-lan $myfs   $publiclan 10.200.1.251
    for {set i 1} {$i <= $maxpcs} {incr i} {
	set name "mypc${i}"
	tb-set-ip-lan [set $name] $publiclan 10.200.1.$i
    }
}

if {[info exists ::TBCOMPAT::elabinelab_nodeos("boss")]} {
    namespace eval TBCOMPAT {
        tb-set-node-os $myboss $elabinelab_nodeos("boss")
    }
} elseif {[info exists ::TBCOMPAT::elabinelab_nodeos(boss)]} {
    namespace eval TBCOMPAT {
        tb-set-node-os $myboss $elabinelab_nodeos(boss)
    }
} elseif {[info exists ::TBCOMPAT::sitevariables(elabinelab/boss_osid)]} {
    namespace eval TBCOMPAT {
	tb-set-node-os $myboss $sitevariables(elabinelab/boss_osid)
    }
} else {
    tb-set-node-os $myboss $srvos
}

if {[info exists ::TBCOMPAT::elabinelab_nodeos("ops")]} {
    namespace eval TBCOMPAT {
        tb-set-node-os $myops $elabinelab_nodeos("ops")
    }
} elseif {[info exists ::TBCOMPAT::elabinelab_nodeos(ops)]} {
    namespace eval TBCOMPAT {
        tb-set-node-os $myops $elabinelab_nodeos(ops)
    }
} elseif {[info exists ::TBCOMPAT::sitevariables(elabinelab/ops_osid)]} {
    namespace eval TBCOMPAT {
	tb-set-node-os $myops $sitevariables(elabinelab/ops_osid)
    }
} else {
    tb-set-node-os $myops $srvos
}

if {[info exists ::TBCOMPAT::elabinelab_nodeos("fs")]} {
    namespace eval TBCOMPAT {
        tb-set-node-os $myfs $elabinelab_nodeos("fs")
    }
} elseif {[info exists ::TBCOMPAT::elabinelab_nodeos(fs)]} {
    namespace eval TBCOMPAT {
        tb-set-node-os $myfs $elabinelab_nodeos(fs)
    }
} elseif {[info exists ::TBCOMPAT::sitevariables(elabinelab/fs_osid)]} {
    namespace eval TBCOMPAT {
	tb-set-node-os $myfs $sitevariables(elabinelab/fs_osid)
    }
} else {
    tb-set-node-os $myfs $srvos
}
