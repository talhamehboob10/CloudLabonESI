#
# Copyright (c) 2004-2017 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

#
# This file is intended to be included into another NS file. It is not
# a stand alone file.
# 
set myboss [$ns node]
set myops  [$ns node]

set srvtype  pcvm
set nodetype pcslow

tb-set-node-inner-elab-role $myboss boss+router
tb-set-node-inner-elab-role $myops  ops+fs
tb-set-colocate-factor 2

tb-set-node-failure-action $myboss "nonfatal"
tb-set-node-failure-action $myops  "nonfatal"

if {[info exists ::TBCOMPAT::elabinelab_hardware("boss")]} {
    namespace eval TBCOMPAT {
        tb-set-hardware $myboss $elabinelab_hardware("boss")
	if {$elabinelab_hardware("boss") == "d820-vm"} {
	    $myboss add-desire "d820-explicit" 1.0
	}
    }
} else {
    tb-set-hardware $myboss $srvtype
}
if {[info exists ::TBCOMPAT::elabinelab_hardware("ops")]} {
    namespace eval TBCOMPAT {
        tb-set-hardware $myops $elabinelab_hardware("ops")
	if {$elabinelab_hardware("ops") == "d820-vm"} {
	    $myops add-desire "d820-explicit" 1.0
	}
    }
} else {
    tb-set-hardware $myops $srvtype
}

if {[info exists ::TBCOMPAT::elabinelab_fixnodes("boss")]} {
    namespace eval TBCOMPAT {
        tb-fix-node $myboss $elabinelab_fixnodes("boss")
    }
}
if {[info exists ::TBCOMPAT::elabinelab_fixnodes("ops")]} {
    namespace eval TBCOMPAT {
        tb-fix-node $myops $elabinelab_fixnodes("ops")
    }
}

# Deal with tarfiles
set myboss_tarfiles ""
set myops_tarfiles  ""

if {${::TBCOMPAT::elabinelab_source_tarfile} != ""} {
    append myboss_tarfiles "/usr/src ${::TBCOMPAT::elabinelab_source_tarfile}"
    append myops_tarfiles  "/usr/src ${::TBCOMPAT::elabinelab_source_tarfile}"
}

if {[info exists ::TBCOMPAT::elabinelab_tarfiles("boss")]} {
    if {$myboss_tarfiles != ""} {
	append myboss_tarfiles " "
    }
    namespace eval TBCOMPAT {
	append myboss_tarfiles $elabinelab_tarfiles("boss")
    }
}
if {[info exists ::TBCOMPAT::elabinelab_tarfiles("ops")]} {
    if {$myops_tarfiles != ""} {
	append myops_tarfiles " "
    }
    namespace eval TBCOMPAT {
	append myops_tarfiles $elabinelab_tarfiles("ops")
    }
}
if {$myboss_tarfiles != ""} {
    tb-set-node-tarfiles $myboss $myboss_tarfiles
}
if {$myops_tarfiles != ""} {
    tb-set-node-tarfiles $myops $myops_tarfiles
}

#
# This is passed in by the parser, when wrapping an existing experiment.
# The parser wrapper gets info about the wrapped experiment and passes it
# along in the TBCOMPAT namespace.
#
if { ${::TBCOMPAT::elabinelab_maxpcs} != 0 } {
    set maxpcs ${::TBCOMPAT::elabinelab_maxpcs}
} else {
    set maxpcs 0
}

set lanstr "myboss myops "
for {set i 1} {$i <= $maxpcs} {incr i} {
	set name "mypc${i}"
	set $name [$ns node]
	append lanstr "[set $name] "
	tb-set-node-inner-elab-role [set $name] node

	if {[info exists ::TBCOMPAT::elabinelab_nodeos($name)]} {
	    namespace eval TBCOMPAT {
        	tb-set-node-os [set $name] $elabinelab_nodeos($name)
	    }
	}

	#
	# This does not work! I have no idea why, I hate TCL!
	# 
	if {[info exists ::TBCOMPAT::elabinelab_fixnodes($name)]} {
	    namespace eval TBCOMPAT {
        	tb-fix-node [set $name] $elabinelab_fixnodes($name)
	    }
        } elseif {[info exists ::TBCOMPAT::elabinelab_hardware($name)]} {
	    namespace eval TBCOMPAT {
		tb-set-hardware [set $name] $elabinelab_hardware($name)
	    }
	} else {
	    tb-set-hardware [set $name] $nodetype
	}
}

if { ${::GLOBALS::elabinelab_singlenet} == 0 } {
    set publiclan [$ns make-lan $lanstr 100Mb 0ms]

    tb-set-ip-lan $myboss $publiclan 10.200.1.252
    tb-set-ip-lan $myops  $publiclan 10.200.1.253
    for {set i 1} {$i <= $maxpcs} {incr i} {
	set name "mypc${i}"
	tb-set-ip-lan [set $name] $publiclan 10.200.1.$i
    }
}

set xenos XEN46-64-STD
if {[info exists ::TBCOMPAT::elabinelab_nodeos("xenhost")]} {
    namespace eval TBCOMPAT {
	set xenos $elabinelab_nodeos("xenhost")
    }
}

if {[info exists ::TBCOMPAT::elabinelab_nodeos("boss")]} {
    namespace eval TBCOMPAT {
        tb-set-node-os $myboss $elabinelab_nodeos("boss") $xenos
    }
} else {
    tb-set-node-os $myboss FBSD102-64-STD $xenos
}

if {[info exists ::TBCOMPAT::elabinelab_nodeos("ops")]} {
    namespace eval TBCOMPAT {
        tb-set-node-os $myops $elabinelab_nodeos("ops") $xenos
    }
} else {
    tb-set-node-os $myops FBSD102-64-STD $xenos
}

#
# Special stuff to set the IP and mask for the xen nodes. Temporary
# until we have a well defined method to assign publically routable
# addresses to containers.
#
set bossip [tb-get-elabinelab-role-attribute "boss" "BOSS_JAILIP"]
if { $bossip != {} } {
    set bossipmask [tb-get-elabinelab-role-attribute "boss" "BOSS_JAILIPMASK"]
    if { $bossipmask != {} } {
	$myboss add-attribute "jailip" $bossip
	$myboss add-attribute "jailipmask" $bossipmask
    }
} else {
    set routable [tb-get-elabinelab-role-attribute "boss" "ROUTABLE_IP"]
    if { $routable != {} } {
	$myboss add-attribute "routable_control_ip" "true"
    }
}
set opsip [tb-get-elabinelab-role-attribute "ops" "OPS_JAILIP"]
if { $opsip != {} } {
    set opsipmask [tb-get-elabinelab-role-attribute "ops" "OPS_JAILIPMASK"]
    if { $opsipmask != {} } {
	$myops add-attribute "jailip" $opsip
	$myops add-attribute "jailipmask" $opsipmask
    }
} else {
    set routable [tb-get-elabinelab-role-attribute "ops" "ROUTABLE_IP"]
    if { $routable != {} } {
	$myops add-attribute "routable_control_ip" "true"
    }
}

set bossfw [tb-get-elabinelab-role-attribute "boss" "CONFIG_FIREWALL_BOSS"]
if { $bossfw != {} } {
   $myboss add-attribute XEN_IPFWKERNEL yes
}
set opsfw [tb-get-elabinelab-role-attribute "ops" "CONFIG_FIREWALL_OPS"]
if { $opsfw != {} } {
   $myops add-attribute XEN_IPFWKERNEL yes
}

#
# We need to tell the XEN host to add some disks to the guests. 
#
# There is no particular reason to be conservative here. We use only
# dedicated nodes for elabinelab VMs, and at a minimum we should have
# 120GB of disk available.
#
# Boss: 
#  disk1: 10G  (/usr/testbed)
#  disk2: 40G  (/usr/testbed/data, primarily images)
#  disk3: 10G  (/usr/testbed/log)
# Ops:
#  disk1: 10G  (/usr/testbed)
#  disk2: 40G  (/q, including users/proj/groups)
#  disk3: 10G  (/share)
#
set bossdisks [tb-get-elabinelab-role-attribute "boss" "XEN_EXTRADISKS"]
if { $bossdisks != {} } {
    $myboss add-attribute XEN_EXTRADISKS $bossdisks
} else {
    $myboss add-attribute XEN_EXTRADISKS "disk1:10G,disk2:40G,disk3:10G"
}
set opsdisks [tb-get-elabinelab-role-attribute "ops" "XEN_EXTRADISKS"]
if { $opsdisks != {} } {
    $myops add-attribute XEN_EXTRADISKS $opsdisks
} else {
    $myops add-attribute XEN_EXTRADISKS "disk1:10G,disk2:40G,disk3:10G"
}

#
# CPUs.
# XXX can only support more than 1 right now with FreeBSD 10.0.
#
set bosscpus [tb-get-elabinelab-role-attribute "boss" "XEN_CORES"]
if { $bosscpus != {} } {
   $myboss add-attribute XEN_CORES $bosscpus
} else {
   $myboss add-attribute XEN_CORES 1
}
set opscpus [tb-get-elabinelab-role-attribute "ops" "XEN_CORES"]
if { $opscpus != {} } {
   $myops add-attribute XEN_CORES $opscpus
} else {
   $myops add-attribute XEN_CORES 1
}

#
# Memory.
# XXX note default of 1000 rather than 1024 so it maps on pc3000?
#
set bossmem [tb-get-elabinelab-role-attribute "boss" "XEN_MEMSIZE"]
if { $bossmem != {} } {
    $myboss add-attribute XEN_MEMSIZE $bossmem
} else {
    $myboss add-attribute XEN_MEMSIZE 1000
}
set opsmem [tb-get-elabinelab-role-attribute "ops" "XEN_MEMSIZE"]
if { $opsmem != {} } {
    $myops add-attribute XEN_MEMSIZE $opsmem
} else {
    $myops add-attribute XEN_MEMSIZE 1000
}

#
# Tell ElabinElab setup (rc.mkelab) as well.
#
# XXX The use of specific devices like da2 is not the best approach.
# Note that the FreeBSD guest starts with the root disk on da0,
# so we start at da2 ...
#
# XXX Really bad idea because now FreeBSD VMs use "ada" rather than "da"
# (because we use "hd" rather than "sd" in the xm.conf file..long story)
#
# XXX Really, really bad idea because now with PVH for FreeBSD VMs, the
# disk name is "xbd". So now we are going to leave it up to rc.mkelab to
# map "ada" into whatever the actual type is.
#
tb-set-elabinelab-role-attribute "boss" "EXTRADISKS" "ada1:/usr/testbed,ada2:/usr/testbed/data,ada3:/usr/testbed/log"
tb-set-elabinelab-role-attribute "ops"  "EXTRADISKS" "ada1:/usr/testbed,ada2:/q,ada3:/share"
