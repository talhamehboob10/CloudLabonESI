#!/usr/bin/perl -wT

#
# Copyright (c) 2000-2007 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

use English;
use Getopt::Std;
use Socket;
use File::Basename;

sub usage()
{
    print STDOUT "Usage: nsverify <pid> <gid> <eid> <nsfile>\n";
 
    exit(-1);
}

#
# Configure variables
#
my $TB       = "@prefix@";
my $TBOPS    = "@TBOPSEMAIL@";
my $CONTROL  = "@USERNODE@";

# Locals
my $SAVEUID  = $UID;
my $outfile = "nsltmap";

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "$TB/bin:$TB/sbin:/bin:/usr/bin:/sbin:/usr/sbin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

if ($EUID != 0) {
    # We don't want to run this script unless its the real version.
    die("Must be root! Maybe its a development version?");
}

# This script is setuid, so please do not run it as root. Hard to track
# what has happened.
if ($UID == 0) {
    die("Please do not run this as root! Its already setuid!");
}

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;
use libtblog;
use User;

if (@ARGV != 4) {
    usage();
}

my $pid   = $ARGV[0];
my $gid   = $ARGV[1];
my $eid   = $ARGV[2];
my $nsfile= $ARGV[3];

#
# Must taint check!
#
if ($pid =~ /^([-\w]+)$/) {
    $pid = $1;
}
else {
    die("Bad data in argument: $pid.");
}
if ($gid =~ /^([-\w]+)$/) {
    $gid = $1;
}
else {
    die("Bad data in argument: $gid.");
}
if ($eid =~ /^([-\w]+)$/) {
    $eid = $1;
}
else {
    die("Bad data in argument: $eid.");
}
if ($nsfile =~ /^([-\w\/\.]+)$/) {
    $nsfile = $1;
}
else {
    die("Bad data in argument: $nsfile.");
}

#
# Get DB uid for sending over to ops. In testmode, it runs locally
# as the user running the testsuite, obviously.
#
my $this_user = User->ThisUser();
if (! defined($this_user)) {
    tbdie("You do not exist in the Emulab Database!");
}
my $user_uid = $this_user->uid();

# Run as the user for most of this script.
$EUID = $UID;

my $cmdargs = "$TB/libexec/ns2ir/parse.proxy ";
$cmdargs .= " -u $user_uid -v -- $pid $gid $eid";

# create the output file as the user for quota purposes
unlink $outfile;
open(FOO, ">$outfile") ||
    tbdie("Cannot create parser output file $outfile");
close(FOO);

$EUID = $UID = 0;
system("sshtb -host $CONTROL $cmdargs < $nsfile > $outfile");
$EUID = $UID = $SAVEUID;

if ($?) {
    my $exit_status = $? >> 8;
    
    tbdie("Verify parsing failed (error code $exit_status)!");
}

open(NSLTMAP, "sort $outfile |");
open(DBLTMAP, "sort ltmap |");

my $done = 0;

sub fcmp($$$) {
    my ($v1, $v2, $tol) = @_;

    return (abs($v1 - $v2) < $tol);
}

while (!$done) {
    my $nsline = <NSLTMAP>;
    my $dbline = <DBLTMAP>;

    if (!$nsline && !$dbline) {
	$done = 1;
    }
    elsif (!$nsline || !$dbline) {
	tbdie("Topology verification failed (short file)!");
    }
    elsif ($nsline =~ /^l \S+ \S+ \d+ \d+\.\d+ \d+\.\d+ \S+ \S+$/ &&
	   $dbline =~ /^l \S+ \S+ \d+ \d+\.\d+ \d+\.\d+ \S+ \S+$/) {
	my @nsmatches;
	my @dbmatches;

	@nsmatches = ($nsline =~
		/^l (\S+) (\S+) (\d+) (\d+\.\d+) (\d+\.\d+) (\S+) (\S+)$/);
	@dbmatches = ($dbline =~
		/^l (\S+) (\S+) (\d+) (\d+\.\d+) (\d+\.\d+) (\S+) (\S+)$/);
	for (my $lpc = 0; $lpc < 7; $lpc++) {
	    if ($lpc == 3 &&
		fcmp($nsmatches[$lpc], $dbmatches[$lpc], 0.0003)) {
	    }
	    elsif ($lpc == 4 &&
		   fcmp($nsmatches[$lpc], $dbmatches[$lpc], 0.000010)) {
	    }
	    elsif ($nsmatches[$lpc] ne $dbmatches[$lpc]) {
		print "'$nsmatches[$lpc]' != '$dbmatches[$lpc]' in\n";
		print "ns: $nsline";
		print "db: $dbline";
		tbdie("Topology verification failed!");
	    }
	}
    }
    elsif ($nsline ne $dbline) {
	chomp $nsline;
	chomp $dbline;
	tbdie("Topology verification failed ('$nsline'!='$dbline')!");
    }
}

exit(0);
