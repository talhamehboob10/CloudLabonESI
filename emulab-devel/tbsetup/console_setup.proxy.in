#!/usr/bin/perl -wT

#
# Copyright (c) 2000-2014 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

use English;

#
# usage: console_setup.proxy tipname group tipname group ...
#
# This script runs on the tip servers, which is where the capture processes
# are running. Since the tip servers do not have direct access to the DB
# this invoked from the boss node. For each tip device, specify the group
# the associated files should be in. This script will send the proper signal
# to the capture process, and then reset the files to the proper group.
#
#
my $TIPLOGDIR   = "/usr/testbed/log/tiplogs";
my $TIPDEVDIR   = "/dev/tip";
my $dbg		= 1;
my %tipgroup    = ();
my $failures    = 0;

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

sub usage {
    die("Usage: console_setup.proxy tipname group [tipname group ...]\n");
}

if ( $#ARGV < 1) {
    usage();
}

while ($#ARGV >= 0) {
    if ($#ARGV < 1) {
	usage();
    }
    
    $name = shift;
    $grp  = shift;

    # untaint the args.
    if ($name =~ /^([-\@\w.]+)$/) {
	$name = $1;
    }
    if ($grp =~ /^([-\@\w.]+)$/) {
	$grp = $1;
    }
    
    $tipgroup{$name} = $grp;
}

#
# This script must be run as root, typically from paper.
#
if ($UID != 0) {
    die("Must be run as root.");
}

if (! chdir($TIPLOGDIR)) {
    die("Could not chdir to $TIPLOGDIR: $!\n");
}

#
# Well, do it.
# 
foreach my $tipname ( keys %tipgroup ) {
    my $grp        = $tipgroup{$tipname};
    my $filename   = "${tipname}.run";
    my $tipdevname = "$TIPDEVDIR/$tipname";
    my $aclname    = "${tipname}.acl";

    #
    # Find out the current group setting for the file. 
    #
    if (! -e $filename) {
	print STDERR
	    "*** Console log for $tipname does not exist! Skipping ...\n";
	$failures++;
	next;
    }
    # This is silly! Is there a better way to do this?
    (undef,undef,undef,undef,undef,$gid) = stat($filename);

    #
    # If the file is already in the correct group skip it since there no point
    # in rolling the file. Inconvenient for the user to have the log keep
    # rolling.
    #
    my ($cgrp) = getgrgid($gid);
    if (defined($cgrp) && $cgrp eq $grp) {
	goto setperms;
    }

    unlink($filename) or
	die("Could not unlink run file $filename");

    #
    # Unlink this so current user gets old version not new one. 
    # 
    if (-e $aclname) {
	unlink($aclname) or
	    die("Could not unlink run file $aclname");
    }

    #
    # Remove group access from the tty device.  This renders the device
    # inaccessible to both old and new users while we revoke access from
    # any current tip user.
    #
    if (-e $tipdevname) {
	chmod(0600, $tipdevname) or
	    die("Could not chmod(0600) $tipdevname: $!");
    }

    #
    # Now send a USR2 signal to the capture process. This will shutdown
    # any attached tip, and reopen the run file.
    #
    $procid = `cat ${tipname}.pid`;
    die("Error obtaining pid for $tipname\n")
	if ($?);
    $procid =~ s/\n//;
    # untaint
    if ($procid =~ /^([-\@\w.]+)$/) {
	$procid = $1;
    }
    kill('USR2', $procid) or
	die("Could not signal(USR2) process $procid for log $filename");
    # Give capture the chance to react.
    # Don't use sleep cause 1 second too long wait when doing 25 devices!
    select(undef, undef, undef, 0.2);

    #
    # If the file does not exist, touch it. We have this problem with
    # capture getting blocked.
    #
    if (! -e $filename) {
	system("touch $filename");
    }
    
    #
    # The new log should exist now. Set its group, and just to be safe
    # set its mode too. 
    #
    $gid = getgrnam($grp);
    if (!defined($gid)) {
	print STDERR "*** Group '$grp' does not exist, ".
	    "console for $tipname will not be available\n";
	$grp = "wheel";
	$gid = 0;
    }
    chown(0, $gid, $filename) or
	die("Could not chown(0, $gid) $filename: $!");
    chmod(0640, $filename) or
	die("Could not chmod(0640) $filename: $!");

    #
    # Set the mode and group on the tty that tip is going to use. This
    # allows the new group to access the tip line using a non-setuid/gid
    # program.
    #
  setperms:
    if (-e $tipdevname) {
	chown(0, $gid, $tipdevname) or
	    die("Could not chown(0, $gid) $tipdevname: $!");
	chmod(0660, $tipdevname) or
	    die("Could not chmod(0660) $tipdevname: $!");
    }

    #
    # Ditto for "acl" file, which new tip needs access to.
    # 
    if (-e $aclname) {
	chown(0, $gid, $aclname) or
	    die("Could not chown(0, $gid) $aclname: $!");
	chmod(0640, $aclname) or
	    die("Could not chmod(0660) $aclname: $!");
    }
}

# Don't worry about failures. Non-fatal.
exit 0;
