#!/usr/bin/perl -wT

#
# Copyright (c) 2000-2015 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;
use strict;

#
# This gets invoked from the Web interface. CD into the proper directory
# and do the tb stuff. This script cannot do any damage since it can
# only create directories where the caller has the permission to do so.
#
sub usage()
{
    print STDOUT "Usage: mkexpdir <eid>\n";
    exit(-1);
}

sub fatal($;$);
sub chowner($$$);

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS	= "@TBOPSEMAIL@";
my $LINUX_FSNODE= @LINUX_FSNODE@;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = '/bin:/usr/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;
use libtblog;
use Experiment;

# Locals
my $projroot = PROJROOT();
my $grouproot= GROUPROOT();
my $tbdata   = "tbdata";
my @dirlist  = ($tbdata, "bin", "tmp", "logs", "archive", "datastore",
		"tftpboot", "swapinfo");
my $exitval;

#
# Check args.
# 
if (@ARGV != 1) {
    usage();
}
my $experiment = Experiment->Lookup($ARGV[0]);
if (!defined($experiment)) {
    tbdie("Could not lookup experiment object for $ARGV[0]!")
}
my $pid       = $experiment->pid();
my $eid       = $experiment->eid();
my $gid       = $experiment->gid();
my $piddir    = (($pid eq $gid) ? "$projroot/$pid" : "$grouproot/$pid/$gid");
my $expdir    = "$piddir/exp";
my $eiddir    = "$expdir/$eid";
my $eidlink   = "$projroot/$pid/exp/$eid";
my $workdir   = $experiment->WorkDir();
my $expinfo   = $experiment->InfoDir();

#
# Unix info for the group
#
my $group = $experiment->GetGroup();
if (!defined($group)) {
    tbdie("Could not lookup group object for $experiment!")
}
my $unix_gid  = $group->unix_gid();
my $unix_name = $group->unix_name();

#
# We create a directory structure for the experiment in the project directory.
#
if (! chdir($expdir)) {
    print "Could not chdir to $expdir: $!\n";
    exit(-1);
}

if (! -e $eid && ! mkdir($eid, 0770)) {
    $exitval = $ERRNO;
    print "Could not mkdir $eid in $expdir: $!\n";
    exit($exitval);
}

if (! chmod(0770, "$eid")) {
    $exitval = $ERRNO;
    print "Could not chmod $eid to 0770 in $expdir: $!\n";
    rmdir($eid);
    exit($exitval);
}

if (! chowner($UID, $unix_gid, "$eid")) {
    $exitval = $ERRNO;
    print "Could not chown $eid to $UID/$unix_gid in $expdir: $!\n";
    rmdir($eid);
    exit($exitval);
}

if (! chdir($eid)) {
    $exitval = $ERRNO;
    print "Could not chdir to $eid in $expdir: $!\n";
    rmdir($eid);
    exit($exitval);
}

#
# Create the experiment directory list in the new directory.
#
foreach my $dir (@dirlist) {
    if (! -e $dir && ! mkdir($dir, 0770)) {
	fatal("Could not mkdir $dir in $eiddir: $!");
    }

    if (! chmod(0770, "$dir")) {
	fatal("Could not chmod $dir to 0770 in $eiddir: $!");
    }
}

#
# Update the DB. This leaves the decision about where the directory
# is created, in this script. 
#
$experiment->Update({"path" => "$eiddir"}) == 0 or
    fatal("Could not update path for $experiment");

#
# Create the working directory.
#
if (! -e $workdir) {
    if (! mkdir($workdir, 0775)) {
	fatal("Could not create $workdir: $!");
    }
    if (! chowner($UID, $unix_gid, "$workdir")) {
	fatal("Could not chown $workdir to $UID/$unix_gid: $!");
    }
}

#
# Create the expinfo directory.
#
if (! -e $expinfo) {
    if (system("mkdir -p -m 777 $expinfo")) {
	fatal("Could not create $expinfo");
    }
    #
    # expinfo dir should have the group ID of the primary project group.
    # This is because at different times, users in different subgroups can
    # create an experiment with the same name. If the directory has the
    # group of the initial experiment with that name, then any other future
    # experiment with that name but in a different subgroup will not be able
    # to write the directory.
    #
    my $ugid = $unix_gid;
    if ($pid ne $gid) {
	$ugid = $group->GetProject()->unix_gid();
    }
    if (! chowner($UID, $ugid, "$expinfo")) {
	fatal("Could not chown $expinfo to $UID/$ugid: $!");
    }
}

#
# If a group experiment, leave behind a symlink from the project experiment
# directory to the group experiment directory. This is convenient so that
# there is a common path for all experiments. 
#
if ($pid ne $gid) {
    # XXX Bad. This link should be removed when the experiment is removed.
    unlink($eidlink)
	if (-l $eidlink);
    symlink($eiddir, $eidlink) or
	fatal("Could not symlink($eiddir, $eidlink): $!");
}

exit(0);

sub fatal($;$)
{
    my ($msg, $exitval) = @_;

    $exitval = $ERRNO
	if (!defined($exitval));

    system("/bin/rm -rf $eiddir");
    system("/bin/rm -rf $workdir");
    unlink($eidlink)
	if ($pid ne $gid && -l $eidlink);

    tberror($msg);
    exit($exitval);
}

sub chowner($$$)
{
    my ($uid, $gid, $file) = @_;

    if (0 && $LINUX_FSNODE) {
	#
	# use chgrp because linux NFS does not allow to chown !!
	# set chgrp suid root -- only on boss !!!
	#
	# XXX I do not think this is the case for linux in general, so
	# change the if expression above if you must.
	#
	system("/usr/bin/chgrp", $gid, $file);
	return ($? ? 0 : 1);
    }
    else {
	return chown($uid, $gid, $file);
    }
}

