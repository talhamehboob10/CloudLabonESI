#!/usr/bin/perl -wT
#
# Copyright (c) 2000-2010 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;

#
# Reboot a node (or nodes). Will power cycle the node as a last resort.
# Use -e option to reboot all nodes in an experiment.
#
# Exit value is 0 if all nodes reboot okay, or the number of nodes
# could not be rebooted.
#
sub usage()
{
    print(STDERR
	  "Usage: node_reboot [-d] [-f] [-w] [-k] node [node ...]\n" .
	  "       node_reboot [-d] [-f] [-w] [-k] -e pid,eid\n".
	  "Use the -d option to turn on debugging\n" .
	  "Use the -s option to turn on silent mode\n" .
	  "Use the -e option to reboot all the nodes in an experiment\n" .
	  "Use the -w option to to wait for nodes is come back up\n" .
	  "Use the -k option to power cycle nodes in PXEWAIT mode\n" .
	  "Use the -b option to reboot nodes in PXEWAIT mode\n" .
	  "Use the -a option to reboot all free nodes\n".
	  "Use the -c option to reconfig nodes instead of rebooting\n".
	  "Use the -f option to power cycle (and not wait for nodes to die)\n".
	  "Use the -F option to reboot even if the type is marked nonrebootable\n");
    exit(-1);
}
# The hidden -r option runs this in "realmode", ie don't send an event, but
# really do the work instead.  Hidden -W option specifies the waittime. 
my $optlist     = "dfe:wrkacbpsW:F";
my $debug       = 0;
my $silent      = 0;
my $powercycle  = 0;
my $waitmode    = 0;
my $realmode    = 1; # XXX Temporary, until we make event sending the default.
my $killmode    = 0;
my $reconfig    = 0;
my $rebootmode  = 0;
my $prepare     = 0;
my $force       = 0;
my $waittime;

#
# Configure variables
#
my $TB		= "@prefix@";
my $CLIENT_BIN  = "@CLIENT_BINDIR@";

# Locals
my @nodes	= ();

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use libreboot;
use Experiment;
use Node;
use User;

# un-taint path
$ENV{'PATH'} = '/bin:/sbin:/usr/bin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Turn off line buffering on output
$| = 1;

#
# We don't want to run this script unless its the real version.
#
if ($EUID != 0) {
    die("*** $0:\n".
        "    Must be root! Maybe its a development version?\n");
}

#
# Verify user and get his DB uid and other info for later.
#
my $this_user;
if ($UID) {
    $this_user = User->ThisUser();
    if (! defined($this_user)) {
	die("*** $0:\n".
	    "    You ($UID) do not exist!\n");
    }
}

#
# Parse command arguments. Once we return from getopts, all that should
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"s"})) {
    $silent = 1;
}
if (defined($options{"b"})) {
    $rebootmode = 1;
}
if (defined($options{"f"})) {
    $powercycle = 1;
}
if (defined($options{"k"})) {
    $killmode = 1;
}
if (defined($options{"w"})) {
    $waitmode = 1;
}
if (defined($options{"p"})) {
    $prepare = 1;
}
if (defined($options{"r"})) {
    $realmode = 1;
}
if (defined($options{"c"})) {
    $reconfig = 1;
}
if (defined($options{"W"})) {
    $waittime = $options{"W"};
}
if (defined($options{"F"})) {
    $force = 1;
}

if (defined($options{"a"})) {
    usage()
	if (@ARGV);
    
    #
    # Reboot all free nodes
    #
    if ($UID && !$this_user->IsAdmin()) {
	die("*** $0:\n".
	    "    You not have permission to reboot all free nodes!\n");
    }

    my $query_result =
	DBQueryFatal("select n.node_id from nodes as n ".
		     "left join reserved as r on r.node_id=n.node_id ".
		     "left join node_types as nt on nt.type=n.type ".
		     "where nt.class='pc' and n.role='testnode' and ".
		     "      r.pid is NULL");

    if ($query_result->numrows == 0) {
	die("*** $0:\n".
	    "    There are no free nodes to reboot\n");
    }

    while (my ($nodeid) = $query_result->fetchrow_array()) {
	push(@nodes, $nodeid);
    }
}
elsif (defined($options{"e"})) {
    #
    # Reboot all nodes in an experiment
    #
    usage()
	if (@ARGV);

    my $experiment = Experiment->Lookup($options{"e"});
    if (!defined($experiment)) {
	die("*** $0:\n".
	    "    Unknown experiment!\n");
    }

    #
    # Verify permission to muck with this experiment. This is to head off
    # permission problems early; the nodes are indvidually checked later
    # in the library.
    #
    if ($UID && !$this_user->IsAdmin() &&
	! $experiment->AccessCheck($this_user, TB_EXPT_MODIFY)) {
	die("*** $0:\n".
	    "    You not have permission to reboot nodes in $experiment!\n");
    }
    my @nodelist = $experiment->NodeList(0, 1);
    if (! @nodelist) {
	die("*** $0:\n".
            "    There are no nodes reserved in $experiment\n");
    }
    
    #
    # If this is a firewalled experiment, don't reboot the firewall.
    # If you want to reboot the firewall, you have to do it individually.
    #
    # Two reasons.  One is that the firewall is not conceptually part of
    # the experiment and the user should not "be aware" of it.  This
    # is a pretty lame reason because pretty much everywhere else, the
    # firewall IS part of the experiment.  That leads to reason number
    # two: rebooting the firewall causes all other nodes in the experiment
    # to become disconnected until the firewall reboots.  For some machines,
    # that are also rebooting as you recall, not getting PXE info for a
    # significant amount of time causes them to fail to the next boot.
    # For some machines this might mean halting ("Strike any key to continue"),
    # as there is no other boot possibility.  This means ya gotta come back
    # later and reboot all those nodes again.
    #
    my $firewall = "";
    if ($experiment->IsFirewalled()) {
	$experiment->FirewallAndPort(\$firewall, undef) == 0 or
	    die("*** $0:\n".
		"    Could not get the firewall node for $experiment\n");
    }
    foreach my $node (@nodelist) {
	push(@nodes, $node->node_id())
	    if ($node->node_id() ne $firewall);
    }
}
else {
    #
    # Reboot nodes listed on command line.
    #
    usage()
	if (!@ARGV);

    foreach my $n (@ARGV) {
	my $node = Node->Lookup($n);
	if (!defined($node)) {
	    die("*** $0:\n".
		"    Node $n does not exist!\n");
	}

	if ($UID && !$this_user->IsAdmin() &&
	    ! $node->AccessCheck($this_user, TB_NODEACCESS_REBOOT)) {
	    die("*** $0:\n".
		"    You are not allowed to reboot $node!\n");
	}
	push(@nodes, $node->node_id());
    }
}

#
# Okay, call into the library using a hash of arguments.
#
my %args   = ();
my %status = ();

$args{'debug'}       = $debug;
$args{'silent'}      = $silent;
$args{'powercycle'}  = $powercycle;
$args{'rebootmode'}  = $rebootmode;
$args{'waitmode'}    = $waitmode;
$args{'realmode'}    = $realmode;
$args{'killmode'}    = $killmode;
$args{'reconfig'}    = $reconfig;
$args{'prepare'}     = $prepare;
$args{'waittime'}    = $waittime     if defined $waittime;
$args{'force'}       = $force;
$args{'nodelist'}    = [ @nodes ];

exit(nodereboot(\%args, \%status));
