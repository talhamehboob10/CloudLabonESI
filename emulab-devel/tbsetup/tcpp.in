#!/usr/bin/perl -wT

#
# Copyright (c) 2012 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

use English;
use Getopt::Std;
use IO::Socket::INET;

#
# Control TCP proxy ports for an entire experiment.
#
sub usage()
{
    print STDOUT "Usage: tcpp [-a] [-d] <pid> <eid>\n";
    exit(-1);
}
my  $optlist = "ad";

#
# Configure variables
#
my $TB		= "@prefix@";
my $PORT        = 4127;

my $add         = 0;
my $delete      = 0;

#
# Load the Testbed support stuff. 
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;
use libtblog;
use Experiment;
use Interface;
use Node;

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Turn off line buffering on output
$| = 1; 

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (@ARGV < 2) {
    usage();
}
if (defined($options{"a"})) {
    $add = 1;
}
if (defined($options{"d"})) {
    $delete = 1;
}

my $pid   = shift(@ARGV);
my $eid   = shift(@ARGV);

#
# Untaint the arguments.
#
if ($pid =~ /^([-\@\w]+)$/) {
    $pid = $1;
}
else {
    die("*** Bad data in pid: $pid\n");
}	
if ($eid =~ /^([-\@\w]+)$/) {
    $eid = $1;
}
else {
    die("*** Bad data in eid: $eid\n");
}

my $experiment = Experiment->Lookup( $pid, $eid );
if( !defined( $experiment ) ) {
    tbdie( "Could not locate experiment $pid/$eid" );
}

my $control = new IO::Socket::INET( PeerHost => '127.0.0.1',
				    PeerPort => "$PORT", Proto => 'tcp' )
    or die "socket: $!\n";

if( !$add && !$delete ) {
    die( "Nothing to do (please specify -a or -d)\n" );
}

#
# Get the list of nodes in this experiment.
#
my @nodes = $experiment->NodeList(1, 1);
if (! @nodes) {
    # Silent.
    exit(0);
}

foreach my $node (@nodes) {
    my $nodeobj = Node->Lookup($node);
    if( !defined( $nodeobj ) ) {
	tbdie( "Could not look up node $node" );
    }

    next if( $nodeobj->isremotenode() ||
	     $nodeobj->isswitch() );

    my $interface = Interface->LookupControl($node);
    if( !defined( $interface ) ) {
	tbdie( "Could not resolve control interface for node $node" );
    }

    my $ctrlip = $interface->IP();
    if( !defined( $ctrlip ) || $ctrlip eq "" ) {
	tbdie( "Could not resolve control address for node $node" );
    }

    if( $add ) {
	my $result = DBQueryWarn( "SELECT node_id FROM tcp_proxy WHERE " .
				  "node_id='$node' AND node_ip='$ctrlip' " .
				  "AND node_port='22';" );
	# Don't attempt to replace existing proxies -- this gives better
	# behaviour on swapmod
	next if( $result && $result->numrows() );

	$control->print( "+$node:$ctrlip:22\n" );
	my $line = $control->getline();
	
	if( !defined( $line ) ) {
	    tbdie( "Error reading proxy port for $node" );
	}
    } else {
	my $result = DBQueryWarn( "SELECT proxy_port FROM tcp_proxy WHERE " .
				  "node_id='$node';" );
	my $proxy_port;

	while( ( $proxy_port ) = $result->fetchrow_array() ) {
	    $control->print( "-$proxy_port\n" );
	}
    }
}

exit( 0 );
