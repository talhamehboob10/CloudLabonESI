#!/usr/bin/perl -w
#
# Copyright (c) 2000-2020 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Long qw(:config no_ignore_case);
use POSIX qw(strftime);
use Date::Parse;

#
# Load the Testbed support stuff.
#
use lib "@prefix@/lib";
use libaudit;
use emutil;
use libtestbed;

#
# Create system SSL certificates.
# 
sub usage()
{
    print("Usage: mksyscert [-d] [-o file] [-p password] [-e email] ".
	  "[-u url] [-i urn] [-k keyfile] [-a authority] <orgunit> " .
	  "[-n] [-U] [uuid]\n");
    exit(-1);
}
my $debug    = 0;
my $printcert= 0;
my $outfile;
my $password = "";
my $email;
my @urls;
my $urn;
my $oldkeyfile;
my $authority;
my $notca    = 0;
my $days     = 2000;
my $include_uuid = 0;
my %optlist = ( "debug" => \$debug,
		"password=s" => \$password,
		"output=s" => \$outfile,
		"verbose" => \$printcert,
		"email=s" => \$email,
		"url=s" => \@urls,
		"identifier=s" => \$urn,
		"keyfile=s" => \$oldkeyfile,
		"authority=s" => \$authority,
		"UUID" => \$include_uuid,
		"notca" => \$notca );

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS	= "@TBOPSEMAIL@";
my $TBLOGS	= "@TBLOGSEMAIL@";
my $OURDOMAIN   = "@OURDOMAIN@";
my $PGENIDOMAIN = "@PROTOGENI_DOMAIN@";
my $PGENISUPPORT= @PROTOGENI_SUPPORT@;

# Locals
my $SSLDIR      = "$TB/lib/ssl";
my $TEMPLATE    = "$SSLDIR/syscert.cnf";
my $CACONFIG    = "$SSLDIR/ca.cnf";
my $EMULAB_CERT = "$TB/etc/emulab.pem";
my $EMULAB_KEY  = "$TB/etc/emulab.key";
my $OPENSSL     = "/usr/bin/openssl";
my $WORKDIR     = "$TB/ssl";
my $RANDFILE    = "./.rnd";
my $SAVEUID	= $UID;
my $certfile    = $EMULAB_CERT;
my $keyfile     = $EMULAB_KEY;

# Locals
my $encrypted   = 0;
my $sh_password = "";

#
# We don't want to run this script unless its the real version.
#
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be setuid! Maybe its a development version?\n");
}

#
# This script is setuid, so please do not run it as root. Hard to track
# what has happened.
#
if ($UID == 0) {
    die("*** $0:\n".
	"    Please do not run this as root! Its already setuid!\n");
}

#
# Untaint the path
#
$ENV{'PATH'} = "$TB/bin:$TB/sbin:/bin:/usr/bin:/usr/bin:/usr/sbin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Function prototypes
#
sub fatal($);

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
GetOptions( %optlist ) or usage();

if( defined( $outfile ) ) {
    if ($outfile =~ /^([-\w\.\/]+)$/) {
	$outfile = $1;
    }
    else {
	die("Tainted arguments: $outfile\n");
    }
   
}
if( defined( $oldkeyfile ) ) {
    if ($oldkeyfile =~ /^([-\w\.\/]+)$/) {
	$oldkeyfile = $1;
    }
    else {
	die("Tainted arguments: $oldkeyfile\n");
    }
   
}
if( defined( $authority ) ) {
    if ($authority =~ /^([-\w\.\/]+)$/) {
	$authority = $1;
    }
    else {
	die("Tainted arguments: $authority\n");
    }
    $certfile = $authority;
    $keyfile  = $authority;
}
if( $password ) {
    #
    # Make sure its all escaped since any printable char is allowed.
    #
    if ($password =~ /^([\040-\176]*)$/) {
	$password = $1;
    }
    else {
	die("Tainted argument: $password\n");
    }
    $sh_password = $password;
    $sh_password =~ s/\'/\'\\\'\'/g;
    $sh_password = "$sh_password";
    $encrypted = 1;
}
if (@ARGV < 1) {
    usage();
}
my $orgunit = shift(@ARGV);
my $uuid    = (@ARGV ? shift(@ARGV) : undef);

my $is_ca = !$notca;

# Moved before uuid generation. Might be a race, might not.
TBScriptLock("mkusercert") == 0 or
    fatal("Could not get the lock!");

# Generate/confirm uuid
if (!defined($uuid)) {
    $uuid = NewUUID();
    if (!defined($uuid)) {
	fatal("Could not generate a new uuid");
    }
}
if (!defined($email)) {
    $email = $TBOPS;
}

#
# CD to the workdir, and then serialize on the lock file since there is
# some shared goop that the ssl tools muck with (serial number, index, etc.).
# 
chdir("$WORKDIR") or
    fatal("Could not chdir to $WORKDIR: $!");

#
# Some sillyness to deal with changes to .rnd file handling across
# versions of openssl.
#
if (! -e $RANDFILE) {
    system("/bin/dd if=/dev/urandom of=${RANDFILE} bs=256 count=4");
    if ($?) {
	fatal("Could not generate $RANDFILE");
    }
}
#
# Older versions of openssl ignore -rand option, but use this environment
# variable. New versions ignore the environment variable but use -rand.
#
$ENV{"RANDFILE"} = $RANDFILE;

#
# Need an index file, which is the openssl version of the DB.
#
if (! -e "index.txt") {
    open(IND, ">index.txt")
	or fatal("Could not create index.txt");
    close(IND);
}

#
# We have to figure out what the next serial number will be and write
# that into the file. We could let "ca' keep track, but with devel
# trees, we might end up with duplicate serial numbers.
#
# XXX Shared with mkusercert ...
#
my $serial = TBGetUniqueIndex("user_sslcerts");

open(SER, ">serial")
    or fatal("Could not create new serial file");
printf SER "%08x\n", $serial;
close(SER);

#
# Create a template conf file.
#
system("cp -f $TEMPLATE syscert.cnf") == 0
    or fatal("Could not copy $TEMPLATE to current dir");

open(TEMP, ">>syscert.cnf")
    or fatal("Could not open $TEMPLATE for append: $!");

if (defined($urn)) {
    print TEMP "subjectAltName=\@req_altname\n";
}
print TEMP "basicConstraints=critical,CA:" .
    ( $is_ca ? "TRUE" : "FALSE" ) . "\n\n";

if (@urls) {
    my $count = 0;
    foreach( @urls ) {
	# unregistered OID 2.25.305821105408246119474742976030998643995
	# (corresponding to UUID e61300a0-c4c5-11de-b14e-0002a5d5c51b)
	# is used to indicate generic ProtoGENI XMLRPC servers.
	print TEMP "authorityInfoAccess=2.25.305821105408246119474742976030998643995;URI:$_\n";
    }
}

print TEMP "\n";
print TEMP "[ req_distinguished_name ]\n";
print TEMP "C\t\t=@SSLCERT_COUNTRY@\n";
print TEMP "ST\t\t=@SSLCERT_STATE@\n";
print TEMP "L\t\t=@SSLCERT_LOCALITY@\n";
print TEMP "O\t\t=@SSLCERT_ORGNAME@\n";
print TEMP "OU\t\t= \"$orgunit\"\n";
print TEMP "CN\t\t= $uuid\n";
print TEMP "emailAddress\t= $email\n";

if (defined($urn)) {
    print TEMP "\n";
    print TEMP "[ req_altname ]\n";
    print TEMP "URI.1=$urn\n";
    if( $include_uuid ) {
	print TEMP "URI.2=urn:uuid:$uuid\n";
    }
    print TEMP "\n";
}

close(TEMP)
    or fatal("Could not close syscert.cnf: $!");

# Redirect output unless in debugging mode.
my $outline = ($debug ? "" : ">/dev/null 2>&1");

if( defined( $oldkeyfile ) ) {
    #
    # Create a certificate request using the specified key.
    #
    system("$OPENSSL req -text -new -key $oldkeyfile -config syscert.cnf ".
	   ($encrypted ? " -passout 'pass:${sh_password}' " : " -nodes ") .
	   " -out syscert_req.pem $outline") == 0
	   or fatal("Could not create certificate request");
    system("$OPENSSL rsa -in $oldkeyfile -out syscert_key.pem $outline") == 0
	or fatal("Could not suck key out of old keyfile");
} else {
    #
    # Create a client side private key and certificate request.
    #
    my $genopts = " -rand $RANDFILE " .
	($encrypted ? " -passout 'pass:${sh_password}' -des3 " : "");

    my $output =
	emutil::ExecQuiet("$OPENSSL genrsa $genopts -out syscert_key.pem 2048");
    if ($?) {
	print STDERR $output;
	fatal("Could generate new key");	
    }
    $output =
	emutil::ExecQuiet("$OPENSSL req -text -new -config syscert.cnf ".
			  ($encrypted ? " -passin 'pass:${sh_password}' " : "") .
			  " -key syscert_key.pem -out syscert_req.pem $outline");
    if ($?) {
	print STDERR $output;
	fatal("Could not create certificate request");
    }
}

#
# Sign the client cert request, creating a client certificate.
# We set the start date an hour in the past, to avoid clock skew
# problems.
#
my $startdate = POSIX::strftime("%y%m%d%H%M%SZ", gmtime(time() - 3600));

#
# Check the expiration on the CA cert, we do not want the new
# certificate to expire after the CA (signer) cert expires. 
#
$UID = 0;
my $expires = `$OPENSSL x509 -enddate -noout -in $certfile`;
if ($?) {
    fatal("Could not get expiration from $certfile");
}
if ($expires =~ /^notAfter=(.*)$/i) {
    my $tmp = str2time($1);
    if (!defined($tmp)) {
	fatal("Could not convert $certfile expiration to time: $1");
    }
    $expires = $tmp;
}
else {
    fatal("Could not parse $certfile expiration: $expires");
}
if ($expires < time()) {
    fatal("$certfile certificate has expired!");
}

# If the CA expires in less then 30 days, grind to a halt.
my $daystoexpire = int(($expires - time()) / (3600 * 24));
if ($daystoexpire <= 30) {
    fatal("Refusing to sign new certificate; the $certfile expires in less ".
	  "then 30 days!");
}
if ($debug) {
    print "CA certificate expires in $daystoexpire days.\n";
}
if ($days > $daystoexpire) {
    $days = $daystoexpire - 1;
    print "Shortening certificate expiration to $days\n";
}
    
system("$OPENSSL ca -batch -policy policy_sslxmlrpc -startdate $startdate ".
       " -days $days ".
       " -name CA_syscerts -config $CACONFIG ".
       " -out syscert_cert.pem -cert $certfile -keyfile $keyfile ".
       " -infiles syscert_req.pem $outline") == 0
    or fatal("Could not sign certificate request");
$UID = $SAVEUID;

#
# Combine the key and the certificate into one file
#
if (defined($outfile)) {
    system("cat syscert_key.pem syscert_cert.pem > $outfile") == 0
	or fatal("Could not combine cert and key into one file");

    if ($printcert) {
	system("cat syscert_cert.pem");
    }    
}
else {
    system("cat syscert_key.pem syscert_cert.pem") == 0
	or fatal("Could not combine cert and key");
}
TBScriptUnlock();
exit(0);

sub fatal($) {
    my($mesg) = $_[0];

    TBScriptUnlock();
    die("*** $0:\n".
	"    $mesg\n");
}
