#!/usr/bin/perl -wT
#
# Copyright (c) 2000-2011 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use strict;
use Getopt::Std;
use XML::Simple;
use Data::Dumper;
use Cwd qw(realpath);

#
# Back-end script to create a Project Group.
#
sub usage()
{
    print("Usage: newgroup [-v] [-s] <xmlfile>\n");
    exit(-1);
}
my $optlist = "dvs";
my $debug   = 0;
my $silent  = 0;
my $verify  = 0;	# Check data and return status only. 

#
# Configure variables
#
my $TB	      = "@prefix@";
my $TBOPS     = "@TBOPSEMAIL@";
my $TBAUDIT   = "@TBAUDITEMAIL@";

#
# Untaint the path
#
$ENV{'PATH'} = "$TB/bin:$TB/sbin:/bin:/usr/bin:/usr/bin:/usr/sbin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Load the Testbed support stuff.
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;
use User;
use Project;
use Group;

# Protos
sub fatal($);
sub UserError(;$);
sub escapeshellarg($);

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"s"})) {
    $silent = 1;
}
if (defined($options{"v"})) {
    $verify = 1;
}
if (@ARGV != 1) {
    usage();
}
my $xmlfile  = shift(@ARGV);

#
# Map invoking user to object. 
# If invoked as "nobody" we are coming from the web interface and the
# current user context is "implied" (see tbauth.php3).
#
my $this_user;

if (getpwuid($UID) ne "nobody") {
    $this_user = User->ThisUser();

    if (! defined($this_user)) {
	fatal("You ($UID) do not exist!");
    }
    # You don't need admin privileges to create a Project Group.
}
else {
    #
    # Check the filename when invoked from the web interface; must be a
    # file in /tmp.
    #
    if ($xmlfile =~ /^([-\w\.\/]+)$/) {
	$xmlfile = $1;
    }
    else {
	fatal("Bad data in pathname: $xmlfile");
    }

    # Use realpath to resolve any symlinks.
    my $translated = realpath($xmlfile);
    if ($translated =~ /^(\/tmp\/[-\w\.\/]+)$/) {
	$xmlfile = $1;
    }
    else {
	fatal("Bad data in translated pathname: $xmlfile");
    }

    # The web interface (and in the future the xmlrpc interface) sets this.
    $this_user = User->ImpliedUser();

    if (! defined($this_user)) {
	fatal("Cannot determine implied user!");
    }
}

#
# These are the fields that we allow to come in from the XMLfile.
#
my $SLOT_OPTIONAL	= 0x1;	# The field is not required.
my $SLOT_REQUIRED	= 0x2;  # The field is required and must be non-null.
my $SLOT_ADMINONLY	= 0x4;  # Only admins can set this field.
#
# XXX We should encode all of this in the DB so that we can generate the
# forms on the fly, as well as this checking code.
#
my %xmlfields =
    # XML Field Name        DB slot name         Flags             Default
    ("project"		=> ["pid_idx",		$SLOT_REQUIRED],
     "group_id"		=> ["group_id",		$SLOT_REQUIRED],
     "group_leader"	=> ["group_leader",	$SLOT_REQUIRED],
     "group_description"=> ["group_description",$SLOT_OPTIONAL,	   ""]);

#
# Must wrap the parser in eval since it exits on error.
#
my $xmlparse = eval { XMLin($xmlfile,
			    VarAttr => 'name',
			    ContentKey => '-content',
			    SuppressEmpty => undef); };
fatal($@)
    if ($@);

#
# Process and dump the errors (formatted for the web interface).
# We should probably XML format the errors instead but not sure I want
# to go there yet.
#
my %errors = ();

#
# Make sure all the required arguments were provided.
#
my $key;
foreach $key (keys(%xmlfields)) {
    my (undef, $required, undef) = @{$xmlfields{$key}};

    $errors{$key} = "Required value not provided"
	if ($required & $SLOT_REQUIRED  &&
	    ! exists($xmlparse->{'attribute'}->{"$key"}));
}
UserError()
    if (keys(%errors));

#
# We build up an array of arguments to pass to Group->Create() as we check
# the attributes.
#
my %newgroup_args = ();

#
# Wildcard keys have one or more *'s in them like simple glob patterns.
# This allows multiple key instances for categories of attributes, and
# putting a "type signature" in the key for arg checking, as well.
#
# Wildcards are made into regex's by anchoring the ends and changing each * to
# a "word" (group of alphahumeric.)  A tail * means "the rest", allowing
# multiple words separated by underscores or dashes.
#
my $wordpat = '[a-zA-Z0-9]+';
my $tailpat = '[-\w]+';
my %wildcards;
foreach $key (keys(%xmlfields)) {
    if (index($key, "*") >= 0) {
	my $regex = '^' . $key . '$';
	$regex =~ s/\*\$$/$tailpat/;
	$regex =~ s/\*/$wordpat/g;
	$wildcards{$key} = $regex;
    }
}
# Key ordering is lost in a hash.
# Put longer matching wildcard keys before their prefix.
my @wildkeys = reverse(sort(keys(%wildcards)));

foreach $key (keys(%{ $xmlparse->{'attribute'} })) {
    my $value = $xmlparse->{'attribute'}->{"$key"}->{'value'};
    if (!defined($value)) {	# Empty string comes from XML as an undef value.
	$xmlparse->{'attribute'}->{"$key"}->{'value'} = $value = "";
    }

    print STDERR "User attribute: '$key' -> '$value'\n"
	if ($debug);

    my $field = $key;
    my $wild;
    if (!exists($xmlfields{$key})) {

	# Not a regular key; look for a wildcard regex match.
        foreach my $wildkey (@wildkeys) {
	    my $regex = $wildcards{$wildkey};
	    if ($wild = $key =~ /$regex/) {
		$field = $wildkey;
		print STDERR "Wildcard: '$key' matches '$wildkey'\n"
		    if ($debug);
		last; # foreach $wildkey
	    }
	}
	if (!$wild) {
	    $errors{$key} = "Unknown attribute";
	    next; # foreach $key
	}
    }

    my ($dbslot, $required, $default) = @{$xmlfields{$field}};

    if ($required & $SLOT_REQUIRED) {
	# A slot that must be provided, so do not allow a null value.
	if (!defined($value)) {
	    $errors{$key} = "Must provide a non-null value";
	    next;
	}
    }
    if ($required & $SLOT_OPTIONAL) {
	# Optional slot. If value is null skip it. Might not be the correct
	# thing to do all the time?
	if (!defined($value)) {
	    next
		if (!defined($default));
	    $value = $default;
	}
    }
    if ($required & $SLOT_ADMINONLY) {
	# Admin implies optional, but thats probably not correct approach.
	$errors{$key} = "Administrators only"
	    if (! $this_user->IsAdmin());
    }
	
    # Now check that the value is legal.
    if (! TBcheck_dbslot($value, "groups",
			 $dbslot, TBDB_CHECKDBSLOT_ERROR)) {
	$errors{$key} = TBFieldErrorString();
	next;
    }

    $newgroup_args{$key} = $value;
}
UserError()
    if (keys(%errors));

#
# Now do special checks.
#
my $project = Project->Lookup($newgroup_args{"project"});
if (!defined($project)) {
    UserError("Project: No such project");
}
if (!$project->AccessCheck($this_user, TB_PROJECT_MAKEOSID())) {
    UserError("Project: Not enough permission");
}

# Need these below
my $group_id	 = $newgroup_args{"group_id"};
my $group_leader = $newgroup_args{"group_leader"};
my $descr	 = $newgroup_args{"group_description"};
my $group_pid	 = $project->pid();

#
# Certain of these values must be escaped or otherwise sanitized.
# 
$descr = escapeshellarg($descr);

#
# Verify permission.
#
if (!$project->AccessCheck($this_user, TB_PROJECT_MAKEGROUP())) {
    UserError("Access: Not group_root in project $group_pid");
}

# Need the user object for creating the group.
my $leader = User->Lookup($group_leader);
if (! $leader) {
    UserError("GroupLeader: User '$group_leader' is an unknown user");
}

#
# Verify leader. Any user can lead a group, but they must be a member of
# the project.
#
my $proj_leader = $project->GetLeader();
if ($leader->status() eq USERSTATUS_UNAPPROVED() ||
    !$project->AccessCheck($leader, TB_PROJECT_LEADGROUP())) {
    UserError("GroupLeader: $group_leader does not have enough permission ".
	      "to lead a group in project $group_pid!");
}

#
# Make sure the GID is not already there.
#
my $oldgroup = Group->LookupByPidGid($group_pid, $group_id);
if ($oldgroup) {
    UserError("GroupId: The group $group_id already exists! ".
	      "Please select another.");
}

#
# The unix group name must be globally unique.  Form a name and check it.
# Subgroup names have a project-name prefix, and a numeric suffix if needed.
#
my $unix_gname	  = substr($group_pid, 0, 3) . "-" . substr($group_id, 0, 12);
my $maxtries	  = 99;
my $count	  = 0;
while ($count < $maxtries) {
    my $query_result =
	DBQueryFatal("select gid from groups where unix_name='$unix_gname'");
    last
	if (!$query_result->numrows);

    $count++;
    $unix_gname = substr($group_pid, 0, 3) . "-" .
	substr($group_id,  0, 10) . "$count";
}
if ($count == $maxtries) {
    UserError("GroupId: Could not form a unique Unix group name!");
}

exit(0)
    if ($verify);

#
# Now safe to create a Project Group.
#

# Put it in the DB.  (This is used by Project->Create too.)
my $new_group = Group->Create($project, $group_id, 
			      $leader, $descr, $unix_gname);
fatal("Could not create new Group!")
    if (!defined($new_group));

my $group_idx = $new_group->gid_idx();

#
# Run the script to make the group directory, set the perms, etc.
#
my $opt = ($silent ? "-s" : "");
my $cmd = "mkgroup $opt $group_idx";
print($cmd . "\n")
    if ($debug);
system($cmd);
fatal("Failed: '$cmd'")
    if ($?);

#
# Now add the group leader to the group.
# 
my $safe_id = escapeshellarg($group_id);
$cmd = "modgroups $opt -a $group_pid:$safe_id:group_root $group_leader";
print($cmd . "\n")
    if ($debug);
system($cmd);
fatal("Failed: '$cmd'")
    if ($?);

# The web interface requires this line to be printed.
print "GROUP $group_id/$group_idx has been created\n";
exit(0);

sub fatal($)
{
    my ($mesg) = @_;

    print STDERR "*** $0:\n".
	         "    $mesg\n";
    # Exit with negative status so web interface treats it as system error.
    exit(-1);
}

sub UserError(;$)
{
    my ($mesg) = @_;

    if (keys(%errors)) {
	foreach my $key (keys(%errors)) {
	    my $val = $errors{$key};
	    print "${key}: $val\n";
	}
    }
    print "$mesg\n"
	if (defined($mesg));

    # Exit with positive status so web interface treats it as user error.
    exit(1);
}

sub escapeshellarg($)
{
    my ($str) = @_;

    $str =~ s/[^[:alnum:]]/\\$&/g;
    return $str;
}
