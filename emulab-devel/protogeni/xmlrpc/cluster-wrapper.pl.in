#!/usr/bin/perl -w
#
# Copyright (c) 2008-2017 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#

#
# Simple CGI interface to the GENI xmlrpc interface. This script is invoked
# from the web server. The certificate information is in the environment
# set up by apache.
#
use strict;
use English;
use Data::Dumper;
use FCGI;

#
# Turn off line buffering on output
#
$| = 1;

# Normal taint check requirement.
BEGIN {
    $ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
    delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};
}

# Testbed libraries.
use lib '@prefix@/lib';
use ClusterWrapper;

#
# Sanity check.
#
if ($EUID != 0) {
    print STDERR "Server configuration error; we are not setuid!"
}
ClusterWrapper::Initialize();

#
# Normally one would use CGI::Fast->new() to get the next request, but
# that is a layer on CGI, which does not grok purely XML postdata, it
# wants to parse it, and of course that fails. Frontier::Responder() has
# the same problem. So we do what it does; bypass CGI and just read the
# blob of XML from STDIN.
#
my $FCGI_Handle = FCGI::Request();

#
# If we abort logging and want to send stream data back to apache.
# See  GeniCMV2::SecureImageDownload();
#
my $logaborted = 0;

#
# This is a whacky kludge. 
#
my $GENI_ISCLRHOUSE;

#
# Set process title
#
if (exists($ENV{'MODULE'})) {
    my $module = $ENV{'MODULE'};
    if ($module =~ /^(\w+)$/) {
	$0 = $0 . " $1";
    }
}

#
# Loop until dead, what is dead will never die. 
#
while ($FCGI_Handle->Accept() >= 0) {
    my $request = undef;
    read(STDIN, $request, $ENV{CONTENT_LENGTH});

    #
    # We have to do this here again, since mod_fcgid sets the
    # environment back to its original value, between each call.
    #
    $ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
    delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

    $logaborted = 0;

    #
    # We need to "detach" cause mod_fcgid has a bad "tie" implementation,
    # and so most calls to open fail. detaching is fine, we have the request,
    # and nothing goes back to apache until ClusterWrapper returns.
    # When it does, we can reattach and print the output to apache. 
    #
    $FCGI_Handle->Detach();
    my $response = ClusterWrapper->Start($request);

    # If we aborted (attached) earlier and sent stream data,
    # nothing more to do.
    next
	if ($logaborted);
	
    $FCGI_Handle->Attach();
    if ($response) {
	print "Content-Type: text/xml \n\n" . $response;
    }
}

#
# These used to be in protogeni-wrapper.pl and accessed as upcalls
# from the libraries with main:: but now they are down one level.
# Need to change all the code at some point.
#
sub WrapperFork() {
    return ClusterWrapper::WrapperFork();
}
sub AddLogfileMetaData($$) {
    return ClusterWrapper::AddLogfileMetaData($_[0],$_[1]);
}
sub AddLogfileMetaDataFromSlice($) {
    return ClusterWrapper::AddLogfileMetaDataFromSlice($_[0]);
}
sub AddLogfileMetaDataFromSpeaksFor($) {
    return ClusterWrapper::AddLogfileMetaDataFromSpeaksFor($_[0]);
}
sub AbortLogging() {
    $logaborted = 1;
    $FCGI_Handle->Attach();
    return ClusterWrapper::AbortLogging();
}
