#!/usr/bin/perl -w
#
# Copyright (c) 2008-2021 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
package ProtoGeniDefs;

use strict;
use English;
use GeniResponse;
use GeniCertificate;

#
# Each of the packages added themself to this hash.
#
my %MODULES = ();

sub AddModule($$)
{
    my ($name, $module) = @_;

    if (exists($module->{'PEMFILE'})) {
	my $certificate = GeniCertificate->LoadFromFile($module->{'PEMFILE'});
	if (!defined($certificate)) {
	    print STDERR "Could not load certificate: " .
		$module->{'PEMFILE'} . "\n";
	}
	else {
	    $module->{'CERTIFICATE'} = $certificate;
	}
    }
    $MODULES{$name} = $module;
}
sub Module($)
{
    my ($name) = @_;

    return undef
	if (!exists($MODULES{$name}));
    
    return $MODULES{$name};
}

#
# Stub
#
sub GetVersion()
{
    if (1) {
	my $mypid = main::WrapperFork();
	if ($mypid) {
	    return GeniResponse->Create(GENIRESPONSE_SUCCESS, 1.0);
	}
	sleep(10);
	return 0;
    }
    return GeniResponse->Create(GENIRESPONSE_SUCCESS, 1.0);
}

AddModule("root",
	  {
	      "PEMFILE"    => "@prefix@/etc/emulab.pem",
	      "DEFVERSION" => "01",
	      "METHODS"  => {"01" => {
		  "GetVersion" => \&GetVersion,
	      }},
	  });

package ProtoGeniDefs::ProtogeniCH;

use lib '@prefix@/lib';
use GeniCH;

ProtoGeniDefs::AddModule("ch",
	  {
	      "PEMFILE"    => "@prefix@/etc/genich.pem",
	      "DBNAME"     => "geni-ch",
	      "DEFVERSION" => "1",
	      "INITMODULE" => \&GeniCH::InitModule,
	      "METHODS"    => {"1" => {
		  "GetVersion"            => \&GeniCH::GetVersion,
		  "GetCredential"         => \&GeniCH::GetCredential,
		  "Resolve"               => \&GeniCH::Resolve,
		  "Register"              => \&GeniCH::Register,
		  "Remove"                => \&GeniCH::Remove,
		  "ListComponents"        => \&GeniCH::ListComponents,
		  "PostCRL"               => \&GeniCH::PostCRL,
		  "Shutdown"              => \&GeniCH::Shutdown,
		  "List"                  => \&GeniCH::List,
		  "WhoAmI"		  => \&GeniCH::WhoAmI,
		  "PostHistoryRecord"	  => \&GeniCH::PostHistoryRecord,
		  "ReadHistoryRecords"    => \&GeniCH::ReadHistoryRecords,
		  "ListActiveSlivers"     => \&GeniCH::ListActiveSlivers,
	      }},
	  });

package ProtoGeniDefs::ProtogeniSA;

use lib '@prefix@/lib';
use GeniSA;

ProtoGeniDefs::AddModule("sa",
	  {
	      "PEMFILE"    => "@prefix@/etc/genisa.pem",
	      "DBNAME"     => "geni",
	      "DEFVERSION" => "1.01",
	      "METHODS"    => {"1.01" => {
		  "GetVersion"        => \&GeniSA::GetVersion,
		  "GetCredential"     => \&GeniSA::GetCredential,
		  "Resolve"           => \&GeniSA::Resolve,
		  "Register"          => \&GeniSA::Register,
		  "Remove"            => \&GeniSA::Remove,
		  "GetKeys"	      => \&GeniSA::GetKeys,
		  "BindToSlice"	      => \&GeniSA::BindToSlice,
		  "Shutdown"          => \&GeniSA::Shutdown,
		  "RenewSlice"        => \&GeniSA::RenewSlice,
		  "RegisterSliver"    => \&GeniSA::RegisterSliver,
		  "UnRegisterSliver"  => \&GeniSA::UnRegisterSliver,
	      }},
	  });

package ProtoGeniDefs::ProtogeniCM;
use vars qw($V2_METHODS);

use lib '@prefix@/lib';
use GeniCM;
use GeniCMV2;

$V2_METHODS = {
    "GetVersion"        => \&GeniCMV2::GetVersion,
    "Resolve"	        => \&GeniCMV2::Resolve,
    "DiscoverResources" => \&GeniCMV2::DiscoverResources,
    "CreateSliver"      => \&GeniCMV2::CreateSliver,
    "UpdateSliver"      => \&GeniCMV2::UpdateSliver,
    "DeleteSliver"      => \&GeniCMV2::DeleteSliver,
    "GetSliver"         => \&GeniCMV2::GetSliver,
    "Shutdown"          => \&GeniCMV2::Shutdown,
    "SliverStatus"      => \&GeniCMV2::SliverStatus,
    "RenewSlice"        => \&GeniCMV2::RenewSlice,
    "GetTicket"         => \&GeniCMV2::GetTicket,
    "ReleaseTicket"     => \&GeniCMV2::ReleaseTicket,
    "UpdateTicket"      => \&GeniCMV2::UpdateTicket,
    "RedeemTicket"      => \&GeniCMV2::RedeemTicket,
    "DeleteSlice"       => \&GeniCMV2::DeleteSlice,
    "StartSliver"       => \&GeniCMV2::StartSliver,
    "StopSliver"        => \&GeniCMV2::StopSliver,
    "RestartSliver"     => \&GeniCMV2::RestartSliver,
    "ReloadSliver"      => \&GeniCMV2::ReloadSliver,
    "PowerCycleSliver"  => \&GeniCMV2::PowerCycleSliver,
    "BindToSlice"       => \&GeniCMV2::BindToSlice,
    "ListUsage"         => \&GeniCMV2::ListUsage,
    "ListHistory"       => \&GeniCMV2::ListHistory,
    "ReserveVlanTags"   => \&GeniCMV2::ReserveVlanTags,
    "InjectEvent"       => \&GeniCMV2::InjectEvent,
    "CreateImage"       => \&GeniCMV2::CreateImage,
    "DeleteImage"       => \&GeniCMV2::DeleteImage,
    "ImageInfo"         => \&GeniCMV2::ImageInfo,
    "ListImages"        => \&GeniCMV2::ListImages,
    "ShareLan"          => \&GeniCMV2::ShareLan,
    "UnShareLan"        => \&GeniCMV2::UnShareLan,
    "ListActiveSlivers" => \&GeniCMV2::ListActiveSlivers,
    "ConsoleURL"	=> \&GeniCMV2::ConsoleURL,
    "ConsoleInfo"	=> \&GeniCMV2::ConsoleInfo,
    "CreateDataset"     => \&GeniCMV2::CreateDataset,
    "DeleteDataset"     => \&GeniCMV2::DeleteDataset,
    "DescribeDataset"   => \&GeniCMV2::DescribeDataset,
    "ModifyDataset"     => \&GeniCMV2::ModifyDataset,
    "ApproveDataset"    => \&GeniCMV2::ApproveDataset,
    "GetDatasetCredential" => \&GeniCMV2::GetDatasetCredential,
    "SecureImageDownload"  => \&GeniCMV2::SecureImageDownload,
    "Lockdown"          => \&GeniCMV2::Lockdown,
    "TriggerImageUpdate"=> \&GeniCMV2::TriggerImageUpdate,
    "AddNodes"          => \&GeniCMV2::AddNodes,
    "DeleteNodes"       => \&GeniCMV2::DeleteNodes,
    "Panic"             => \&GeniCMV2::Panic,
    "RunLinktest"       => \&GeniCMV2::RunLinktest,
    "Recovery"          => \&GeniCMV2::Recovery,
    "Flash"             => \&GeniCMV2::Flash,
};

ProtoGeniDefs::AddModule("cm",
	  {
	      "PEMFILE"    => "@prefix@/etc/genicm.pem",
	      "DBNAME"     => "geni-cm",
	      "DEFVERSION" => "2.0",
	      "METHODS"    => {"2.0" => $V2_METHODS},
	  });

package ProtoGeniDefs::ProtogeniAM;
use vars qw($V2_METHODS $V3_METHODS);

use lib '@prefix@/lib';
use GeniAM;

$V2_METHODS = {
        "GetVersion"    => \&GeniAM::GetVersion,
        "ListResources" => \&GeniAM::ListResources,
        "CreateSliver"  => \&GeniAM::CreateSliver,
        "DeleteSliver"  => \&GeniAM::DeleteSliver,
        "SliverStatus"  => \&GeniAM::SliverStatus,
        "RenewSliver"   => \&GeniAM::RenewSliver,
        "Shutdown"      => \&GeniAM::Shutdown,
        "CreateImage"   => \&GeniAM::CreateImage,
        "DeleteImage"   => \&GeniAM::DeleteImage,
        "ListImages"    => \&GeniAM::ListImages,
};
$V3_METHODS = {
        "GetVersion"    => \&GeniAM::GetVersion,
        "ListResources" => \&GeniAM::ListResources,
	"Describe"      => \&GeniAM::Describe,
	"Allocate"      => \&GeniAM::Allocate,
	"Renew"         => \&GeniAM::Renew,
	"Provision"     => \&GeniAM::Provision,
	"Status"        => \&GeniAM::Status,
	"PerformOperationalAction" => \&GeniAM::PerformOperationalAction,
	"Delete"        => \&GeniAM::Delete,
	"Shutdown"      => \&GeniAM::Shutdown,
	"Update"        => \&GeniAM::Update,
        "Cancel"        => \&GeniAM::Cancel,
        "CreateImage"   => \&GeniAM::CreateImage,
        "DeleteImage"   => \&GeniAM::DeleteImage,
        "ListImages"    => \&GeniAM::ListImages,
};

ProtoGeniDefs::AddModule("am",
	  {
	      "PEMFILE"    => "@prefix@/etc/genicm.pem",
	      "DBNAME"     => "geni-cm",
	      "DEFVERSION" => "2.0",
	      "INITMODULE" => \&GeniAM::InitModule,
	      "METHODS"    => {"1.0" => $V2_METHODS,
			       "2.0" => $V2_METHODS,
			       "3.0" => $V3_METHODS},
	      "CONVERTER"  => {"1.0" => \&GeniAM::ConvertResponseV1,
			       "2.0" => \&GeniAM::ConvertResponseV2,
			       "3.0" => \&GeniAM::ConvertResponseV2},
	  });

package ProtoGeniDefs::ProtogeniCluster;

use lib '@prefix@/lib';
use GeniCluster;

ProtoGeniDefs::AddModule("cluster",
	  {
	      "PEMFILE"    => "@prefix@/etc/genicm.pem",
	      "DBNAME"     => "geni-cm",
	      "DEFVERSION" => "1.0",
	      "METHODS"    => {"1.0" => {
		  "GetVersion"           => \&GeniCluster::GetVersion,
		  "CreateUser"           => \&GeniCluster::CreateUser,
		  "InUse"                => \&GeniCluster::InUse,
		  "PreReservations"      => \&GeniCluster::PreReservations,
		  "SliceUtilizationData" => \&GeniCluster::SliceUtilizationData,
		  "SliceIdleData"        => \&GeniCluster::SliceIdleData,
		  "SliceOpenstackData"   => \&GeniCluster::SliceOpenstackData,
		  "SliceCheckReservation"=> \&GeniCluster::SliceCheckReservation,
		  "SliceMaxExtension"    => \&GeniCluster::SliceMaxExtension,
		  "Reserve"              => \&GeniCluster::Reserve,
		  "Reservations"         => \&GeniCluster::Reservations,
		  "ApproveReservation"   => \&GeniCluster::ApproveReservation,
		  "DeleteReservation"    => \&GeniCluster::DeleteReservation,
		  "ReservationSystemInfo"=> \&GeniCluster::ReservationSystemInfo,
		  "ReservationPrediction"=> \&GeniCluster::ReservationPrediction,
		  "ReservationHistory"   => \&GeniCluster::ReservationHistory,
		  "CancelReservation"    => \&GeniCluster::CancelReservation,
		  "ReservationIdleDetection" =>
		                     \&GeniCluster::ReservationIdleDetection,
		  "GetImageCredential"   => \&GeniCluster::GetImageCredential,
		  "AllSliceMaxExtensions"=> \&GeniCluster::AllSliceMaxExtensions,
		  "NodeTop"              => \&GeniCluster::NodeTop,
		  "PortalManifest"       => \&GeniCluster::PortalManifest,
	      }},
	  });

package ProtoGeniDefs::ProtogeniIMS;

use lib '@prefix@/lib';
use GeniIMS;

ProtoGeniDefs::AddModule("ims",
	  {
	      "PEMFILE"    => "@prefix@/etc/genich.pem",
	      "DBNAME"     => "geni-ch",
	      "DEFVERSION" => "1.01",
	      "METHODS"    => {"1.01" => {
		  "GetVersion"        => \&GeniIMS::GetVersion,
		  "GetCredential"     => \&GeniIMS::GetCredential,
		  "PostImageInfo"     => \&GeniIMS::PostImageInfo,
		  "GetImageInfo"      => \&GeniIMS::GetImageInfo,
		  "DeleteImageInfo"   => \&GeniIMS::DeleteImageInfo,
	      }},
	  });

1;

