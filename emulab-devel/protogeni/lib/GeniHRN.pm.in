#!/usr/bin/perl -wT
#
# Copyright (c) 2009-2019 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
package GeniHRN;

use strict;
use Exporter;
use Carp;
use vars qw(@ISA @EXPORT);
use overload (fallback => 1, '""' => 'Stringify');

@ISA    = "Exporter";
@EXPORT = qw ( );

# References:
#
#   GMOC Proposal: "Use URN as GENI identifiers" version 0.2, Viecco, 2009
#   RFC 2141, "URN Syntax", Moats, 1997
#   RFC 3151, "A URN Namespace for Public Identifiers", Walsh, 2001
#   RFC 3986, "URI Generic Syntax", Berners-Lee, 2005
#   RFC 3987, "Internationalised Resource Identifiers", Duerst, 2005
#   RFC 4343, "DNS Case Insensitivity Clarification", Eastlake, 2006

sub Unescape($)
{
    my ($uri) = @_;

    my $norm = "";
    while( $uri =~ /^([^%]*)%([0-9A-Fa-f]{2})(.*)$/ ) {
	$norm .= $1;
	my $val = hex( $2 );
	# Transform %-encoded sequences back to unreserved characters
	# where possible (see RFC 3986, section 2.3).
	if( $val == 0x2D || $val == 0x2E ||
	    ( $val >= 0x30 && $val <= 0x39 ) ||
	    ( $val >= 0x41 && $val <= 0x5A ) ||
	    $val == 0x5F ||
	    ( $val >= 0x61 && $val <= 0x7A ) ||
	    $val == 0x7E ) {
	    $norm .= chr( $val );
	} else {
	    $norm .= "%" . $2;
	}
	$uri = $3;
    }
    $norm .= $uri;

    return $norm;
}

sub IsValid($)
{
    my ($hrn) = @_;

    if (!defined($hrn)) {
	carp("GeniHRN::IsValid: hrn is undefined");
	return 0;
    }

    # Reject %00 sequences (see RFC 3986, section 7.3).
    return undef if $hrn =~ /%00/;

    # We accept ANY other %-encoded octet (following RFC 3987, section 5.3.2.3
    # in favour of RFC 2141, section 5, which specifies the opposite).
    $hrn = Unescape( $hrn );

    # The "urn" prefix is case-insensitive (see RFC 2141, section 2).
    # The "publicid" NID is case-insensitive (see RFC 2141, section 3).
    # The "IDN" specified by Viecco is believed to be case-sensitive (no
    #   authoritative reference known).
    # We regard Viecco's optional resource-type specifier as being
    #   mandatory: partly to avoid ambiguity between resource type
    #   namespaces, and partly to avoid ambiguity between a resource-type
    #   and a resource-name containing (escaped) whitespace.
    return $hrn =~ m'^[uU][rR][nN]:[pP][uU][bB][lL][iI][cC][iI][dD]:IDN\+[A-Za-z0-9.-]+(?::[A-Za-z0-9._-]+)*\+\w+\+(?:[-!$()*,./0-9:=@A-Z_a-z]|(?:%[0-9A-Fa-f][0-9A-Fa-f]))+$';
}

# Perform RFC 3151 transcription (from a string of legal public identifier
# characters to a URN (sub)string).
sub Transcribe($)
{
    my ($str) = @_;

    # Perform whitespace normalisation (see RFC 3151, section 1.1).
    $str =~ s/^[ \t\r\n]*//;
    $str =~ s/[ \t\r\n]*$//;
    # The replacement with a space is arbitrary and temporary; the space
    # will later be replaced with a '+' below (we can't directly use a '+'
    # yet, because we want to treat literal '+'s in the input differently).
    $str =~ s/[ \t\r\n]+/ /g;

    # The order here is critical: the intent is that from now on, at most
    # one transformation will apply to any character.
    $str =~ s/%/%25/g;
    # '% characters have been escaped; it is now unambiguous to translate
    # sequences that will contain '%'s.
    $str =~ s/#/%23/g;
    $str =~ s/'/%27/g;
    $str =~ s/\+/%2B/g;
    $str =~ s/;/%3B/g;
    $str =~ s/\?/%3F/g;
    # '+' characters have been escaped; it is now safe to translate ' ' to '+'.
    $str =~ s/ /+/g;
    # ';' characters have been escaped; it is now safe to translate '::' to
    # ';'.
    $str =~ s/::/;/g;
    # '::' sequences have been translated; any remaining ':' character must
    # have been a singleton, and can now be escaped.
    $str =~ s/:/%3A/g;
    # All ':' characters have been escaped; we can now translate '//' to ':'.
    $str =~ s|//|:|g;
    # '//' sequences have been translated; any remaining '/' character must
    # have been a singleton, and can now be escaped.
    $str =~ s|/|%2F|g;

    return $str;
}

# Perform RFC 3151 inverse transcription (from a URN (sub)string to a
# (partial) public identifier).
sub Untranscribe($)
{
    my ($str) = @_;

    # Do this in exactly the opposite order to Transcribe, for exactly
    # the same reason.
    $str =~ s|%2F|/|gi;
    $str =~ s|:|//|g;
    $str =~ s/%3A/:/gi;
    $str =~ s/;/::/g;
    $str =~ s/\+/ /g;
    $str =~ s/%3F/?/gi;
    $str =~ s/%3B/;/gi;
    $str =~ s/%2B/+/gi;
    $str =~ s/%27/'/gi;
    $str =~ s/%23/#/gi;
    $str =~ s/%25/%/gi;

    # Note that whitespace normalisation is inherently lossy, so we couldn't
    # undo it even if we wanted to: all leading and trailing whitespace is
    # irretrievably gone, and all internal whitespace sequences have collapsed
    # to single space characters.
    return $str;
}

# Break a URN into (sub-)authority, type, and ID components.  There
# might be further structure in the authority part, but we'll ignore
# that for now.
sub Parse($;$)
{
    my ($token, $hrn) = @_;

    #
    # When called as a Class method, we want to return an object.
    #
    if (@_ == 1) {
	$hrn = $token;
    }
    if (!defined($hrn)) {
	carp("GeniHRN::Parse: hrn is undefined");
	return 0;
    }
    return undef if !IsValid( $hrn );

    if (@_ == 2) {
	return GeniHRN->new($hrn);
    }
    $hrn = Unescape( $hrn );

    $hrn =~ /^[^+]*\+([^+]+)\+([^+]+)\+(.+)$/;

    return ($1, $2, Untranscribe( $3 ));
}

# Generate a ProtoGENI URN.  Note that this is a little bit more
# restrictive than the general GENI naming scheme requires: we don't
# currently apply transcription to the authority or type fields,
# though it would be easy enough to add if anybody were perverse
# enough to want it.
sub Generate($$$)
{
    my ($authority, $type, $id) = @_;

    # Assume that any sub-authorities are already encoded (see
    # RFC 3151, section 2).  We don't currently handle sub-authorities,
    # so this is irrelevant for now.

    # Apply case normalisation to the authority; see RFC 3987, section
    # 5.3.2.1.  According to section 5.3.3, we are supposed to go
    # further and perform RFC 3490 ToASCII UseSTD3ASCIIRules and
    # AllowUnassigned and RFC 3491 Nameprep validation to interpret IRIs,
    # but quite frankly I think I've done more than enough RFC chasing already.
    $authority =~ tr/A-Z/a-z/;
    return undef if $authority !~ /^[0-9A-Za-z][-.0-9A-Za-z]*(?::[-.0-9A-Za-z]+)*$/;
    return undef if $type !~ /^[-.0-9A-Z_a-z~]+$/;
    return undef if $id !~ m{^[-\t\n\r !#$%'()*+,./0-9:;=?\@A-Z_a-z]+$};

    return "urn:publicid:IDN+" . $authority . "+" . $type . "+" .
        Transcribe( $id );
}

# Apply scheme-based (and other) normalisations to a URN (see RFC 3987,
# section 5.3).  This is conformant to RFC 2141, section 5 (we recognise
# all of those lexical equivalences, and introduce additional ones as
# is permitted).  We do not perform deep interpretation of the URN, so
# this procedure can and should be applied to foreign (non-ProtoGENI) URNs.
sub Normalise($)
{
    my ($hrn) = @_;

    return undef if !IsValid( $hrn );

    my ($authority, $type, $id) = Parse( $hrn );
    return Generate( $authority, $type, $id );
}

sub Equal($$)
{
    my ($hrn0, $hrn1) = @_;

    return undef if !IsValid( $hrn0 ) || !IsValid( $hrn1 );

    my $norm0 = Normalise( $hrn0 );
    my $norm1 = Normalise( $hrn1 );

    return $norm0 eq $norm1;
}

sub Authoritative($$)
{
    my ($hrn, $authority) = @_;

    $authority =~ tr/A-Z/a-z/;
    my @hrn = Parse( $hrn );
    $hrn[ 0 ] =~ tr/A-Z/a-z/;

    return $hrn[ 0 ] eq $authority;
}

sub SameDomain($$)
{
    my ($a, $b) = @_;
    my ($auth_a) = Parse($a);
    my ($auth_b) = Parse($b);
    my ($dom_a)  = split(":", $auth_a);
    my ($dom_b)  = split(":", $auth_b);
    $dom_a =~ tr/A-Z/a-z/;
    $dom_b =~ tr/A-Z/a-z/;

    return $dom_a eq $dom_b;
}

# Helper functions to make special cases slightly less messy:

# Generate an interface URN given a node and an interface ID on that node.
# This will probably fail horribly if the node ends and/or the interface
# begins with a '/' character, but anybody who does that probably deserves
# what they get.
sub GenerateInterface($$$)
{
    my ($authority,$node,$interface) = @_;

    return Generate( $authority, "interface", $node . "//" . $interface );
}

# Undo the GenerateInterface into a authority/name/interface triplet.
sub ParseInterface($)
{
    my ($urn) = @_;

    if (!defined($urn)) {
	carp("GeniHRN::ParseInterface: urn is undefined");
	return 0;
    }
    # Allow as instance method.
    if (ref($urn)) {
	$urn = $urn->urn();
    }
    my ($authority,$type,$id) = Parse( $urn );

    return undef if $type ne "interface";

    return undef unless $id =~ m{(.*)//(.*)};

    return ( $authority, $1, $2 );
}

sub ParseImage($)
{
    my ($urn) = @_;

    if (!defined($urn)) {
	carp("GeniHRN::ParseImage: urn is undefined");
	return 0;
    }
    # Allow as instance method.
    if (ref($urn)) {
	$urn = $urn->urn();
    }
    my ($authority,$type,$id) = Parse( $urn );

    return undef if $type ne "image";

    my ($ospid,$os,undef,$vers) = ($id =~ m{([^/]+)//([^/]+)(//(\d+))?});
    return undef if (!defined($ospid));

    return ($authority, $ospid, $os, $vers);
}
sub GenerateImage($$$$)
{
    my ($authority,$pid,$os,$vers) = @_;

    if (defined($vers)) {
	return Generate($authority, "image", $pid . "//" . $os . "//" . $vers);
    }
    return Generate($authority, "image", $pid . "//" . $os);
}
sub GenerateDataset($$$$$)
{
    my ($domain,$type,$pid,$name,$vers) = @_;
    my $authority = "${domain}:${pid}";
    if (defined($vers)) {
	$name .= "//" . $vers;
    }
    return Generate($authority, $type, $name);
}

#
# OO implementation, tired of typing same stuff all the time
#
sub new($$)
{
    my ($class, $urn) = @_;
    my ($project, $group);

    return $urn
	if (ref($urn) && ref($urn) eq "GeniHRN");

    if (! IsValid($urn)) {
	print STDERR "GeniHRN::new: invalid urn $urn\n";
	return undef;
    }
    my ($authority,$type,$id) = GeniHRN::Parse($urn);
    my $self = {};
    $self->{'urn'}        = $urn;
    $self->{'type'}       = $type;
    $self->{'id'}         = $id;
    $self->{'authority'}  = $authority;
    my ($domain,$subauth) = split(":", $authority, 2);
    $self->{'domain'}     = lc($domain);
    $self->{'subauth'}    = $subauth;
    if (defined($subauth)) {
	($project,$group) = split(":", $subauth, 2);
    }
    $self->{'project'}    = $project;
    $self->{'group'}      = $group;
    $self->{'IMAGEPARSE'} = undef;
    $self->{'DATASETPARSE'} = undef;
    
    bless($self, $class);
    return $self;
}
# accessors
sub field($$)           { return ($_[0]->{$_[1]}); }
sub urn($)		{ return field($_[0], "urn"); }
sub asString($)         { return $_[0]->urn(); }
sub authority($)	{ return field($_[0], "authority"); }
sub domain($)		{ return field($_[0], "domain"); }
sub subauth($)		{ return field($_[0], "subauth"); }
sub project($)		{ return field($_[0], "project"); }
sub group($)		{ return field($_[0], "group"); }
sub type($)		{ return field($_[0], "type"); }
sub id($)		{ return field($_[0], "id"); }
sub IsAuthority()       { return $_[0]->type() =~ /^authority$/i ? 1 : 0; }
sub IsSA($)		{ return ($_[0]->IsAuthority() &&
				  $_[0]->id() =~ /^SA$/i ? 1 : 0); }
sub IsCM($)		{ return ($_[0]->IsAuthority() &&
				  $_[0]->id() =~ /^CM$/i ? 1 : 0); }
sub IsRoot($)		{ return ($_[0]->IsAuthority() &&
				  $_[0]->id() =~ /^root$/i ? 1 : 0); }
sub IsUser($)		{ return $_[0]->type() =~ /^user$/i ? 1 : 0; }
sub IsNode($)		{ return $_[0]->type() =~ /^node$/i ? 1 : 0; }
sub IsProject($)	{ return $_[0]->type() =~ /^project$/i ? 1 : 0; }
sub IsOurDomain($)	{ return $_[0]->domain() eq lc("@OURDOMAIN@") ? 1 : 0; }
sub IsMotherShip($)     { return $_[0]->domain() eq lc("emulab.net") ? 1 : 0; }

#
# Image accessors. If we use any of these we want to parse the urn
# as an image, and return the subfields.
#
sub imagefield($$)
{
    my ($self, $field) = @_;

    if (!defined($self->{'IMAGEPARSE'})) {
	my (undef, $ospid, $os, $vers) = $self->ParseImage();

	$self->{'IMAGEPARSE'} = {
	    "ospid"  => $ospid,
	    "osname" => $os,
	    "osvers" => $vers,
	};
    }
    return $self->{'IMAGEPARSE'}->{$field};
}
sub osname($)	{ return $_[0]->imagefield("osname"); }
sub ospid($)	{ return $_[0]->imagefield("ospid"); }
sub osvers($)	{ return $_[0]->imagefield("osvers"); }
sub IsImage($)
{
    my ($self) = @_;
    # Make sure we have parsed it.
    return 0
	if (!defined($self->ospid()));
    
    return $_[0]->type() =~ /^image$/i ? 1 : 0; }

#
# Datasets do not put the project in the id like images.
#
sub datasetfield($$)
{
    my ($self, $field) = @_;

    if (!defined($self->{'DATASETPARSE'})) {
	my ($authority,$type,$id) = Parse($self->urn());

	return undef
	    if ($type !~ /^(lt|st|im)dataset$/);

	my ($name,undef,$vers) = ($id =~ m{([^/]+)(//(\d+))?});
	return undef if (!defined($name));

	$self->{'DATASETPARSE'} = {
	    "name" => $name,
	    "vers" => $vers,
	};
    }
    return $self->{'DATASETPARSE'}->{$field};
}
sub dsetname($)	{ return $_[0]->datasetfield("name"); }
sub dsetpid($)	{ return $_[0]->project(); }
sub dsetgid($)	{ return $_[0]->group(); }
sub dsetvers($)	{ return $_[0]->datasetfield("vers"); }
sub IsDataset($){ return $_[0]->type() =~ /^(lt|st|im)?dataset$/i ? 1 : 0; }
sub IsIMDataset($){ return $_[0]->type() =~ /^(im)?dataset$/i ? 1 : 0; }

#
# Stringify for text context.
#
sub Stringify($)
{
    my ($self) = @_;
    
    return $self->{"urn"};
}

#
# For JSON encode.
#
sub TO_JSON($)
{
    my ($self) = @_;

    return $self->{"urn"};
}

# _Always_ make sure that this 1 is at the end of the file...
1;
