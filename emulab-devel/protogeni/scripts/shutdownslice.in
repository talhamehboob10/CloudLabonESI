#!/usr/bin/perl -w
#
# Copyright (c) 2008-2010 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;

#
# Shutdown a slice. With the -c option, does what the Clearinghouse
# needs to do; tell all CMs in the federation. Without the -c option,
# operate as the SA, telling the CH to shutdown the slice.
#
sub usage()
{
    print "Usage: shutdownslice [-d] [-c] [-u] <uuid | urn>\n";
    exit(1);
}
my $optlist    = "cdun";
my $debug      = 0;
my $asch       = 0;
my $clear      = 0;
my $impotent   = 0;
sub fatal($);
sub ShutDownAsCH();
sub ShutDownAsSA();

#
# Configure variables
#
my $TB		  = "@prefix@";
my $TBOPS         = "@TBOPSEMAIL@";
my $TBLOGS        = "@TBLOGSEMAIL@";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1; 

#
# Check args.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"c"})) {
    $asch = 1;
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"u"})) {
    $clear = 1;
}
if (defined($options{"n"})) {
    $impotent = 1;
}
usage()
    if (@ARGV != 1);
my $slice_urn = $ARGV[0];

use vars qw($GENI_DBNAME);
if ($asch) {
    $GENI_DBNAME = "geni-ch";
}

# Now we can load the libraries after setting the proper DB.
use lib '@prefix@/lib';
use libtestbed;
use emutil;
require GeniDB;
require Genixmlrpc;
use GeniResponse;
require GeniCertificate;
require GeniCredential; 
require GeniAuthority;
require GeniSlice;

exit(($asch ? ShutDownAsCH() : ShutDownAsSA()));

#
# Shut down a local SA slice.
#
sub ShutDownAsSA()
{
    my $slice = GeniSlice->Lookup($slice_urn);
    if (!defined($slice)) {
	fatal("No such slice found");
    }

    #
    # Mark the slice as shutdown but do not overwrite original time.
    #
    if (!defined($slice->shutdown()) || $slice->shutdown() eq "") {
	$slice->SetShutdown() == 0
	    or fatal("Could not set the shutdown time for $slice");
    }
    
    #
    # The RPC context for this script is as the SA
    #
    my $EMULAB_PEMFILE = "@prefix@/etc/genisa.pem";
    my $certificate  = GeniCertificate->LoadFromFile($EMULAB_PEMFILE);
    if (!defined($certificate)) {
	fatal("Could not load certificate from $EMULAB_PEMFILE");
    }
    Genixmlrpc->SetContext(Genixmlrpc->Context($certificate));

    #
    # Generate a slice credential. Used to be a Clearinghouse credential,
    # but that is wrong.
    #
    my $authority = GeniAuthority->Lookup($certificate->uuid());
    if (!defined($authority)) {
	fatal("Could not find local authority object");
    }
    my $credential = GeniCredential->Create($slice, $authority);
    if (!defined($credential)) {
	fatal("Could not create new credential for $slice");
    }
    if ($credential->Sign($certificate) != 0) {
	fatal("Could not sign credential for $slice");
    }

    #
    # Need the CH certificate to make the RPC.
    #
    my $clearinghouse = GeniRegistry::ClearingHouse->GetCertificate();
    if (!defined($clearinghouse)) {
	fatal("Could not load the clearinghouse certificate");
    }

    my $response =
	Genixmlrpc::CallMethod($clearinghouse->URL(), undef,
			       "Shutdown",
				 { "clear"      => $clear,
				   "urn"        => $slice->urn(),
				   "credential" => $credential->asString() });
    
    if (!defined($response) || $response->code() != GENIRESPONSE_SUCCESS) {
	fatal("Could not shutdown $slice at clearinghouse: " .
	      (defined($response) ? $response->output() : ""));
    }
    return 0;
}

sub ShutDownAsCH()
{
    my $slice = GeniSlice->Lookup($slice_urn);
    my $credential;
    my @managers = ();

    #
    # The RPC context for this script is as the CH
    #
    my $certificate  = GeniRegistry::ClearingHouse->GetCertificate();
    if (!defined($certificate)) {
	fatal("Could not load CH certificate");
    }
    Genixmlrpc->SetContext(Genixmlrpc->Context($certificate));

    my $authority = GeniAuthority->Lookup($certificate->uuid());
    if (!defined($authority)) {
	fatal("Could not find local authority object");
    }

    #
    # It is technically wrong to generate a slice credential here, since
    # the target of the credential (slice) will be in a different domain
    # then the CH. But we do not actually check that yet. I have changed the
    # CMV2 to accept a self credential, but until everyone is running this
    # verision, we have to continue use a locally generated slice credential.
    #
    # Complication: The new SA might not have registered the slice yet,
    # so we do not have a slice object in the DB. In this case, go ahead
    # and generate the self credential.
    #
    if (defined($slice)) {
	$credential = GeniCredential->Create($slice, $authority);
    }
    else {
	$credential = GeniCredential->Create($authority, $authority);
    }
    if (!defined($credential)) {
	fatal("Could not create new credential for $slice");
    }
    if ($credential->Sign($certificate) != 0) {
	fatal("Could not sign credential for $slice");
    }

    my $query_result =
	GeniDB::DBQueryWarn("select uuid from geni_authorities ".
			    "where type='cm' and disabled=0");
    fatal("Could not lookup CM list")
	if (!defined($query_result));

    while (my ($manager_uuid) = $query_result->fetchrow_array()) {
	my $manager = GeniAuthority->Lookup($manager_uuid);
	print STDERR "Could not lookup up CM $manager_uuid\n"
	    if (!defined($manager));

	push(@managers, $manager);
    }

    #
    # Go into the background now, so as not to block the caller for
    # a long time. Mail will be sent if there is an error.
    # XXX Cannot use libaudit cause there is already an audit running
    # via the xmlrpc invocation.
    #
    my $logname;

    if (!$debug) {
	$logname = TBMakeLogname("shutdownslice");
	if (TBBackGround($logname)) {
	    #
	    # Parent exits normally.
	    #
	    exit(0);
	}
    }

    #
    # We want to do this operation in parallel to make it as fast
    # as possible and because the set of CMs can be large. 
    #
    my @results    = ();
    my $coderef    = sub {
	my ($manager) = @_;

	while (1) {
	    print STDERR "Shutting down slice on $manager\n";

	    if ($impotent) {
		sleep(5);
		return 0;
	    }

	    my $response =
		Genixmlrpc::CallMethod($manager->url(), undef,
			       "Shutdown",
			       { "clear"       => 0,
				 "slice_urn"   => $slice_urn,
				 "credential"  => $credential->asString(),
				 "credentials" => [$credential->asString()],
			       });
	    
	    if (!defined($response) ||
		($response->code() != GENIRESPONSE_SUCCESS &&
		 $response->code() != GENIRESPONSE_SEARCHFAILED &&
		 $response->code() != GENIRESPONSE_BUSY)) {

		print STDERR
		    "Could not shutdown slice on $manager: " .
		    (defined($response) ? $response->output() : "");
		return -1;
	    }
	    # Search failed is okay.
	    # Keep trying on busy.
	    last
		if ($response->code() == GENIRESPONSE_SUCCESS ||
		    $response->code() == GENIRESPONSE_SEARCHFAILED);
	    sleep(5);
	}
	return 0;
    };

    if (ParRun(undef, \@results, $coderef, @managers)) {
	fatal("Internal error shutting down $slice");
    }

    #
    # Check the exit codes. Eventually return specific error info.
    #
    my $errors   = 0;
    my $count    = 0;
    foreach my $result (@results) {
	my $manager = $managers[$count];

	if ($result != 0) {
	    print STDERR "*** Error shutting down slice on $manager\n";
	    $errors++;
	}
	$count++;
    }

    if ($errors) {
	SENDMAIL($TBOPS,
		 "Error doing emergency shutdown",
		 "Error doing emergency shutdown of $slice_urn",
		 undef, undef, $logname);
    }
    else {
	SENDMAIL($TBOPS,
		 "ClearingHouse did an emergency shutdown",
		 "ClearingHouse did an emergency shutdown of $slice_urn",
		 undef, undef, $logname);
    }
    exit($errors);
}


sub fatal($) {
    my ($msg) = @_;

    print STDERR "$msg\n";

    SENDMAIL($TBOPS,
	     "Error shutting down slice",
	     "Could not shutdown $slice_urn:\n\n" . "$msg\n",
	     $TBOPS);
    
    exit(1);
}
