#!/usr/bin/perl -w
#
# Copyright (c) 2008-2014 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use Data::Dumper;

#
# Generate an extended renewal credential.
#
sub usage()
{
    print "Usage: $0 [-o filename] -t <days> [-e <days>] -s <slice> ".
	"[-u <user> | -c <cert>]";
    print "\n";
    print "       $0 -t <days> [-e <days>] -u <user> | -c <cert>\n";
    print "Options:\n";
    print "  -s    - Slice to use. If no user, issue to slice creator.\n";
    print "          In the absence of a slice, the target is the CM,\n";
    print "          allowing the user to extend any of his slivers.\n";
    print "  -u    - Issue to user\n";
    print "  -c    - Issue to user via his public certificate\n";
    print "  -t    - How many days to allow extension for\n";
    print "  -e    - How many days before credential expires; default 5 days\n";
    print "  -o    - Output to file instead of STDOUT\n";
    print "  -a    - Use SA database instead of CM\n";
    exit(1);
}
my $optlist = "t:s:u:c:e:o:a";
my $expires = 5;
my $filename;
my $slice_urn;
my $user_urn;
my $user_cert;

# Configure ...
my $TB		  = "@prefix@";
my $CMCERT	  = "$TB/etc/genicm.pem";

use lib '@prefix@/lib';
use GeniDB;
use GeniCredential;
use GeniCertificate;
use GeniUtil;
use GeniAuthority;
use GeniHRN;
use GeniResponse;
use GeniUser;
use GeniSlice;

sub fatal($)
{
    my ($msg) = @_;

    die("*** $0:\n".
	"    $msg\n");
}

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
usage()
    if (!defined($options{"t"}));

my $numdays = $options{"t"};

if (defined($options{"e"})) {
    $expires = $options{"e"};
}
if (defined($options{"o"})) {
    $filename = $options{"o"};
}
if (defined($options{"s"})) {
    $slice_urn = $options{"s"};
}
if (defined($options{"u"})) {
    $user_urn = $options{"u"};
}
elsif (defined($options{"c"})) {
    $user_cert = $options{"c"};
}

# Connect to the proper DB.
DBConnect((defined($options{"a"}) ? GENISA_DBNAME() : GENICM_DBNAME()));

#
# Load the CM cert to act as the signer.
#
my $certificate = GeniCertificate->LoadFromFile($CMCERT);
if (!defined($certificate)) {
    fatal("Could not load certificate from $CMCERT\n");
}
my $authority = GeniAuthority->Lookup($certificate->urn());
if (!defined($authority)) {
    fatal("Could not load authority object");
}

#
# Figure out the who the credential is being given to. 
#
my $owner;

if (defined($user_urn)) {
    my $geniuser = GeniUser->Lookup($user_urn, 1);
    if (!defined($geniuser)) {
	fatal("No such geni user");
    }
    $owner = $geniuser;
}
elsif (defined($user_cert)) {
    my $certificate = GeniCertificate->LoadFromFile($user_cert);
    if (!defined($certificate)) {
	fatal("Could not load user certificate");
    }
    if ($certificate->VerifySSLChain()) {
	fatal("Could not verify certificate chain");
    }
    $owner = $certificate;
}
elsif (defined($slice_urn)) {
    my $slice = GeniSlice->Lookup($slice_urn);
    if (!defined($slice)) {
	fatal("No such slice");
    }
    my $geniuser = GeniUser->Lookup($slice->creator_urn(), 1);
    if (!defined($geniuser)) {
	fatal("No creator for slice");
    }
    $owner = $geniuser;
}
else {
    fatal("Who is this credential for?");
}

#
# If a slice was specified, then issue a credential for just
# that slice. Otherwise the target is the CM, which gives the
# user the ability to extend any slice he is bound to.
#
my $target;

if (defined($slice_urn)) {
    my $slice = GeniSlice->Lookup($slice_urn);
    if (!defined($slice)) {
	fatal("No such slice");
    }
    $target = $slice;
}
else {
    $target = $authority;
}

my $credential = GeniCredential->Create($target, $owner);
fatal("Could not create credential")
    if (!defined($credential));

#
# Credential is valid for ...
#
$credential->SetExpiration(time() + ($expires * 3600 * 24));

#
# Hmm, this is annoying. 
#
my $policy_excep = XML::LibXML::Element->new("max_sliver_lifetime");
$policy_excep->setNamespace($GeniUtil::EXTENSIONS_NS,
			    $GeniUtil::EXTENSIONS_PREFIX);
$policy_excep->appendText($numdays);
$credential->AddExtension($policy_excep);

fatal("Could not sign credential")
    if ($credential->Sign($GeniCredential::LOCALCM_FLAG));
if (defined($filename)) {
    open(OUT, ">$filename") or fatal("Could not open $filename: $!");
    print OUT $credential->{'string'} . "\n";
    close(OUT);
}
else {
    print $credential->{'string'};
}

exit(0);


