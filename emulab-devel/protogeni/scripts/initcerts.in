#!/usr/bin/perl -w
#
# Copyright (c) 2008-2014 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;

#
# Initialize an emulab to act as a protogeni emulab. Add optional -c
# option if this is a clearinghouse.
# 
sub usage()
{
    print "Usage: initcerts [-r [-k]]\n";
    print "Options:\n";
    print "  -r    - Regenerate certs, replacing existing keys/certs\n";
    print "  -k    - Reuse private keys when using -r option\n";
    exit(1);
}
my $optlist = "rk";
my $regen   = 0;
my $oldkeys = 0;
my $asch    = @PROTOGENI_ISCLEARINGHOUSE@;
my $cflag   = ($asch ? "-c" : "");

#
# Configure variables
#
my $TB		  = "@prefix@";
my $TBOPS         = "@TBOPSEMAIL@";
my $OURDOMAIN     = "@OURDOMAIN@";
my $PGENIDOMAIN   = "@PROTOGENI_DOMAIN@";
my $PGENISUPPORT  = @PROTOGENI_SUPPORT@;
my $PROTOGENI_RPCNAME = "@PROTOGENI_RPCNAME@";
my $PROTOGENI_RPCPORT = "@PROTOGENI_RPCPORT@";
my $PROTOGENI_WEBSITE = "@PROTOGENI_WEBSITE@";
my $PROTOGENI_URL = "@PROTOGENI_URL@";
my $PROTOUSER	  = "elabman";
my $ADDAUTHORITY  = "$TB/sbin/protogeni/addauthority";
my $GETCACERTS    = "$TB/sbin/protogeni/getcacerts";
my $POSTCRL       = "$TB/sbin/protogeni/postcrl";
my $GENCRL        = "$TB/sbin/protogeni/gencrl";
my $GENCRLBUNDLE  = "$TB/sbin/protogeni/gencrlbundle";
my $MKSYSCERT	  = "$TB/sbin/mksyscert";
my $WAP           = "$TB/sbin/withadminprivs";
my $CACERT	  = "$TB/etc/emulab.pem";
my $SACERT	  = "$TB/etc/genisa.pem";
my $CMCERT	  = "$TB/etc/genicm.pem";
my $CHCERT	  = "$TB/etc/genich.pem";
my $SESCERT	  = "$TB/etc/genises.pem";
my $RPCCERT	  = "$TB/etc/genirpc.pem";
my $SUDO	  = "/usr/local/bin/sudo";
my $FETCH	  = "/usr/bin/fetch";
my $OPENSSL       = "/usr/bin/openssl";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Protos
sub fatal($);
sub UpdateCert($$$$);
sub BackUpFileFatal($);

#
# Turn off line buffering on output
#
$| = 1; 

# Load the Testbed support stuff.
use lib "@prefix@/lib";
use libtestbed;
use libdb qw(TBSetSiteVar TBOPSPID DBQueryFatal);
use Genixmlrpc;
use GeniRegistry;

if ($UID != 0) {
    fatal("Must be root to run this script\n");
}

#
# Check args.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"r"})) {
    $regen = 1;
}
if (defined($options{"k"})) {
    $oldkeys = 1;
}
usage()
    if (@ARGV);

#
# Have you sent in your certificate to the ClearingHouse?
#
if (!$asch && ! (-e "$TB/etc/.protogeni_federated" || -e "$TB/etc/.federated")){
    print "Sending your public certificate to the Clearing House.\n";
    print "Please be patient!\n";
    
    #
    # Send in the root CA certificate via curl. The clearinghouse will
    # enter a temporary entry so that site initialization can proceed.
    #
    system("curl -f --data-urlencode cert\@${CACERT} ".
	   "     https://$PROTOGENI_WEBSITE/protogeni/register_ca.php");

    fatal("Could not register CA certificate at $PROTOGENI_WEBSITE")
	if ($?);

    system("echo 'Do not remove this file' > $TB/etc/.protogeni_federated");

    # Delay a few second to give the server a chance to do its thing
    # and restart apache.
    print "Your public certificate has been provisionally accepted.\n";
    print "Waiting a bit for the Clearing House to finish swallowing.\n";
    print "Please be patient!\n";
    for (my $i = 0; $i < 30; $i++) {
	sleep(1);
	print ".";
    }
    print "\n";
    print "Continuing ...\n";
}

#
# Generate the certs we need.
#
if (! -e $CMCERT || $regen) {
    my $keyopt = ($oldkeys && -e $CMCERT ? "-k $CMCERT" : "");
    BackUpFileFatal($CMCERT)
	if (-e $CMCERT);
    
    print "Creating CM certificate ...\n";
    system("$SUDO -u $PROTOUSER $MKSYSCERT -o $CMCERT $keyopt ".
	   "  -u $PROTOGENI_URL/cm " .
	   "  -i urn:publicid:IDN+${OURDOMAIN}+authority+cm " .
	   "$PGENIDOMAIN.cm") == 0
	   or fatal("Could not generate $CMCERT");
}
if (! -e $SACERT || $regen) {
    my $keyopt = ($oldkeys && -e $SACERT ? "-k $SACERT" : "");
    BackUpFileFatal($SACERT)
	if (-e $SACERT);

    print "Creating SA certificate ...\n";
    system("$SUDO -u $PROTOUSER $MKSYSCERT -o $SACERT $keyopt ".
	   "  -u $PROTOGENI_URL/sa " .
	   "  -i urn:publicid:IDN+${OURDOMAIN}+authority+sa " .
	   "$PGENIDOMAIN.sa") == 0
	   or fatal("Could not generate $SACERT");
}
if (! -e $SESCERT || $regen) {
    my $keyopt = ($oldkeys && -e $SESCERT ? "-k $SESCERT" : "");
    BackUpFileFatal($SESCERT)
	if (-e $SESCERT);

    print "Creating SES certificate ...\n";
    system("$SUDO -u $PROTOUSER $MKSYSCERT -o $SESCERT $keyopt ".
	   "  -u $PROTOGENI_URL/ses " .
	   "  -i urn:publicid:IDN+${OURDOMAIN}+authority+ses " .
	   "$PGENIDOMAIN.ses") == 0
	   or fatal("Could not generate $SESCERT");
}
if (! -e $RPCCERT || $regen) {
    my $keyopt = ($oldkeys && -e $RPCCERT ? "-k $RPCCERT" : "");
    BackUpFileFatal($RPCCERT)
	if (-e $RPCCERT);

    print "Creating RPC server certificate ...\n";
    system("$SUDO -u $PROTOUSER $MKSYSCERT -o $RPCCERT $keyopt ".
	   "'ProtoGENI RPC Server' $PROTOGENI_RPCNAME") == 0
	   or fatal("Could not generate $SESCERT");
}
if ($asch) {
    if (! -e $CHCERT || $regen) {
	my $keyopt = ($oldkeys && -e $CHCERT ? "-k $CHCERT" : "");
	BackUpFileFatal($CHCERT)
	    if (-e $CHCERT);

	print "Creating CH certificate ...\n";
	system("$SUDO -u $PROTOUSER $MKSYSCERT -o $CHCERT $keyopt ".
	       "  -u $PROTOGENI_URL/ch " .
	       "  -i urn:publicid:IDN+${OURDOMAIN}+authority+ch " .
	       "$PGENIDOMAIN.ch") == 0
	       or fatal("Could not generate $CHCERT");
    }
    UpdateCert( $CHCERT, "$PROTOGENI_URL/ch",
		"urn:publicid:IDN+${OURDOMAIN}+authority+ch",
		"$PGENIDOMAIN.ch" );
    #
    # Copy the CH certificate out to the web interface, but only the public
    # key of course. 
    #
    my $chcertificate = GeniCertificate->LoadFromFile($CHCERT);
    fatal("Could not load certificate from $CHCERT")
	if (!defined($chcertificate));
    
    my $certfile = $chcertificate->WriteToFile();
    if (system("$SUDO /bin/mv $certfile $TB/www/genich.pem")) {
	$chcertificate->Delete();
	unlink($certfile);
	fatal("Could not mv $certfile to $TB/www/genich.pem");
    }
    chmod(0644, "$TB/www/genich.pem");

    #
    # Add the cert to the DB directly.
    #
    system("$ADDAUTHORITY -f -c $CHCERT ma") == 0
	or fatal("Could not add MA certificate");
}
else {
    #
    # Grab the CH certificate.
    #
    print "Fetching clearinghouse certificate from $PROTOGENI_WEBSITE ...\n";
    system("$FETCH -q -o $CHCERT http://$PROTOGENI_WEBSITE/genich.pem") == 0
	or fatal("Could not fetch clearinghouse certificate ".
		 "from $PROTOGENI_WEBSITE");
}

#
# Update obsolete (pre-URN) certificates.
#
UpdateCert( $CMCERT, "$PROTOGENI_URL/cm",
	    "urn:publicid:IDN+${OURDOMAIN}+authority+cm",
	    "$PGENIDOMAIN.cm" );
UpdateCert( $SACERT, "$PROTOGENI_URL/sa",
	    "urn:publicid:IDN+${OURDOMAIN}+authority+sa",
	    "$PGENIDOMAIN.sa" );
UpdateCert( $SESCERT, "$PROTOGENI_URL/ses",
	    "urn:publicid:IDN+${OURDOMAIN}+authority+ses",
	    "$PGENIDOMAIN.ses" );

#
# Load the SA cert to act as caller context.
#
my $certificate = GeniCertificate->LoadFromFile($SACERT);
if (!defined($certificate)) {
    fatal("Could not load certificate from $SACERT\n");
}
my $context = Genixmlrpc->Context($certificate);
if (!defined($context)) {
    fatal("Could not create context to talk to clearinghouse");
}
my $cmcert = GeniCertificate->LoadFromFile($CMCERT);
if (!defined($cmcert)) {
    fatal("Could not load certificate from $CMCERT\n");
}
my $sescert = GeniCertificate->LoadFromFile($SESCERT);
if (!defined($sescert)) {
    fatal("Could not load certificate from $SESCERT\n");
}

#
# Add certs to the local SA database.
#
system("$ADDAUTHORITY $SACERT sa") == 0
    or fatal("Could not add SA certificate");
system("$ADDAUTHORITY $CMCERT cm") == 0
    or fatal("Could not add CM certificate");
system("$ADDAUTHORITY $SESCERT ses") == 0
    or fatal("Could not add SES certificate");

#
# Add certs to the local CM database.
#
system("$ADDAUTHORITY -a $SACERT sa") == 0
    or fatal("Could not add SA certificate to CM DB");
system("$ADDAUTHORITY -a $CMCERT cm") == 0
    or fatal("Could not add CM certificate to CM DB");

#
# Register our certs at the clearinghouse or locally.
#
if ($asch) {
    system("$ADDAUTHORITY -c $SACERT sa") == 0
	or fatal("Could not add SA certificate");
    system("$ADDAUTHORITY -c $CMCERT cm") == 0
	or fatal("Could not add CM certificate");
    system("$ADDAUTHORITY -c $SESCERT ses") == 0
	or fatal("Could not add SES certificate");
}
system("$TB/sbin/openvpn-setup") == 0
    or fatal("Could not setup openvpn certificates");

#
# Local SiteVars to hold the UUIDs.
#
TBSetSiteVar('protogeni/sa_uuid', $certificate->uuid());
TBSetSiteVar('protogeni/cm_uuid', $cmcert->uuid());
TBSetSiteVar('protogeni/ses_uuid', $sescert->uuid());

exit(0);

sub fatal($)
{
    my ($msg) = @_;

    die("*** $0:\n".
	"    $msg\n");
}

# Add a URN to old certificates.  (This is horrible, mainly because
# we want to reuse the same private keys.)
sub UpdateCert($$$$)
{
    my ($cert, $url, $urn, $hrn) = @_;

    if( system( "$OPENSSL x509 -text -noout < $cert | " .
		"grep -q -i URI:urn:publicid:IDN" ) ) {
	my $extfile = "/tmp/$$.ext"; # not worth trying to be secure
	my $keyfile = "/tmp/$$.key";
	my $uuid = qx{$OPENSSL x509 -subject -noout < $cert};

	die "could not read subject from $cert"
	    unless defined( $uuid );
	die "no UUID found in subject"
	    unless $uuid =~ /CN=([-a-f0-9]+)/;
	$uuid = $1;

	open( OLDFILE, "< $cert" ) or die "can't open $cert";
	open( NEWFILE, "> $keyfile" ) or die "can't open $keyfile";
	while( <OLDFILE> ) {
	    print NEWFILE;
	    last if /-----END RSA PRIVATE KEY-----/;
	}
	close OLDFILE;
	close NEWFILE;

	print "Adding URN to $cert...\n";

	my $originalfile = "${cert}.orig";
	-f $originalfile and
	    die( "refusing to overwrite $originalfile" );
	rename( "$cert", "$originalfile" ) or
	    die( "could not rename $cert" );

	system("$SUDO -u $PROTOUSER $MKSYSCERT -o $cert ".
	       "  -u $url -i $urn -k $keyfile $hrn $uuid" ) == 0
	       or fatal("Could not generate $cert");
    }
}

#
# Backup a file or fail.
#
sub BackUpFileFatal($)
{
    my ($filename) = @_;
    my $suffix     = time();
    my $backup     = $filename . "-" . $suffix;

    fatal("$filename does not exist")
	if (! -e $filename);

    if (-e $backup) {
	sleep(1);
	$backup = $filename . "-" . time();
	fatal("$backup already exists")
	    if (-e $backup);
    }
    system("/bin/cp -p $filename $backup") == 0
	or fatal("Could not backup $filename to $backup");

    return 0;
}

