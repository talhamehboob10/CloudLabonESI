#!/usr/bin/perl -w
#
# Copyright (c) 2008-2013 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;

#
# Cleanup a ticket on the CM
# 
sub usage()
{
    print "Usage: cleanupticket [-f] idx | uuid\n";
    exit(1);
}
sub fatal($);
my $optlist = "f";
my $force   = 0;

#
# Configure variables
#
my $TB		  = "@prefix@";
my $TBOPS         = "@TBOPSEMAIL@";
my $TBLOGS        = "@TBLOGSEMAIL@";
my $EMULAB_PEMFILE = "$TB/etc/genicm.pem";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1; 

#
# We don't want to run this script unless its the real version.
#
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be root! Maybe its a development version?\n");
}

# Load the Testbed support stuff.
use lib "@prefix@/lib";
use GeniDB;
use GeniTicket;
use GeniSlice;
use GeniUser;
use GeniUtil;
use GeniCM;
use Genixmlrpc;
use GeniCertificate;

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"f"})) {
    $force = 1;
}
usage()
    if (@ARGV != 1);
my $token = $ARGV[0];

# Connect to the proper DB.
DBConnect(GENICM_DBNAME());

#
# So we know who/what we are acting as.
#
my $certificate = GeniCertificate->LoadFromFile($EMULAB_PEMFILE);
if (!defined($certificate)) {
    fatal("Could not get uuid/urn from $EMULAB_PEMFILE\n");
}
$ENV{'MYUUID'} = $certificate->uuid();
$ENV{'MYURN'} = "urn:publicid:IDN+@OURDOMAIN@+authority+cm";

my $ticket = GeniTicket->Lookup($token);
if (!defined($ticket)) {
    fatal("No such ticket for $token");
}
if ($ticket->slice_uuid()) {
    my $slice = GeniSlice->Lookup($ticket->slice_uuid());
    if (!defined($slice)) {
	fatal("Could not lookup slice for ticket");
    }
    my $creator = GeniUser->Lookup($slice->creator_uuid(), 1);
    if (!defined($creator)) {
	fatal("Could not find creator");
    }
    if (!defined(GeniCM::FlipToUser($slice, $creator))) {
	fatal("Could not flip to slice creator");
    }
}
else {
    GeniUtil::FlipToGeniUser();
}

if ($ticket->Lock() && !$force) {
    fatal("Could not lock $ticket");
}
if ($ticket->Release(TICKET_PURGED)) {
    fatal("Could not release $ticket");
}
exit(0);

sub fatal($) {
    my ($msg) = @_;

    print STDERR "$msg\n";
    exit(1);
}
