<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) 2008-2013 University of Utah and the Flux Group.

{{{GENIPUBLIC-LICENSE

GENI Public License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and/or hardware specification (the "Work") to
deal in the Work without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Work, and to permit persons to whom the Work
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Work.

THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
IN THE WORK.

}}}

-->

<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:panes="com.flack.geni.display.panes.*"
			   xmlns:areas="com.flack.shared.display.areas.*"
			   xmlns:components="com.flack.shared.display.components.*"
			   xmlns:panes1="com.flack.shared.display.panes.*"
			   minWidth="600" minHeight="400" applicationComplete="afterReady();"
			   preinitialize="onPreinitialize();" resizeForSoftKeyboard="true">
	<s:layout>
		<s:HorizontalLayout gap="0" />
	</s:layout>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		
		.failedStyle {
			chromeColor: #F08080;
			color: #990000;
		}
		
		.pausedStyle {
			chromeColor: #F88017;
			color: #C35617;
		}
		
		.normalStyle {
			chromeColor: #000000;
			color: #000000;
		}
		
		.validStyle {
			chromeColor: #27C427;
			color: #006600;
		}
		
		.warningStyle {
			chromeColor: #FFCC00;
			color: #CC6600;
		}
		
		.inprogressStyle {
			chromeColor: #FFCC00;
			color: #CC6600;
		}
		
		.unknownStyle {
			chromeColor: white;
			color: grey;
		}
		
		s|TextArea {
			skinClass: ClassReference("com.flack.shared.display.skins.TextAreaSkin");
		}
		
		s|TextInput {
			skinClass: ClassReference("com.flack.shared.display.skins.TextInputSkin");
		}
		
		s|Button {
			skinClass: ClassReference("com.flack.shared.display.skins.ButtonSkin");
		}
		
		s|Scroller {
			skinClass: ClassReference("com.flack.shared.display.skins.ScrollerSkin");
		}
		
		s|CheckBox {
			skinClass: ClassReference("com.flack.shared.display.skins.CheckBoxSkin");
		}
		
		s|List {
			skinClass: ClassReference("com.flack.shared.display.skins.ListSkin");
		}
		
		s|RadioButton {
			skinClass: ClassReference("com.flack.shared.display.skins.RadioButtonSkin");
		}
		
		s|DropDownList {
			skinClass: ClassReference("com.flack.shared.display.skins.DropDownListSkin");
		}
		
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import com.flack.emulab.display.panes.EmulabSearchPane;
			import com.flack.emulab.display.panes.EmulabUserPane;
			import com.flack.geni.display.panes.GeniResourcesPane;
			import com.flack.geni.display.panes.GeniSearchPane;
			import com.flack.shared.FlackEvent;
			import com.flack.shared.SharedCache;
			import com.flack.shared.SharedMain;
			import com.flack.shared.display.areas.AreaContent;
			import com.flack.shared.logging.LogMessage;
			import com.flack.shared.tasks.TaskEvent;
			import com.flack.shared.tasks.Tasker;
			import com.flack.shared.utils.ImageUtil;
			import com.flack.shared.utils.ViewUtil;
			
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			
			[Bindable]
			[Embed(source="../images/arrow_out.png")] 
			private var arrowOut:Class;
			
			[Embed(source="../images/arrow_in.png")] 
			private var arrowIn:Class;
			
			private function onPreinitialize():void
			{
				// XXX only leave what's needed for production
				Security.allowDomain("*");
				Security.allowInsecureDomain("*");
				Security.allowDomain("localhost");	
				
				// First, is this for GENI or Emulab?
				try{
					if(FlexGlobals.topLevelApplication.parameters.mode != null)
					{
						switch((FlexGlobals.topLevelApplication.parameters.mode as String).toLowerCase())
						{
							case "emulab":
								SharedMain.mode = SharedMain.MODE_EMULAB;
								break;
							case "geni":
								SharedMain.mode = SharedMain.MODE_GENI;
						}
					}
				} catch(all:Error) {
				}
				
				SharedMain.preinitMode();
			}
			
			private function afterReady():void
			{
				// Prepare for errors
				loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, uncaughtErrorHandler);
				stage.addEventListener(FullScreenEvent.FULL_SCREEN, fullScreenChange);
				
				SharedMain.initMode();
				
				// Create our universe and get ready
				//SharedCache.initialize();
				SharedCache.loadAndApply();
				SharedMain.loadParams();
				
				SharedMain.initPlugins();
				
				SharedMain.logger.addEventListener(FlackEvent.CHANGED_LOG, logEvent);
				SharedMain.tasker.addEventListener(TaskEvent.CHILD_FINISHED, taskerStatusUpdate);
				SharedMain.tasker.addEventListener(TaskEvent.CHILD_STARTED, taskerStatusUpdate);
				
				switch(SharedMain.mode)
				{
					case SharedMain.MODE_EMULAB:
						resourcesView.addElement(new EmulabUserPane());
						searchView.addElement(new EmulabSearchPane());
						break;
					case SharedMain.MODE_GENI:
						resourcesView.addElement(new GeniResourcesPane());
						searchView.addElement(new GeniSearchPane());
				}
				
				SharedMain.runFirst();
			}
			
			private var uncaughtErrors:int = 0;
			private function uncaughtErrorHandler(event:UncaughtErrorEvent):void
			{
				uncaughtErrors++;
				if(uncaughtErrors > 20)
					return;
				event.preventDefault();
				event.stopImmediatePropagation();
				
				// XXX Fix for dell streak 7, linux
				/*try{
					if(event.error.errorID == 2063 || event.error.errorID == 2007)
						return;
				} catch(bad:Error) {}*/
				
				var errorMessage:String = "";
				if(event.error is Error)
				{
					var error:Error = event.error as Error;
					var stackTrace:String = error.getStackTrace();
					if(stackTrace != null)
						errorMessage = stackTrace;
					else
						errorMessage = error.toString();
				}
				else if(event.error is ErrorEvent)
				{
					var errorEvent:ErrorEvent = event.error as ErrorEvent;
					errorMessage = errorEvent.toString();
				}
				else
				{
					try
					{
						errorMessage = event.error.toString();
					}
					catch(bad:Error) {}
				}
				
				var uncaughtErrorMessage:LogMessage = new LogMessage(
					null,
					"",
					"Uncaught Error",
					"Error: " + errorMessage + "\n\nEvent: " + event.toString(),
					"",
					LogMessage.LEVEL_DIE);
				
				SharedMain.logger.add(uncaughtErrorMessage);
				
				if(errorMessage.indexOf("Connection closed during handshake.") > -1)
					return;
				
				ViewUtil.viewLogMessage(uncaughtErrorMessage);
				Alert.show(
					"An uncaught error was thrown and has possibly corrupted any actions you were doing. The request queue was paused so any pending actions will not be run until you start the queue again.  If you believe the error was not serious, restart the queue and continue.\n\n"
					+ "Please check the error log message and copy the details into a message and send to protogeni-users@flux.utah.edu.  Restart the client after you have gathered any RSPECs, error messages, etc that you don't want to lose.",
					"Uncaught error",
					Alert.OK,
					this,
					null,
					ImageUtil.errorIcon);
			}
			
			
			
			private function taskerStatusUpdate(event:TaskEvent):void
			{
				if(SharedMain.tasker.tasks.Active.length > 0)
				{
					if(!spinner.visible)
					{
						spinner.startSpin();
						spinner.visible = true;
					}
				}
				else
				{
					if(spinner.visible)
					{
						spinner.stopSpin();
						spinner.visible = false;
					}
				}
				updateRemaining();
			}
			
			private function logEvent(event:FlackEvent):void
			{
				if(event.action == FlackEvent.ACTION_CREATED)
				{
					var msg:LogMessage = event.changedObject as LogMessage;
					if(msg.origin != null && !(msg.origin is Tasker) )
					{
						updateLabel.text = msg.Title;
						if(msg.level == LogMessage.LEVEL_FAIL)
							updateLabel.styleName = "failedStyle";
						else if(msg.level == LogMessage.LEVEL_WARNING)
							updateLabel.styleName = "inprogressStyle";
						else
							updateLabel.styleName = "normalStyle";
					}
				}
				updateRemaining();
			}
			
			public function updateRemaining():void
			{
				var remaining:int = SharedMain.tasker.Remaining;
				if(remaining == 0)
					remainingLabel.text = "";
				else
					remainingLabel.text = remaining + " Running";
			}
			
			public function viewingContent():AreaContent
			{
				return contentAreaGroup.Content;
			}
			
			public function viewContent(content:AreaContent):void
			{
				contentAreaGroup.load(content);
			}
			
			public function viewAbout():void
			{
				ViewUtil.viewAbout();
			}
			
			protected function fullScreenChange(event:FullScreenEvent = null):void
			{
				if(stage.displayState == StageDisplayState.FULL_SCREEN)
				{
					Alert.show(
						"You may not be able to use your keyboard in full screen mode due to Flash's security model. Adobe is afraid programs will try to look like the operating system in full mode and trick users into entering a system password. Sorry for the inconvenience!",
						"Keyboard not usable"
					);
				}
			}
			
			private function toggleFullScreen():void
			{
				try
				{
					switch (systemManager.stage.displayState)
					{
						case StageDisplayState.FULL_SCREEN:
							systemManager.stage.displayState = StageDisplayState.NORMAL;
							fullscreenButton.setStyle("icon", arrowOut);
							break;
						default:
							systemManager.stage.displayState = StageDisplayState.FULL_SCREEN;
							fullscreenButton.setStyle("icon", arrowIn);
							break;
					}
				}
				catch (err:SecurityError)
				{
					Alert.show(
						"Fullscreen isn't supported on the current system." +
						"  Either you are running an older version of Fash or allowFullScreen is not set in the HTML object/embed tags."
					);
				}
			}
			
		]]>
	</fx:Script>
	
	<s:VGroup id="dashboard"
			  height="100%"
			  width="180"
			  gap="2">
		<s:ButtonBar dataProvider="{dashboardViewstack}"
					 requireSelection="true"
					 skinClass="com.flack.shared.display.skins.ButtonBarSkin"
					 width="100%" />
		<mx:ViewStack id="dashboardViewstack"
					  width="100%"
					  height="100%">
			<s:NavigatorContent id="resourcesView"
								width="100%"
								height="100%"
								toolTip="Resources"
								icon="{ImageUtil.managerIcon}">
				<!-- Specific to mode -->
			</s:NavigatorContent>
			<s:NavigatorContent id="searchView"
								width="100%"
								height="100%"
								toolTip="Search"
								icon="{ImageUtil.searchIcon}">
				<!-- Specific to mode -->
			</s:NavigatorContent>
			<s:NavigatorContent id="geniView"
								width="100%"
								height="100%"
								toolTip="Tasks"
								icon="{ImageUtil.consoleIcon}">
				<panes1:TaskPane />
			</s:NavigatorContent>
		</mx:ViewStack>
	</s:VGroup>
	
	<areas:Area id="contentAreaGroup" />
	
	<s:controlBarLayout>
		<s:HorizontalLayout paddingBottom="2"
							paddingTop="2"
							paddingLeft="2"
							paddingRight="2"
							gap="2"
							verticalAlign="middle" />
	</s:controlBarLayout>
	<s:controlBarContent>
		<s:HGroup width="{dashboard.width-8}"
				  verticalAlign="middle">
			<s:Rect percentWidth="100" />
			<s:Label id="remainingLabel"
					 fontWeight="bold" />
			<components:Spinner id="spinner"
								width="21"
								height="21"
								x="{(width / 2) - (spinner.width / 2)}"
								y="{(height / 2) - (spinner.height / 2)}"
								visible="false" />
		</s:HGroup>
		<s:Label id="updateLabel"
				 maxDisplayedLines="1"
				 width="100%"
				 fontWeight="bold" />
		<s:Label text="{SharedMain.version}"
				 color="0xC35617"
				 fontWeight="bold" />
		<components:ImageButton id="fullscreenButton"
								icon="{arrowOut}"
								click="toggleFullScreen()"
								toolTip="Toggle fullscreen" />
		<components:ImageButton icon="{ImageUtil.helpIcon}"
								toolTip="View more information about Flack"
								click="viewAbout()" />
	</s:controlBarContent>
</s:Application>
