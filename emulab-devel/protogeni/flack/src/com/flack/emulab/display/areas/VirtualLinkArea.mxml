<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) 2008-2013 University of Utah and the Flux Group.

{{{GENIPUBLIC-LICENSE

GENI Public License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and/or hardware specification (the "Work") to
deal in the Work without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Work, and to permit persons to whom the Work
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Work.

THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
IN THE WORK.

}}}

-->

<areas1:AreaContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="com.flack.shared.display.components.*"
		  creationComplete="init()"
		  title="{link.name}" xmlns:areas1="com.flack.shared.display.areas.*">
	<fx:Script>
		<![CDATA[
			import com.flack.emulab.resources.virtual.VirtualInterface;
			import com.flack.emulab.resources.virtual.VirtualLink;
			import com.flack.shared.FlackEvent;
			import com.flack.shared.SharedMain;
			import com.flack.shared.utils.ImageUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			
			[Bindable]
			public var link:VirtualLink;
			
			[Bindable]
			private var interfaces:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var properties:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var types:ArrayList = new ArrayList();
			
			public function init():void
			{
				if(link != null)
					load(link);
			}
			
			override public function get PendingChanges():Boolean
			{
				return okButton.enabled;
			}
			
			public function load(l:VirtualLink):void
			{
				if(l == null)
					return;
				confirmCanCloseAnd(finishLoading, l);
			}
			public function finishLoading(l:VirtualLink):void
			{
				link = l;
				
				interfaces.removeAll();
				if(initialized)
				{
					if(link != null)
					{
						nameInput.text = link.name;
						
						// Interfaces
						for each(var iface:VirtualInterface in link.interfaces.collection)
						{
							interfaces.addItem(
								{
									source: iface,
									owner: iface.node,
									ipaddress: iface.ip
								}
							);
						}
						
						okButton.enabled = false;
					}
				}
			}
			
			override public function cancelPendingChanges():void
			{
				finishLoading(link);
			}
			
			public function cancelAndClose():void
			{
				cancelPendingChanges();
				close();
			}
			
			public function saveAndClose():void
			{
				if(save())
					return;
				close();
			}
			
			// true = failed
			public function save():Boolean
			{
				// Make sure the client_id is not taken
				if(!link.experiment.isIdUnique(link, nameInput.text)) {
					Alert.show("Client ID '" + nameInput.text + "' is already in use, please choose a different client id");
					return true;
				}
				
				
				link.name = nameInput.text;
				//link.vlantag = vlantagInput.text;
				
				link.unsubmittedChanges = true;
				
				SharedMain.sharedDispatcher.dispatchChanged(
					FlackEvent.CHANGED_EXPERIMENT,
					link.experiment
				);
				
				okButton.enabled = false;
				
				return false;
			}
			
		]]>
	</fx:Script>
	
	<s:HGroup width="100%"
			  verticalAlign="middle"
			  paddingLeft="2"
			  paddingRight="2"
			  paddingTop="2"
			  paddingBottom="2"
			  gap="2">
		<s:TextInput id="nameInput"
					 width="100%"
					 fontWeight="bold"
					 fontSize="16"
					 restrict="a-zA-Z0-9\-"
					 toolTip="{link.name}"
					 change="okButton.enabled = true" />
		<components:ImageButton id="dockIcon"
								icon="{ImageUtil.windowIcon}"
								toolTip="Pop out to a window or in to the main window"
								click="host.Docked ? popOut() : dock()" />
	</s:HGroup>
	
	<s:HGroup verticalAlign="middle"
			  paddingLeft="2"
			  paddingRight="2"
			  width="100%"
			  gap="2">
		<s:Label text="Type"
				 fontWeight="bold"/>
	</s:HGroup>
	
	<s:ButtonBar dataProvider="{sectionViewstack}"
				 requireSelection="true"
				 skinClass="com.flack.shared.display.skins.ButtonBarSkin"
				 width="100%" />
	<mx:ViewStack id="sectionViewstack"
				  width="100%"
				  height="100%"
				  paddingTop="2"
				  paddingLeft="2"
				  paddingRight="2"
				  paddingBottom="2">
		<s:NavigatorContent label="Interfaces"
							height="100%"
							width="100%">
			<s:DataGrid id="interfaceGrid"
						width="100%"
						height="100%" 
						dataProvider="{interfaces}"
						rowHeight="24"
						editable="true"
						gridItemEditorSessionSave="okButton.enabled = true">
				<s:columns>
					<s:ArrayList>
						<s:GridColumn headerText="Node"
									  dataField="owner"
									  editable="false"
									  itemRenderer="com.flack.geni.display.GeniDataGridRenderer">
						</s:GridColumn>
						<s:GridColumn dataField="physicalName"
									  headerText="Physical"
									  editable="false">
							<s:itemRenderer>
								<fx:Component>
									<s:DefaultGridItemRenderer />
								</fx:Component>
							</s:itemRenderer>
						</s:GridColumn>
						<s:GridColumn dataField="ipaddress"
									  headerText="IP">
							<s:itemEditor>
								<fx:Component>
									<s:DefaultGridItemEditor />
								</fx:Component>
							</s:itemEditor>
							<s:itemRenderer>
								<fx:Component>
									<s:DefaultGridItemRenderer />
								</fx:Component>
							</s:itemRenderer>
						</s:GridColumn>
					</s:ArrayList> 
				</s:columns>
			</s:DataGrid>
		</s:NavigatorContent>
	</mx:ViewStack>
	
	<s:Group width="100%">
		<s:Rect width="100%" height="100%">
			<s:fill><s:SolidColor color="0xCCCCCC" /></s:fill>
		</s:Rect>
		
		<s:HGroup width="100%"
				  verticalAlign="middle"
				  paddingLeft="2"
				  paddingRight="2"
				  paddingTop="2"
				  paddingBottom="2"
				  gap="2">
			<s:Button id="okButton"
					  label="Apply"
					  icon="{ImageUtil.availableIcon}"
					  enabled="false"
					  click="saveAndClose();" />
			<s:Button id="cancelButton"
					  label="Cancel"
					  icon="{ImageUtil.cancelIcon}"
					  click="cancelAndClose();" />
		</s:HGroup>
	</s:Group>
</areas1:AreaContent>
