<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) 2008-2013 University of Utah and the Flux Group.

{{{GENIPUBLIC-LICENSE

GENI Public License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and/or hardware specification (the "Work") to
deal in the Work without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Work, and to permit persons to whom the Work
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Work.

THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
IN THE WORK.

}}}

-->

<areas1:AreaContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:areas="com.flack.geni.display.areas.*"
		  creationComplete="init()" xmlns:areas1="com.flack.shared.display.areas.*">
	<fx:Script>
		<![CDATA[
			import com.flack.geni.display.DisplayUtil;
			import com.flack.geni.resources.physical.PhysicalInterface;
			import com.flack.geni.resources.physical.PhysicalLink;
			import com.flack.geni.resources.physical.PhysicalLinkCollection;
			import com.flack.geni.resources.physical.PhysicalNode;
			import com.flack.geni.resources.physical.PhysicalNodeCollection;
			import com.flack.shared.display.components.DataButton;
			import com.flack.shared.utils.ColorUtil;
			import com.flack.shared.utils.ViewUtil;
			
			[Bindable]
			public var iface:PhysicalInterface;
			
			public function init():void
			{
				if(iface != null)
					load(iface);
			}
			
			public function load(newIface:PhysicalInterface):void
			{
				iface = newIface;
				title = iface.Name;
				backgroundColor = ColorUtil.colorsDark[iface.owner.manager.colorIdx];
				titleColor = ColorUtil.colorsLight[iface.owner.manager.colorIdx];
				if(visible)
				{
					hostGroup.removeAllElements();
					var hostButton:DataButton = DisplayUtil.getPhysicalNodeButton(iface.owner, false);
					hostButton.addEventListener(MouseEvent.CLICK, viewNode);
					hostGroup.addElement(hostButton);
					
					loadLinks();
				}
			}
			
			public function loadLinks():void
			{
				if(linksToGroup != null)
				{
					linksToGroup.removeAllElements();
					interfacesGroup.removeAllElements();
					
					interfacesGroup.addElement(ViewUtil.getLabel("Connected with", true));
					
					var allLinks:PhysicalLinkCollection = iface.links;
					var linksButton:DataButton = DisplayUtil.getPhysicalLinkCollectionButton(allLinks, false);
					linksButton.addEventListener(MouseEvent.CLICK, viewLinks);
					interfacesGroup.addElement(linksButton);
					var connectedNodes:PhysicalNodeCollection = iface.links.Interfaces.Nodes;
					connectedNodes.remove(iface.owner);
					var interfacesButton:DataButton = DisplayUtil.getPhysicalNodeCollectionButton(connectedNodes, false);
					interfacesButton.addEventListener(MouseEvent.CLICK, viewNodes);
					interfacesGroup.addElement(interfacesButton);
					
					for each(var connectedNode:PhysicalNode in connectedNodes.collection)
					{
						var nodeButton:DataButton = DisplayUtil.getPhysicalNodeButton(connectedNode, false);
						nodeButton.addEventListener(MouseEvent.CLICK, viewNode);
						linksToGroup.addElement(nodeButton);
						for each(var l:PhysicalLink in allLinks.collection)
						{
							if(l.interfaces.Nodes.contains(connectedNode))
							{
								var linkHbox:HGroup = new HGroup();
								var space:Rect = new Rect();
								space.width = 16;
								linkHbox.addElement(space);
								
								var linkButton:DataButton = DisplayUtil.getPhysicalLinkButton(l, false);
								linkButton.addEventListener(MouseEvent.CLICK, viewLink);
								linkHbox.addElement(linkButton);
								
								linksToGroup.addElement(linkHbox);
							}
						}
					}
				}
			}
			
			public function viewLink(e:MouseEvent):void
			{
				viewLinkArea((e.target as DataButton).data as PhysicalLink);
			}
			
			public function viewLinkArea(l:PhysicalLink):void
			{
				var linkArea:PhysicalLinkArea = new PhysicalLinkArea();
				linkArea.load(l);
				openNext(linkArea);
			}
			
			public function viewLinks(e:MouseEvent):void
			{
				var l:PhysicalLinkCollection = (e.target as DataButton).data as PhysicalLinkCollection;
				if(l.length == 1)
				{
					viewLinkArea(l.collection[0]);
					return;
				}
				var linksArea:PhysicalLinkCollectionArea = new PhysicalLinkCollectionArea();
				linksArea.Links = l;
				openNext(linksArea);
			}
			
			public function viewNode(e:MouseEvent):void
			{
				viewNodeArea((e.target as DataButton).data as PhysicalNode);
			}
			
			public function viewNodeArea(n:PhysicalNode):void
			{
				var nodeArea:PhysicalNodeArea = new PhysicalNodeArea();
				nodeArea.load(n);
				openNext(nodeArea);
			}
			
			public function viewNodes(e:MouseEvent):void
			{
				var n:PhysicalNodeCollection = (e.target as DataButton).data as PhysicalNodeCollection;
				if(n.length == 1)
				{
					viewNodeArea(n.collection[0]);
					return;
				}
				var nodesArea:PhysicalNodeCollectionArea = new PhysicalNodeCollectionArea();
				nodesArea.Nodes = n;
				openNext(nodesArea);
			}
			
		]]>
	</fx:Script>
	
	<s:Group width="100%">
		<s:Rect width="100%" height="100%">
			<s:fill><s:SolidColor color="{backgroundColor}" /></s:fill>
		</s:Rect>
		
		<s:HGroup width="100%"
				  id="topGroup"
				  verticalAlign="middle"
				  paddingLeft="2"
				  paddingRight="2"
				  paddingTop="2"
				  paddingBottom="2"
				  gap="2">
			<s:Image id="imgAvailable" />
			<s:Image id="imgExclusive" />
			<s:Label text="{title}"
					 color="{titleColor}"
					 id="nameLabel"
					 toolTip="{iface.id.full}"
					 fontSize="17"
					 fontWeight="bold"
					 width="100%" />
			<s:Label text="Hosted on"
					 color="{titleColor}"
					 id="hostedOnLabel" />
			<s:HGroup verticalAlign="middle" id="hostGroup" />
		</s:HGroup>
	</s:Group>
	
	<s:VGroup paddingRight="2"
			  paddingLeft="2"
			  gap="2"
			  width="100%"
			  height="100%">
		<s:HGroup width="100%"
				  height="100%"
				  gap="2">
			<s:VGroup id="interfacesGroup" />
			<s:Scroller width="100%"
						height="100%">
				<s:VGroup id="linksToGroup"
						  width="100%"
						  height="100%"
						  gap="2" />
			</s:Scroller>
		</s:HGroup>
	</s:VGroup>
</areas1:AreaContent>
