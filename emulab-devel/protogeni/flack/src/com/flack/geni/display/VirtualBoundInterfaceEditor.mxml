<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) 2008-2013 University of Utah and the Flux Group.

{{{GENIPUBLIC-LICENSE

GENI Public License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and/or hardware specification (the "Work") to
deal in the Work without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Work, and to permit persons to whom the Work
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Work.

THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
IN THE WORK.

}}}

-->

<s:GridItemEditor xmlns:fx="http://ns.adobe.com/mxml/2009" 
				  xmlns:s="library://ns.adobe.com/flex/spark" 
				  xmlns:mx="library://ns.adobe.com/flex/mx" alpha="1">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.flack.geni.resources.physical.PhysicalInterface;
			import com.flack.geni.resources.physical.PhysicalInterfaceCollection;
			import com.flack.geni.resources.physical.PhysicalNode;
			import com.flack.geni.resources.virt.VirtualInterface;
			import com.flack.geni.resources.virt.VirtualInterfaceCollection;
			import com.flack.geni.resources.virt.VirtualNode;
			import com.flack.shared.resources.IdnUrn;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			[Bindable]
			private var interfaces:ArrayCollection = null;
			
			override public function set value(newValue:Object):void {
				// First, try to get the physical node info. If unbound, nothing to do.
				var virtualInterface:VirtualInterface = data["source"];
				var virtualNode:VirtualNode = virtualInterface.Owner;
				var physicalNode:PhysicalNode = virtualNode.Physical;
				if(physicalNode == null || newValue == null || newValue.physicalId.length == 0) {
					valueDisplay.selectedItem = null;
					boundCheckbox.selected = false;
					controlsGroup.enabled = false;
					return;
				}
				
				// Build up the physical interfaces once.
				if(interfaces == null)
				{
					interfaces = new ArrayCollection();
					for each(var nodeInterface:PhysicalInterface in physicalNode.interfaces.collection) {
						if(nodeInterface.role == PhysicalInterface.ROLE_EXPERIMENTAL)
							interfaces.addItem(nodeInterface.id.full);
					}
				}
				
				boundCheckbox.selected = newValue.bound;
				valueDisplay.selectedItem = newValue.physicalId;
				controlsGroup.enabled = true;
			}
			
			override public function get value():Object {
				// First, try to get the physicaln node information. If unbound, nothing to do.
				var virtualInterface:VirtualInterface = data["source"];
				var virtualNode:VirtualNode = virtualInterface.Owner;
				var physicalNode:PhysicalNode = virtualNode.Physical;
				if(physicalNode == null) {
					return {physicalId: "", bound: false};
				}
				
				// If bound, make sure there aren't any physical interfaces used twice.
				var candidateInterfaces:PhysicalInterfaceCollection = new PhysicalInterfaceCollection();
				for each(var nodeInterface:PhysicalInterface in physicalNode.interfaces.collection) {
					if(nodeInterface.role == PhysicalInterface.ROLE_EXPERIMENTAL && nodeInterface.id.full != valueDisplay.selectedItem)
						candidateInterfaces.add(nodeInterface);
				}
				var checkInterfaces:VirtualInterfaceCollection = virtualNode.interfaces.Clone;
				checkInterfaces.remove(virtualInterface);
				
				// Go through the interfaces selected in the datagrid.
				var replaceIdx:int = -1;
				for(var i:int = 0; i < dataGrid.dataProviderLength; i++) {
					if(i == rowIndex) continue;
					var gridObject:Object = dataGrid.dataProvider.getItemAt(i);
					var thisInterface:VirtualInterface = gridObject["source"];
					if(thisInterface.Owner != virtualInterface.Owner) continue;
					checkInterfaces.remove(thisInterface);
					var selectedInterface:PhysicalInterface = candidateInterfaces.getById(gridObject["binding"].physicalId);
					if(selectedInterface != null)
						candidateInterfaces.remove(selectedInterface);
					else
						replaceIdx = i;
				}
				// Replace the interface with a remaining candidate interface if needed.
				if(replaceIdx != -1)
				{
					var replaceInterface:PhysicalInterface = candidateInterfaces.collection[0];
					dataGrid.dataProvider.getItemAt(replaceIdx)["binding"].physicalId = replaceInterface.id.full;
					candidateInterfaces.remove(replaceInterface);
				}
				
				// Check interfaces which haven't been checked yet (which aren't in the datagrid).
				var replaceExistingInterface:VirtualInterface = null;
				for each(var checkInterface:VirtualInterface in checkInterfaces.collection)
				{
					if(checkInterface.physicalId.full == valueDisplay.selectedItem)
						replaceExistingInterface = checkInterface;
					else
						candidateInterfaces.remove(checkInterface.Physical);
				}
				if(replaceExistingInterface != null)
					replaceExistingInterface.physicalId.full = candidateInterfaces.collection[0].id.full;
				
				return {physicalId: valueDisplay.selectedItem, bound:boundCheckbox.selected};
			}
			
			override public function setFocus():void {
				valueDisplay.setFocus();
			}
			
			private function valueLabelFunction(value:Object):String {
				return IdnUrn.getNameFrom(value as String);
			}
			
		]]>
		</fx:Script>
	
	<s:HGroup height="100%" width="100%"
			  id="controlsGroup"
			  verticalAlign="middle"
			  paddingLeft="2">
		<s:CheckBox id="boundCheckbox"
					label="Bound to" />
		<s:DropDownList id="valueDisplay"
						dataProvider="{interfaces}"
						height="100%" width="100%"
						change="boundCheckbox.selected = true;"
						labelFunction="valueLabelFunction" />
	</s:HGroup>
	
</s:GridItemEditor>
