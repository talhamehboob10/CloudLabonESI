<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) 2008-2013 University of Utah and the Flux Group.

{{{GENIPUBLIC-LICENSE

GENI Public License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and/or hardware specification (the "Work") to
deal in the Work without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Work, and to permit persons to whom the Work
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Work.

THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
IN THE WORK.

}}}

-->

<areas1:AreaContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="com.flack.shared.display.components.*"
		  xmlns:display="com.flack.geni.display.*"
		  xmlns:areas="com.flack.geni.display.areas.*"
		  creationComplete="init()"
		  paddingBottom="2" xmlns:areas1="com.flack.shared.display.areas.*">
	<fx:Script>
		<![CDATA[
			import com.flack.geni.GeniCache;
			import com.flack.geni.resources.docs.GeniCredentialVersion;
			import com.flack.geni.resources.docs.GeniCredentialVersionCollection;
			import com.flack.geni.resources.sites.GeniManager;
			import com.flack.geni.resources.virt.extensions.stitching.StitchingLink;
			import com.flack.geni.resources.virt.extensions.stitching.StitchingNode;
			import com.flack.geni.resources.virt.extensions.stitching.StitchingPort;
			import com.flack.geni.tasks.groups.GetManagerTaskGroup;
			import com.flack.shared.FlackEvent;
			import com.flack.shared.SharedMain;
			import com.flack.shared.display.areas.DocumentArea;
			import com.flack.shared.display.areas.LogMessagesRelatedToArea;
			import com.flack.shared.display.skins.ButtonBarSkin;
			import com.flack.shared.resources.docs.RspecVersion;
			import com.flack.shared.resources.docs.RspecVersionCollection;
			import com.flack.shared.resources.sites.FlackManager;
			import com.flack.shared.tasks.TaskEvent;
			import com.flack.shared.tasks.file.FileTask;
			import com.flack.shared.utils.ColorUtil;
			import com.flack.shared.utils.ImageUtil;
			import com.flack.shared.utils.NetUtil;
			import com.flack.shared.utils.ViewUtil;
			
			import mx.collections.VectorCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			private var manager:GeniManager = null;
			
			[Bindable]
			private var nodeTypes:VectorCollection;
			[Bindable]
			private var linkTypes:VectorCollection;
			[Bindable]
			private var sharedVlans:VectorCollection;
			[Bindable]
			private var apiDetails:VectorCollection;
			
			[Bindable]
			private var stitchingNodes:VectorCollection;
			[Bindable]
			private var stitchingPorts:VectorCollection;
			[Bindable]
			private var stitchingLinks:VectorCollection;
			
			public function init():void
			{
				if(manager != null)
					load(manager);
				SharedMain.sharedDispatcher.addEventListener(FlackEvent.CHANGED_MANAGER, tryUpdate);
				SharedMain.tasker.addEventListener(TaskEvent.CHILD_FINISHED, updateManagerTasking);
				SharedMain.tasker.addEventListener(TaskEvent.CHILD_STARTED, updateManagerTasking);
			}
			
			public function updateManagerTasking(e:TaskEvent = null):void
			{
				if(manager != null)
				{
					var working:Boolean = SharedMain.tasker.tasks.AllNotFinished.getRelatedTo(manager).length > 0;
					if(!working && spinner.visible)
					{
						spinner.visible = false;
						spinner.stopSpin();
					}
					else if(working && !spinner.visible)
					{
						spinner.visible = true;
						spinner.startSpin();
					}
				}
			}
			
			public function tryUpdate(e:FlackEvent):void
			{
				if(manager != null && e.changedObject == manager)
					load(manager);
			}
			
			public function load(newManager:GeniManager):void
			{
				manager = newManager;
				title = manager.hrn;
				backgroundColor = ColorUtil.colorsDark[manager.colorIdx];
				titleColor = ColorUtil.colorsLight[manager.colorIdx];
				if(initialized)
				{
					switch(manager.Status)
					{
						case FlackManager.STATUS_FAILED:
							statusIcon.source = ImageUtil.flagRedIcon;
							statusIcon.toolTip = "Failed";
							break;
						case FlackManager.STATUS_INPROGRESS:
							statusIcon.source = ImageUtil.flagYellowIcon;
							statusIcon.toolTip = "In Progress";
							break;
						case FlackManager.STATUS_UNKOWN:
							statusIcon.source = ImageUtil.flagOrangeIcon;
							statusIcon.toolTip = "Unknown";
							break;
						case FlackManager.STATUS_VALID:
							statusIcon.source = ImageUtil.flagGreenIcon;
							statusIcon.toolTip = "Valid"
							break;
					}
					messageButton.visible = manager.errorDescription.length > 0;
					//resourcesGroup.visible = manager.advertisement != null;
					deleteCacheButton.visible = GeniCache.wasManagerManuallyAdded(manager);
					
					apiDetails = new VectorCollection(manager.apis.collection);
					apiDropdownlist.selectedItem = manager.api;
					typeLabel.text = GeniManager.typeToHumanReadable(manager.type);
					
					codeVersionLabel.text = manager.codeVersion;
					
					allocateLabel.text = GeniManager.allocateToHumanReadableString(manager.allocate);
					singleAllocationCheckbox.selected = manager.singleAllocation;
					
					nodesView.label = manager.nodes.length + " Node" + (manager.nodes.length != 1 ? "s" : "");
					linksView.label = manager.links.length + " Link" + (manager.nodes.length != 1 ? "s" : "");
					
					nodeTypes = new VectorCollection(manager.nodes.HardwareTypes.collection);
					linkTypes = new VectorCollection(manager.links.Types);
					sharedVlans = new VectorCollection(manager.sharedVlans);
					
					sliverTypesControl.load(manager.supportedSliverTypes.SliverTypes);
					
					var i:int;
					var type:String;
					
					credentialsAcceptedHgroup.removeAllElements();
					if(manager.credentialTypes.length == 0)
					{
						credentialsAcceptedHgroup.addElement(
							ViewUtil.getLabel("None specified")
						);
					}
					else
					{
						var credentialVersionsByType:Vector.<String> = manager.credentialTypes.Types;
						for each(type in credentialVersionsByType)
						{
							var credentialType:String = GeniCredentialVersion.typeToShort(type) + "v(";
							var credentialTypeVersions:GeniCredentialVersionCollection = manager.credentialTypes.getByType(type);
							for(i = 0; i < credentialTypeVersions.length; i++)
							{
								credentialType += credentialTypeVersions.collection[i].version;
								if(i < credentialTypeVersions.length-1)
									credentialType += ", "
							}
							credentialType += ")";
							credentialsAcceptedHgroup.addElement(ViewUtil.getLabel(credentialType));
						}
					}
					
					outputVersionsHgroup.removeAllElements();
					if(manager.outputRspecVersions.length == 0)
					{
						outputVersionsHgroup.addElement(
							ViewUtil.getLabel("None")
						);
					}
					else
					{
						var outputVersionsByType:Vector.<String> = manager.outputRspecVersions.Types;
						for each(type in outputVersionsByType)
						{
							var outputType:String = RspecVersion.typeToShort(type) + "v(";
							var outputTypeVersions:RspecVersionCollection = manager.outputRspecVersions.getByType(type);
							for(i = 0; i < outputTypeVersions.length; i++)
							{
								outputType += outputTypeVersions.collection[i].version;
								if(i < outputTypeVersions.length-1)
									outputType += ", "
							}
							outputType += ")";
							outputVersionsHgroup.addElement(ViewUtil.getLabel(outputType));
						}
					}
					
					inputVersionsHgroup.removeAllElements();
					if(manager.inputRspecVersions.length == 0)
					{
						inputVersionsHgroup.addElement(
							ViewUtil.getLabel("None")
						);
					}
					else
					{
						var inputVersionsByType:Vector.<String> = manager.inputRspecVersions.Types;
						for each(type in inputVersionsByType)
						{
							var inputType:String = RspecVersion.typeToShort(type) + "v(";
							var inputTypeVersions:RspecVersionCollection = manager.inputRspecVersions.getByType(type);
							for(i = 0; i < inputTypeVersions.length; i++)
							{
								inputType += inputTypeVersions.collection[i].version;
								if(i < inputTypeVersions.length-1)
									inputType += ", "
							}
							inputType += ")";
							inputVersionsHgroup.addElement(ViewUtil.getLabel(inputType));
						}
					}
					updateManagerTasking();
				}
			}
			
			public function saveAdvertisement(event:MouseEvent):void
			{
				var saveTask:FileTask = new FileTask(manager.advertisement.document);
				saveTask.fileName = manager.hrn + ".rspec";
				saveTask.startOperation(event);
			}
			
			public function viewLinks():void
			{
				var linksArea:PhysicalLinkCollectionArea = new PhysicalLinkCollectionArea();
				linksArea.Links = manager.links;
				openNext(linksArea);
			}
			
			public function viewNodes():void
			{
				var nodesArea:PhysicalNodeCollectionArea = new PhysicalNodeCollectionArea();
				nodesArea.Nodes = manager.nodes;
				openNext(nodesArea);
			}
			
			public function viewRspec():void
			{
				var rspecArea:DocumentArea = new DocumentArea();
				rspecArea.Document = manager.advertisement.document;
				rspecArea.title = "Advertisement for " + manager.hrn;
				rspecArea.backgroundColor = backgroundColor;
				rspecArea.titleColor = titleColor;
				openNext(rspecArea);
			}
			
			public function viewLogs():void
			{
				var logArea:LogMessagesRelatedToArea = new LogMessagesRelatedToArea();
				logArea.RelatedTo = [manager];
				logArea.title = "Logs for " + manager.hrn;
				logArea.backgroundColor = backgroundColor;
				logArea.titleColor = titleColor;
				openNext(logArea);
			}
			
			public function reloadMe():void
			{
				if(SharedMain.tasker.tasks.getOfClass(GetManagerTaskGroup).getRelatedTo(manager).length > 0)
				{
					Alert.show("There is already a task running or pending to load " + manager.hrn);
					return;
				}
				var reloadTask:GetManagerTaskGroup = new GetManagerTaskGroup(manager);
				reloadTask.forceRunNow = true;
				SharedMain.tasker.add(reloadTask)
			}
			
			protected function apiDropdownlist_changeHandler(event:IndexChangeEvent):void
			{
				applyApiButton.enabled = !manager.api.equals(apiDropdownlist.selectedItem);
			}
			
			protected function applyApiButton_clickHandler(event:MouseEvent):void
			{
				manager.setApi(apiDropdownlist.selectedItem);
				
				var getManagerTask:GetManagerTaskGroup = new GetManagerTaskGroup(manager);
				getManagerTask.forceRunNow = true;
				SharedMain.tasker.add(getManagerTask);
			}
			
			protected function stitchingView_creationCompleteHandler(event:FlexEvent):void
			{
				if(manager.stitching != null && manager.stitching.aggregates.length == 1) {
					stitchingAggregateModeLabel.text = manager.stitching.aggregates.collection[0].stitchingMode;
					stitchingAggregateNegotiatedServicesCheckbox.selected = manager.stitching.aggregates.collection[0].negotiatedServices;
					stitchingAggregateScheduledServicesCheckbox.selected = manager.stitching.aggregates.collection[0].scheduledServices;
					stitchingAggregateTypeLabel.text = manager.stitching.aggregates.collection[0].aggregateType;
					stitchingNodes = new VectorCollection(manager.stitching.aggregates.collection[0].nodes.collection);
				} else {
					stitchingAggregateModeLabel.text = "";
					stitchingAggregateNegotiatedServicesCheckbox.selected = false;
					stitchingAggregateScheduledServicesCheckbox.selected = false;
					stitchingAggregateTypeLabel.text = "";
					stitchingNodes = new VectorCollection();
					stitchingPorts = new VectorCollection();
					stitchingLinks = new VectorCollection();
				}
			}
			
			protected function stitchingItem_labelFunction(item:Object):String {
				return item.id.name;
			}
			
			protected function stitchingNodesList_valueCommitHandler(event:FlexEvent):void
			{
				var stitchingNode:StitchingNode = stitchingNodesList.selectedItem;
				if(stitchingNode == null) {
					stitchingPorts = new VectorCollection();
				} else {
					stitchingPorts = new VectorCollection(stitchingNode.ports.collection);
				}
			}
			
			protected function stitchingPortsList_valueCommitHandler(event:FlexEvent):void
			{
				var stitchingPort:StitchingPort = stitchingPortsList.selectedItem;
				if(stitchingPort == null) {
					stitchingLinks = new VectorCollection();
				} else {
					stitchingLinks = new VectorCollection(stitchingPort.links.collection);
				}
			}
			
		]]>
	</fx:Script>
	
	<s:Group width="100%">
		<s:Rect width="100%" height="100%">
			<s:fill><s:SolidColor color="{backgroundColor}" /></s:fill>
		</s:Rect>
		
		<s:HGroup width="100%"
				  verticalAlign="middle"
				  paddingLeft="4"
				  paddingRight="2"
				  paddingTop="2"
				  paddingBottom="2"
				  gap="2">
			<s:Image id="statusIcon" />
			<s:Label text="{title}"
					 color="{titleColor}"
					 toolTip="{manager.id.full}"
					 fontSize="17"
					 fontWeight="bold"
					 width="100%"
					 id="hrnLabel" />
			<components:Spinner id="spinner"
								width="21"
								height="21"
								x="{(width / 2) - (spinner.width / 2)}"
								y="{(height / 2) - (spinner.height / 2)}"
								visible="false" includeInLayout="{spinner.visible}" />
			<s:Button id="deleteCacheButton"
					  icon="{ImageUtil.deleteIcon}"
					  label="Remove"
					  includeInLayout="{deleteCacheButton.visible}"
					  toolTip="Remove this manually added manager from cache"
					  click="GeniCache.removeManuallyAddedManager(manager); Alert.show('Manager removed from cache', 'Deleted')" />
			<s:Button id="refreshButton"
					  icon="{ImageUtil.refreshIcon}"
					  label="Reload"
					  toolTip="Reload all data for the manager"
					  click="reloadMe()" />
			<s:Button id="urlButton"
					  icon="{ImageUtil.worldIcon}"
					  toolTip="Visit {manager.Hostname}"
					  label="Visit"
					  click="NetUtil.openWebsite(manager.Hostname)" />
			<s:Button id="consoleButton"
					  icon="{ImageUtil.consoleIcon}"
					  label="Logs"
					  toolTip="View log messages in the console"
					  click="viewLogs()" />
			<s:Button id="messageButton"
					  icon="{ImageUtil.flagRedIcon}"
					  includeInLayout="{messageButton.visible}"
					  label="Error!"
					  toolTip="{manager.errorMessage}"
					  click="Alert.show('Message: ' + manager.errorMessage + '\nDescription: ' + manager.errorDescription)" />
			<components:ImageButton id="dockIcon"
									icon="{ImageUtil.windowIcon}"
									toolTip="Pop out to a window or in to the main window"
									click="host.Docked ? popOut() : dock()" />
			<components:ImageButton id="closeIcon"
									icon="{ImageUtil.crossIcon}"
									toolTip="Close"
									click="close()" />
		</s:HGroup>
	</s:Group>
	
	
	<s:VGroup paddingLeft="2"
			  paddingRight="2"
			  gap="2"
			  width="100%"
			  height="100%">
		<s:HGroup width="100%"
				  gap="2">
			<s:VGroup width="100%"
					  height="100%"
					  gap="2">
				<s:HGroup gap="2"
						  verticalAlign="middle">
					<s:Label text="Framework:"
							 fontWeight="bold" />
					<s:Label id="typeLabel" />
					<s:Label text="API:"
							 fontWeight="bold" />
					<s:DropDownList id="apiDropdownlist" width="200"
									dataProvider="{apiDetails}"
									labelField="ReadableString"
									change="apiDropdownlist_changeHandler(event)" />
					<components:ImageButton id="applyApiButton"
											icon="{ImageUtil.actionIcon}" enabled="false"
											click="applyApiButton_clickHandler(event)" />
				</s:HGroup>
				<s:HGroup gap="2">
					<s:Label text="Code Version:"
							 fontWeight="bold" />
					<s:Label id="codeVersionLabel" />
				</s:HGroup>
				<s:HGroup gap="2">
					<s:Label text="Advertises:"
							 fontWeight="bold" />
					<s:HGroup id="outputVersionsHgroup" />
					<s:Label text="Accepts:"
							 fontWeight="bold" />
					<s:HGroup id="inputVersionsHgroup" />
				</s:HGroup>
				<s:HGroup gap="2">
					<s:Label text="Credentials Accepted:"
							 fontWeight="bold" />
					<s:HGroup id="credentialsAcceptedHgroup" />
				</s:HGroup>
				<s:HGroup gap="2" verticalAlign="middle">
					<s:Label text="Allocate:"
							 fontWeight="bold" />
					<s:Label id="allocateLabel" />
					<s:CheckBox id="singleAllocationCheckbox"
								enabled="false"
								label="Single Allocation" />
				</s:HGroup>
			</s:VGroup>
			<s:VGroup height="100%"
					  gap="2">
				<s:Label text="RSPEC"
						 fontWeight="bold" />
				<s:Button id="rpsecViewButton"
						  width="100%"
						  icon="{ImageUtil.advertisementIcon}"
						  label="View"
						  click="viewRspec()" />
				<s:Button id="rpsecSaveButton"
						  icon="{ImageUtil.saveIcon}"
						  label="Save to file"
						  click="saveAdvertisement(event)" />
			</s:VGroup>
		</s:HGroup>
		
		<s:ButtonBar dataProvider="{componentsViewstack}"
					 requireSelection="true"
					 skinClass="com.flack.shared.display.skins.ButtonBarSkin"
					 width="100%" />
		<mx:ViewStack id="componentsViewstack"
					  width="100%"
					  height="100%"
					  paddingTop="4">
			<s:NavigatorContent id="nodesView"
								width="100%"
								height="100%"
								label="Nodes"
								toolTip="Nodes">
				
				<s:VGroup width="100%"
						  height="100%"
						  gap="2"
						  paddingLeft="2"
						  paddingRight="2">
					<s:HGroup width="100%"
							  height="100%"
							  gap="2">
						<s:VGroup height="100%"
								  gap="2">
							<s:Button id="nodesButton"
									  label="View all ({manager.nodes.Available.length} Available)"
									  enabled="{manager.nodes.length > 0}"
									  click="viewNodes()" />
							<s:Label text="Types"
									 fontWeight="bold" />
							<s:List id="nodeTypesList"
									dataProvider="{nodeTypes}"
									labelField="name"
									height="100%" />
						</s:VGroup>
					</s:HGroup>
					<display:SliverTypesControl id="sliverTypesControl" />
				</s:VGroup>
			</s:NavigatorContent>
			<s:NavigatorContent id="linksView"
								width="100%"
								height="100%"
								label="Links"
								toolTip="Links">
				<s:VGroup width="100%"
						  height="100%"
						  gap="2"
						  paddingLeft="2"
						  paddingRight="2">
					<s:Button id="linksButton"
							  label="View all"
							  click="viewLinks()" />
					<s:Label text="Types"
							 fontWeight="bold" />
					<s:List id="linkTypesList"
							dataProvider="{linkTypes}"
							height="66%" />
					<s:Label text="Shared VLANs"
							 fontWeight="bold" />
					<s:List id="sharedVlansList"
							dataProvider="{sharedVlans}"
							height="33%" />
				</s:VGroup>
			</s:NavigatorContent>
			<s:NavigatorContent id="stitchingView"
								width="100%"
								height="100%"
								label="Stitching"
								toolTip="Stitching">
				<s:VGroup width="100%"
						  height="100%"
						  gap="2"
						  paddingLeft="2"
						  paddingRight="2"
						  creationComplete="stitchingView_creationCompleteHandler(event)">
					<s:Label text="Type"
							 fontWeight="bold" />
					<s:Label id="stitchingAggregateTypeLabel" />
					<s:Label text="Mode"
							 fontWeight="bold" />
					<s:Label id="stitchingAggregateModeLabel" />
					<s:CheckBox id="stitchingAggregateScheduledServicesCheckbox"
								label="Scheduled services"
								enabled="false"
								fontWeight="bold" />
					<s:CheckBox id="stitchingAggregateNegotiatedServicesCheckbox"
								label="Negotiated services"
								enabled="false"
								fontWeight="bold" />
					<s:HGroup height="100%" width="100%">
						<s:VGroup height="100%" width="33%">
							<s:Label text="Nodes"
									 fontWeight="bold" />
							<s:List id="stitchingNodesList"
									dataProvider="{stitchingNodes}"
									height="100%"
									width="100%"
									labelFunction="stitchingItem_labelFunction"
									valueCommit="stitchingNodesList_valueCommitHandler(event)" />
						</s:VGroup>
						<s:VGroup height="100%" width="33%">
							<s:Label text="Ports"
									 fontWeight="bold" />
							<s:List id="stitchingPortsList"
									dataProvider="{stitchingPorts}"
									height="100%"
									width="100%"
									labelFunction="stitchingItem_labelFunction"
									valueCommit="stitchingPortsList_valueCommitHandler(event)" />
						</s:VGroup>
						<s:VGroup height="100%" width="33%">
							<s:Label text="Links"
									 fontWeight="bold" />
							<s:List id="stitchingLinksList"
									dataProvider="{stitchingLinks}"
									height="100%"
									width="100%"
									labelFunction="stitchingItem_labelFunction" />
						</s:VGroup>
					</s:HGroup>
				</s:VGroup>
			</s:NavigatorContent>
		</mx:ViewStack>
	</s:VGroup>
	
</areas1:AreaContent>
