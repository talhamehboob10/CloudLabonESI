<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) 2008-2013 University of Utah and the Flux Group.

{{{GENIPUBLIC-LICENSE

GENI Public License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and/or hardware specification (the "Work") to
deal in the Work without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Work, and to permit persons to whom the Work
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Work.

THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
IN THE WORK.

}}}

-->

<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="com.flack.shared.display.components.*"
		  width="100%"
		  gap="2"
		  creationComplete="reset()">
	<fx:Script>
		<![CDATA[
			import com.flack.geni.display.DisplayUtil;
			import com.flack.geni.plugins.emulab.RawPcSliverType;
			import com.flack.geni.plugins.emulab.EmulabXenSliverType;
			import com.flack.geni.resources.SliverTypes;
			import com.flack.geni.resources.sites.GeniManager;
			import com.flack.geni.resources.sites.managers.SupportedSliverType;
			import com.flack.geni.resources.sites.managers.SupportedSliverTypeCollection;
			import com.flack.geni.resources.virt.VirtualNode;
			import com.flack.shared.display.components.DataButton;
			import com.flack.shared.display.components.ImageButton;
			import com.flack.shared.utils.ColorUtil;
			import com.flack.shared.utils.ImageUtil;
			
			public var host:ManagersVirtualPane;
			
			public var manager:GeniManager;
			public var managerTypes:SupportedSliverTypeCollection;
			public var viewingSliverType:String;
			
			public function reset():void
			{
				viewingSliverType = "";
				while(basicGroup.numElements > 1)
					basicGroup.removeElementAt(0);
				visible = true;
				includeInLayout = true;
				
				var managerButton:DataButton = DisplayUtil.getGeniManagerButton(manager, false);
				managerButton.addEventListener(MouseEvent.CLICK, managerClicked);
				managerButton.percentWidth = 100;
				basicGroup.addElementAt(managerButton, 0);
				
				managerTypes = manager.supportedSliverTypes.Unbound;
				
				var addRawButton:DataButton = new DataButton(
					"PC",
					"Add a raw node",
					null,
					null,
					"virtualNode"
				);
				if(managerTypes.getByName(RawPcSliverType.TYPE_RAWPC_V1) != null ||
					managerTypes.getByName(RawPcSliverType.TYPE_RAWPC_V2) != null)
				{
					var raw:VirtualNode = new VirtualNode(
						null,
						manager,
						"PC",
						true,
						RawPcSliverType.TYPE_RAWPC_V2
					);
					managerTypes.remove(managerTypes.getByName(RawPcSliverType.TYPE_RAWPC_V1));
					managerTypes.remove(managerTypes.getByName(RawPcSliverType.TYPE_RAWPC_V2));
					addRawButton.setStyle("chromeColor", ColorUtil.colorsDark[manager.colorIdx]);
					addRawButton.setStyle("color", ColorUtil.colorsLight[manager.colorIdx]);
					addRawButton.data = raw;
					addRawButton.addEventListener(MouseEvent.CLICK, addVirtualNode);
				}
				else
					addRawButton.visible = false; // include in the layout
				basicGroup.addElementAt(addRawButton, 1);
				
				var addVmSharedButton:DataButton = new DataButton(
					"VM",
					"Add a shared virtual node",
					null,
					null,
					"virtualNode"
				);
				if(managerTypes.Shared.length > 0)
				{
					var sharedTypes : SupportedSliverTypeCollection = managerTypes.Shared;
					var defaultType : SupportedSliverType = null;
					if (defaultType == null)
					{
						defaultType = sharedTypes.getByName('emulab-openvz');
					}
					if (defaultType == null)
					{
						defaultType = sharedTypes.getByName('emulab-xen');
					}
					if (defaultType == null)
					{
						defaultType = sharedTypes.getByName('XOSmall');
					}
					if (defaultType == null)
					{
						defaultType = sharedTypes.collection[0];
					}
					var sharedVm:VirtualNode = new VirtualNode(
						null,
						manager,
						"VM",
						false,
						defaultType.type.name
					);
					managerTypes.remove(managerTypes.getByName(sharedVm.sliverType.name));
					addVmSharedButton.setStyle("chromeColor", ColorUtil.colorsDark[manager.colorIdx]);
					addVmSharedButton.setStyle("color", ColorUtil.colorsLight[manager.colorIdx]);
					addVmSharedButton.data = sharedVm;
					addVmSharedButton.addEventListener(MouseEvent.CLICK, addVirtualNode);
				}
				else
					addVmSharedButton.visible = false; // include in the layout
				basicGroup.addElementAt(addVmSharedButton, 2);
				
				extraButton.visible = managerTypes.length > 0;
			}
			
			public function setTo(sliverTypeName:String):void
			{
				var supportedType:SupportedSliverType = manager.supportedSliverTypes.getByName(sliverTypeName);
				viewingSliverType = sliverTypeName;
				if(supportedType == null)
				{
					visible = false;
					includeInLayout = false;
				}
				else
				{
					visible = true;
					includeInLayout = true;
					
					while(basicGroup.numElements > 1)
						basicGroup.removeElementAt(0);
					
					var managerButton:DataButton = DisplayUtil.getGeniManagerButton(manager, false);
					managerButton.addEventListener(MouseEvent.CLICK, managerClicked);
					managerButton.percentWidth = 100;
					basicGroup.addElementAt(managerButton, 0);
					
					if(supportedType.supportsUnbound)
					{
						var sliverTypeButton:DataButton = new DataButton(
							sliverTypeName,
							"Add an unbound "+sliverTypeName+" node",
							null,
							null,
							"virtualNode");
						sliverTypeButton.setStyle("chromeColor", ColorUtil.colorsDark[manager.colorIdx]);
						sliverTypeButton.setStyle("color", ColorUtil.colorsLight[manager.colorIdx]);
						sliverTypeButton.alpha = 0.8;
						var name:String = sliverTypeName;
						if (name == "emulab-xen") {
						  name = "xen";
						} else if (name == "emulab-openvz") {
						  name = "ovz";
						}
						name = "node"
						sliverTypeButton.data = new VirtualNode(null, manager, name, true, sliverTypeName);
						sliverTypeButton.addEventListener(MouseEvent.CLICK, addVirtualNode);
						basicGroup.addElementAt(sliverTypeButton, 1);
					}
					
					managerTypes = manager.supportedSliverTypes.Unbound;
					managerTypes.remove(managerTypes.getByName(sliverTypeName));
					
					extraButton.visible = managerTypes.length > 0;
				}
			}
			
			public function toggleExtra(e:MouseEvent):void
			{
				if(currentState != "basicWithExtra")
					showExtra();
				else
					hideExtra();
			}
			
			public function showExtra():void
			{
				currentState = "basicWithExtra";
				if(extraGroup.numElements == 0)
				{
					for each(var supportedType:SupportedSliverType in managerTypes.collection)
					{
						var addExtraButton:DataButton = new DataButton(
							supportedType.type.name,
							"Add an unbound "+supportedType.type.name+" node",
							null,
							null,
							"virtualNode");
						addExtraButton.setStyle("chromeColor", ColorUtil.colorsDark[manager.colorIdx]);
						addExtraButton.setStyle("color", ColorUtil.colorsLight[manager.colorIdx]);
						addExtraButton.alpha = 0.8;
						var name:String = supportedType.type.name;
						if (name == "emulab-xen") {
						  name = "xen";
						} else if (name == "emulab-openvz") {
						  name = "ovz";
						}
						addExtraButton.data = new VirtualNode(
							null,
							manager,
							name,
							supportedType.defaultExclusiveSetting,
							supportedType.type.name);
						addExtraButton.addEventListener(MouseEvent.CLICK, addVirtualNode);
						extraGroup.addElement(addExtraButton);
					}
				}
			}
			
			public function hideExtra():void
			{
				currentState = "default";
			}
			
			public function addVirtualNode(e:MouseEvent):void
			{
				host.host.ComponentsArea.addCloneOf(e.currentTarget.data);
			}
			
			public function managerClicked(e:MouseEvent):void
			{
				if(host != null)
					host.setView(ManagersVirtualPane.VIEW_MANAGER, manager);
				else
					DisplayUtil.viewManager(manager);
			}
		]]>
	</fx:Script>
	<s:states>
		<s:State name="default" />
		<s:State name="basicWithExtra" />
	</s:states>
	<s:transitions>
		<s:Transition fromState="*" toState="*">
			<s:Parallel>
				<s:Fade duration="200" target="{extraGroup}" />
			</s:Parallel>
		</s:Transition>
	</s:transitions>
	<s:HGroup id="basicGroup" width="100%" gap="2">
		<components:ImageButton id="extraButton"
								icon.default="{ImageUtil.downIcon}"
								icon.basicWithExtra="{ImageUtil.upIcon}"
								toolTip="Toggle view of extra resource types"
								click="toggleExtra(event)"
								visible="false" />
	</s:HGroup>
	<s:VGroup id="extraGroup"
			  width="100%"
			  paddingLeft="8"
			  paddingRight="24"
			  gap="2"
			  horizontalAlign="right"
			  includeIn="basicWithExtra" />
</s:VGroup>
