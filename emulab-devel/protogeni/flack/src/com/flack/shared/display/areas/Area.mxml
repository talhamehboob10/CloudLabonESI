<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) 2008-2013 University of Utah and the Flux Group.

{{{GENIPUBLIC-LICENSE

GENI Public License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and/or hardware specification (the "Work") to
deal in the Work without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Work, and to permit persons to whom the Work
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Work.

THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
IN THE WORK.

}}}

-->

<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="com.flack.shared.display.components.*"
		  xmlns:display="com.flack.geni.display.*"
		  xmlns:areas="com.flack.geni.display.areas.*"
		  width="100%"
		  height="100%"
		  gap="0"
		  creationComplete="init()">
	<fx:Script>
		<![CDATA[
			import com.flack.shared.display.windows.DefaultWindow;
			
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.IVisualElement;
			import mx.events.CloseEvent;
			
			public var window:DefaultWindow = null;
			
			public var host:Area = null;
			public var childArea:Area = null;
			
			public function get Docked():Boolean
			{
				return window == null;
			}
			
			private var rootContent:AreaContent;
			public function set Root(value:AreaContent):void
			{
				rootContent = value;
				if(contentArea != null)
					load(rootContent);
			}
			public function get Root():AreaContent
			{
				return rootContent;
			}
			
			private function init():void
			{
				if(rootContent != null && contentArea.numElements == 0)
					load(rootContent);
			}
			
			public function clear(includingContent:Boolean = true, afterSuccess:Function = null, afterSuccessArg:* = null):void
			{
				var clearArgs:Object =
					{
						includingContent: includingContent,
						afterSuccess: afterSuccess,
						afterSuccessArg: afterSuccessArg
					};
				if(includingContent)
				{
					if(contentArea.numElements == 1)
					{
						Content.confirmCanCloseAnd(
							finishClear,
							clearArgs
						);
						return;
					}
				}
				finishClear(clearArgs);
			}
			private function finishClear(args:Object):void
			{
				backwardHistoryGroup.removeAllElements();
				forwardHistoryGroup.removeAllElements();
				if(args.includingContent)
					contentArea.removeAllElements();
				if(args.afterSuccess != null)
					args.afterSuccess(args.afterSuccessArg);
			}
			
			/*
			private function reset():void
			{
				clear();
				if(rootContent != null)
					load(rootContent);
			}
			*/
			
			public function get Content():AreaContent
			{
				if(contentArea.numElements == 1)
					return contentArea.getElementAt(0) as AreaContent;
				else
					return null;
			}
			
			public function load(content:AreaContent):void
			{
				if(content == null)
					return;
				
				clear(true, finishLoading, content);
			}
			private function finishLoading(content:AreaContent):void
			{
				if(rootContent != null)
				{
					if(content != rootContent)
						addBackwards(rootContent);
				}
				
				content.host = this;
				//contentArea.removeAllElements();
				contentArea.addElement(content);
			}
			
			public function addBackwards(contentItem:AreaContent):void
			{
				var newHistoryItem:AreaHistoryItem = new AreaHistoryItem();
				newHistoryItem.setBack();
				newHistoryItem.ContentItem = contentItem;
				backwardHistoryGroup.addElement(newHistoryItem);
			}
			
			public function addForwards(contentItem:AreaContent):void
			{
				var newHistoryItem:AreaHistoryItem = new AreaHistoryItem();
				newHistoryItem.setForward();
				newHistoryItem.ContentItem = contentItem;
				forwardHistoryGroup.addElementAt(newHistoryItem, 0);
			}
			
			public function loadNext(content:AreaContent):void
			{
				if(content == null)
					return;
				
				// See if the forward history has pending changes
				for(var i:int = 0; i < forwardHistoryGroup.numElements; i++)
				{
					var forwardHistoryItem:AreaHistoryItem = forwardHistoryGroup.getElementAt(i) as AreaHistoryItem;
					if(forwardHistoryItem.ContentItem.PendingChanges)
					{
						Alert.show(
							"'" + forwardHistoryItem.ContentItem.title + "' has pending changes. Continue to load '" + content.title + "' and lose changes?",
							"Continue and lose changes?",
							Alert.YES|Alert.CANCEL,
							FlexGlobals.topLevelApplication as Sprite,
							function checkContinue(e:CloseEvent):void
							{
								if(e.detail == Alert.YES)
									performLoadNext(content);
							}
						);
						return;
					}
				}
				
				performLoadNext(content);
			}
			
			private function performLoadNext(content:AreaContent):void
			{
				if(contentArea.numElements == 1)
				{
					addBackwards(contentArea.getElementAt(0) as AreaContent);
					contentArea.removeAllElements();
				}
				
				content.host = this;
				forwardHistoryGroup.removeAllElements();
				contentArea.addElement(content);
			}
			
			public function closeContent():void
			{
				// Nowhere to go
				if(backwardHistoryGroup.numElements == 0)
				{
					if(window != null)
						window.closeWindow();
					else if(host != null)
						host.closeContent();
				}
				else
				{
					//moveTo(backwardHistoryGroup.getElementAt(backwardHistoryGroup.numElements-1) as AreaHistoryItem);
					contentArea.removeAllElements();
					forwardHistoryGroup.removeAllElements();
					moveTo(backwardHistoryGroup.getElementAt(backwardHistoryGroup.numElements-1) as AreaHistoryItem);
				}
			}
			
			public function moveTo(historyItem:AreaHistoryItem):void
			{
				// Do it!
				var removedItem:IVisualElement;
				if(backwardHistoryGroup.contains(historyItem))
				{
					if(contentArea.numElements == 1)
						addForwards(contentArea.removeElementAt(0) as AreaContent);
					
					while(true)
					{
						removedItem = backwardHistoryGroup.removeElementAt(backwardHistoryGroup.numElements-1);
						if(removedItem != historyItem)
						{
							(removedItem as AreaHistoryItem).setForward();
							forwardHistoryGroup.addElementAt(removedItem, 0);
						}
						else
							break;
					}
				}
				else
				{
					if(contentArea.numElements == 1)
						addBackwards(contentArea.removeElementAt(0) as AreaContent);
					
					while(true)
					{
						removedItem = forwardHistoryGroup.removeElementAt(0);
						if(removedItem != historyItem)
						{
							(removedItem as AreaHistoryItem).setBack();
							backwardHistoryGroup.addElement(removedItem);
						}
						else
							break;
					}
				}
				
				contentArea.addElement((removedItem as AreaHistoryItem).ContentItem);
			}
			
			public function popOutContent():void
			{
				if(Docked && contentArea.numElements > 0)
				{
					var area:Area = new Area();
					var window:DefaultWindow = new DefaultWindow();
					var topArea:Area = this;
					while(topArea.host != null)
						topArea = topArea.host;
					
					if(host == null)
					{
						area.Root = contentArea.removeElementAt(0) as AreaContent;
						window.title = area.Root.title;
					}
					else
					{
						area.Root = host.Content;
						window.title = host.Content.title;
					}
					area.window = window;
					window.addElement(area);
					window.showWindow();
					
					while(topArea.forwardHistoryGroup.numElements != 0)
						area.forwardHistoryGroup.addElement(topArea.forwardHistoryGroup.removeElementAt(0));
					
					if(topArea.backwardHistoryGroup.numElements > 0)
						topArea.moveTo(topArea.backwardHistoryGroup.getElementAt(topArea.backwardHistoryGroup.numElements-1) as AreaHistoryItem);
					else
						clear();
				}
				
			}
			
			public function dockContent():void
			{
				if(!Docked && contentArea.numElements > 0)
				{
					var content:AreaContent;
					if(host == null)
						content = contentArea.removeElementAt(0) as AreaContent;
					else
					{
						host.window = null;
						content = host.Content;
					}
					
					FlexGlobals.topLevelApplication.contentAreaGroup.loadNext(content);
					window.closeWindow();
					window = null;
				}
			}
			
		]]>
	</fx:Script>
	
	<s:HGroup id="backwardHistoryGroup"
			  gap="0"
			  height="100%" />
	
	<s:Group id="contentArea" width="100%" height="100%" />
	
	<s:HGroup id="forwardHistoryGroup"
			  gap="0"
			  height="100%" />
	
</s:HGroup>
