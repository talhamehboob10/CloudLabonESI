#!/usr/bin/perl -w
#
# Copyright (c) 2000-2021 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
#
package scopus;

use English;
use strict;
use Exporter;
use vars qw(@ISA);
@ISA = qw(Exporter);

use Data::Dumper;
use JSON;
use Text::CSV qw(csv);
use LWP::UserAgent;
use HTTP::Request;
use HTML::Entities;
use URI::Encode qw(uri_encode uri_decode);

#
# Configure variables
#
my $TB		     = "@prefix@";

#
# Scopus 
#
my $DEVURL	= "https://api.elsevier.com/content/";
my $APIKEY	= "22d9af508ab9a74a069ae690083a0685";

# Load the Testbed support stuff.
use lib "@prefix@/lib";
use emutil;
use emdb;

#
# Retrieve something from scopus.
#
sub Retrieve($$)
{
    my ($which, $id) = @_;
    my $view = "STANDARD";

    # Must Throttle
    sleep(2);
    
    my $url = $DEVURL;
    if ($which eq "author") {
	$url .= "author/author_id/$id";
	$view = "DOCUMENTS";
    }
    elsif ($which eq "affiliation") {
	$url .= "affiliation/affiliation_id/$id";
    }
    elsif ($which eq "paper" || $which eq "abstract") {
	if ($id =~ /^\d+$/) {
	    $url .= "abstract/scopus_id/$id";
	}
	else {
	    $url .= "abstract/eid/$id";
	}
	$view = "FULL";
    }
    else {
	die("Do not know how to retrieve $which\n");
    }
    $url .= "?view=$view";
    
    #print STDERR "$url\n";
    
    my $ua  = LWP::UserAgent->new;
    my $req = HTTP::Request->new(GET => $url);

    # Some of the files are big and they seem to come slowly.
    $ua->timeout(90);
    $req->protocol('HTTP/1.0');
    $req->header("X-ELS-APIKey" => $APIKEY);
    $req->header("User-Agent"   => "flux-elsapy-perl");
    $req->header("Accept"       => "application/json");

    my $response;
    eval {
	$response = $ua->request($req);
    };
    if ($@) {
	print STDERR "$@";
	return undef;
    }
    if ($response->is_success) {
	my $json = $response->decoded_content;
	my $result = eval { decode_json($response->decoded_content); };
	if ($@) {
	    print STDERR "Failed to json decode blob: $@\n";
	    return undef;
	}
	return ($json, $result);
    }
    my $code = $response->code();
    my $message = $response->message();
    print STDERR "Retrieve failed:$code $message\n";
    print STDERR $response->as_string() . "\n";
    
    return undef;
}

#
# To search, you specify an index (scopus,author,affiliation,etc) and a
# search term. For example:
#
#   authlast(stoller) AND authfirst(Leigh) and affil(University of Utah)
#
# And you get back a (hopefully short) list of matches.
#
sub Search($$)
{
    my ($which, $query) = @_;
    my $index;

    # Must Throttle
    sleep(2);

    if ($which eq "author") {
	$index = "author";
    }
    elsif ($which eq "affiliation") {
	$index = "affiliation";
    }
    elsif ($which eq "paper") {
	$index = "scopus";
    }
    else {
	die("Do not know how to search $which\n");
    }

    if (0) {
    # Stuff like &oacute; does not work, so convert to their ascii equiv
    # Only some things can be directly converted, but only a few are needed.
    my %convert = (
	"slash" => 1,
	"uml"   => 1,
	"ring"  => 1,
	"elig"  => 0,
        "tilde" => 1,
        "grave" => 1,
	"circ"  => 1,
	"acute" => 1,
        "cedil" => 1,
	);
    foreach my $str (keys(%convert)) {
	my $keep = $convert{$str};

	if ($keep) {
	    $query =~ s/\&(\w)$str\;/\?/g;
	}
	else {
	    $query =~ s/\&(\w)$str\;//g;
	}
    }
    }
    else {
	$query = decode_entities($query);
    }
    $query =~ s/\'/\\\'/g;
    #print "$query\n";
    
    my $url = $DEVURL . "search/$index" . "?count=200".
	"&query=" . uri_encode($query, { encode_reserved => 1 });
    #print "$url\n";
    
    my $ua  = LWP::UserAgent->new;
    my $req = HTTP::Request->new(GET => $url);

    $ua->timeout(30);
    $req->protocol('HTTP/1.0');
    $req->header("X-ELS-APIKey" => $APIKEY);
    $req->header("User-Agent"   => "flux-elsapy-perl");
    $req->header("Accept"       => "application/json");

    my $response;
    eval {
	$response = $ua->request($req);
    };
    if ($@) {
	print STDERR "$@";
	return undef;
    }
    if ($response->is_success) {
	my $json = $response->decoded_content;
	my $result = eval { decode_json($response->decoded_content); };
	if ($@) {
	    print STDERR "Failed to json decode blob: $@\n";
	    return undef;
	}
	return ($json, $result);
    }
    my $code = $response->code();
    my $message = $response->message();
    print STDERR "Search failed:$code $message\n";
    print "$query\n";
    #print STDERR $response->as_string() . "\n";
    
    return undef;
}

#
# Raw get,
#
sub Get($;$)
{
    my ($url, $asjson) = @_;
    $asjson = 0 if (!defined($asjson));

    # Must Throttle
    sleep(1);
    #print "$url\n";
    
    my $ua  = LWP::UserAgent->new;
    my $req = HTTP::Request->new(GET => $url);

    $ua->timeout(30);
    $req->protocol('HTTP/1.0');
    $req->header("X-ELS-APIKey" => $APIKEY);
    $req->header("User-Agent"   => "flux-elsapy-perl");
    $req->header("Accept"       => "application/json");

    my $response;
    eval {
	$response = $ua->request($req);
    };
    if ($@) {
	print STDERR "$@";
	return undef;
    }
    if ($response->is_success) {
	if ($asjson) {
	    return $response->decoded_content;
	}
	my $result = eval { decode_json($response->decoded_content); };
	if ($@) {
	    print STDERR "Failed to json decode blob: $@\n";
	    return undef;
	}
	return $result;
    }
    my $code = $response->code();
    my $message = $response->message();
    print STDERR "Get failed:$code $message\n";
    #print STDERR $response->as_string() . "\n";
    
    return undef;
}

#
# Retrieve all of the search results as a list.
#
sub SearchResults($)
{
    my ($ref)  = @_;
    my $total  = $ref->{'search-results'}->{'opensearch:totalResults'};
    my @result = @{$ref->{'search-results'}->{'entry'}};

    while (scalar(@result) < $total) {
	#
	# Grab the next chunk.
	#
	my $url;
	my $link = $ref->{'search-results'}->{'link'};
	foreach my $l (@$link) {
	    if ($l->{'@ref'} eq "next") {
		$url = $l->{'@href'};
		last;
	    }
	}
	if (!defined($url)) {
	    print STDERR "No next link!\n";
	    return undef;
	}
	$ref = Get($url. 0);
	if (!defined($ref)) {
	    return undef;
	}
	@result = (@result, @{$ref->{'search-results'}->{'entry'}});
	#print scalar(@result) . "\n";
    }
    return \@result;
}

#
# Load or retrieve an affiliation.
#
sub GetAffiliation($;$)
{
    my ($scopus_id, $flush) = @_;
    $flush   = 0 if (!defined($flush));
    my $file = "$TB/scopus/affiliations/$scopus_id";

    #
    # Eventually need to think about updating stale content.
    #
    if (! -e $file || $flush) {
	#print "Retrieving affiliation: $scopus_id\n";
	
	my ($json, $result) = scopus::Retrieve("affiliation", $scopus_id);

	return undef
	    if (!defined($json));

	if (open(O, ">$file")) {
	    print O $json;
	    close(O);
	}
	else {
	    die("Could not open $file for writing: $!");
	}
	return $result;
    }
    my $json = emutil::ReadFile($file);
    if (!$json) {
	die("Could not open $file: $!");
    }
    my $result = eval { decode_json($json); };
    if ($@) {
	print STDERR "Failed to json decode blob: $@\n";
	return undef;
    }
    return $result->{'affiliation-retrieval-response'};
}

#
# Load or retrieve an author.
#
sub GetAuthor($;$)
{
    my ($scopus_id, $flush) = @_;
    $flush   = 0 if (!defined($flush));
    my $file = "$TB/scopus/authors/$scopus_id";

    if (! -e $file || $flush) {
	#print "Retrieving author: $scopus_id\n";
	
	my ($json, $result) = scopus::Retrieve("author", $scopus_id);

	return undef
	    if (!defined($json));

	if (open(O, ">$file")) {
	    print O $json;
	    close(O);
	}
	else {
	    die("Could not open $file for writing: $!");
	}
	return $result->{'author-retrieval-response'}->[0];
    }
    my $json = emutil::ReadFile($file);
    if (!$json) {
	die("Could not open $file: $!");
    }
    my $result = eval { decode_json($json); };
    if ($@) {
	print STDERR "Failed to json decode blob: $@\n";
	return undef;
    }
    return $result->{'author-retrieval-response'}->[0];
}

#
# Load or retrieve an abstract
#
sub GetAbstract($;$)
{
    my ($scopus_id, $flush) = @_;
    $flush   = 0 if (!defined($flush));
    my $file = "$TB/scopus/abstracts/$scopus_id";

    if (! -e $file || $flush) {
	#print "Retrieving abstract: $scopus_id\n";
	
	my ($json, $result) = scopus::Retrieve("abstract", $scopus_id);

	return undef
	    if (!defined($json));

	if (open(O, ">$file")) {
	    print O $json;
	    close(O);
	}
	else {
	    die("Could not open $file for writing: $!");
	}
	return $result->{'abstracts-retrieval-response'};
    }
    my $json = emutil::ReadFile($file);
    if (!$json) {
	die("Could not open $file: $!");
    }
    my $result = eval { decode_json($json); };
    if ($@) {
	print STDERR "Failed to json decode blob: $@\n";
	return undef;
    }
    return $result->{'abstracts-retrieval-response'};
}

#
# Do we have this abstract already processed.
#
sub PaperEntered($)
{
    my ($scopus_id) = @_;

    my $paper_result =
	DBQueryFatal("select scopus_id,uses from scopus_paper_info ".
		     "where scopus_id=" . DBQuoteSpecial($scopus_id));

    return $paper_result->numrows;
}

#
# Enter a paper into the DB.
#
sub EnterPaper($$$;$)
{
    my ($dcid, $impotent, $citedus, $update) = @_;
    $update = 0 if (!defined($update));
    
    my $abstract = GetAbstract($dcid, $update);
    if (!defined($abstract)) {
	print STDERR " *** Could not download abstract $dcid\n";
	return -1;
    }
    my $coredata = $abstract->{'coredata'};
    my $title = $coredata->{'dc:title'};
    if (!defined($title)) {
	print STDERR " *** No title for abstract!\n";
	return -1;
    }
    my $pubname = $coredata->{'prism:publicationName'};
    if (!defined($pubname)) {
	print " *** No pubname for abstract\n";
    }
    my $pubtype = $coredata->{'subtypeDescription'};
    if (!defined($pubtype) || $pubtype eq "") {
	$pubtype = $coredata->{'prism:aggregationType'};
    }
    my $pubdate = $coredata->{'prism:coverDate'};
    my $authors = $abstract->{'authors'}->{'author'};
    if (!defined($authors)) {
	print STDERR " *** No authors for abstract!\n";
	return -1;
    }
    my $citedby_count = $coredata->{'citedby-count'};
    if (!defined($citedby_count) || $citedby_count eq "") {
	print " *** No citedby-count in the coredata\n";
	$citedby_count = 0;
    }
    my $doi = $coredata->{'prism:doi'} if (exists($coredata->{'prism:doi'}));
    # Just names. 
    my @authors = ();
    my @author_ids = ();
    foreach my $author (@$authors) {
	my $name = $author->{'ce:indexed-name'};
	if (!defined($name)) {
	    $name = $author->{'preferred-name'}->{'ce:indexed-name'};
	}
	if (!defined($name)) {
	    print STDERR " *** No author name ...\n";
	    return -1;
	}
	my $auid = $author->{'@auid'};
	if (!defined($auid)) {
	    print STDERR " *** No auid for $name ...\n";
	    return -1;
	}
	push(@authors, $name);
	push(@author_ids, [$name,$auid]);
    }
    # Try to find the scopus URL.
    my $url;
    foreach my $lref (@{$coredata->{'link'}}) {
	if ($lref->{'@rel'} eq "scopus") {
	    $url = $lref->{'@href'};
	    last;
	}
    }
    my $paper_row;
    my $paper_result =
	DBQueryFatal("select * from scopus_paper_info ".
		     "where scopus_id=" . DBQuoteSpecial($dcid));

    # Do not want to lose this info!
    my $uses = "NULL";
    if ($paper_result->numrows) {
	$paper_row = $paper_result->fetchrow_hashref();
	if ($paper_row->{"uses"}) {
	    $uses = "'" . $paper_row->{"uses"} . "'";
	}
    }
    
    if (1) {
	print " Title: $title\n";
	print " Date: $pubdate\n";
	print " Pub: " . (defined($pubname) ? $pubname : "n/a") . "\n";
	print " Type: " . (defined($pubtype) ? $pubtype : "n/a") . "\n";
	print " DOI: " . (defined($doi) ? $doi : "n/a") . "\n";
	print " URL: " . (defined($url) ? $url : "n/a") . "\n";
	print " Authors: " . join(",", @authors) . "\n";
	print " Cites Us: " . (defined($citedus) ? $citedus : "No") . "\n";
	print " Uses: $uses\n";
	print " Cited By: $citedby_count\n";
    }

    if (!$paper_result->numrows || $update) {
	my $safe_dcid = DBQuoteSpecial($dcid);

	if ($paper_result->numrows) {
	    print " Update entry: $dcid\n";
	}
	else {
	    print " New entry: $dcid\n";
	}

	my @sets = (
	    "scopus_id=$safe_dcid",
	    "pubdate=" . DBQuoteSpecial($pubdate),
	    "pubtype=" . DBQuoteSpecial($pubtype),
	    "pubname=" . (defined($pubname) ? DBQuoteSpecial($pubname) : "''"),
	    "title=" . DBQuoteSpecial($title),
	    "authors=" . DBQuoteSpecial(join(",", @authors)),
	    "cites=". (defined($citedus) ? "'$citedus'" : "NULL"),
	    "doi=" . (defined($doi) ? DBQuoteSpecial($doi) : "''"),
	    "url=" . (defined($url) ? DBQuoteSpecial($url) : "''"),
	    "uses=$uses",
	    "citedby_count=" . DBQuoteSpecial($citedby_count),
	    );

	my $query = "insert into scopus_paper_info set ". join(",", @sets);
	#print "$query\n";
	if (!$impotent) {
	    if (!$impotent) {
		DBQueryFatal("delete from scopus_paper_info ".
			     "where scopus_id=$safe_dcid");
		DBQueryFatal("delete from scopus_paper_authors ".
			     "where abstract_id=$safe_dcid");
	    }
	    DBQueryFatal($query);

	    foreach my $a (@author_ids) {
		my ($name,$auid) = @$a;
		DBQueryFatal("replace into scopus_paper_authors set ".
			     " abstract_id=$safe_dcid ," .
			     " author_id=" . DBQuoteSpecial($auid) . ", " .
			     " author=" . DBQuoteSpecial($name));
	    }
	}
    }
    return 0;
}

#
# Update. Currently just the citation count.
#
sub UpdatePaper($$)
{
    my ($dcid, $impotent) = @_;

    my $paper_result =
	DBQueryFatal("select * from scopus_paper_info ".
		     "where scopus_id=" . DBQuoteSpecial($dcid));

    if (!$paper_result->numrows) {
	print STDERR "Paper does not exist in the DB, cannot updated\n";
	return -1;
    }
    my $paper_row = $paper_result->fetchrow_hashref();

    my $abstract = GetAbstract($dcid, 1);
    if (!defined($abstract)) {
	print STDERR " *** Could not download abstract $dcid\n";
	return -1;
    }
    my $coredata = $abstract->{'coredata'};
    my $citedby_count = $coredata->{'citedby-count'};
    if (!defined($citedby_count) || $citedby_count eq "") {
	print " *** No citedby-count in the coredata\n";
	$citedby_count = 0;
    }
    if ($paper_row->{"citedby_count"} == $citedby_count) {
	return 0;
    }
    my $old = $paper_row->{"citedby_count"};
    print "$dcid: citedby increased from $old to $citedby_count\n";

    return 0
	if ($impotent);

    DBQueryFatal("update scopus_paper_info set ".
		 " citedby_count=" . DBQuoteSpecial($citedby_count) . " ".
		 "where scopus_id=" . DBQuoteSpecial($dcid));

    return 0;
}

#
# See if a paper cites us.
#
my @EMULABTITLES = ("integrated experimental environment for ".
		    "distributed systems and networks",
                    "emulab\.net");

my @CLOUDTITLES = ("Introducing Cloud-?Lab: Scientif?ic Infrastructure",
		   "The Design and Operation of Cloud-?Lab",
		   "Cloud-?Lab Team Introducing Cloud-?Lab".
		   "cloudlab\.us");

my @POWDERTITLES = ("POWDER: Platform for Open Wireless",
		    "Phantomnet: Research infrastructure",
		    "powderwireless\.net");

sub CitesUs($)
{
    my ($abstract) = @_;

    my $tail = $abstract->{'item'}->{'bibrecord'}->{'tail'};
    my $citations = $tail->{'bibliography'}->{'reference'};
    if (defined($citations)) {
	#
	# Search for a reference to us.
	#
	#print " Searching abstract $dcid for citations\n";
	if (ref($citations) eq "HASH") {
	    $citations = [ $citations ];
	}
	my $paper;
	foreach my $cite (@$citations) {
	    my $fulltext = $cite->{'ref-fulltext'};
	    if (!defined($fulltext)) {
		$fulltext = $cite->{'ref-info'}->{'ref-title'}->{'ref-titletext'};
	    }
	    # Surprising number of citations without a title.
	    next
		if (!defined($fulltext));

	    foreach my $poss (@CLOUDTITLES) {
		if ($fulltext =~ /$poss/i) {
		    return "cloudlab";
		}
	    }
	    foreach my $poss (@POWDERTITLES) {
		if ($fulltext =~ /$poss/i) {
		    return "powder";
		}
	    }
	    foreach my $poss (@EMULABTITLES) {
		if ($fulltext =~ /$poss/i) {
		    return "emulab";
		}
	    }
	}
    }
    return undef;
}


    
