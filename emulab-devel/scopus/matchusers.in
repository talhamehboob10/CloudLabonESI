#!/usr/bin/perl -w
#
# Copyright (c) 2005-2021 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use strict;
use Getopt::Std;
use Data::Dumper;
use JSON;
use Text::CSV qw(csv);

#
# Attempt to match a user to the Scopus database using first and last name
# and the user's affiliation. We might match more then one user, store
# each of them, we will ask the user when they log in which if any is
# correct. With no arguments look for any users that have not been checked.
# Otherwise check specific users, possibly invalidating existing info.
#
sub usage()
{
    print "Usage: matchusers [-n] [-f] [user ...]\n";
    exit(1);
}
my $optlist   = "nl:fvr";
my $impotent  = 0;
my $force     = 0;
my $verbose   = 0;
my $limit     = "";
my $recheck   = 0;

#
# Configure variables
#
my $TB		     = "@prefix@";

# Load the Testbed support stuff.
use lib "@prefix@/lib";
use lib ".";
use emdb;
use User;
use emutil;
use scopus;

# For mysql "in" clause below.
my $active = join(",", map {"'" . $_ . "'"} @User::USERSTATUS_VALIDSET);
# For specific users,
my $users_clause = "";
# Match clause;
my $match_clause = "";

#
# Turn off line buffering on output
#
$| = 1;

my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"n"})) {
    $impotent++;
}
if (defined($options{"f"})) {
    $force++;
}
if (defined($options{"v"})) {
    $verbose++;
}
if (defined($options{"r"})) {
    $recheck++;
}
if (defined($options{"l"})) {
    $limit = "limit " . $options{"l"};
}
# Restrict to users.
if (@ARGV) {
    my $users = join(",", map {"'" . $_ . "'"} @ARGV);
    $users_clause = "and u.uid in ($users)";
}
#
# Match clause. When doing a recheck, we want to look at all users,
# although not recent additions, there are unlikely to be any changes, and
# it burns through our weekly quota. Likewise, no point in looking at
# really old users.
#
if ($recheck) {
    $match_clause =
	"(u.usr_created < date_sub(now(), interval 3 month) && ".
	" u.usr_created > date_sub(now(), interval 5 year) && ".
	" u.scopus_lastcheck < date_sub(now(), interval 3 month))";
}
else {
    $match_clause =
	"(u.scopus_lastcheck='0000-00-00' or ".
	" u.affiliation_updated > u.scopus_lastcheck)";
}
my $query_result =
    DBQueryFatal("select distinct u.uid,u.uid_idx,u.usr_affil,u.usr_name, ".
		 "    group_concat(concat_ws(':', ".
		 "            scopus.scopus_id,scopus.validation_state)) ".
		 "  from users as u ".
		 "left join user_stats as s on ".
		 "   s.uid_idx=u.uid_idx ".
		 "left join user_scopus_info as scopus on ".
		 "   scopus.uid_idx=u.uid_idx ".
		 "where u.status in ($active) and ".
		 "      u.usr_affil is not null and ".
		 "      u.usr_affil!='' and ".
		 "      $match_clause ".
		 "$users_clause group by u.uid,u.uid_idx ".
		 "order by u.usr_created desc $limit");

while (my ($uid,$idx,$affil,$name,$scopus_info) =
       $query_result->fetchrow_array()) {
    $name =~ s/^\s+|\s+$//g;
    my @tokens = split(/\s+/, $name);
    my $first = lc($tokens[0]);
    my $last  = lc($tokens[-1]);
    my $results;
    my %existing  = ();
    my $validated = 0;
    my $valid     = 0;

    if (defined($affil)) {
	$affil =~ s/^\s+|\s+$//g;
    }

    #
    # Check for existing scopus matches. If there are already matches
    # and the user has validated them, we do not want to overwrite
    # unless the force option is provided.
    #
    if (defined($scopus_info) && $scopus_info ne "") {
	my @matches = split(",", $scopus_info);
	
	foreach my $match (@matches) {
	    my ($id,$state) = split(":", $match);
	    $existing{$id} = $state;
	    
	    if ($state ne "unknown") {
		$validated = 1;
		if ($state eq "valid") {
		    $valid = 1;
		}
		last;
	    }
	}
	if ($validated) {
	    if (@ARGV || $verbose) {
		print "User already validated. ";
		if ($valid) {
		    print "And matched. ";
		}
	    }
	    if ($valid && $recheck) {
		# No reason to recheck. 
		next;
	    }
	    if ($valid && !$force) {
		if (@ARGV || $verbose) {
		    print "Use -f option to overwrite.\n";
		}
		if (@ARGV) {
		    exit(1);
		}
		next;
	    }
	    if (@ARGV || $verbose) {
		print "\n";
	    }
	}
	elsif ($recheck) {
	    # If the user has not logged into validate what we have,
	    # do not bother to recheck, wasted work.
	    next;
	}
    }
    print "$uid,$idx,$name" . (defined($affil) ? ", $affil" : "") . "\n";

    #
    # Build a query to search for the author by name/affil.
    #
    $affil =~ s/\s+(and|or)\s+/ /gi;
    #$affil =~ s/\&/ /g;
    $affil =~ s/\// /g;
    my $affil_clause = join(" AND ", split(/\s+/, $affil));
	
    my $query = "AUTHFIRST($first) AND AUTHLASTNAME($last) AND ".
	"AFFIL ($affil_clause) AND SUBJAREA(COMP OR ENGI OR MATH)";

    my ($json,$search) = scopus::Search("author", $query);
    if (!defined($search)) {
	next;
    }

    my $totalResults = $search->{'search-results'}->{'opensearch:totalResults'};
    if ($totalResults == 0) {
	print " No scopus matches\n";
	$results = [];
    }
    else {
	$results = scopus::SearchResults($search);
	#print Dumper($results);
    }

    #
    # Awesome is when there is one exact match! But we often get more then
    # one, which sucks but is understandable. So we are going to record all
    # of the matches in the database and figure out what to do with
    # it later. 
    #
    my @matches = ();

    foreach my $ref (@$results) {
	my $author_id     = $ref->{'dc:identifier'};
	my $preferredName = $ref->{'preferred-name'};
	my $givenName     = $preferredName->{'given-name'};
	my $surname       = $preferredName->{'surname'};
	my $initials      = $preferredName->{'initials'};
	my $affil_id      = $ref->{'affiliation-current'}->{'affiliation-id'};
	my $affil_name    = $ref->{'affiliation-current'}->{'affiliation-name'};

	# Annoying
	$author_id =~ s/^author_id://i;
	$ref->{'dc:identifier'} = $author_id;
	
	print " $author_id, $affil_id, $affil_name\n";

	#
	# Scopus searches the affiliation history too.
	#
	push(@matches, $ref);
    }
    
    if (!@matches) {
	print " No Matches\n";
    }
    else {
	print " Matches: " .
	    join(",", map {$_->{'dc:identifier'}} @matches) . "\n";

	my %inserts = ();

	#
	# Grab the author definitions so we can populate the DB.
	#
	foreach my $ref (@matches) {
	    my $author_id = $ref->{'dc:identifier'};
	    my $aref      = scopus::GetAuthor($author_id);
	    if (!defined($aref)) {
		print STDERR "*** Cannot get author $author_id\n";
	    }
	    my $coredata = $aref->{'coredata'};
	    my $url;

	    foreach my $lref (@{$coredata->{'link'}}) {
		if ($lref->{'@rel'} eq "scopus-author") {
		    $url = $lref->{'@href'};
		    last;
		}
	    }
	    if (!defined($url)) {
		print STDERR "**** No url for $author_id\n";
		#print Dumper($aref);
		next;
	    }
	    
	    if ($validated) {
		#
		# If there are matches, then need the force option.
		# If no matches, then we only want to add new ones.
		#
		if (exists($existing{$author_id}) &&
		    $existing{$author_id} ne "unknown") {
		    # Anything that has been validated can stay in the DB.
		    next;
		}
		print "New: ";
	    }
	    print "$author_id: $url\n";
	    $inserts{$author_id} = $url;
	}
	if (!$impotent) {
	    # Remove old info, we checked above for force option
	    DBQueryFatal("delete from user_scopus_info ".
			 "where uid_idx='$idx' ".
			 (!$force ? "and validation_state='unknown'" : "")); 

	    foreach my $author_id (keys(%inserts)) {
		my $url = $inserts{$author_id};

		my $query = "replace into user_scopus_info set ".
		    " uid='$uid',uid_idx='$idx', ".
		    " created=now(), ".
		    " scopus_id=" . DBQuoteSpecial($author_id) . ", ".
		    " author_url=" . DBQuoteSpecial($url);
		DBQueryFatal($query);
	    }
	}
    }
    if (!$impotent) {
	DBQueryFatal("update users set scopus_lastcheck=now() ".
		     "where uid_idx='$idx'");
    }
    sleep(1);
}

