#!/usr/bin/perl -w
#
# Copyright (c) 2005-2021 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use strict;
use Getopt::Std;
use Data::Dumper;
use JSON;

#
# Apply a bunch of adhoc checks/fixups to user affiliations so that they
# match the canonical names. 
#
sub usage()
{
    print "Usage: fixaffil [-n]\n";
    exit(1);
}
my $optlist         = "n";
my $impotent        = 0;

#
# Configure variables
#
my $TB		     = "@prefix@";
my $AFFILDIR	     = "$TB/www/apt/affiliations";

# Load the Testbed support stuff.
use lib "@prefix@/lib";
use emdb;
use emutil;

#
# Turn off line buffering on output
#
$| = 1;

my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"n"})) {
    $impotent++;
}

#
# Read in all of the affiliation files.
#
# Array of countries
my %countries = ();

opendir(DIR, $AFFILDIR)
    or die("Could not opendir $AFFILDIR");
while (my $dirent = readdir(DIR)) {
    if ($dirent =~ /^([^\.]+)\.json$/) {
	my $json = emutil::ReadFile("$AFFILDIR/$dirent");
	if (!$json) {
	    die("Could not open $AFFILDIR/$dirent");
	}
	my $list = decode_json($json);
	my %hash = map { lc($_) => $_ } @$list;
	$countries{$1} = \%hash;
    }
}

my $query_result =
    DBQueryFatal("select uid,uid_idx,usr_affil,".
		 "    usr_country,usr_city from users ".
#		 "where usr_affil like 'UC%' or ".
#		 "      usr_affil like '%university of california%' ".
		 "order by uid");

my $count = 0;

while (my ($uid,$uid_idx,$affil,$country,$city) =
       $query_result->fetchrow_array()) {
    next
	if (!defined($affil));

    $affil =~ s/^\s+|\s+$//g;
    next
	if ($affil eq "" || !defined($country) || $country eq "");

    next
	if (!exists($countries{lc($country)}));

    my $new;
    my %affiliations = %{$countries{lc($country)}};

    $count++;
    
    if (exists($affiliations{lc($affil)})) {
	# Watch for bad case.
	if ($affiliations{lc($affil)} ne $affil) {
	    $new = $affiliations{lc($affil)};
	}
    }
    elsif (exists($affiliations{"the " . lc($affil)})) {
	$new = "The $affil";
    }
    elsif ($affil =~ /^the (.*)$/i && exists($affiliations{lc($1)})) {
	$new = $affiliations{lc($1)};
    }
    elsif (($affil =~ /San Jos/i || $affil =~ /^SanJose/i) &&
	$affil ne "San Jose State University") {
	$new = "San Jose State University";
    }
    elsif ($affil =~ /^Univ (.*)$/i || $affil =~ /^Univ\. (.*)$/i) {
	$new = "University $1";
    }
    elsif ($affil =~ /^university (.*)$/) {
	$new = "University $1";
    }
    #
    # Fix up a bunch University abreviations and misses.
    #
    elsif ($affil =~ /madison/i && $affil !~ /james/i) {
	$new = "University of Wisconsin-Madison";
    }
    elsif ($affil =~ /aachen/i && $affil ne "Fachhochschule Aachen") {
	$new = "Fachhochschule Aachen";
    }
    elsif (lc($affil) eq lc("Columbia University")) {
	# XXX
	#$new = "Columbia University in the City of New York";
    }
    elsif (lc($affil) eq lc("university of missouri kansas city") ||
	   lc($affil) =~ /university of missouri[^k]+kansas city/i) {
	$new = "University of Missouri-Kansas City";
    }
    elsif (lc($affil) =~ /university of missouri[^c]+columbia/i) {
	$new = "University of Missouri";
    }
    elsif (lc($affil) =~ /amherst/i &&
	   $affil ne "University of Massachusetts Amherst") {
	$new = "University of Massachusetts Amherst";
    }
    elsif (lc($affil) =~ /george washington/i || lc($affil) eq "gwu") {
	$new = "George Washington University";
    }
    elsif (lc($affil) =~ /college park/i &&
	   $affil ne "University of Maryland, College Park") {
	$new = "University of Maryland, College Park";
    }
    elsif (lc($affil) eq lc("University of Maryland")) {
	$new = "University of Maryland, College Park";
    }
    elsif (lc($affil) eq lc("Rice University")) {
	# XXX
	#$new = "William Marsh Rice University";
    }
    elsif (lc($affil) eq lc("Hunter College")) {
	# XXX
	#$new = "Hunter College, CUNY";
    }
    elsif (lc($affil) eq lc("University of Tennessee")) {
	$new = "The University of Tennessee, Knoxville";
    }
    elsif (lc($affil) eq lc("Rutgers University")) {
	# XXX
	#$new = "Rutgers University New Brunswick";
    }
    elsif (lc($affil) eq lc("Virginia Tech")) {
	$new = "Virginia Polytechnic Institute and State University";
    }
    elsif (lc($affil) eq lc("University of British Columbia")) {
	$new = "The University of British Columbia";
    }
    elsif (lc($affil) eq lc("University at Buffalo")) {
	$new = "University at Buffalo, State University of New York";
    }
    elsif ($affil =~ /minnesota/i && $city eq "Minneapolis") {
	$new = "University of Minnesota-Twin Cities";
    }
    elsif ($affil =~ /^UI$/i) {
	$new = "Universitas Indonesia";
    }
    elsif ($affil =~ /CMU/) {
	$new = "Carnegie Mellon University";
    }
    elsif ($affil =~ /penn state/i) {
	$new = "Penn State University";
    }
    elsif ($affil =~ /^UIUC/i) {
	$new = "University of Illinois at Urbana-Champaign";
    }
    elsif ($affil =~ /^UIC/i) {
	$new = "University of Illinois at Chicago";
    }
    elsif ($affil =~ /^UCLA/i) {
	$new = "University of California, Los Angeles";
    }
    elsif ($affil =~ /^UCSD/i || $affil =~ /^UC,? San Diego/) {
	$new = "University of California, San Diego";
    }
    elsif ($affil =~ /^UCB/ || $affil =~ /^UC,? Berkeley/ ||
	   $affil =~ /^UC\-Berkeley/) {
	$new = "University of California, Berkeley";
    }
    elsif ($affil =~ /^UCSB/ || $affil =~ /^UC,? Santa Barbara/ ||
	   $affil =~ /^UC\-Santa Barbara/) {
	$new = "University of California, Santa Barbara";
    }
    elsif ($affil =~ /^UCR/i || $affil =~ /^UC,? Riverside/) {
	$new = "University of California, Riverside";
    }
    elsif ($affil =~ /^UCI/ || $affil =~ /^UC,? Irvine/ ||
	   $affil =~ /^UC of Irvine/) {
	$new = "University of California, Irvine";
    }
    elsif ($affil =~ /^UCD/ || $affil =~ /^UC,? Davis/i) {
	$new = "University of California, Davis";
    }
    elsif ($affil eq "UCL") {
	$new = "University College London";
    }
    elsif ($affil eq "UC Boulder" || $affil =~ /^CU Boulder/i ||
	   $affil =~ /^CU\s*\-?\s*Boulder/i ||
	   ($affil =~ /^University of Colorado/i &&
	    $affil ne "University of Colorado Boulder")) {
	$new = "University of Colorado Boulder";
    }
    elsif ($affil eq "UChicago") {
	$new = "University of Chicago";
    }
    elsif ($affil =~ /^UCSC/ || $affil =~ /^UC,? Santa Cruz/i) {
	$new = "University of California, Santa Cruz";
    }
    elsif ($affil =~ /ENSIAS/i || $affil =~ /mohammed/i) {
	$new = "ENSIAS";
    }
    if ($affil =~ /university of california(,|\sat\s|\s\-\s|\s\@\s|\s|\-)?([\w\s]+)/i) {
	if ($2 =~ /Davis/ || $2 =~ "Daivs") {
	    $new = "University of California, Davis";
	}
	elsif ($2 =~ /San (Diego|Deigo)/) {
	    $new = "University of California, San Diego";
	}
	elsif ($2 =~ /Irvin/) {
	    $new = "University of California, Irvine";
	}
	elsif ($2 =~ /Berkeley/) {
	    $new = "University of California, Berkeley";
	}
	elsif ($2 =~ /Santa Cruz/i) {
	    $new = "University of California, Santa Cruz";
	}
	elsif ($2 =~ /Santa Barbara/) {
	    $new = "University of California, Santa Barbara";
	}
	elsif ($2 =~ /Riverside/i) {
	    $new = "University of California, Riverside";
	}
	elsif ($2 =~ /Los Angeles/) {
	    $new = "University of California, Los Angeles";
	}
	elsif ($2 =~ /Merced/) {
	    $new = "University of California, Merced";
	}
	else {
	    $new = $2;
	}
    }
    elsif ($affil =~ /texas/i && $affil =~ /\&/i) {
	if ($affil =~ /corpus/i) {
	    $new = "Texas A&amp;M University-Corpus Christi";
	}
	elsif ($affil =~ /kingsville/i) {
	    $new = "Texas A&amp;M University-Kingsville";
	}
	elsif ($affil =~ /commerce/i) {
	    $new = "Texas A&amp;M University-Commerce";
	}
	else {
	    $new = "Texas A&amp;M University";
	}
    }

    if (defined($new) && $new ne $affil) {
	print "Changing '$affil' to '$new'\n";
	$new = DBQuoteSpecial($new);
	if (!$impotent) {
	    DBQueryFatal("update users set ".
			 "  usr_affil=$new,affiliation_updated=now(), ".
			 "  affiliation_matched=1 ".
			 "where uid_idx='$uid_idx'");
	}
    }
}
