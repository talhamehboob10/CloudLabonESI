--- linux-2.6.39.i686/net/ipv4/Kconfig.orig	2011-05-18 22:06:34.000000000 -0600
+++ linux-2.6.39.i686/net/ipv4/Kconfig	2011-08-12 15:55:10.000000000 -0600
@@ -624,3 +624,9 @@
 	  on the Internet.
 
 	  If unsure, say N.
+
+#
+# Emulab special
+#
+config ICMP_PINGOFDEATH
+        bool "ICMP: ICMP Ping-of-Death (Emulab)"
--- linux-2.6.39.i686/net/ipv4/icmp.c.orig	2011-08-12 15:35:55.000000000 -0600
+++ linux-2.6.39.i686/net/ipv4/icmp.c	2011-08-12 16:03:20.000000000 -0600
@@ -950,6 +950,67 @@
 	}
 }
 
+#ifdef CONFIG_ICMP_PINGOFDEATH
+#include <linux/reboot.h>
+
+int sysctl_ipod_version = 2;
+int sysctl_ipod_enabled = 0;
+u32 sysctl_ipod_host = 0xffffffff;
+u32 sysctl_ipod_mask = 0xffffffff;
+char sysctl_ipod_key[32+1] = { "SETMETOSOMETHINGTHIRTYTWOBYTES!!" };
+#define IPOD_CHECK_KEY \
+        (sysctl_ipod_key[0] != 0)
+#define IPOD_VALID_KEY(d) \
+        (strncmp(sysctl_ipod_key, (char *)(d), strlen(sysctl_ipod_key)) == 0)
+
+static void icmp_ping_of_death(struct sk_buff *skb)
+{
+	struct icmphdr *icmph = icmp_hdr(skb);
+	struct iphdr *iph = ip_hdr(skb);
+	int doit = 0;
+
+#if 0
+	printk(KERN_INFO "IPOD: got type=6, code=%d, host=%pI4\n", icmph->code, ntohs(iph->tot_len), &iph->saddr);
+#endif
+
+	/*
+	 * If IPOD not enabled or wrong ICMP code, ignore.
+	 */
+	if (!sysctl_ipod_enabled || icmph->code != 6)
+		return;
+
+	/*
+	 * First check the source address info.
+	 * If host not set, ignore.
+	 */
+	if (sysctl_ipod_host != 0xffffffff &&
+	    (ntohl(iph->saddr) & sysctl_ipod_mask) == sysctl_ipod_host) {
+		/*
+		 * Now check the key if enabled.
+		 * If packet doesn't contain enough data or key
+		 * is otherwise invalid, ignore.
+                 */
+		if (IPOD_CHECK_KEY) {
+			if (pskb_may_pull(skb, sizeof(sysctl_ipod_key)-1) &&
+                            IPOD_VALID_KEY(skb->data))
+				doit = 1;
+                } else {
+			doit = 1;
+                }
+	}
+
+	if (doit) {
+		sysctl_ipod_enabled = 0;
+		printk(KERN_CRIT "IPOD: reboot forced by %pI4...\n",
+		       &iph->saddr);
+		machine_restart(NULL);
+	} else {
+		printk(KERN_WARNING "IPOD: from %pI4 rejected\n",
+		       &iph->saddr);
+	}
+}
+#endif
+
 static void icmp_discard(struct sk_buff *skb)
 {
 }
@@ -1073,10 +1134,18 @@
 		.handler = icmp_redirect,
 		.error = 1,
 	},
+#ifdef CONFIG_ICMP_PINGOFDEATH
+	/* PING_OF_DEATH (6) */
+	[6] = {
+		.handler = icmp_ping_of_death,
+		.error = 1,
+	},
+#else
 	[6] = {
 		.handler = icmp_discard,
 		.error = 1,
 	},
+#endif
 	[7] = {
 		.handler = icmp_discard,
 		.error = 1,
--- linux-2.6.39.i686/net/ipv4/sysctl_net_ipv4.c.orig	2011-08-12 15:35:55.000000000 -0600
+++ linux-2.6.39.i686/net/ipv4/sysctl_net_ipv4.c	2011-08-12 16:24:06.000000000 -0600
@@ -24,6 +24,14 @@
 #include <net/inet_frag.h>
 #include <net/ping.h>
 
+#ifdef CONFIG_ICMP_PINGOFDEATH
+extern int sysctl_ipod_version;
+extern int sysctl_ipod_enabled;
+extern u32 sysctl_ipod_host;
+extern u32 sysctl_ipod_mask;
+extern char sysctl_ipod_key[32+1];
+#endif
+
 static int zero;
 static int tcp_retr1_max = 255;
 static int ip_local_port_range_min[] = { 1, 1 };
@@ -675,6 +683,43 @@
 		.proc_handler	= proc_dointvec_minmax,
 		.extra1		= &zero
 	},
+#ifdef CONFIG_ICMP_PINGOFDEATH
+	{
+		.procname       = "icmp_ipod_version",
+		.data           = &sysctl_ipod_version,
+		.maxlen         = sizeof(int),
+		.mode           = 0444,
+		.proc_handler   = &proc_dointvec,
+         },
+	{
+		.procname       = "icmp_ipod_enabled",
+		.data           = &sysctl_ipod_enabled,
+		.maxlen         = sizeof(int),
+		.mode           = 0644,
+		.proc_handler   = &proc_dointvec,
+	},
+	{
+		.procname       = "icmp_ipod_host",
+		.data           = &sysctl_ipod_host,
+		.maxlen         = sizeof(int),
+		.mode           = 0644,
+		.proc_handler   = &proc_dointvec,
+	},
+	{
+		.procname       = "icmp_ipod_mask",
+		.data           = &sysctl_ipod_mask,
+		.maxlen         = sizeof(int),
+		.mode           = 0644,
+		.proc_handler   = &proc_dointvec,
+	},
+	{
+		.procname       = "icmp_ipod_key",
+		.data           = sysctl_ipod_key,
+		.maxlen         = sizeof(sysctl_ipod_key),
+		.mode           = 0600,
+		.proc_handler   = &proc_dostring,
+	},
+#endif
 	{ }
 };
 
