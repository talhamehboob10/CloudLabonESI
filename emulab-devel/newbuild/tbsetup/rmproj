#!/usr/bin/perl -wT
#
# Copyright (c) 2000-2021 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use strict;

#
# Remove a project. We delete the project directory hierarchy and the
# we remove the group from /etc/group. Actually, the project directory
# is *renamed* since we do not want to be so destructive.
#
# usage: rmprojdir <pid>
#

#
# Configure variables
#
my $TB       = "/home/achauhan06/CLOUDLAB/SSHCLOUD/CloudLabonESI/emulab-devel/newbuild";
my $TBOPS    = "testbed-ops\@ops.cloudlab.umass.edu";
my $CONTROL  = "ops.cloudlab.umass.edu";
my $MAILMANSUPPORT= 0;

my $RMGROUP  = "$TB/sbin/rmgroup";
my $MODGROUPS= "$TB/sbin/modgroups";
my $DELMMLIST= "$TB/sbin/delmmlist";
my @grouplist= ();

#
# Change this if you really want to remove the directories associated
# with a project. Note: we have never tested the remove path!
# 
my $renamedirs = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/usr/bin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Load the Testbed support stuff. 
#
use lib "/home/achauhan06/CLOUDLAB/SSHCLOUD/CloudLabonESI/emulab-devel/newbuild/lib";
use libaudit;
use libdb;
use libtestbed;
use Project;
use User;

# Locals, defined in libdb.
my $PROJROOT     = PROJROOT();
my $SCRATCHROOT  = SCRATCHROOT();

# Protos
sub fatal($);
sub removedir($);

#
# We don't want to run this script unless its the real version.
#
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be setuid! Maybe its a development version?\n");
}

#
# This script is setuid, so please do not run it as root. Hard to track
# what has happened.
# 
if ($UID == 0) {
    die("*** $0:\n".
	"    Please do not run this as root! Its already setuid!\n");
}

#
# Check args.
#
if ($#ARGV < 0) {
    die("Usage: rmprojdir <pid>\n");
}

# Map invoking user to object.
my $this_user = User->ThisUser();
if (! defined($this_user)) {
    fatal("You ($UID) do not exist!");
}

#
# Figure out who called us. Must have admin status to do this.
#
if (!TBAdmin()) {
    fatal("You must be a TB administrator to run this script!");
}

#
# Map project name to object.
#
my $target_project = Project->Lookup($ARGV[0]);
if (! defined($target_project)) {
    fatal("Could not map project to its object!");
}
my $pid     = $target_project->pid();
my $pid_idx = $target_project->pid_idx();
my $gid_idx = $target_project->gid_idx();

#
# Sanity checks.
#
my $experiments = $target_project->Experiments();
if (!defined($experiments)) {
    fatal("Could not get experiment list for project");
}
if (@{$experiments}) {
    fatal("There are experiments in this project, they must be deleted");
}
my $leases = $target_project->Leases();
if (!defined($leases)) {
    fatal("Could not get lease list for project");
}
if (@{$leases}) {
    fatal("There are leases in this project, they must be deleted");
}

#
# This script is always audited. Mail is sent automatically upon exit.
#
if (AuditStart(0)) {
    #
    # Parent exits normally
    #
    exit(0);
}

#
# Project related directories will be removed by rmgroup call.
#

#
# Remove/rename the experiment working directory.
#
my $workdir = TBDB_EXPT_WORKDIR() . "/$pid";
my $savename = "_ARCHIVED-${pid}-${pid_idx}";

if (-d $workdir) {
    my $newname = TBDB_EXPT_WORKDIR() . "/$savename";

    if (rename($workdir, $newname)) {
	#
	# Chown the owner/group to root. There is no need to modify
	# the permissions since its on boss.
	#
	if (! chown(0, 0, $newname)) {
	    fatal("Could not chown directory $newname to 0/0: $!");
	}
    }
    else {
	fatal("Could not rename proj work directory to $newname: $!");
    }
}

#
# Ditto for the experiment info directory.
#
my $infodir = TBDB_EXPT_INFODIR() . "/$pid";

if (-d $infodir) {
    my $newname = TBDB_EXPT_INFODIR() . "/$savename";

    if (rename($infodir, $newname)) {
	#
	# Chown the owner/group to root. There is no need to modify
	# the permissions since its on boss.
	#
	if (! chown(0, 0, $newname)) {
	    fatal("Could not chown directory $newname to 0/0: $!");
	}
    }
    else {
	fatal("Could not rename proj info directory to $newname: $!");
    }
}

#
# Grab the group list. We need to delete all of the unix groups for the
# project. We do this with a subscript, so need to flip UID for perl.
# Note that rmgroups will handle deleting users from group_membership
# table by calling modgroups for each user. 
#
$target_project->GroupList(\@grouplist) == 0 or
    fatal("Could not get subgroup list for $target_project");

$EUID = $UID;
foreach my $group (@grouplist) {
    my $idx = $group->gid_idx();
    
    print "Removing project group $group ...\n";

    if (system("$RMGROUP $idx")) {
	fatal("Could not remove subgroup $group!");
    }
}

#
# Now remove the main project group. 
#
print "Removing main project group ...\n";
if (system("$RMGROUP $pid_idx")) {
    fatal("Could not remove main project group $pid!");
}

#
# Now remote the proj admin list, but only if the proj was never
# approved
#
if (0 && $MAILMANSUPPORT) {
    my $approved =
	DBQuerySingleFatal("select approved from projects where pid='$pid'");
    if (!$approved) {
	my $listname = "$pid-admin";
	system("$DELMMLIST -a $listname") == 0 or
	    fatal("$DELMMLIST -a $listname failed!");
    }
}

$EUID = 0;

#
# Then the project table itself, plus a few other bits and pieces
# 
DBQueryFatal("delete FROM last_reservation where pid_idx='$pid_idx'");
DBQueryFatal("delete FROM project_reservations where pid_idx='$pid_idx'");
DBQueryFatal("delete FROM project_licenses where pid_idx='$pid_idx'");
DBQueryFatal("delete FROM project_nsf_awards where pid_idx='$pid_idx'");
DBQueryFatal("delete FROM nodetypeXpid_permissions where pid_idx='$pid_idx'");
DBQueryFatal("delete FROM project_stats where pid_idx='$pid_idx'");
DBQueryFatal("delete FROM group_stats where pid_idx='$pid_idx'");
DBQueryFatal("delete FROM projects where pid_idx='$pid_idx'");
DBQueryFatal("delete FROM group_policies where pid_idx='$pid_idx'");
DBQueryFatal("delete FROM group_features where pid_idx='$pid_idx'");

print "Project $pid has been removed!\n";
exit(0);

sub fatal($) {
    my($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}
