#!/usr/bin/perl -w
#
# Copyright (c) 2000-2018 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;

#
# node_status - Updates the 'status' column in the node_status table.
# Currently run as a cron job, but is probably better as a testbed
# daemon. 
#
#
# Configure variables
#
my $TB		= "/home/achauhan06/CLOUDLAB/SSHCLOUD/CloudLabonESI/emulab-devel/newbuild";
my $TBOPS       = "testbed-ops\@ops.cloudlab.umass.edu";
my $TBLOGS      = "testbed-logs\@ops.cloudlab.umass.edu";
my $BOSSNODE    = "boss.cloudlab.umass.edu";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

my $verbose = 0;
my $debug = 0;
$verbose = 1
    if ($debug);

#
# Turn off line buffering on output
#
$| = 1; 

# Load the Testbed support stuff.
use lib "/home/achauhan06/CLOUDLAB/SSHCLOUD/CloudLabonESI/emulab-devel/newbuild/lib";
use libdb;
use EmulabConstants;
use event;
use Node;

#
# Only root and admins are allowed to use this script
#
if (($UID != 0) && (!TBAdmin())) {
    die("*** $0:\n".
	"    You do not have permission to run this script!\n");
}

#
# Part 1: Set the node_status.status column for nodes.
# The idea is simple; any nodes that have not reported in (isalive in
# tmcd) within the last XX seconds are moved to the down category.
#

#
# Grab the reporting intervals for the various types of nodes - we convert
# them into seconds, and make the timeout twice as big as the reporting
# interval.
#
my $vnode_timeout = TBGetSiteVar("watchdog/isalive/vnode") * 60 * 2;
my $local_timeout = TBGetSiteVar("watchdog/isalive/local") * 60 * 2;

print "\n=== node_status ".
    "(local=$local_timeout, vnode=$vnode_timeout) ".
    "running at " . `date`
    if ($verbose);

#
# A zero timeout value means no timeout
#
if ($vnode_timeout == 0) {
    print " WARNING: no timeout on local vnodes\n"
	if ($verbose);
    $vnode_timeout = 999999999;
}
if ($local_timeout == 0) {
    print " WARNING: no timeout on local nodes\n"
	if ($verbose);
    $local_timeout = 999999999;
}

#
# Fun facts:
#	isvirtnode     -> vnode
# so:
#	local phys node == !isremotenode && !isvirtnode
#	local virt node == !isremotenode && isvirtnode
#
my $query_result =
    DBQueryFatal("SELECT n.node_id,ns.status,r.pid, ".
		 "       nt.isvirtnode, ".
                 "       unix_timestamp()-unix_timestamp(ns.status_timestamp) ".
		 "from nodes as n ".
		 "left join node_types as nt on n.type=nt.type ".
		 "left join node_status as ns on ns.node_id=n.node_id ".
		 "left join reserved as r on r.node_id=n.node_id ".
		 "where ".
		 " ns.status != 'down' && " .
		 # Local phys nodes:
		 " ((nt.isremotenode=0 && nt.isvirtnode=0 && ".
		 "   ((unix_timestamp()-unix_timestamp(ns.status_timestamp)) > $local_timeout)) || ".
		 # Local virtual node:
		 # must be allocated to an experiment to be considered.
		 "  (nt.isremotenode=0 && nt.isvirtnode=1 && ".
		 "   r.pid is not null && ".
		 "   ((unix_timestamp()-unix_timestamp(ns.status_timestamp)) ".
		 "     > $vnode_timeout)))");

while (my ($node_id,$status,$pid,$isvirt,$timediff) =
       $query_result->fetchrow_array) {
    my $newstatus = "down";

    if ($verbose > 1) {
	print "$node_id, $status, $pid, $isvirt, $timediff\n";
    }

    #
    # If its reserved and not reporting isalive, then its a user
    # image not doing what it is supposed to. Mark as possibly
    # down since we do not really know whats up. This includes old
    # images as well, but that would only happen when the node is
    # reserved since free nodes run the default image and report in.
    #
    if (defined($pid)) {
	$newstatus = "possibly down";
    }
    else {
	#
	# We do not mess with nodes that are running an ALWAYSUP osid.
	#
	my $node = Node->Lookup($node_id);
	next
	    if (!defined($node));
	my $image = $node->RunningOsImage();

	if (defined($image)) {
	    if ($image->op_mode() && $image->op_mode() eq "ALWAYSUP") {
		if ($verbose) {
		    print "Skipping ALWAYSUP up node $node_id\n";
		}
		next;
	    }
	}
    }
    next
	if ($status eq $newstatus);

    print "  $node_id: $status to $newstatus after $timediff\n"
	if ($verbose);

    #
    # Repeat the time check to avoid dropping a node that just came up?
    #
    if (!$debug) {
	DBQueryFatal("update node_status set status='$newstatus' ".
		     "where node_id='$node_id'");
	#
	# Generate local event.
	#
	event::EventSendWarn(objtype   => TBDB_TBEVENT_NODESTATUS,
			     objname   => $node_id,
			     eventtype => $newstatus,
			     host      => $BOSSNODE);	
    }
}
exit(0);
