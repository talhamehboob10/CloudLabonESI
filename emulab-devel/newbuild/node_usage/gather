#!/usr/bin/perl 
#
# Copyright (c) 2009-2018 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;
use POSIX qw(strftime floor ceil);
use Data::Dumper;
use Carp;

my $LIMIT = 3000000;

$Data::Dumper::Indent = 1;

use strict;
use warnings;

our $NODE_USAGE_DB;
our @NODE_OOS_EXPT;
require "/home/achauhan06/CLOUDLAB/SSHCLOUD/CloudLabonESI/emulab-devel/newbuild/etc/node_usage.conf";

my $prep    = 1;
my $results = 1;
my $debug   = 0;
my $fresh   = 0;

# Turn off line buffering on output
$| = 1; 

# Load the Testbed support stuff.
use lib "/home/achauhan06/CLOUDLAB/SSHCLOUD/CloudLabonESI/emulab-devel/newbuild/lib";
use libdb;
use libtestbed;

chdir "/home/achauhan06/CLOUDLAB/SSHCLOUD/CloudLabonESI/emulab-devel/newbuild/data/node_usage";

$fresh = 1 unless -e "gather.state.1" && "gather.state.2";

my %node_type;
my %node_class;

my $qr = DBQueryFatal("select node_id,type from nodes");
while (my ($node_id, $type) = $qr->fetchrow()) {
    $node_type{$node_id} = $type;
}

$qr = DBQueryFatal("select class,type from node_types");
while (my ($class,$type) = $qr->fetchrow()) {
    $node_class{$type} = $class;
}
$node_class{'?'} = '?';

my %oos = ();
if (@NODE_OOS_EXPT > 0) {
    my $eidclause = join(" or ", map("eid='$_'", @NODE_OOS_EXPT));
    $qr = DBQueryFatal("select idx from experiments where pid='emulab-ops'".
		       " and ($eidclause)");
    while (my ($idx) = $qr->fetchrow()) {
	$oos{$idx} = 1;
    }
    print "Will skip experiments: ", join(' ', keys %oos), "\n"
	if ($debug);
}

# XXX find the reloadpending exptid for a hack below
$qr = DBQueryFatal("select idx from experiments where pid='emulab-ops'".
		   " and eid='reloadpending'");
my $rpidx = $qr->fetchrow();

our %last_trans;
our %node_state;
our $prev;
our $prev_line;
our $last_history_id = -1;
our %last_expidx;
our %maybe_free;

my $again = 0;

if ($prep) {

    if ($fresh) {
	DBQueryFatal("create database if not exists $NODE_USAGE_DB");
	DBQueryFatal("drop table if exists $NODE_USAGE_DB.node_history_copy");
	DBQueryFatal("create table $NODE_USAGE_DB.node_history_copy like node_history");
    }

    DBQueryFatal("insert into $NODE_USAGE_DB.node_history_copy select * from node_history where history_id > IFNULL((select max(history_id) from $NODE_USAGE_DB.node_history_copy), 0)");

    if ($fresh) {
	DBQueryFatal("drop table if exists $NODE_USAGE_DB.node_trans");
	DBQueryFatal("create table $NODE_USAGE_DB.node_trans (".
		     "  history_id int unsigned not null primary key,".
		     "  stamp int unsigned not null, ".
		     "  node_id char(32) not null, ".
		     "  op enum('alloc','free','invalid','oos') not null".
		     ")");
    }
    
    local %last_trans;
    local %node_state;
    local %last_expidx;
    local %maybe_free;

    if (!$fresh) {
	do "./gather.state.1";
    }
    
    $qr = DBQueryFatal("select history_id,node_id,op,stamp,exptidx from $NODE_USAGE_DB.node_history_copy where history_id > $last_history_id order by history_id limit $LIMIT");

    if ($qr->num_rows() == $LIMIT) {
	$again = 1;
    }

    my $prev_history_id = $last_history_id;

    local $last_history_id = $prev_history_id;
    
    while (my ($history_id,$node_id,$op,$stamp,$exptidx) = $qr->fetchrow()) {
	my $type = $node_type{$node_id};
	$type = '?' unless defined $type;
	next unless $node_class{$type} eq 'pc';

	$exptidx = 0 unless defined $exptidx;
	my $prev_state = $node_state{$node_id};
	my $prev_idx = $last_expidx{$node_id};
	if ($op eq "free") {
	    $node_state{$node_id} = "free";
	} elsif ($oos{$exptidx}) {
	    $node_state{$node_id} = "oos";
	} else {
	    $node_state{$node_id} = "alloc";
	}
	my $invalid;
	if (defined $prev_state) {
	    #
	    # XXX We had a rough patch in 7/07-8/07 where the history records
	    # show nodes going from reloadpending directly into another
	    # experiment and back to reloadpending (i.e., there were no
	    # "free" records").
	    #
	    # We paper over those here since they are predictable. If
	    # we get consecutive alloc events where the previous one was
	    # to reloadpending (rather, the experiment ID indicates
	    # reloadpending), we do back and mark the previous event
	    # as a free.
	    #
	    if ($op eq 'alloc' && $prev_state ne 'free') {
		if ($prev_state eq 'alloc' && $prev_idx == $rpidx &&
		    $maybe_free{$node_id}) {
		    my $fid = $maybe_free{$node_id}->[0];
		    my $fts = $maybe_free{$node_id}->[1];
		    $prev_state = 'free';
		    $prev_idx = $fid;
		    DBQueryFatal("replace into $NODE_USAGE_DB.node_trans values ($fid, $fts, '$node_id', 'free')");
		} else {
		    $invalid = "alloc non-free node";
		}
	    } elsif ($op eq 'move') {
		#
		# If moving into reloadpending, remember the entry as
		# we might need to insert it as a free entry later
		#
		$maybe_free{$node_id} = [ $history_id, $stamp ]
		    if ($exptidx == $rpidx);
		# keep track of the current exptidx
		$last_expidx{$node_id} = $exptidx
		    if ($prev_state eq 'alloc');
		#
		# If we were out of service and are being moved out,
		# record this as an allocated event.
		#
		if ($prev_state eq 'oos' and $node_state{$node_id} ne 'oos') {
		    $node_state{$node_id} = 'alloc';
		}
		#
		# If we are a free node and moved into another experiment
		# consider it an allocation or 'oos' event.
		#
		elsif ($prev_state eq 'free') {
		    if ($oos{$exptidx}) {
			$node_state{$node_id} = 'oos';
		    } else {
			$node_state{$node_id} = 'alloc';
		    }
		}
	    } elsif ($op eq 'free') {
		delete $maybe_free{$node_id};
		$invalid = "free already free node"
		    if ($prev_state eq 'free');
	    }
	}
	if ($invalid) {
	    #print STDERR "WARNING: $node_id: $history_id ($stamp) $last_trans{$node_id}: $invalid\n";
	    DBQueryFatal("update $NODE_USAGE_DB.node_trans set op = 'invalid' where history_id=$last_trans{$node_id}");
	} elsif (!defined $prev_state || $prev_state ne $node_state{$node_id}) {
	    DBQueryFatal("replace into $NODE_USAGE_DB.node_trans values ($history_id, $stamp, '$node_id', '$node_state{$node_id}')");
	    $last_trans{$node_id} = $history_id;
	    $last_expidx{$node_id} = $exptidx;
	}
	$last_history_id = $history_id;
    }

    open F, ">gather.state.1";
    print F Data::Dumper->Dump([\%last_trans], ['*last_trans']);
    print F Data::Dumper->Dump([\%node_state], ['*node_state']);
    print F Data::Dumper->Dump([$last_history_id], ['*last_history_id']);
    close F;
}

if ($results) {

    local %node_state;
    local $prev = 0;
    local $prev_line = '';
    
    if ($fresh) {
	unlink "node_usage.raw";
    } else {
	do "./gather.state.2";
    }

    open F, ">>node_usage.raw";

    $qr = DBQueryFatal("select history_id,stamp,node_id,op from $NODE_USAGE_DB.node_trans where history_id > $last_history_id order by history_id");
    
    while (my ($history_id,$stamp,$node_id,$op) = $qr->fetchrow()) {
	my $type = $node_type{$node_id};
	$type = '?' unless defined $type;
	$node_state{$node_id} = $op;
	my %tally;
	while (my ($n, $s) = each %node_state) {
	    my $t = $node_type{$n};
	    $t = '?' unless defined $t;
	    $tally{$t}[0]++;
	    $tally{$t}[1]++ if $s eq 'free';
	    $tally{$t}[2]++ if $s eq 'invalid';
	    $tally{$t}[3]++ if $s eq 'oos';
	}
	my $line = "$history_id $stamp ";
	foreach my $t (sort keys %tally) {
	    $tally{$t}[1] = 0 unless defined $tally{$t}[1];
	    $tally{$t}[2] = 0 unless defined $tally{$t}[2];
	    $tally{$t}[3] = 0 unless defined $tally{$t}[3];
	    $line .= " $t: $tally{$t}[0] $tally{$t}[1] $tally{$t}[2] $tally{$t}[3] ";
	}
	$line .= "\n";
	print F $prev_line if $stamp != $prev;
	$prev = $stamp;
	$prev_line = $line;
    }

    open F, ">gather.state.2";
    print F Data::Dumper->Dump([\%node_state], ['*node_state']);
    print F Data::Dumper->Dump([$prev, $prev_line], ['*prev', '*prev_line']);
    close F;
}

if ($again) {
    printf STDERR "Too many rows to handle at once, running again...\n";
    exec "/home/achauhan06/CLOUDLAB/SSHCLOUD/CloudLabonESI/emulab-devel/newbuild/libexec/node_usage/gather";
}
