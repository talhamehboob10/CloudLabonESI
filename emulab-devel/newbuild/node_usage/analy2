#!/usr/bin/perl
#
# Copyright (c) 2009-2021 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

use Data::Dumper;
use POSIX 'strftime','mktime';

use strict;
use warnings;
no warnings 'uninitialized';

our (@to_plot);
require "/home/achauhan06/CLOUDLAB/SSHCLOUD/CloudLabonESI/emulab-devel/newbuild/etc/node_usage.conf";

chdir "/home/achauhan06/CLOUDLAB/SSHCLOUD/CloudLabonESI/emulab-devel/newbuild/data/node_usage";

my $TOLERANCE_INTERVAL = 1/3;

my @idxs = (0 .. (@to_plot * 2 - 1));

my %res;

sub tally ($$@) {
    my ($str, $what, @d) = @_;
    foreach my $i (@idxs) {
	if ($d[$i] != $d[$i]) { # ie NaN
	    $res{$what}{data}{$str}{invalid}[$i]++;
	} else {
	    $res{$what}{data}{$str}{count}[$i]++;
	    $res{$what}{data}{$str}{data}[$i] += $d[$i];
	}
    }
}

sub tally_mod ($$@) {
    my ($bin, $what, @d) = @_;
    foreach my $i (@idxs) {
	next if $d[$i] != $d[$i]; # ie NaN
	$res{$what}{data}[$bin]{count}[$i]++;
	$res{$what}{data}[$bin]{data}[$i] += $d[$i];
    }
}

open F, "node_usage-hourly.dat" or die;

$res{hourly_last2weeks} = {type=>'normal'};
$res{daily_last2months} = {type=>'normal'};
$res{daily} = {type=>'normal'};
$res{weekly} = {type=>'normal'};
$res{monthly} = {type=>'normal'};
$res{yearly} = {type=>'normal'};
$res{by_hour} = {type=>'mod'};
$res{by_dayofweek} = {type=>'mod'};
$res{by_hourofweek} = {type=>'mod',div=>24};
$res{by_month} = {type=>'mod'};

my @now = localtime();
my $hourly_start = mktime(0, 0, 0, $now[3]-14, $now[4], $now[5]);
my $daily_start = mktime(0, 0, 0, $now[3], $now[4]-2, $now[5]);

while (<F>) {
    chop;
    my @d = split / /;
    my $time = shift @d;
    my @time = localtime($time);
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = @time;
    #next unless $year + 1900 == 2009;
    my $wday_m = ($wday - 1) % 7;
    tally(strftime("%Y-%m-%d_%R", @time), 'hourly_last2weeks', @d)
	if ($time >= $hourly_start);
    tally(strftime("%Y-%m-%d", @time), 'daily_last2months', @d)
	if ($time >= $daily_start);
    tally(strftime("%Y-%m-%d", @time), 'daily', @d);
    tally(strftime("%Y-%m-%d", $sec,$min,$hour,$mday-$wday_m,$mon,$year), 'weekly', @d);
    tally(strftime("%Y-%m", @time), 'monthly', @d);
    tally(strftime("%Y", @time), 'yearly', @d);
    tally_mod($hour,'by_hour', @d);
    tally_mod($wday_m,'by_dayofweek', @d);
    tally_mod($wday_m*24+$hour,'by_hourofweek', @d);
    tally_mod($mon, 'by_month', @d);
}

foreach my $k (keys %res) {

    open F, ">node_usage-$k.dat";

    if ($res{$k}{type} eq 'normal') {
	foreach my $i (sort keys %{$res{$k}{data}}) {
	    my @r;
	    my $d = $res{$k}{data}{$i};
	    foreach my $j (@idxs) {
		my $invalid = $d->{invalid}[$j];
		my $count = $d->{count}[$j];
		if ($invalid / ($invalid + $count) > $TOLERANCE_INTERVAL) {
		    $r[$j] = 'NaN';
		} else {
		    $r[$j] = $d->{data}[$j]/$count;
		    die "Unexpected NaN" if $r[$j] != $r[$j];
		}
	    }
	    print F join(' ', "$i ", map {sprintf("%5.1f", $_)} @r),"\n" 
	}
    } else {
	my $div = $res{$k}{div};
	$div = 1 unless defined $res{$k}{div};
	foreach my $i (0 .. $#{$res{$k}{data}}) {
	    my @r;
	    my $d = $res{$k}{data}[$i];
	    foreach my $j (@idxs) {
		$r[$j] = $d->{data}[$j] ? $d->{data}[$j]/$d->{count}[$j] : 0;
	    }
	    print F join(' ', sprintf("%6.3f ", $i/$div), map {sprintf("%5.1f", $_)} @r),"\n" 
	}
    }
}
