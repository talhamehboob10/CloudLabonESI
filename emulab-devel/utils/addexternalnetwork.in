#!/usr/bin/perl -w
#
# Copyright (c) 2012 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use File::Temp qw(tempfile);

#
# Add a generic device to the DB. 
#
sub usage()
{
    print STDERR "Usage: addexternalnetwork [-d] [-n] [-w external_wire_urn] [-i external_interface_urn] [-t vm-type] <network_id> <node_id> <external_manager> <vlan-vlan[,vlan-vlan]*>\n";
    print STDERR "Options:\n";
    print STDERR " -d       - Turn on debugging\n";
    print STDERR " -n       - Dry run mode\n";
    exit(-1);
}
my $optlist   = "hdnw:i:t:";
my $debug     = 0;
my $impotent  = 0;
my $network;
my $node_id;
my $external;
my $vlans;
my $wire;
my $iface;
my $vmtype;

# Protos
sub fatal($);
sub CreateType($$);
sub CreateNode();

#
# Configure variables
#
my $TB		   = "@prefix@";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use emdb;
use EmulabConstants;
use emutil;
use User;
use Node;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/sbin:/usr/bin:";

#
# Parse command arguments. 
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{'h'})) {
    usage();
}
if (defined($options{'d'})) {
    $debug = 1;
}
if (defined($options{'n'})) {
    $impotent = 1;
}
if (defined($options{'w'})) {
    $wire = $options{'w'};
}
if (defined($options{'i'})) {
    $iface = $options{'i'};
}
if (defined($options{'t'})) {
    $vmtype = $options{'t'};
}
usage()
    if (scalar(@ARGV) != 4);

($network, $node_id, $external, $vlans) = @ARGV;

if ($vlans =~ /([0-9,\-]+)/) {
} else {
    usage();
}

#
# Verify user, must be admin.
#
my $this_user = User->ThisUser();
if (! defined($this_user)) {
    fatal("You ($UID) do not exist!");
}
if (!$this_user->IsAdmin()) {
    fatal("You are not a testbed administrator!");
}

#
# The node may not already exist.
#
my $node = Node->Lookup($node_id);
if (! defined($node)) {
    fatal("Node doesn't exist in the DB");
}

my $type = $node->type();
if (defined($vmtype)) {
    $type = $vmtype;
}

sub fatal($)
{
    my ($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}

$network = DBQuoteSpecial($network);
$node_id = DBQuoteSpecial($node_id);
$type = DBQuoteSpecial($type);
$external = DBQuoteSpecial($external);
$vlans = DBQuoteSpecial($vlans);

my $query = "REPLACE INTO external_networks SET node_id=$node_id, ".
    "node_type=$type, vlans=$vlans, ".
    "external_manager=$external, network_id=$network";
if (defined($wire)) {
    $wire = DBQuoteSpecial($wire);
    $query = $query . ", external_wire=$wire";
}
if (defined($iface)) {
    $iface = DBQuoteSpecial($iface);
    $query = $query . ", external_interface=$iface";
}

if ($debug) {
    print STDERR $query . "\n";
}
if (! $impotent) {
    DBQueryWarn($query);
}
