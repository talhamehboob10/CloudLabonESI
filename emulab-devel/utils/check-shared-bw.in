#!/usr/bin/perl -w                                                              
#
# Copyright (c) 2008-2011 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;

#
# Checks to see if the bandwidth remaining on shared interfaces
# matches the maximum capacity - used capacity for those interfaces
#
sub usage()
{
    print "Usage: check-shared-bw [-d] [-f]\n";
    exit(1);
}
my $optlist    = "df";
my $debug      = 0;
my $shouldFix  = 0;


our $TB = "@prefix@";

use lib "@prefix@/lib";
use libdb;
use libaudit;

#
# Check args.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"f"})) {
    $shouldFix = 1;
}
usage()
    if (@ARGV);

# Record output in case of error.
LogStart(0, undef, LIBAUDIT_LOGTBOPS());

# Get max bandwidth for interface types on all matching nodes

# Key is node:iface
my %iface_bw = ();
my $dbresult = DBQueryFatal("select i.node_id, i.iface, t.max_speed " .
			    "from interfaces as i " .
			    "left join interface_types as t " .
			    "  on i.interface_type=t.type ".
			    " left join reserved as r on i.node_id=r.node_id ".
			    "where r.erole='sharedhost'");
while (my ($node, $iface, $max_speed) = $dbresult->fetchrow_array) {
    $iface_bw{"$node:$iface"} = $max_speed;
}

# Find all vinterface usage
$dbresult = DBQueryFatal("select v.node_id, v.iface, v.bandwidth ".
			 "from vinterfaces as v ".
			 "left join reserved as r on v.node_id=r.node_id ".
			 "where r.erole='sharedhost'");
while (my ($node, $iface, $bw) = $dbresult->fetchrow_array) {
    if (defined($iface)) {
	my $key = "$node:$iface";
	if (exists($iface_bw{$key})) {
	    $iface_bw{$key} -= $bw;
	}
    }
}

# Find remaining bandwidth for interfaces
my %iface_remaining = ();
$dbresult = DBQueryFatal("select i.node_id, i.iface, i.remaining_bandwidth ".
			 "from interface_state as i ".
			 "left join reserved as r on i.node_id=r.node_id ".
			 "where r.erole='sharedhost'");
while (my ($node, $iface, $bw) = $dbresult->fetchrow_array) {
    $iface_remaining{"$node:$iface"} = $bw;
}

foreach my $key (sort(keys(%iface_remaining))) {
    if (! exists($iface_bw{$key})) {
	print STDERR "$key is in interface_state, but not " .
	    "interfaces.\n";
    } elsif ($iface_bw{$key} != $iface_remaining{$key}) {
	print STDERR "$key\thas\t" . $iface_remaining{$key} .
	    "\tshould have\t" . $iface_bw{$key} . "\n";
	if ($shouldFix) {
	    print STDERR "Fixing interface ...\n";
	    my ($node, $iface) = split(":", $key);
	    my $query = "update interface_state " .
		"set remaining_bandwidth=" . $iface_bw{$key} . " " .
		"where node_id='$node' and iface='$iface'";
	    print "Running: " . $query . "\n";
	    DBQueryFatal($query);
	}
    }
}

print STDERR scalar(keys(%iface_remaining)) . " interfaces analyzed\n"
    if ($debug);

exit(0);

