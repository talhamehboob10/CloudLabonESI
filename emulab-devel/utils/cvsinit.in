#!/usr/bin/perl -wT
#
# Copyright (c) 2005-2011 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;

#
# Initialize the CVS support.
#
sub fatal($);

#
# Configure variables
#
my $TB       = "@prefix@";
my $CVSBIN   = "/usr/bin/cvs";
my $CHOWN    = "/usr/sbin/chown";
my $CVSSUPPORT  = @CVSSUPPORT@;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/usr/bin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Load the Testbed support stuff. 
#
use lib "@prefix@/lib";
use libaudit;
use libdb;
use libtestbed;
use Project;

#
# We have to run this script as root.
#
if ($UID != 0) {
    die("*** $0:\n".
	"    Must run this script as root!\n");
}

if (! $CVSSUPPORT) {
    die("*** $0:\n".
	"    You must turn on CVSSUPPORT in your defs file!\n");
}

my $query_result =
    DBQueryFatal("select pid_idx from projects");

my $PROJROOT = PROJROOT();
while (my ($pid_idx) = $query_result->fetchrow_array()) {
    my $project = Project->Lookup($pid_idx);
    next
	if (!defined($project));

    my $pid = $project->pid();
    my $projhead = $project->head_uid();
    my $unix_name = $project->unix_name();
	
    next
	if (! -d "$PROJROOT/$pid");

    my $CVSDIR = "$PROJROOT/$pid/CVS";

    next
	if (-d $CVSDIR && -d "$CVSDIR/CVSROOT");

    my (undef,undef,$uid) = getpwnam($projhead)
	or fatal("$projhead not in passwd file");

    my (undef,undef,$gid) = getgrnam($unix_name)
	or fatal("$unix_name not in group file");

    if (! -e $CVSDIR) {
	if (! mkdir("$CVSDIR", 0770)) {
	    fatal("Could not make directory $CVSDIR: $!");
	}
	if (! chmod(0770, "$CVSDIR")) {
	    fatal("Could not chmod directory $CVSDIR: $!");
	}
	if (! chown($uid, $gid, "$CVSDIR")) {
	    fatal("Could not chown $CVSDIR to $uid/$gid: $!");
	}
    }
    system("$CVSBIN -d $CVSDIR init");
    if ($?) {
	fatal("Could not cvs init $CVSDIR!");
    }
    # Chown the tree.
    system("$CHOWN -R ${uid}:${gid} $CVSDIR");
    if ($?) {
	fatal("Could not chown ${uid}:${gid} $CVSDIR!");
    }
}
exit(0);

sub fatal($) {
    my($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}
