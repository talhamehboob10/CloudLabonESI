#!/usr/bin/perl -w
#
# Copyright (c) 2008-2017 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;

#
# Report network traffic from nodes' control network.
#
sub usage()
{
    print STDERR "Usage: node_traffic [-aArsE] [-i seconds] [node...]\n";
    print STDERR "Reports traffic from nodes on the control network.\n";
    print STDERR "-h         This message\n";
    print STDERR "-a         Show all nodes regardless of node state\n";
    print STDERR "-A         Really all; includes free nodes as well\n";
    print STDERR "-r	     Show only traffic received by each node\n";
    print STDERR "-s	     Show only traffic sent by each node\n";
    print STDERR "-i seconds Show stats over a <seconds>-period interval\n";
    print STDERR "-E	     Aggregate by experiment\n";
    print STDERR "-R	     Report rate rather than count over interval\n";
    print STDERR "-d         Debugging output\n";
#    print STDERR "-C	     Show control net traffic\n";
    exit(-1);
}

sub gather($$);

my $optlist  = "CERi:aArsd";
my $debug = 0;
my $interval = 0;
my $doall = 0;
my $send = 1;
my $recv = 1;
my $byexpt = 0;
my $byrate = 0;

# XXX only does control net right now
my $controlnet = 1;

#
# Configure variables
#
my $TB = "@prefix@";

#
# Testbed Support libraries
#
#use lib "/usr/testbed/lib";
use lib "@prefix@/lib";
use libdb;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/sbin:/usr/bin:";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# 
#
my $portstats	= "$TB/bin/portstats";
my @nodes       = ();
my %switches	= ();
my %pcs		= ();

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"h"})) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"a"})) {
    $doall = 1;
}
if (defined($options{"A"})) {
    $doall = 2;
}
if (defined($options{"r"})) {
    $recv = 1;
    $send = 0;
}
if (defined($options{"s"})) {
    $recv = 0;
    $send = 1;
}
if (defined($options{"i"})) {
    $interval = int($options{"i"});
    if ($interval <= 0) {
	die("Bogus interval $interval\n");
    }
}
if (defined($options{"E"})) {
    $byexpt = 1;
}
if (defined($options{"R"})) {
    if ($interval == 0) {
	die("Must specify interval (-i) when using -r\n");
    }
    $byrate = 1;
}
if (defined($options{"C"})) {
    $controlnet = 1;
}

@nodes = @ARGV;

#
# No nodes specified, get stats for all nodes that are in an experiment.
#
my $nclause = "";
if (@nodes > 0) {
	$nclause = "and n.node_id in ('" . join("','", @nodes) . "')";
}

my $query_result;

#
# Find the names of all the control net switches.
# Note that shared switches will have role==testswitch, so include those.
#
$query_result = DBQueryWarn("select node_id from nodes where".
			    "  role='ctrlswitch' or role='testswitch'");
if (! $query_result || $query_result->numrows == 0) {
    print STDERR "No control net switches found!?\n";
    exit(0);
}
my @switches = ();
while (my ($sw) = $query_result->fetchrow_array()) {
    push(@switches, $sw);
}
my $sclause = "and node_id2 in ('" . join("','", @switches) . "')";

print STDERR "Switches: ", join(" ", @switches), "\n"
    if ($debug);

if ($doall == 2) {
    $query_result =
	DBQueryWarn("select r.pid,r.eid,node_id1,eventstate,iface1,node_id2".
		    " from wires as w,nodes as n".
		    " left join reserved as r on n.node_id=r.node_id".
		    " where w.node_id1=n.node_id".
		    "  $sclause".
		    "  and w.type='Control'".
		    "  and n.role='testnode' $nclause".
		    " order by node_id2,iface1");
} else {
    $query_result =
	DBQueryWarn("select r.pid,r.eid,node_id1,eventstate,iface1,node_id2".
		    " from wires as w,nodes as n,reserved as r".
		    " where w.node_id1=n.node_id and w.node_id1=r.node_id".
		    "  $sclause".
		    "  and w.type='Control'".
		    "  and n.role='testnode' $nclause".
		    " order by node_id2,iface1");
}
if (! $query_result || $query_result->numrows == 0) {
    print STDERR "Node(s) not found.\n";
    exit(0);
}

print STDERR "Nodes: "
    if ($debug);

while (my %row = $query_result->fetchhash()) {
    my $switch = $row{'node_id2'};
    my $pc = $row{'node_id1'};
    my $pciface = $row{'iface1'};
    my $exp;
    if (defined($row{'pid'})) {
	$exp = $row{'pid'} . "/" . $row{'eid'};
    } else {
	$exp = "<NONE>";
    }

    my $cnet = "$pc:$pciface";

    push(@{$switches{$switch}}, $cnet);
    $pcs{$cnet}{'exp'} = $exp;
    $pcs{$cnet}{'state'} = $row{'eventstate'};

    print "$pc "
	if ($debug);
}
print "\n"
    if ($debug);

my %before = ();
if ($interval > 0) {
    gather(\%pcs, \%before);
    print STDERR "Waiting $interval seconds ...\n";
    sleep($interval);
}
my %after = ();
gather(\%pcs, \%after);

my $divisor = 1;
if ($interval > 0) {
    my $tstamp = $interval;
    if (exists($before{'tstamp'}) && exists($after{'tstamp'})) {
	$tstamp = $after{'tstamp'} - $before{'tstamp'};
    }
    if ($byrate) {
	$divisor = $tstamp;
	print "Average rate over";
    } else {
	print "Total count after";
    }
    print " $tstamp seconds\n";
}

my %expcounts = ();

# weed out bad boys
my @list = ();
my @zeros = (0, 0, 0, 0, 0, 0);
foreach my $node (keys %pcs) {
    if (!exists($after{$node}{'counts'})) {
	print STDERR "*** $node: got no portstats, not an admin?\n";
	next;
    }

    # XXX
    if (!exists($before{$node})) {
	$before{$node}{'counts'} = \@zeros;
    }

    if (!$doall && $pcs{$node}{'state'} ne "ISUP") {
	print STDERR "*** $node: not up (", $pcs{$node}{'state'}, ")\n";
	next;
    }

    #
    # Calculate totals, taking into account wrap around of counters...
    #
    my @counts = ();
    my $bcs = $before{$node}{'counts'};
    my $acs = $after{$node}{'counts'};
    foreach my $i (0..5) {
	if ($acs->[$i] < $bcs->[$i]) {
	    $counts[$i] = $acs->[$i] + (2**32 - $bcs->[$i]);
	} else {
	    $counts[$i] = $acs->[$i] - $bcs->[$i];
	}
    }
    #
    # ...and the aggregated counts we put out currently
    #
    my $oct = 0;
    my $upkts = 0;
    my $npkts = 0;
    if ($send) {
	$oct += $counts[0];
	$upkts += $counts[1];
	$npkts += $counts[2];
    }
    if ($recv) {
	$oct += $counts[3];
	$upkts += $counts[4];
	$npkts += $counts[5];
    }
    $pcs{$node}{'totals'} =
	[ $oct, $upkts, $npkts, $upkts + $npkts ];
    #
    # ...and the sort key (total packets)
    #
    $pcs{$node}{'total'} = $upkts + $npkts;
    push(@list, $node);

    if ($byexpt) {
	my $tot = $pcs{$node}{'totals'};
	my $exp = $pcs{$node}{'exp'};
	if (!exists($expcounts{$exp})) {
	    $expcounts{$exp} = [ 0, 0, 0, 0 ];
	}
	$expcounts{$exp}->[0] += $tot->[0];
	$expcounts{$exp}->[1] += $tot->[1];
	$expcounts{$exp}->[2] += $tot->[2];
	$expcounts{$exp}->[3] += $tot->[3];
    }
}

if ($byexpt) {
    printf("%25s %12s %12s %12s %12s\n",
	   "Experiment", "Tot Pkts", "Unicast", "Non-Uni", "Tot Bytes");
    foreach my $exp (sort esortem keys %expcounts) {
	printf("%25s %12d %12d %12d %12d\n",
	       $exp, $expcounts{$exp}->[3]/$divisor,
	       $expcounts{$exp}->[1]/$divisor,
	       $expcounts{$exp}->[2]/$divisor,
	       $expcounts{$exp}->[0]/$divisor);
    }
} else {
    @list = sort sortem @list;

    printf("%12s %25s %12s %12s %12s %12s\n",
	   "Node", "Experiment", "Tot Pkts", "Unicast", "Non-Uni", "Tot Bytes");
    foreach my $node (@list) {
	my $tot = $pcs{$node}{'totals'};
	my $exp = $pcs{$node}{'exp'};
	my $s = $pcs{$node}{'state'};

	printf("%12s %25s %12d %12d %12d %12d\n",
	       $node, $exp, $tot->[3]/$divisor, $tot->[1]/$divisor,
	       $tot->[2]/$divisor, $tot->[0]/$divisor);
    }
}

sub esortem($$)
{
    my ($a, $b) = @_;

    my $atot = $expcounts{$a}->[3];
    my $btot = $expcounts{$b}->[3];
    return $btot <=> $atot;
}

sub sortem($$)
{
    my ($a, $b) = @_;

    my $atot = $pcs{$a}{'total'};
    my $btot = $pcs{$b}{'total'};
    return $btot <=> $atot;
}

sub gather($$)
{
    my ($pcref, $resref) = @_;

    foreach my $switch (keys %switches) {
	my $slist = join(' ', @{$switches{$switch}});
	my $arg = $byexpt ? "" : "-c";
	open(PS, "$portstats -i $arg -r -l -p $slist 2>&1 |") or
	    die "Could not get portstats\n";
	while (<PS>) {
	    chomp;
	    # XXX ignore warnings from snmpit
	    next if ($_ =~ /^WARNING:/);
	    next if ($_ !~ /^[-\w]+:\w+/);
	    my ($node, @counts) = split ',';
	    if (@counts != 6) {
		print STDERR "*** $node: invalid portstats!?\n"; 
		next;
	    }

	    #
	    # XXX portstats returns nodes in the format: pcXXX:ethN
	    #
	    if (!exists($pcref->{$node})) {
		print STDERR "*** $node: no stats returned!?\n"; 
		next;
	    }
	    $resref->{$node}{'counts'} = \@counts;
	}
	close(PS);
    }
    $resref->{'tstamp'} = time();
}

exit(0);
