#!/usr/bin/perl -w
#
# Copyright (c) 2003-2016 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;

#
# Create/Delete and globally enable/disable emulab features.
#
sub usage()
{
    print STDERR "Usage: emulabfeature <action> <feature> <other args>\n";
    print STDERR "  -h       This message\n";
    print STDERR "  create   Create a feature. Provide pithy description.\n";
    print STDERR "  delete   Delete existing feature.\n";
    print STDERR "  enable   Globally enable feature. Provide onoff flag.\n";
    print STDERR "  disable  Globally disable feature. Provide onoff flag.\n";
    print STDERR "  show     Show details of feature.\n";
    print STDERR "  list     List of all features.\n";
    print STDERR "  check    Check a feature for a user/group (-u/-g).\n";
    exit(-1);
}
my $optlist  = "h";
my $debug    = 0;

# Protos
sub fatal($);

#
# Please do not run as root. Hard to track what has happened.
#
if ($UID == 0) {
    die("*** $0:\n".
	"    Please do not run this as root!\n");
}

#
# Configure variables
#
my $TB		 = "@prefix@";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use emdb;
use EmulabFeatures;
use libtestbed;
use User;
use Group;
$EmulabFeatures::verbose = 0;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/sbin:/usr/bin:";

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{h})) {
    usage();
}
usage()
    if (@ARGV < 1);

my $action = shift(@ARGV);

sub ShowFeature($)
{
    my ($feature) = @_;

    my $featurename = $feature->feature();
    my $enabled     = $feature->enabled();
    my $disabled    = $feature->disabled();
    my $description = $feature->description();
    my $created     = $feature->added();
    my @flags       = ();

    push(@flags, "Globally enabled")
	if ($enabled);
    push(@flags, "Globally disabled")
	if ($disabled);
    my $flags = join(",", @flags);

    print "$featurename: $flags\n";
    print "  Created: $created\n";
    print "  $description\n";
}

if ($action eq "list") {
    my @list = EmulabFeatures->List();
    
    foreach my $feature (@list) {
	ShowFeature($feature);
    }
    exit(0);
}

#
# Everything else needs a featurename.
#
usage()
    if (@ARGV < 1);

my $featurename = shift(@ARGV);
my $feature = EmulabFeatures->Lookup($featurename);

if ($action eq "create") {
    usage()
	if (@ARGV != 1);
    
    fatal("Feature $featurename already exists!")
	if (defined($feature));
    my $description = shift(@ARGV);

    $feature = EmulabFeatures->Create($featurename, $description);
    fatal("Could not create new feature $featurename!")
	if (!defined($feature));
    print "Feature $featurename has been created.\n";
}
elsif ($action eq "delete") {
    fatal("Feature $featurename does not exist!")
	if (!defined($feature));

    $feature->Delete() == 0
	or fatal("Could not delete feature $featurename!");
}    
elsif ($action eq "enable" || $action eq "disable") {
    fatal("Feature $featurename does not exist!")
	if (!defined($feature));
    
    my $result;
    #
    # By default, we are setting the global enable/disable flag.
    # Override on command line.
    #
    my $onoff = (@ARGV ? ($ARGV[0] ? 1 : 0) : 1);
    
    if ($action eq "enable") {
	$result = $feature->SetGlobalEnable($onoff);
    }
    elsif ($action eq "disable") {
	$result = $feature->SetGlobalDisable($onoff);
    }
    fatal("Could not $action feature $featurename!")
	if ($result != 0);
}
elsif ($action eq "show") {
    fatal("Feature $featurename does not exist!")
	if (!defined($feature));

    my @users  = ();
    my @groups = ();
    my @experiments = ();
    $feature->ListEnabled(\@users, \@groups, \@experiments);
    
    ShowFeature($feature);
    if (@users) {
	print "Users: ";
	foreach my $user (@users) {
	    print $user->uid;
	    print " ";
	}
	print "\n";
    }
    if (@groups) {
	print "Groups: ";
	foreach my $group (@groups) {
	    print $group->pid() . "/" . $group->gid();
	    print " ";
	}
	print "\n";
    }
    if (@experiments) {
	print "Experiments: ";
	foreach my $experiment (@experiments) {
	    print $experiment->pid() . "/" . $experiment->eid();
	    print " ";
	}
	print "\n";
    }
}
elsif ($action eq "check") {
    fatal("Feature $featurename does not exist!")
	if (!defined($feature));
    usage()
	if (!@ARGV);

    my $user;
    my $group;

    while (@ARGV) {
	my $opt = shift(@ARGV);
	usage()
	    if (!@ARGV);
	my $val = shift(@ARGV);

	if ($opt eq "-u") {
	    $user = User->Lookup($val);
	    fatal("No such user")
		if (!defined($user));
	}
	elsif ($opt eq "-g") {
	    $group = Group->Lookup($val);
	    fatal("No such group")
		if (!defined($group));
	}
	else {
	    usage();
	}
    }
    my $enabled = EmulabFeatures->FeatureEnabled($featurename,
						 $user, $group, undef);
    print "Feature is " . ($enabled ? "enabled" : "disabled") . "\n";
    exit($enabled);
}
else {
    fatal("Unknown action $action!");
}
exit(0);

sub fatal($)
{
    my ($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}

