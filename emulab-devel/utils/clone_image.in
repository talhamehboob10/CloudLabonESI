#!/usr/bin/perl -w
#
# Copyright (c) 2000-2021 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use strict;
use Getopt::Std;
use Data::Dumper;
use File::Temp qw(tempfile);
use CGI;
use File::Basename;

#
# Clone an image (descriptor) from a node and then snapshot
# that node into the descriptor. Creates the descriptor if
# if it does not exist. The idea is to use all of the info
# from the current image descriptor that is loaded on the node
# to quickly create a new descriptor by inheriting all of the
# attributes of the original.
#
# We also want to support taking a snapshot of a previously
# created clone. To make everything work properly, require
# that the imagename exist in the experiment project, which
# ensures that we are operating on a clone, not an image in
# some other project or a system image.
#
sub usage()
{
    print("Usage: clone_image [-dwe] [-n | -s] <imagename> <node_id>\n".
	  "Options:\n".
	  "       -d      Turn on debug mode\n".
	  "       -e      Create a whole disk image\n".
	  "       -g 0,1  Override base image global setting\n".
	  "       -r 0,1  Override base image shared (within project) setting\n".
	  "       -s      Create descriptor but do not take snapshot\n".
	  "       -n      Impotent mode\n".
	  "       -F      Create a full image even if deltas are on\n".
	  "       -U      Tell prepare to update master password files\n".
	  "       -B uuid Setup a copyback to origin uuid after snapshot\n".
	  "       -w      Wait for image to be created\n");
    exit(-1);
}
my $optlist     = "densg:wFr:b:UB:t:C";
my $debug       = 1;
my $wholedisk   = 0;
my $impotent    = 0;
my $nosnapshot  = 0;
my $isvirtnode  = 0;
my $waitmode    = 0;
my $cleanmode   = 0; # Force descriptor removal if create_image fails.
my $nodelta     = 0; # To pass to create_image.
my $global      = 0;
my $shared      = 0;
my $update_prepare = 0;
my $origin_uuid;
my $bsname;
my $base_image;
my $image;
my $webtask_id;
my $webtask;

#
# Configure variables
#
my $TB           = "@prefix@";
my $PROJROOT     = "@PROJROOT_DIR@";
my $GROUPROOT    = "@GROUPSROOT_DIR@";
my $CREATEIMAGE  = "$TB/bin/create_image";
my $NEWIMAGEEZ   = "$TB/bin/newimageid_ez";
my $DOPROVENANCE = @IMAGEPROVENANCE@;
my $DOIMAGEDIRS  = @IMAGEDIRECTORIES@;
my $doprovenance = $DOPROVENANCE;

#
# Untaint the path
#
$ENV{'PATH'} = "$TB/bin:$TB/sbin:/bin:/usr/bin:/usr/bin:/usr/sbin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Load the Testbed support stuff.
#
use lib "@prefix@/lib";
use EmulabConstants;
use emutil;
use libEmulab;
use User;
use Project;
use OSImage;
use Image;   # For datasets
use Node;
use WebTask;
use EmulabFeatures;

# Protos
sub fatal($);

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"e"})) {
    $wholedisk = 1;
}
if (defined($options{"n"})) {
    $impotent = 1;
}
if (defined($options{"s"})) {
    $nosnapshot = 1;
}
if (defined($options{"w"})) {
    $waitmode = 1;
}
if (defined($options{"F"})) {
    $nodelta = 1;
}
if (defined($options{"C"})) {
    $cleanmode = 1;
}
if (defined($options{"U"})) {
    $update_prepare = 1;
}
if (defined($options{"B"})) {
    $origin_uuid = $options{"B"};

    if ($origin_uuid =~ /^([-\w]+)$/) {
	$origin_uuid = $1;
    }
    else {
	fatal("Bad data in $origin_uuid");
    }
}
if (defined($options{"b"})) {
    $bsname = $options{"b"};

    if ($bsname =~ /^([-\w]+)$/) {
	$bsname = $1;
    }
    else {
	fatal("Bad data in $bsname.");
    }
}
if (defined($options{"t"})) {
    $webtask_id = $options{"t"};
    $webtask = WebTask->Lookup($webtask_id);
    if (!defined($webtask)) {
	fatal("No such webtask");
    }
    $webtask->AutoStore(1);
}
usage()
    if (@ARGV != 2);

my $imagename = shift(@ARGV);
my $node_id   = shift(@ARGV);

#
# Map invoking user to object. 
#
my $this_user = User->ThisUser();
if (! defined($this_user)) {
    fatal("You ($UID) do not exist!");
}

#
# The node must of course be allocated and the user must have
# permission to clone it. 
#
my $node = Node->Lookup($node_id);
if (!defined($node)) {
    fatal("No such node");
}
$isvirtnode = $node->isvirtnode();

if (!$node->AccessCheck($this_user, TB_NODEACCESS_LOADIMAGE())) {
    fatal("Not enough permission");
}
if ($node->IsTainted()) {
    fatal("$node is tainted - image creation denied!");
}

my $experiment = $node->Reservation();
if (!defined($experiment)) {
    fatal("Node is not reserved");
}
my $pid     = $experiment->pid();
my $group   = $experiment->GetGroup();
my $gid     = $group->gid();
my $project = $experiment->GetProject();
if (! (defined($project) && defined($group))) {
    fatal("Could not get project/group for $experiment");
}
if (defined($bsname)) {
    #
    # Datasets are still special, they have no osinfo. 
    #
    $image = Image->Lookup($project->pid(), $imagename);
    if (!defined($image)) {
	fatal("Dataset must already exist before it can be cloned");
    }
    elsif (!$image->isdataset()) {
	fatal("$image is not a dataset for $bsname");
    }
    $base_image = $image;
}
else {
    $image = OSImage->Lookup($project->pid(), $imagename);
    $base_image = $node->RunningOsImage();

    # No support for cloning MFSs, so there will always be a base image.
    if (! defined($base_image)) {
	fatal("Could not determine osimage for $node_id");
    }
    print "$node_id is running $base_image\n"
	if ($debug);
}

# See if enabled.
if ($DOPROVENANCE) {
    # But allow feature override.
    if (EmulabFeatures->Lookup("ImageProvenance")) {
	$doprovenance =
	    EmulabFeatures->FeatureEnabled("ImageProvenance", undef, $group);
    }
    # Temporary override for all geni projects until we can export deltas.
    if ($project->IsNonLocal()) {
	$nodelta = 1;
    }
}

#
# The simple case is that the descriptor already exists. So it is just
# a simple snapshot to the image file. 
#
if (defined($image)) {
    my $needdelete = 0;
    
    #
    # Only EZ images or Datasets via this interface.
    #
    if (!($image->ezid() || $image->isdataset())) {
	fatal("Only EZ images or datasets on this path.");
    }

    #
    # Do not allow a deprecated image to be snapshot, even if its
    # deprecated with warning only.
    #
    if ($image->deprecated() && !$this_user->admin()) {
	my $msg = "Not allowed to clone/snapshot a deprecated image!";
	if (defined($webtask)) {
	    $webtask->output($msg);
	    $webtask->Exited(1);
	}
	print STDERR $msg . "\n";
	exit(1);
    }

    #
    # Only project members or an admin can snapshot a noclone image.
    #
    if ($image->noclone() &&
	!$image->AccessCheck($this_user, TB_IMAGEID_CREATE) &&
	!$this_user->IsAdmin()) {
	fatal("You are not allowed to snapshot this image");
    }

    #
    # The access check above determines if the caller has permission
    # to overwrite the image file. 
    # Not that this matters, cause create_image is going to make the
    # same checks.
    #
    if ($impotent) {
	print "Not doing anything in impotent mode\n";
	exit(0);
    }

    #
    # Before we do anything destructive, we lock the image.
    #
    if ($image->Lock()) {
	fatal("Image is locked, please try again later!\n");
    }
    if ($DOPROVENANCE && $doprovenance && !$image->noversioning()) {
        #
	# This will include unreleased images (in image_versions, but
	# not the one pointed to by the images table). 
	#
	$image = $image->LookupMostRecent();
	if (!defined($image)) {
	    $image->Unlock();
	    fatal("Cannot lookup most recent version for $image");
	}
	
	#
	# We create a new version of the image descriptor for the new
	# snapshot. We mark it as not ready so that others know it is
	# in transition. When we later call createimage, it will make
	# sure the ready bit is clear before trying to use it.
	#
	my $needclone = 1;
	
	#
	# Does the most recent version in the table not have its ready bit set?
	# If so it means something went wrong with a previous image creation.
	# We can reuse it, but reset the provenance just in case the node got
	# reloaded.
	#
	# There is no provenance for datasets; strictly parent/child.
	#
	if (!$image->ready()) {
	    if (!$image->isdataset()) {
		$image->SetProvenance($base_image);
	    }
	    $needclone = 0;
	    print "Reusing image version " . $image->version() . ", ".
		"since it was never marked ready.\n";
	    
	}
	#
	# If the new image is going to based on the exact same base,
	# lets not create another new version, but overwrite the current
	# one. Save lots of space this way. We miss saving intermediate
	# versions, but this is a typical approach to getting an image
	# ready for use; change, snapshot, test, change, snapshot ... 
	#
	if ($needclone && !$image->released() && 
	    ($image->parent_imageid() == $base_image->imageid() &&
	     $image->parent_version() == $base_image->version())) {
	    # For create_image to be happy. 
	    $image->ClearReady(0);
	    $needclone = 0;
	    print "Reusing image version " . $image->version() . ", ".
		"since the base is the same and it was not released.\n";
	}

	if ($needclone) {
	    my $clone_error;
	    my $clone = $image->NewVersion($this_user,
					   $base_image, \$clone_error);
	    if (!defined($clone)) {
		$image->Unlock();
		fatal("Could not clone image descriptor" .
		      (defined($clone_error) ? ": $clone_error" : "") . "\n");
	    }
	    $image = $clone;
	    $needdelete = 1;

	    #
	    # Watch for a system image that is saved elsewhere; see equiv code
	    # in create_image. We change the path to point over to the /proj
	    # directory so that we do not burn up space on boss until it is
	    # officially "released". We *can* use this version of the image
	    # by explicitly using its version number, before it is released. 
	    #
	    if ($image->IsSystemImage()) {
		my $path;
		if ($image->IsDirPath()) {
		    $path = $image->SaveDir();
		}
		else {
		    $path = $image->SaveDir() . basename($image->path());
		}
		if ($image->Update({"path" => $path})) {
		    $image->PurgeVersion();
		    fatal("Could not update path!");
		}
	    }
	}
    }
    else {
	# For create_image to be happy. 
	$image->ClearReady(0);
    }
    
    #
    # If a wholedisk image was requested, we need to change the
    # descriptor, since it might not have started out as a whole disk
    # image, but then the user brought in a new partition on the disk
    # and wants it made part of the image. When provenance is on, we
    # will change just the new version, so the old versions of the
    # image will continue to work properly. But without versioning,
    # a failure will leave the image descriptor as a whole disk image,
    # but the image file will not be, and that will break. 
    #
    if ($wholedisk) {
	;
    }
    $image->Unlock();
    
    if ($nosnapshot) {
	print "Not taking a snapshot, as directed\n"
	    if ($debug);
	if (defined($webtask)) {
	    $webtask->Exited(0);
	}
	exit(0);
    }
    my $opts = "-p $pid ";
    $opts   .= "-t $webtask_id " if (defined($webtask));
    $opts   .= "-C " if ($cleanmode);
    $opts   .= "-w " if ($waitmode);
    $opts   .= "-F " if ($nodelta);
    $opts   .= "-U " if ($update_prepare);
    $opts   .= "-B $origin_uuid " if (defined($origin_uuid));
    $opts   .= "-b $bsname " if (defined($bsname));

    #
    # Mike says do not pass versioned imagenames to create_image when
    # provenance is turned off. 
    #
    $imagename  = $image->imagename();
    $imagename .= ":" . $image->version() if ($DOPROVENANCE && $doprovenance);
    
    my $output = emutil::ExecQuiet("$CREATEIMAGE $opts $imagename $node_id");
    if ($?) {
	$image->PurgeVersion()
	    if ($needdelete && !$cleanmode);
	print STDERR $output;
	fatal("Failed to create image");
    }
    print "Image is being created. This can take 15-30 minutes.\n";
    exit(0);
}
DoNew:

#
# Only EZ images via this interface.
#
if (!$base_image->ezid()) {
    fatal("Cannot clone a non-ez image");
}

#
# Figure out the global/shared bits for below.
#
if (defined($options{"g"})) {
    $global = $options{"g"};
}
elsif (defined($options{"r"})) {
    $shared = $options{"r"};
}
elsif ($experiment->pid() eq $base_image->pid() || $experiment->geniflags()) {
    # Not crossing projects, so inherit from the base image.
    # Or if on the geni path.
    if ($base_image->global()) {
	$global = 1;
    }
    elsif ($base_image->shared()) {
	$shared = 1;
    }
}
elsif ($base_image->IsSystemImage()) {
    # On the Geni Path, everything starts out global so it can be exported.
    # Note that if we import an non-global image into a project, we will
    # inherit that when cloning, via the clause above.
    if ($experiment->geniflags()) {
	$global = 1;
    }
}

#
# Do not allow cloning a deprecated image, even if its deprecated with
# warning only.
#
if ($base_image->deprecated() && !$this_user->IsAdmin()) {
    my $msg = "Not allowed to clone/snapshot a deprecated image!";
    if (defined($webtask)) {
	$webtask->output($msg);
	$webtask->Exited(1);
    }
    print STDERR $msg . "\n";
    exit(1);
}

#
# Only project members or an admin can clone a noclone image.
#
if ($base_image->noclone() &&
    !$base_image->AccessCheck($this_user, TB_IMAGEID_CREATE) &&
    !$this_user->IsAdmin()) {
    fatal("You are not allowed to clone $base_image");
}

#
# Not allowed to derive an image from one that has not been released.
# Maybe relax this in the future, but this is a good simplification for
# now.
#
if ($DOPROVENANCE && $doprovenance && !$base_image->released()) {
    fatal("Not allowed to derive a new image from unreleased ".
	  "base $base_image");
}

#
# To avoid confusion, we do not allow users to shadow system images
# in their own project. 
#
if (Image->LookupByName($imagename) && !$this_user->IsAdmin()) {
    fatal("Not allowed to shadow snapshot a system image");
}

# Subgroups change the path, but a global image should still
# go into the project image directory. 
my $path = ($experiment->pid() eq $experiment->gid() || $global ?
	    "$PROJROOT/$pid/images/" :
	    "$GROUPROOT/$pid/$gid/images/");
if ($DOIMAGEDIRS) {
    $path .= "${imagename}/";
}
else {
    $path .= "${imagename}.ndz";
}

#
# Create the image descriptor. We use the backend script to do the
# heavy lifting, but we have to cons up an XML file based on the image
# descriptor that is being cloned.
#
# These are the fields we have to come up with, plus a number
# of mtype_* entries.
#
my %xmlfields =
    ("imagename"	=> $imagename,
     "pid"		=> $project->pid(),
     "gid"		=> $experiment->gid(),
     "description"	=> $base_image->description(),
     "OS"		=> $base_image->OS(),
     "version"		=> $base_image->osversion(),
     "path"		=> $path,
     "op_mode",		=> $base_image->op_mode(),
     "wholedisk",	=> $wholedisk,
);
$xmlfields{"reboot_waittime"} = $base_image->reboot_waittime()
    if (defined($base_image->reboot_waittime()));
$xmlfields{"osfeatures"} = $base_image->osfeatures()
    if (defined($base_image->osfeatures()) &&
	$base_image->osfeatures() ne "");
if ($global) {
    $xmlfields{"global"} = 1;
}
elsif ($shared) {
    $xmlfields{"shared"} = 1;
}
    
if (defined($base_image)) {
    $xmlfields{"mbr_version"}     = $base_image->mbr_version();
    $xmlfields{"loadpart"}        = $base_image->loadpart();
    $xmlfields{"noexport"}        = $base_image->noexport();
    $xmlfields{"noclone"}         = $base_image->noclone();
    if ($base_image->format() ne 'ndz') {
	$xmlfields{"format"} = $base_image->format();
    }

    # Short form uses wholedisk instead. Should fix this. 
    if ($base_image->loadpart() == 0 && $base_image->loadlength() == 4) {
	$xmlfields{"wholedisk"}   = 1;
	$xmlfields{"loadpart"}    = 1;
	#
	# Ick. we have to tell newimageid_ez the correct loadpart, since
	# it uses that as the boot partition. 
	#
	for (my $i = 1; $i <= 4; $i++) {
	    my $func = "part${i}_osid";
	    my $foo  = $base_image->$func();
	    if (defined($foo) && $foo == $base_image->default_osid()) {
		$xmlfields{"loadpart"} = $i;
		last;
	    }
	}
    }
}
elsif ($isvirtnode) {
    $xmlfields{"reboot_waittime"} = 240;
    $xmlfields{"loadpart"}        = 1;
    $xmlfields{"mtype_pcvm"}      = 1;
    $xmlfields{"wholedisk"}       = 1;
}
else {
    fatal("No base image for $node_id");
}
# This needs more thought.
if ($base_image->def_parentosid()) {
    my $parentosimage = OSImage->Lookup($base_image->def_parentosid());
    if (!defined($parentosimage)) {
	fatal("Could not lookup object for def parent of $base_image");
    }
    $xmlfields{"def_parentosid"} =
	$parentosimage->pid() . "," . $parentosimage->imagename();

    # And this is just plain bogus. 
    #$xmlfields{"mbr_version"} = 99;
}

#
# Pass both architecture and typelist. newimageid_ez will figure out
# which one to use.
#
if ($base_image->architecture()) {
    $xmlfields{"architecture"} = $base_image->architecture();
}
#
# Grab the existing type list and generate new mtype_* variables.
#
my @typelist = $base_image->TypeList();
if (! @typelist && defined($base_image->deleted())) {
    my $sysimage = OSImage->LookupByName($base_image->imagename());
    if (defined($sysimage)) {
	@typelist = $sysimage->TypeList();
    }
}
if (! @typelist) {
    fatal("$base_image does not run on any types");
}
foreach my $type (@typelist) {
    my $type_id = $type->type();
    
    $xmlfields{"mtype_${type_id}"} = 1;
}

#
# If we are being told that this new image needs to be copied back to
# its original home, then copy the origin urn to new image from the
# old image.
#
if (defined($origin_uuid)) {
    if (! (defined($base_image) && defined($base_image->origin_urn()))) {
	fatal("No origin_urn in $base_image");
    }
    $xmlfields{"origin_urn"} = $base_image->origin_urn();
}

#
# Create the XML file to pass to newimageid_ez.
#
my ($fh, $filename) = tempfile(UNLINK => 1);
fatal("Could not create temporary file")
    if (!defined($fh));

print $fh "<image>\n";
foreach my $key (keys(%xmlfields)) {
    my $value = $xmlfields{$key};

    print $fh "<attribute name=\"$key\">";
    print $fh "<value>" . CGI::escapeHTML($value) . "</value>";
    print $fh "</attribute>\n";
}
print $fh "</image>\n";
close($fh);

if ($debug) {
    system("/bin/cat $filename");
}

my $output = emutil::ExecQuiet("$NEWIMAGEEZ -s -v $filename");
if ($?) {
    print STDERR $output;
    my $foo = `cat $filename`;
    print STDERR $foo;
    fatal("Failed to verify image descriptor from $filename");
}
if ($impotent) {
    print "Not doing anything in impotent mode\n";
    system("cat $filename");
    exit(0);
}
$output = emutil::ExecQuiet("$NEWIMAGEEZ -s $filename");
if ($?) {
    print STDERR $output;
    my $foo = `cat $filename`;
    print STDERR $foo;
    fatal("Failed to create image descriptor");
}

$image = OSImage->Lookup($project->pid(), $imagename);
if (!defined($image)) {
    fatal("Cannot lookup newly created image for $imagename");
}
if ($DOPROVENANCE && $doprovenance) {
    $image->SetProvenance($base_image);
    #
    # The portal is telling us that this image is really a snapshot of
    # an image at another cluster which is not doing versioning, so we
    # do not do versioning here.
    #
    if ($origin_uuid && $base_image->noversioning()) {
	$image->SetNoVersioning(1);
    }
}
#
# New images in emulab-ops do not get listed until an admin marks it.
# Ditto reporting to the IMS (which is relevant to Utah only).
#
if ($image->pid() eq TBOPSPID()) {
    if (! GetSiteVar("images/listed_default")) {
	$image->SetListed(0);
    }
    $image->SetIMSNoReport(1);
}
if ($debug) {
    print "Created $image\n";
}
if ($nosnapshot) {
    print "Not taking a snapshot, as directed\n"
	if ($debug);
    if (defined($webtask)) {
	$webtask->Exited(0);
    }
    exit(0);
}

#
# XXX right now, don't create cross-image deltas.
# Makes image import easier.
#
$nodelta = 1;

my $opts = "-C -p $pid ";
$opts   .= "-t $webtask_id " if (defined($webtask));
$opts   .= "-w " if ($waitmode);
$opts   .= "-F " if ($nodelta);
$opts   .= "-U " if ($update_prepare);
$opts   .= "-B $origin_uuid " if (defined($origin_uuid));
$opts   .= "-b $bsname " if (defined($bsname));
$output  = emutil::ExecQuiet("$CREATEIMAGE $opts $imagename $node_id");
if ($?) {
    print STDERR $output;
    
    #
    # Since this is a new image, purge the desciptor to avoid cruft
    # piling up in the database. 
    #
    $image->DeleteImageDir();
    $image->Delete(1);
    fatal("Failed to create image");
}
print "Image is being created. This can take 15-30 minutes.\n";
exit(0);

sub fatal($)
{
    my ($mesg) = @_;

    if (defined($webtask)) {
	#
	# If we threw an error in create_image, we do not want to
	# overwrite that image.
	#
	$webtask->Refresh();
	if (!$webtask->HasExited()) {
	    $webtask->output($mesg);
	    $webtask->Exited(1);
	}
    }
    die("*** $0:\n".
	"    $mesg\n");
}
