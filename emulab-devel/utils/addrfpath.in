#!/usr/bin/perl -w
#
# Copyright (c) 2003-2017 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use Date::Parse;
use Time::Local;
use Data::Dumper;
use File::Temp qw(tempfile);

#
# Add an RF path (interfaces and wire) to the DB. 
#
sub usage()
{
    print STDERR "Usage: addrfpath <node_id1> <card1> <iface_id1> <node_id2> <card2> <iface_id2> <path>\n";
    print STDERR "Options:\n";
    print STDERR " -d       - Turn on debugging\n";
    print STDERR " -f       - force, modify path for existing interfaces\n";
    print STDERR " -n       - Dry run mode\n";
    print STDERR " node_id  - ue1, ue2, etc\n";
    print STDERR " path     - attenuator path (comma-separated integers)\n";
    print STDERR " iface_id - rf0, rf1, etc (must end in an integer)\n";
    exit(-1);
}
my $optlist   = "dfn";
my $debug     = 0;
my $impotent  = 0;
my $force     = 0;

# Protos
sub fatal($);

#
# Configure variables
#
my $TB          = "@prefix@";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use emdb;
use EmulabConstants;
use emutil;
use User;
use Node;
use NodeType;
use Interface;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/sbin:/usr/bin:";

#
# Parse command arguments. 
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{'h'})) {
    usage();
}
if (defined($options{'d'})) {
    $debug = 1;
}
if (defined($options{'n'})) {
    $impotent = 1;
}
if (defined($options{'f'})) {
    $force = 1;
}
usage()
    if (@ARGV != 7);

my $node_id1 = $ARGV[ 0 ];
my $card1 = $ARGV[ 1 ];
my $iface_id1 = $ARGV[ 2 ];
my $node_id2 = $ARGV[ 3 ];
my $card2 = $ARGV[ 4 ];
my $iface_id2 = $ARGV[ 5 ];
my $path = $ARGV[ 6 ];

#
# Verify user, must be admin.
#
my $this_user = User->ThisUser();
if (! defined($this_user)) {
    fatal("You ($UID) do not exist!");
}
if (!$this_user->IsAdmin()) {
    fatal("You are not a testbed administrator!");
}
my $node1 = Node->Lookup($node_id1);
if (!defined($node1)) {
    fatal("Node does not exist in the DB")
}
my $interface1 = Interface->LookupByIface($node1, $iface_id1);
fatal( "Node already has an interface named $iface_id1" )
    if( defined( $interface1 ) && !defined( $force ) );

my $node2 = Node->Lookup($node_id2);
if (!defined($node2)) {
    fatal("Node does not exist in the DB")
}
my $interface2 = Interface->LookupByIface($node2, $iface_id2);
fatal( "Node already has an interface named $iface_id2" )
    if( defined( $interface2 ) && !defined( $force ) );

#
# Add the interfaces.
#
my $ifaceargs = {
    "iface"       => $iface_id1,
    "role"        => TBDB_IFACEROLE_EXPERIMENT(),
    "type"        => "P2PLTE",
    "max_speed"   => 100,
    "trunk"       => 0,
    "mac"         => "000000000000",
};
print "Creating interface with arguments:\n";
print Dumper($ifaceargs);
if (!$impotent) {
    ($interface1 = Interface->Create($node1, $ifaceargs))
	or $force or fatal("Could not create interface entry");
}

$ifaceargs = {
    "iface"       => $iface_id2,
    "role"        => TBDB_IFACEROLE_EXPERIMENT(),
    "type"        => "P2PLTE",
    "max_speed"   => 100,
    "trunk"       => 0,
    "mac"         => "000000000000",
};
print "Creating interface with arguments:\n";
print Dumper($ifaceargs);
if (!$impotent) {
    ($interface2 = Interface->Create($node2, $ifaceargs))
	or $force or fatal("Could not create interface entry");
}

my $wireargs = {
    "card1"         => $card1,
    "port1"         => 1,
    "card2"         => $card2,
    "port2"         => 1,
    "external_wire" => $path,
};
if (!$impotent) {
    Interface::Wire->Create($interface1, $interface2, 'Node', $wireargs)
	or fatal("Could not create wire!");
}
exit(0);

sub fatal($)
{
    my ($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}


