#!/usr/bin/perl -w
#
# Copyright (c) 2011-2021 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;

#
# This modifies (add or removes a port) a portvlan and then runs snmpit.
# The target lan and experiment are modified, but not the source.
# 
sub usage()
{
    print "Usage: modportvlan [-r] <eid> <lanname> port ...\n";
    exit(1);
}
my $optlist  = "nr";
my $remove   = 0;
my $impotent = 0;

#
# Configure variables
#
my $TB		  = "@prefix@";
my $TBOPS         = "@TBOPSEMAIL@";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Protos
sub fatal($);

#
# Turn off line buffering on output
#
$| = 1; 

use lib '@prefix@/lib';
use libtestbed;
use User;
use Experiment;
use Lan;

#
# Verify user, must be admin.
#
my $this_user = User->ThisUser();
if (! defined($this_user)) {
    fatal("You ($UID) do not exist!");
}
if (!$this_user->IsAdmin()) {
    fatal("You are not a testbed administrator!");
}

#
# Check args.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"n"})) {
    $impotent = 1;
}
if (defined($options{"r"})) {
    $remove = 1;
}
usage()
    if (@ARGV < 3);

my $eid     = shift(@ARGV);
my $lanname = shift(@ARGV);

my $experiment = Experiment->Lookup($eid);
if (!defined($experiment)) {
    fatal("No such experiment");
}
my $portvlan = Lan->Lookup($experiment, $lanname);
if (!defined($portvlan)) {
    fatal("No such lan in experiment");
}

if ($remove) {
    $experiment->RemoveMembersFromPortlan(0, $portvlan, @ARGV);
}
else {
    $experiment->AddMembersToPortlan(0, $portvlan, @ARGV);
}
exit(0);

sub fatal($)
{
    my ($msg) = @_;

    die("*** $0:\n".
	"    $msg\n");
}

