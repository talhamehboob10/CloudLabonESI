#!/usr/bin/perl -w
#
# Copyright (c) 2005-2017 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

#CREATE TABLE firewall_vars (
#  name varchar(255) NOT NULL default '',
#  value text,
#  PRIMARY KEY  (name)
#) TYPE=MyISAM;

my $doit = 1;

use English;
use Socket;

use lib "@prefix@/lib";
use libdb;

my $CONTROL_NETWORK    = "@CONTROL_NETWORK@";
my $CONTROL_NETMASK    = "@CONTROL_NETMASK@";
my $PRIVATE_NETWORK    = "@PRIVATE_NETWORK@";
my $PRIVATE_NETMASK    = "@PRIVATE_NETMASK@";
my $PUBLIC_NETWORK     = "@PUBLIC_NETWORK@";
my $PUBLIC_NETMASK     = "@PUBLIC_NETMASK@";
my $VIRTNODE_NETWORK   = "@VIRTNODE_NETWORK@";
my $VIRTNODE_NETMASK   = "@VIRTNODE_NETMASK@";
my $BOSSNODE_IP        = "@BOSSNODE_IP@";
my $USERNODE_IP        = "@USERNODE_IP@";
my $FSNODE_IP          = "@FSNODE_IP@";
my $FRISBEE_MCASTADDR  = "@FRISEBEEMCASTADDR@";
my $FRISBEE_MCASTPORT  = "@FRISEBEEMCASTPORT@";
my $FRISBEE_MCNUMPORT  = "@FRISEBEENUMPORTS@";
#
# Sorry these are hardwired; boss/ops addresses on the virtual control
# network, on non-segmented networks like the IG racks.
#
my $EMULAB_VCBOSS      = "172.17.254.254";
my $EMULAB_VCOPS       = "172.17.253.254";

#
# Untaint the path
# 
$ENV{'PATH'} = '/bin:/usr/bin:/usr/sbin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Simple is good. I stole this out of a google search.
my @NETMASKS =
    (0x10000000,                                             # 0
     0x80000000, 0xC0000000, 0xE0000000, 0xF0000000,         #  1 -  4
     0xF8000000, 0xFC000000, 0xFE000000, 0xFF000000,         #  5 -  8
     0xFF800000, 0xFFC00000, 0xFFE00000, 0xFFF00000,         #  9 - 12
     0xFFF80000, 0xFFFC0000, 0xFFFE0000, 0xFFFF0000,         # 13 - 16
     0xFFFF8000, 0xFFFFC000, 0xFFFFE000, 0xFFFFF000,         # 17 - 20
     0xFFFFF800, 0xFFFFFC00, 0xFFFFFE00, 0xFFFFFF00,         # 21 - 24
     0xFFFFFF80, 0xFFFFFFC0, 0xFFFFFFE0, 0xFFFFFFF0,         # 25 - 28
     0xFFFFFFF8, 0xFFFFFFFC, 0xFFFFFFFE, 0xFFFFFFFF          # 29 - 32
);

sub getcidrnet($)
{
    my ($mask) = @_;
    my $cidrnet = "24";

    for (my $i = 0; $i < scalar(@NETMASKS); $i++) {
	my $foo = pack("N", $NETMASKS[$i]);

	if ($mask eq inet_ntoa($foo)) {
	    $cidrnet = "$i";
	    last;
	}
    }

    return $cidrnet;
}

my $str;
my $res;
my $subbosses = 0;

if (@ARGV > 0 && $ARGV[0] eq "-n") {
    $doit = 0;
}

#
# Create EMULAB_BOSSES variable.
#

# There is boss...
my @bosses = "boss";
# ...and any subbosses
$res = DBQueryFatal("select distinct subboss_id from subbosses");
while (my ($sb) = $res->fetchrow_array()) {
    push(@bosses, $sb);
    $subbosses++;
}

my $bstr = join(',', @bosses);
$str = "replace into default_firewall_vars values ('EMULAB_BOSSES', '$bstr')";
print "$str\n"
    if (!$doit);
DBQueryFatal($str)
    if ($doit);

#
# Create EMULAB_SERVERS variable
#

# Start with bosses...
my @servers = @bosses;
# ...add ops...
push(@servers, "ops");
# ...and fs if it exists
if ($FSNODE_IP ne $USERNODE_IP) {
    push(@servers, "fs");
}

my $sstr = join(',', @servers);
$str = "replace into default_firewall_vars values ('EMULAB_SERVERS', '$sstr')";
print "$str\n"
    if (!$doit);
DBQueryFatal($str)
    if ($doit);

#
# Create EMULAB_NS variable
#

# Use boss IP as "ns" since that is what we assume everywhere else
$str = "replace into default_firewall_vars values ('EMULAB_NS', '$BOSSNODE_IP')";
print "$str\n"
    if (!$doit);
DBQueryFatal($str)
    if ($doit);

#
# Create EMULAB_CNET variable
#

# Add the control net in CIDR notation
my $cidrnet = getcidrnet($CONTROL_NETMASK);
$str = "replace into default_firewall_vars values ('EMULAB_CNET', '$CONTROL_NETWORK/$cidrnet')";
print "$str\n"
    if (!$doit);
DBQueryFatal($str)
    if ($doit);

# And the virtnode control net in CIDR notation
$cidrnet = getcidrnet($VIRTNODE_NETMASK);
$str = "replace into default_firewall_vars values ('EMULAB_VCNET', '$VIRTNODE_NETWORK/$cidrnet')";
print "$str\n"
    if (!$doit);
DBQueryFatal($str)
    if ($doit);

#
# Create EMULAB_VGWIP defined
# EMULAB_GWIP comes from the DB via tmcd.
#
if ($VIRTNODE_NETWORK =~ /^(\d+\.\d+\.\d+)\.0$/) {
    my $vgwip = "$1.1";
    $str = "replace into default_firewall_vars values ('EMULAB_VGWIP', '$vgwip')";
    print "$str\n"
	if (!$doit);
    DBQueryFatal($str)
	if ($doit);
}

#
# Boss/Ops on the virtual control network, non-segmented.
#
$str = "replace into default_firewall_vars values ".
    "('EMULAB_VCBOSS', '$EMULAB_VCBOSS'), ".
    "('EMULAB_VCOPS',  '$EMULAB_VCOPS')";

print "$str\n"
    if (!$doit);
DBQueryFatal($str)
    if ($doit);

#
# FS can have a virtual control network address, but ignore fs/ops
# distinction. 
#
$str = "replace into default_firewall_vars values ".
    "('EMULAB_FSIPS', '$FSNODE_IP,$EMULAB_VCOPS') ";

print "$str\n"
    if (!$doit);
DBQueryFatal($str)
    if ($doit);

#
# Create EMULAB_MCADDR and EMULAB_MCPORT variables
#

#
# Frisbee multicast info
# XXX assumptions, assumptions (as of 9/05).  We could allow up to a /8 network
# but we assign a unique port as well as address and a port is only 16 bits,
# so use a /16.
# XXX assumptions II (as of 2/08).  frisbeelauncher ticks up the MC address
# all the way to /8 (it wraps the port number as needed), so lets make it
# so here.
# XXX assumptions III (as of 11/11).  Frisbee master server running on
# subboss can open up the port range even wider, by default starting at 1025.
# XXX assumptions IV (as of 5/15).  Frisbee master server now constrains
# server/client to a configurable range.
# XXX assumptions V (as of 2/17).  Subbosses use the same port range as boss.
#
my @mcaddr = split /\./, $FRISBEE_MCASTADDR, 4;
$FRISBEE_MCASTADDR = $mcaddr[0] . ".0.0.0/8";
# XXX hack for subbosses
if ($subbosses > 0 && $mcaddr[0] != 239) {
    $FRISBEE_MCASTADDR .= ",239.0.0.0/8";
}
my $loport = ($FRISBEE_MCASTPORT == 0) ? 1025 : $FRISBEE_MCASTPORT;
my $hiport = ($FRISBEE_MCNUMPORT == 0) ? 65535 : $loport + $FRISBEE_MCNUMPORT - 1;
$FRISBEE_MCASTPORT = "$loport-$hiport";

$str = "replace into default_firewall_vars values ('EMULAB_MCADDR', '$FRISBEE_MCASTADDR')";
print "$str\n"
    if (!$doit);
DBQueryFatal($str)
    if ($doit);

$str = "replace into default_firewall_vars values ('EMULAB_MCPORT', '$FRISBEE_MCASTPORT')";
print "$str\n"
    if (!$doit);
DBQueryFatal($str)
    if ($doit);

#
# Check for support of non-segmented control network.
#
# For this to work, all servers on the same subnet must have entries
# in the interfaces table with a valid MAC address.
#
my $nodenet = inet_aton($CONTROL_NETWORK) & inet_aton($CONTROL_NETMASK);
my $privnet = inet_aton($PRIVATE_NETWORK) & inet_aton($PRIVATE_NETMASK);
my $pubnet = inet_aton($PUBLIC_NETWORK) & inet_aton($PUBLIC_NETMASK);

my $segcnet = 1;
if ($nodenet eq $privnet && $privnet eq $pubnet) {
    print "You appear to be using a non-segmented control network.\n";
    $segcnet = 0;
}

foreach my $n (@servers) {
    my $res = DBQueryFatal("select node_id,IP,mac from interfaces ".
			  "where role='ctrl' and node_id='$n'");
    if ($res->numrows == 0) {
	if ($segcnet) {
	    print STDERR "NOTE: '$n' does not have an interfaces table entry,".
		" but this doesn't matter in your config.\n";
	} else {
	    print STDERR "WARNING: '$n' does not have an interfaces table entry,".
		" you will need to create one for the control net interface.\n";
	}
    }
}

exit(0);
