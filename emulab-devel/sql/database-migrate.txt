#
# Copyright (c) 2003-2009 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
# Anytime you change database-create.sql, but sure to put any special
# (sql) instructions that need to be executed to bring an existing DB
# into compliance.
#
# Please indicate the CVS revision number your instructions refer to.
# 

1.112: Made it illegal to put NULL values in interfaces.iface.
       Run this first to make sure you don't have any (fix if you
       do). 
       
	select * from interfaces where iface is null;
	
1.113: Add disktype to node_types for Mike:

	alter table node_types add disktype enum('ad','da','ar') \
		default NULL after control_iface;

       Used by frisbee/imagezip. Locally, changed these types:

	update node_types set disktype='ad' where type='pc600';
	update node_types set disktype='ad' where type='pc850';
	update node_types set disktype='ad' where type='pc1500';
	update node_types set disktype='ad' where type='pcL440GX';
	update node_types set disktype='ad' where type='pc2000';
	update node_types set disktype='ad' where type='pc601';

1.114: Add nextosid slot to os_info table for mapping the generic
       osids (RHL-STD) to a specific one. Primarily used in os_setup
       to figure out what to do with the generic names, but might also
       be used someday to migrate people to newer versions?

        alter table os_info add nextosid varchar(35) default NULL \
	        after op_mode;

	update os_info set nextosid='RHL71-STD' where \
		osid='RHL-STD';
	update os_info set nextosid='emulab-ops-FBSD47-STD' where \
		osid='FBSD-STD';

       Note that the osids are a little odd on boss, where the early
       ones had osid=osname. On other testbeds, need to check the
       actual value of the osids.

1.115   Add node_activity table for new slothd stuff: (Mac)

CREATE TABLE node_activity (
  node_id varchar(10) NOT NULL default '',
  last_tty_act datetime NOT NULL default '0000-00-00 00:00:00',
  last_net_act datetime NOT NULL default '0000-00-00 00:00:00',
  last_cpu_act datetime NOT NULL default '0000-00-00 00:00:00',
  last_ext_act datetime NOT NULL default '0000-00-00 00:00:00',
  PRIMARY KEY  (node_id)
) TYPE=MyISAM;

	No population of the table is necessary. It will self populate
	as nodes start to get activity reports.

1.116   Add last_report to node_activity table: (Mac)

alter table node_activity add last_report datetime not null;

        To make its values consistent with the rest of the table:

update node_activity set last_report=greatest(last_tty_act,
last_net_act,last_cpu_act,last_ext_act);

1.117:  Add emulated and uselinkdelay slots to the virt_lans
        table. Set in the front end, used in assign_wrapper.

	alter table virt_lans add emulated tinyint(4) default '0' \
			after widearea;
	alter table virt_lans add uselinkdelay tinyint(4) default '0' \
			after emulated;

        Nothing special needs to be done.

1.118: Add nobwshaping slot to the virt_lans table. Set in the front
       end, used in assign_wrapper.

	alter table virt_lans add nobwshaping tinyint(4) default '0' \
			after uselinkdelay;

        Nothing special needs to be done.

1.119: Change user_pubkeys to use an idx for its unique index instead
       of the comment field in the key (a really dumb idea I had).
       However, adding an auto_increment field is always a pain. So:

	CREATE TABLE user_pubkeys_new (
	  uid varchar(8) NOT NULL default '',
	  idx int(10) unsigned NOT NULL auto_increment,
	  pubkey text,
	  stamp datetime default NULL,
	  comment varchar(128) NOT NULL default '',
	  PRIMARY KEY  (uid,idx)
	) TYPE=MyISAM;
	
	insert into user_pubkeys_new (uid, idx, pubkey, stamp, comment)
		select uid, 0, pubkey, stamp, comment from
		user_pubkeys;
        rename table user_pubkeys to user_pubkeys_old,
                     user_pubkeys_new to user_pubkeys;
	drop table user_pubkeys_old;
		     
1.120:  Add gid slot to images table for per-subgroup image support
        Also add global global flag, to replace shared flag. Global
	means testbed wide, while shared means within a project. To
	migrate an existing DB, just need to set pid=gid,global=shared
	for all existing images, and then set shared=0.

	alter table images add gid varchar(12) NOT NULL default '' after pid;
	alter table images add INDEX (gid);
	alter table images add global tinyint(4) NOT NULL default '0' \
			after shared;
	update images set gid=pid,global=shared;
	update images set shared=0;
	
1.121:  Create empty 'webnews' table with following schema for 
	$TBSRC/www/news.php3 ('blog-like news posting system):
	('date' is keyed since 'ORDER BY date DESC' is used a lot.)

	CREATE TABLE webnews (
	  msgid int(11) NOT NULL auto_increment,
	  subject tinytext,
	  date datetime default NULL,
	  author varchar(32) default NULL,
	  body text,
	  PRIMARY KEY  (msgid),
	  KEY date (date)
	) TYPE=MyISAM;

1.122: Convert usr_zip to tinytext from int. In prep for using these
       fields.

       alter table users change usr_zip usr_zip tinytext;
       update users set usr_addr2='',usr_city='',usr_state='',usr_zip='';

       These fields had never been used, so the type change and init
       are okay.

1.123: Create empty 'sitevariables' table with the following schema:

       CREATE TABLE sitevariables (
         name text NOT NULL,
	 value text,
	 defaultvalue text NOT NULL,
	 description text,
	 KEY name (name(32))
       ) TYPE=MyISAM;

1.124: Change address fields in widearea_nodeinfo to tinytext:

       ALTER TABLE widearea_nodeinfo CHANGE city city tinytext;
       ALTER TABLE widearea_nodeinfo CHANGE state state tinytext;
       ALTER TABLE widearea_nodeinfo CHANGE country country tinytext;
       ALTER TABLE widearea_nodeinfo CHANGE zip zip tinytext;

1.125: Add 'external_node_id' field to widearea_nodeinfo.
       This is pretty much a comment field for now; 
       NULL is a safe value, but if a node is a RON node
       "ron:" followed by the name of the node in the ron
       hosts table (in the external-to-emulab ron db) is
       the preferred value. (This may facilitate automatic
       db synchronization later.)

       ALTER TABLE widearea_nodeinfo ADD COLUMN external_node_id tinytext;

1.126: Change 'name' column in 'sitevariables' from
       text to varchar(255). Also make it a PRIMARY KEY,
       and get rid of old INDEX. 
       This table has not yet been used.
       
       ALTER TABLE sitevariables 
         CHANGE COLUMN name name varchar(255) PRIMARY KEY;

       ALTER TABLE sitevariables DROP INDEX name;

1.127: Make (pid,eid,vname) unique in the reserved table. Recommended
       commands for updating are:

       alter table reserved drop index pid;
       update reserved set vname=node_id where vname is null;
       alter table reserved add unique vname (pid,eid,vname); 

1.128: Add usr_country column to users table.

       ALTER TABLE users ADD COLUMN usr_country tinytext AFTER usr_zip;

1.129: Add node_id to state_triggers table, and change its primary key.

       alter table state_triggers add 
	     node_id varchar(10) not null default '' first;
       update state_triggers set node_id="*";
       alter table state_triggers drop primary key;
       alter table state_triggers add primary key (node_id,op_mode,state);

1.130: Add widearearoot and wideareajailroot to the users table, to
       control who gets root on widearea nodes, inside and outside of
       jail. Kinda brute force; might need to make this more flexible
       at some point, perhaps with a node/user mapping table, but this
       will do for now since its handled entirely inside of tmcd. 

       alter table users add widearearoot tinyint(4) default '0';
       alter table users add wideareajailroot tinyint(4) default '0';

1.131: Add two new tables, new_nodes and new_interfaces, for nodes
       that will automatically report in when they are first booted
       up. The testbed admins will then be notified, so that they can
       move these into the real nodes and interfaces tables with the
       newnode script.

       CREATE TABLE new_interfaces (
          node_id varchar(10) NOT NULL default '',
          iface varchar(10) NOT NULL default '',
          mac varchar(12) NOT NULL default '',
          interface_type varchar(15) default NULL,
          PRIMARY KEY  (node_id,iface)
       ) TYPE=MyISAM;
       CREATE TABLE new_nodes (
          node_id varchar(10) NOT NULL default '',
          type varchar(30) default NULL,
	  IP varchar(15) default NULL,
	  dmesg text,
	  PRIMARY KEY  (node_id)
       ) TYPE=MyISAM;

1.132: This commit was superseded by 1.133

1.133: Changed the new_nodes and new_interfaces table to use a new unique
       int as they primary key instead of the node_id, so that the latter can
       be easily changed. Also added a timestamp the the new_nodes column.

       alter table new_nodes add column created timestamp not null;
       alter table new_nodes drop primary key;
       alter table new_nodes add column new_node_id int not null auto_increment
             first, add primary key (new_node_id);
       alter table new_interfaces drop primary key;
       alter table new_interfaces drop column node_id;
       alter table new_interfaces add column new_node_id int not null first,
              add primary key(new_node_id,iface);

1.134: New stats tables. I've checked in a script in this directory to
       fill in the tables as best as possible. See ./initstats.pl. Just
       run it and pipe the output into "mysql tbdb". Its a hack job,
       since there is not enough info in the system to do a good job.
       Need Mac's scripts to make it work properly.

	CREATE TABLE experiment_stats (
	  pid varchar(12) NOT NULL default '',
	  eid varchar(32) NOT NULL default '',
	  creator varchar(8) NOT NULL default '',
	  idx int(10) unsigned NOT NULL default '0',
	  gid varchar(16) NOT NULL default '',
	  created datetime default NULL,
	  destroyed datetime default NULL,
	  swapin_count smallint(5) unsigned default '0',
	  swapin_last datetime default NULL,
	  swapout_count smallint(5) unsigned default '0',
	  swapout_last datetime default NULL,
	  swapmodify_count smallint(5) unsigned default '0',
	  swapmodify_last datetime default NULL,
	  swapin_duration int(10) unsigned default '0',
	  vnodes smallint(5) unsigned default '0',
	  pnodes smallint(5) unsigned default '0',
	  wanodes smallint(5) unsigned default '0',
	  simnodes smallint(5) unsigned default '0',
	  jailnodes smallint(5) unsigned default '0',
	  delaynodes smallint(5) unsigned default '0',
	  linkdelays smallint(5) unsigned default '0',
	  walinks smallint(5) unsigned default '0',
	  links smallint(5) unsigned default '0',
	  lans smallint(5) unsigned default '0',
	  shapedlinks smallint(5) unsigned default '0',
	  shapedlans smallint(5) unsigned default '0',
	  minlinks tinyint(3) unsigned default '0',
	  maxlinks tinyint(3) unsigned default '0',
	  PRIMARY KEY  (eid,pid,idx)
	) TYPE=MyISAM;


	CREATE TABLE group_stats (
	  pid varchar(12) NOT NULL default '',
	  gid varchar(12) NOT NULL default '',
	  exptstart_count int(11) unsigned default '0',
	  exptstart_last datetime default NULL,
	  exptpreload_count int(11) unsigned default '0',
	  exptpreload_last datetime default NULL,
	  exptswapin_count int(11) unsigned default '0',
	  exptswapin_last datetime default NULL,
	  exptswapout_count int(11) unsigned default '0',
	  exptswapout_last datetime default NULL,
	  exptswapmodify_count int(11) unsigned default '0',
	  exptswapmodify_last datetime default NULL,
	  allexpt_duration int(11) unsigned default '0',
	  allexpt_vnodes int(11) unsigned default '0',
	  allexpt_vnode_duration int(11) unsigned default '0',
	  allexpt_pnodes int(11) unsigned default '0',
	  allexpt_pnode_duration int(11) unsigned default '0',
	  PRIMARY KEY  (pid,gid)
	) TYPE=MyISAM;


	CREATE TABLE project_stats (
	  pid varchar(12) NOT NULL default '',
	  exptstart_count int(11) unsigned default '0',
	  exptstart_last datetime default NULL,
	  exptpreload_count int(11) unsigned default '0',
	  exptpreload_last datetime default NULL,
	  exptswapin_count int(11) unsigned default '0',
	  exptswapin_last datetime default NULL,
	  exptswapout_count int(11) unsigned default '0',
	  exptswapout_last datetime default NULL,
	  exptswapmodify_count int(11) unsigned default '0',
	  exptswapmodify_last datetime default NULL,
	  allexpt_duration int(11) unsigned default '0',
	  allexpt_vnodes int(11) unsigned default '0',
	  allexpt_vnode_duration int(11) unsigned default '0',
	  allexpt_pnodes int(11) unsigned default '0',
	  allexpt_pnode_duration int(11) unsigned default '0',
	  PRIMARY KEY  (pid)
	) TYPE=MyISAM;


	CREATE TABLE user_stats (
	  uid varchar(8) NOT NULL default '',
	  weblogin_count int(11) unsigned default '0',
	  weblogin_last datetime default NULL,
	  exptstart_count int(11) unsigned default '0',
	  exptstart_last datetime default NULL,
	  exptpreload_count int(11) unsigned default '0',
	  exptpreload_last datetime default NULL,
	  exptswapin_count int(11) unsigned default '0',
	  exptswapin_last datetime default NULL,
	  exptswapout_count int(11) unsigned default '0',
	  exptswapout_last datetime default NULL,
	  exptswapmodify_count int(11) unsigned default '0',
	  exptswapmodify_last datetime default NULL,
	  allexpt_duration int(11) unsigned default '0',
	  allexpt_vnodes int(11) unsigned default '0',
	  allexpt_vnode_duration int(11) unsigned default '0',
	  allexpt_pnodes int(11) unsigned default '0',
	  allexpt_pnode_duration int(11) unsigned default '0',
	  PRIMARY KEY  (uid)
	) TYPE=MyISAM;

1.135: Add exit codes. Obviously, we get just the last exit code, but
       I still think this will be useful.  Note that we do not track
       front end parse errors or other very early errors that are
       likely the result of system problems, not user problems. Also
       note that we need to standardize the error codes so that these
       are meaningful a year from now!

	alter table experiment_stats add swap_errors smallint(5) \
		unsigned default '0' after swapmodify_last;
	alter table experiment_stats add swap_exitcode tinyint(3) \
		unsigned default '0' after swap_errors;
	alter table experiment_stats add idle_swaps smallint(5) \
		unsigned default '0' after swap_exitcode;
	alter table experiment_stats add batch tinyint(3) \
		unsigned default '0' after maxlinks;

       Also add testbed wide stats table. 

	CREATE TABLE testbed_stats (
	  idx int(10) unsigned NOT NULL auto_increment,
	  tstamp datetime default NULL,
	  exptidx int(10) unsigned NOT NULL default '0',
  	  action varchar(16) NOT NULL default '',
	  exitcode tinyint(3) unsigned default '0', 
	  PRIMARY KEY  (idx)
	) TYPE=MyISAM;

	This table gets an entry for each experiment operation. By
	cross indexing with experiment_stats via the exptidx field, we
	can figure out what was running on the testbed and how many
	nodes it was using, etc. We also get Jay's desire for a per
	operation log, except its not in a file but in the DB, where
	all such information belongs. Average size of an entry is 30
	bytes. We can squeeze this down easily by making the "action"
	a tinyint instead varchar, but not gonna worry until the table
	is over 1MB. 

1.137: Minor file formatting changes, no DB schema changes

1.138: Drop the lastlogin table since that info is now kept in
       user_stats.

       drop table lastlogin;

1.139: Add veth_interfaces table, which are virtual ethernet devices
       in FreeBSD.

	CREATE TABLE veth_interfaces (
	  node_id varchar(10) NOT NULL default '',
	  veth_id int(10) unsigned NOT NULL auto_increment,
	  mac varchar(12) NOT NULL default '000000000000',
	  IP varchar(15) default NULL,
	  iface varchar(10) NOT NULL default '',
	  PRIMARY KEY  (node_id,veth_id),
	  KEY IP (IP)
	) TYPE=MyISAM;

1.140: Add index to experiment_stats table to speed up big joins by
       several orders of magnitude!

       alter table experiment_stats add index(idx);

1.141: Add usevethiface flag to virt_lans. Mostly a development aid so
       that we can create emulated links that use the veth device
       instead of an IP alias. Without linux support, mere users would
       not get to choose this option since it will only work between
       FreeBSD boxes with veth support.

       alter table virt_lans add usevethiface tinyint(4) default '0'
		after nobwshaping;

1.142: Made the max_concurrent value per-OS rather than per-image. If you have
       any images with this restriction, you'll need to move it over to the
       OS by hand, but I think the main database on boss is the only place with
       any of these!

       alter table os_info add column max_concurrent int(11) default NULL;
       alter table images drop column max_concurrent;

1.143: Split the experiment stats table into two parts. The first is
       the per-experiment instantiation with aggregate data like the
       number of swapins, the dates and the like. The other part is
       the per swapin/modify stats. These are number of pnodes, links,
       lans, etc. Long term, I think we want more precise swapin
       stats, and with experiment modify in the mix, we need to have
       multiple stat records per experiment, but do not need to
       duplicate all the stuff in the other table just mentioned.

       To reduce the amount the table size, we cross reference the
       tables by index only instead of with pid,eid and the like. We use
       exptidx to link experiments, experiment_stats, and the new
       experiment_resources table. experiment_resources and stats are
       linked by another index in the resources table, which indicates
       which is the current resource row. On a modify, a new resource
       record is created, and the stats record updated to point to the
       new (latest) resource record. 

	DROP TABLE IF EXISTS experiment_resources;
	CREATE TABLE experiment_resources (
	  idx int(10) unsigned NOT NULL auto_increment,
	  exptidx int(10) unsigned NOT NULL default '0',
	  tstamp datetime default NULL,
	  vnodes smallint(5) unsigned default '0',
	  pnodes smallint(5) unsigned default '0',
	  wanodes smallint(5) unsigned default '0',
	  simnodes smallint(5) unsigned default '0',
          jailnodes smallint(5) unsigned default '0',
          delaynodes smallint(5) unsigned default '0',
          linkdelays smallint(5) unsigned default '0',
          walinks smallint(5) unsigned default '0',
          links smallint(5) unsigned default '0',
          lans smallint(5) unsigned default '0',
          shapedlinks smallint(5) unsigned default '0',
          shapedlans smallint(5) unsigned default '0',
          minlinks tinyint(3) unsigned default '0',
          maxlinks tinyint(3) unsigned default '0',
          PRIMARY KEY  (idx),
	  KEY exptidx (exptidx)
        ) TYPE=MyISAM;

      Be clear about what index is what:

        alter table experiment_stats change idx exptidx 
			int(10) unsigned NOT NULL default '0';
        alter table experiment_stats drop index idx;
	alter table experiment_stats add index(exptidx);
        alter table experiment_stats add rsrcidx 
			int(10) unsigned NOT NULL default '0' after exptidx;
	alter table experiment_stats add index(rsrcidx);
        alter table experiment_stats add lastrsrc
			int(10) unsigned default NULL after rsrcidx;

      Change a few names cause I picked bad ones initially:
        alter table experiment_stats change swapmodify_count swapmod_count
			smallint(5) unsigned default '0';
        alter table experiment_stats change swapmodify_last swapmod_last
			datetime default NULL;
        alter table group_stats change exptswapmodify_count exptswapmod_count
			int(11) unsigned default '0';
        alter table group_stats change exptswapmodify_last exptswapmod_last
			datetime default NULL;
        alter table project_stats change exptswapmodify_count exptswapmod_count
			int(11) unsigned default '0';
        alter table project_stats change exptswapmodify_last exptswapmod_last
			datetime default NULL;
        alter table user_stats change exptswapmodify_count exptswapmod_count
			int(11) unsigned default '0';
        alter table user_stats change exptswapmodify_last exptswapmod_last
			datetime default NULL;

      To populate the new table from the old table:

	insert into experiment_resources (idx, exptidx, tstamp, vnodes, 
		pnodes, wanodes, simnodes, jailnodes, delaynodes, 
		linkdelays, walinks, links, lans, shapedlinks, 
		shapedlans, minlinks, maxlinks) 
               select 0, exptidx, created, vnodes, pnodes, wanodes, 
	        simnodes, jailnodes, delaynodes, linkdelays, walinks, 
		links, lans, shapedlinks, shapedlans, minlinks, 
		maxlinks from experiment_stats order by exptidx;

      Now we have to insert the newly created resource idx into the
      stats table to link them up.

	my $query_result =
	    DBQueryFatal("select idx,exptidx from experiment_resources");

	while (($idx,$exptidx) = $query_result->fetchrow_array()) {
	    DBQueryFatal("update experiment_stats set rsrcidx=$idx ".
			 "where exptidx=$exptidx");
	}

1.144: Add link from testbed_stats to the experiment_resources record
       that was active at the time of the operation. This makes it
       possible for showstats.php3 to act like a log file, since we
       have the info that corresponds at that time (rather than just
       the most recent). Also a minor bug fix for exitcode, which
       should not be unsigned.
       
        alter table testbed_stats change exitcode exitcode
		tinyint(3) default '0';

        alter table testbed_stats add rsrcidx 
		int(10) unsigned NOT NULL default '0' after exptidx;

	my $query_result =
	    DBQueryFatal("select t.idx,t.exptidx,s.rsrcidx ".
			 " from testbed_stats as t ".
			 "left join experiment_stats as s ");

	while (($idx,$exptidx,$rsrcidx) = $query_result->fetchrow_array()) {
	    if (!defined($rsrcidx)) {
		print STDERR "No rsrcidx for $idx ($exptidx)\n";
		next;
	    }
	    print "update testbed_stats set rsrcidx=$rsrcidx ".
		  	"where idx=$idx;\n";
	}			

1.145: Add vnode to veth_interfaces. This serves to distinguish veths
       for jailed nodes from veths for plain emulated links between
       phys nodes, which we might generally allow at some point for
       supporting emulated links (rather than using IP aliases). My
       plan is to use this im tmcd to determine what ifconfig returns;
       no point in returning jailed veth configuration when the node
       boots, but should wait until the jail is setup (this is further
       complicated by rtabids, but thats another story).

        alter table veth_interfaces add vnode varchar(32) default NULL
		after iface;

1.146: Minor mod to last revision; use a less ambiguous name. 

        alter table veth_interfaces change vnode vnode_id varchar(32)
		default NULL;

1.147: Add expt_swap_uid to experiments table to store who was the
       last to swap in/out/modify an experiment. Needed for proper
       user accounting.

        alter table experiments add expt_swap_uid varchar(8) NOT NULL
		 default '' after expt_swapped;

       Must also init that field for existing experiments.

        update experiments set expt_swap_uid=expt_head_uid
		where expt_swapped is not null;

1.148: Add usr_shell to users table to specify user's preferred shell.
       Retroactively make each user's preferred shell 'tcsh'.
       
       ALTER TABLE users ADD COLUMN usr_shell TINYTEXT AFTER usr_phone;
       UPDATE users SET usr_shell='tcsh';

1.149: Add more fields to expts table for new swapping features. All
       the "bits" default to 0, so no further updating is needed.

	ALTER TABLE experiments ADD COLUMN noswap_reason tinytext 
	     AFTER priority;

	ALTER TABLE experiments ADD COLUMN idleswap tinyint(4) 
	      NOT NULL default '0' AFTER noswap_reason;

	ALTER TABLE experiments ADD COLUMN idleswap_timeout int(4) 
	      NOT NULL default '0' AFTER idleswap;

	ALTER TABLE experiments ADD COLUMN noidleswap_reason tinytext 
	      AFTER idleswap_timeout;

	ALTER TABLE experiments ADD COLUMN autoswap tinyint(4) 
	      NOT NULL default '0' AFTER noidleswap_reason;

	ALTER TABLE experiments ADD COLUMN autoswap_timeout int(4) 
	      NOT NULL default '0' AFTER autoswap;

1.150: Add trivial_ok to virt_lans for (very) crude control of
       colocation of virtual nodes.

        alter table virt_lans add trivial_ok tinyint(4) default '1'
		after usevethiface;

       Add multiplex_factor to experiments table to allow user to
       override the factor in the node_types table. Also very crude.

        alter table experiments add multiplex_factor smallint(5)
	        default NULL after forcelinkdelays;
		
1.151: Allow iface in the veth_interfaces table to be null to allow
       for trivial links between veth devices (on the same node, so no
       iface mapping).

	alter table veth_interfaces change iface iface varchar(10)
		 default NULL;

1.152: Add jailip to nodes table. This is the control network IP for
       the jail, to be added as an alias on the control network
       interface on the phys node. There is no need for this to be in
       another table at this point. Eventually, vnodes will be dynamic
       anyway, and a number of things will change, including this.

	alter table nodes add jailip varchar(15) default NULL after jailflag;

	my $query_result =
	    DBQueryFatal("select node_id from nodes as n ".
			 "left join node_types as nt on nt.type=n.type ".
			 "where nt.class='pcvm'");

	while (($node_id) = $query_result->fetchrow_array()) {
	    my ($p,$v) = ($node_id =~ /pcvm(\d*)-(\d*)/);

	    DBQueryFatal("update nodes set ".
			 "jailip='172.16.${p}.${v}' where node_id='$node_id'");
	}

1.153:	Disallow nulls in state_timeouts table.
	
	alter table state_timeouts modify timeout int(11) not null;
	alter table state_timeouts modify action mediumtext not null;

1.154: Add simple support for updating widearea images (slice 1 only).

	CREATE TABLE widearea_updates (
	  IP varchar(15) NOT NULL default '1.1.1.1',
	  roottag tinytext NOT NULL default '',
	  update_requested datetime NOT NULL default '0000-00-00 00:00:00',
	  update_started datetime default NULL,
	  PRIMARY KEY  (IP)
	) TYPE=MyISAM;

	The IP is of course the IP of the node you want to update.
	The roottag is the MD5 of the new slice to be layed down,
	which should also have a DB entry someplace, but I won't
	bother with that now; I'll just hard code that into the web
	page. The records are dynamic; someone like Dave will insert
	them, and the web page will remove them after a node
	sucessfully updates.

1.155: Bring the definition for the roottag column into sync with what's in
       the database on boss - no database changes required.

1.156: Add uid to testbed_stats table:

	alter table testbed_stats add uid varchar(8) NOT NULL
			default	'' after exitcode;

       Need to init the table. For lack of better info, use the
       experiment creator for each record. Turns out there are just a
       few cases where this is not true.

	my $query_result =
	    DBQueryWarn("select t.idx,s.creator,t.action ".
			" from testbed_stats as t ".
			"left join experiment_stats as s on ".
			"  s.exptidx=t.exptidx ".
			"where t.uid='' ".
			"order by t.tstamp");

	while (($idx,$creator) = $query_result->fetchrow_array()) {
	    print "update testbed_stats set uid='$creator' where idx=$idx;\n";
	}

1.157	Take nulls out of comments table, so primary key works right.

	alter ignore table comments modify description text not null;
	alter ignore table comments modify 
		column_name varchar(64) not null default "";

1.158: Add chain field to experiment_resources to make it easier to
       step back through experiment history, and keep the join size
       down.

        alter table experiment_resources add lastidx int(10)
			unsigned default NULL after exptidx;
	alter table experiment_resources add index(lastidx);

	my $query_result =
	    DBQueryWarn("select idx,exptidx from experiment_resources ".
			"order by exptidx,tstamp asc");

	my $lastexpt = -1;
	my $lastidx  = -1;

	while (($idx,$exptidx) = $query_result->fetchrow_array()) {
	    if ($exptidx != $lastexpt) {
		print "update experiment_resources set lastidx=NULL ".
		    "where exptidx=$exptidx and idx=$idx;\n";
		$lastexpt = $exptidx;
		$lastidx  = $idx;
		next;
	    }
	    print "update experiment_resources set lastidx=$lastidx ".
		"where exptidx=$exptidx and idx=$idx;\n";
	    $lastidx  = $idx;
	}

1.158: Add jail osid to node_types table.

	alter table node_types add jail_osid varchar(35) default NULL
		after delay_osid

1.159: Remove old slots from experiment_stats table that were moved to
       experiment_resources table in revision 1.143.

        alter table experiment_stats drop vnodes;
	alter table experiment_stats drop pnodes;
	alter table experiment_stats drop wanodes;
	alter table experiment_stats drop simnodes;
	alter table experiment_stats drop jailnodes;
	alter table experiment_stats drop delaynodes;
	alter table experiment_stats drop linkdelays;
	alter table experiment_stats drop walinks;
	alter table experiment_stats drop links;
	alter table experiment_stats drop lans;
	alter table experiment_stats drop shapedlinks;
	alter table experiment_stats drop shapedlans;
	alter table experiment_stats drop minlinks;
	alter table experiment_stats drop maxlinks;

1.160: Put the thumbnail into the resources table. 

	alter table experiment_resources add thumbnail mediumblob
			 after maxlinks;

       Then create the thumbs in the DB

	        prerender_all -t

       (You can run prerender_all _after_ doing a boss-install).

       Also remove the vis_experiments table, since no longer needed.

        drop table vis_experiments;

1.162: Add a node_type_features table that lists the assign 'features' for each
       node type:

       create table node_type_features (type varchar(30) not null,
	   feature varchar(30) not null, weight float not null default 0.0,
	   primary key (type,feature));

1.163: Add columns to the new_interfaces table indicating where the interface
       is plugged into a switch:

       alter table new_interfaces add column switch_id char(10);
       alter table new_interfaces add column switch_card tinyint(3);
       alter table new_interfaces add column switch_port tinyint(3);

1.164: Chage the new_interfaces table to contain card numbers, rather than
       iface names:

       alter table new_interfaces drop primary key;
       alter table new_interfaces drop column iface;
       alter table new_interfaces add column card int not null after
	   new_node_id;
       alter table new_interfaces add primary key (new_node_id,card);

1.165: Added a new column to new_nodes, so we can tell the IP address that
       the node was temporarily given while it's configuring:

       alter table new_nodes add column temporary_IP varchar(15) after IP;

1.166: Kill max_ports and max_cards, replace with max_interfaces.

       alter table node_types drop max_ports;
       alter table node_types drop max_cards;
       alter table node_types add max_interfaces tinyint(3) \
		unsigned default '0' after HD;

       update node_types set max_interfaces=5 where type='pc600';
       update node_types set max_interfaces=5 where type='pc850';
       update node_types set max_interfaces=3 where type='pcL440GX';


1.167: As per Jay's request, start recording the start time as well as
       the end time, in the testbed_stats table. So we know how long
       things like swapin take, etc. Below, we convert the current
       timestamp into the "end" time, and add a new "start" time,
       which is null for all existing records. 

        alter table testbed_stats change tstamp \
			end_time datetime default NULL;
	alter table testbed_stats add start_time datetime \
			default NULL after idx;

1.168: Add "role" to reserved table, to make explicit how a node is
       being used in an experiment (node, virthost, delaynode,
       simnode). This is for helping to simplify the swapmod code
       support in assign, and to eventually fix the delaynode problem.
       Yes, we could use the vname and a set convention, but thats a
       silly way to do it!

       alter table reserved add erole \
	       enum('node','virthost','delaynode','simnode') \
		NOT NULL default 'node' after vname;

       Note, that only physical nodes can take on different roles;
       virtual nodes can only be plain (experimental) nodes.

       I contemplated putting this into the nodes table instead, but a
       node has no role when its not reserved, so it seemed like the
       wrong place for it.

1.169: Add a prerender pid so that it can run in the background, but
       be killed if the experiment fails, terminates, or modifies.

       alter table experiments add prerender_pid int(11) default '0' \
		after event_sched_pid;

1.170: Add a sync_server slot, which is the "vname" of the node
       hosting the sync server. When non-null (set by parser) that
       node will start a sync server and other nodes will know to use
       it. Returned by tmcd of course.

       alter table experiments add sync_server varchar(32) \
		default NULL after idle_ignore;

1.171: Add issubnode slot for dealing with IXP type things.

	alter table node_types add issubnode tinyint(4) NOT NULL default '0' \
		after isremotenode;

1.172: Add plab stuff:

	alter table node_types add isplabdslice tinyint(4) NOT NULL 
		default '0' after issubnode;

	CREATE TABLE plab_slice_nodes (
	  pid varchar(12) NOT NULL default '',
	  eid varchar(32) NOT NULL default '',
	  slicename varchar(64) NOT NULL default '',
	  node_id varchar(10) NOT NULL default '',
	  ticketdata text,
	  leasedata text,
	  leaseend datetime default NULL,
	  PRIMARY KEY  (node_id)
	) TYPE=MyISAM;

	CREATE TABLE plab_slices (
	  pid varchar(12) NOT NULL default '',
	  eid varchar(32) NOT NULL default '',
	  slicename varchar(64) NOT NULL default '',
	  privkey text,
	  pubkey text,
	  PRIMARY KEY  (pid,eid)
	) TYPE=MyISAM;

1.173: Add "role" to interfaces table, to replace the control_net and
       control_iface join with node_types, since new nodes have more
       than just expt and ctrl interfaces (ixps). The control_net slot
       is bogus anyway. Note that 'jail' is a placeholder for later.
       A 'fake' interface is not to be confused with veth interfaces; it
       is a psuedo interface like that found between an ixp and the host.

       alter table interfaces add \
		role enum('ctrl', 'expt', 'jail', 'fake', 'other') \
		NOT NULL default 'other' after iface;


       Now we have to set them.

       update interfaces set role='ctrl' where \
        ip like '155.101.%' or ip like '172.17.%' or \
        node_id like 'wa%' or node_id like 'ron%';

       update interfaces set role='expt' where \
	(ip like '192.168.%' or IP='') and \
	(node_id like 'pc%' or node_id like 'ixp%');

       update interfaces set role='fake' where \
	(interface_type='ixp_fake' and node_id like 'pc%');

1.176: Add netmask to various tables. Currently in text format, but
       might have to change to an int format to save space.

       alter table interfaces add mask varchar(15) \
		default NULL after IPaliases;
       alter table virt_lans add mask varchar(15) \
		default '255.255.255.0' after member;
       alter table tunnels add mask varchar(15) \
       		default NULL after peer_ip;
       alter table veth_interfaces add mask varchar(15) \
		default NULL after IP;

       update interfaces set mask='255.255.255.0' \
		where role='ctrl' or role='ctrl' or role='fake';
       update veth_interfaces set mask='255.255.255.0';
       update tunnels set mask='255.255.255.0';

1.178: Add notes field to the users table for storing admin only
       notes.

       alter table users add notes text after wideareajailroot;

1.179: Add a table to contain auxiliary types for nodes.

       create table node_auxtypes (node_id varchar(10) not null, type \
       		varchar(30) not null, count int default 1, primary \
		key(node_id,type));

1.180: Add a table to map auxtypes to node_types table. 

	CREATE TABLE node_types_auxtypes (
	  auxtype varchar(30) NOT NULL default '',
	  type varchar(30) NOT NULL default '',
	  PRIMARY KEY  (auxtype)
	) TYPE=MyISAM;

       Add cpu_usage and mem_usage to experiments table. Typed as tiny
       ints, zero means ignore.

       alter table experiments add cpu_usage tinyint(4) unsigned \
		NOT NULL default '0' after sync_server;
       alter table experiments add mem_usage tinyint(4) unsigned \
		NOT NULL default '0' after cpu_usage;

1.181: Add a node_features table, just like the node_type_features
       table, but for individual nodes.

       create table node_features (node_id varchar(30) not null,
	   feature varchar(30) not null, weight float not null default 0.0,
	   primary key (node_id,feature));


1.182: Add plabnodes count to the experiment resource table so we can
       track exactly how many slices an experiment is using.

       alter table experiment_resources add
          plabnodes smallint(5) unsigned default '0' after wanodes;

1.183: Add index to testbed_stats table to speed up big joins by
       several orders of magnitude!

       alter table testbed_stats add index(rsrcidx);

1.184: Put an index on the path in the os_info table, since stated needs
       to select on it

       alter table os_info add key (path(255));

1.185: Add two new columns to widearea_nodeinfo to record the node's hostname
       and a match-able site name

       alter table widearea_nodeinfo add column hostname varchar(255);
       alter table widearea_nodeinfo add column site varchar(255);

1.186: Add hashkey slot to experiments table to use as a secret key to
       pass from the nodes to the webserver, to download tar/rpm
       files.

       alter table experiments add keyhash varchar(64) default NULL \
		after mem_usage;

1.187: Increase the length of the state and batchstate fields.

       alter table experiments change state state varchar(16) NOT NULL \
		default 'new';
       alter table experiments change batchstate batchstate varchar(16) \
	        default NULL;

       Note that you need to update fields in the DB so that
       experiments will be in the proper states for operating on
       (after the new scripts are installed, nothing will swap).
       To do that run:

		sql/newstates.pl | mysql tbdb

1.188: Add a virt_node_desires table to finally be able to pass node
       desires into assign.

       create table virt_node_desires (pid varchar(12) not null, \
	   eid varchar(32) not null, vname varchar(32) not null, \
	   desire varchar(30) not null, weight float, \
	   primary key(pid,eid,vname));

1.189: Hah, I had the primary key for virt_node_desires wrong - it should
       allow multiple desires for each vnode:

       alter table virt_node_desires drop primary key;
       alter table virt_node_desires add primary key(pid,eid,vname,desire);

1.190: Add an index...

       alter table testbed_stats add key (exptidx);

1.191: Add a new role 'gw' for 'gateway' interfaces:

       alter table interfaces modify role enum('ctrl','expt','jail','fake', \
           'other','gw');

1.192: Add sfshostid to nodes table. We store that in the filesystem
       on ops, but its nice to have it in the DB too so that we do not
       have to read that file!

       alter table nodes add sfshostid varchar(128) default NULL;

1.193: Add a range of VLANs to be used, per switch stack. NULL values will
       default to the old VLAN range.

       alter table switch_stack_types add column min_vlan int default NULL;
       alter table switch_stack_types add column max_vlan int default NULL;

1.194: Add a label to the state and mode transitions table. After
       running the two statements below, reload a current version of db-fill.

       alter table state_transitions add label varchar(255) not null;
       alter table mode_transitions add label varchar(255) not null;

1.195: Add secret key for the event system.

       alter table experiments add eventkey varchar(64) default NULL \
		after keyhash;

       To initialize run the initkey.pl script in this directory:

       		sudo ./initkey.pl

1.196: Add new virt_programs table to hold the details of a program
       object.

	CREATE TABLE virt_programs (
	  pid varchar(12) NOT NULL default '',
	  eid varchar(32) NOT NULL default '',
	  vnode varchar(32) NOT NULL default '',
	  vname varchar(32) NOT NULL default '',
	  command tinytext,
	  PRIMARY KEY  (pid,eid,vnode,vname),
	  KEY vnode (vnode)
	) TYPE=MyISAM;

	Existing experiments have the info contained in the static
	eventlist. We can create the above records from the eventlist
	with the following query, which I will run once all the
	support is installed.

	insert into virt_programs (pid, eid, vnode, vname, command) \
	    select pid,eid,vnode,vname,SUBSTRING(arguments,9) \
	    from eventlist where objecttype=4 and eventtype=1;

1.197: Add login failure stuff to users table, and add new table to
       track login failures from specific IP addresses.

       alter table users add weblogin_frozen tinyint unsigned \
			NOT NULL default '0';
       alter table users add weblogin_failcount smallint unsigned \
			NOT NULL default '0';
       alter table users add weblogin_failstamp int unsigned \
			NOT NULL default '0';
			    			
       CREATE TABLE login_failures (
	  IP varchar(15) NOT NULL default '1.1.1.1',
	  frozen tinyint unsigned NOT NULL default '0',
	  failcount smallint unsigned NOT NULL default '0',
	  failstamp int unsigned NOT NULL default '0',
	  PRIMARY KEY  (IP)
       ) TYPE=MyISAM;

1.198: Add an issimnode column in node_types table so that checks for
       sim node type in assign_wrapper is consistent with other similar
       checks

       alter table node_types add issimnode tinyint(4) not null default 0;

1.199: Add a bit to the users table so that we can flag planetlab users:

       alter table users add column plab_user tinyint(1) not null default 0;

1.200: Add table to hold per table/slot contraint data (min/max len
       and a perl regex defining valid data for the slot).

	CREATE TABLE table_regex (
	  table_name varchar(64) NOT NULL default '',
	  column_name varchar(64) NOT NULL default '',
	  column_type enum('text','int','float') default NULL,
	  check_type enum('regex','function','redirect') default NULL,
	  check tinytext NOT NULL,
	  min int(11) NOT NULL default '0',
	  max int(11) NOT NULL default '0',
	  comment tinytext,
	  UNIQUE KEY table_name (table_name,column_name)
	) TYPE=MyISAM;

1.202: Change the enum for pcremote_ok to match the phys type that was
       ultimately chosen by Austin.

	alter table projects modify pcremote_ok \
		set('pcplabphys','pcron','pcwa') default NULL;

1.203: Add an index to nodetypeXpid_permissions to make it more efficient
       to get a list of what types a project is allowed to use.

       alter table nodetypeXpid_permissions add key (pid);

1.204: Added the following entries so that the simulation (nse)
       backend support could be tested in a development tree.
       With this, simulation resources are automatically
       mapped to a distributed set of physical resources for
       scaling simulation resources that cannot be simulated 
       on a single physical node. The simnode_capacity column is used
       by ptopgen to associate different sim node capacities per
       physical node type in the ptop file. Change the erole column in
       the reserved table for enum simnode to simhost. Added rtabid
       fields in the interfaces and the veth_interfaces table whichs
       being computed in assign_wrapper for use in simhosts. The field
       could be used by jail vnodes as well although it is not used
       by the jail vnodes currently.

       alter table node_types add simnode_capacity smallint(5) \
               unsigned not null default 0;
       alter table reserved change erole erole \
               enum('node','virthost','delaynode','simhost') \
	       NOT NULL default 'node';
       alter table interfaces add rtabid smallint(5) \
               unsigned not null default 0;
       alter table veth_interfaces add rtabid smallint(5) \
               unsigned not null default 0;

1.205: Add enum to projects table to store which interface users
       should start with.

       alter table projects add default_user_interface \
		 enum('emulab','plab') NOT NULL default 'emulab';

1.206: Add enum to users table to store which interface user is currently
       set to use. This will replace plab_user bit.

       alter table users add user_interface \
		 enum('emulab','plab') NOT NULL default 'emulab';

1.207: Add fields to support user directed Forgot My Password changes.

       alter table users add chpasswd_key varchar(32) default NULL;
       alter table users add chpasswd_expires int(10) unsigned \
			NOT NULL default '0';

1.208: Add project table linked_to_us entry.

       alter table projects add linked_to_us tinyint(4) NOT NULL \
	       default '0' after default_user_interface;

1.209: Went back to revision 202 and fixed it up; nothing for you to
       do, just skip ahead to the next revision.

1.210: Add vnode_id column in the interfaces table to indicate which
       vnode in an allocated experiment that the interface belongs
       to. This is useful when multiple jail vnodes are hosted on a
       physical node. 

       alter table interfaces add vnode_id varchar(32) default NULL;

1.211: Add a new table virt_simnode_attributes that contains the number
       of slots that a virt_node will occupy on a pnode. This is useful
       during mapping. The default value is 1. The column eventrate will
       also be used during mapping. The initial value is 0 since it is not
       determined during the first swapin. Updates to these columns during
       an experimental run will persist till the next swapin. Currently,
       the updates will be done when a simulator (nse) running on a pnode
       cannot keep up with real-time. In future, it could be done
       periodically. The reserved table has a new column simhost_violation
       whose value can be '0' or '1' to indicate that a pnode running nse 
       cannot keep up with real-time.

       create table virt_simnode_attributes ( \
       pid varchar(12) NOT NULL default '', \
       eid varchar(32) NOT NULL default '', \
       vname varchar(32) NOT NULL default '', \
       nodeweight smallint(5) unsigned not null default '1', \
       eventrate int(11) unsigned not null default '0', \
       KEY pid (pid,eid,vname));

       alter table reserved add simhost_violation tinyint(3) \
               unsigned not null default '0';

1.212: Add resource usage table.

	CREATE TABLE node_rusage (
	  node_id varchar(10) NOT NULL default '',
	  load_1min float NOT NULL default '0',
	  load_5min float NOT NULL default '0',
	  load_15min float NOT NULL default '0',
	  disk_used float  NOT NULL default '0',
	  status_timestamp datetime default NULL,
	  PRIMARY KEY  (node_id)
	) TYPE=MyISAM;

1.213: Minor whitespace change to make schemacheck happy.

1.214: Changes to nsfiles and nseconfigs tables to accomodate
       larger nsfiles and nse configuration information.

       alter table nseconfigs modify nseconfig mediumtext;
       alter table nsfiles modify nsfile mediumtext;

1.215  Fixed the PRIMARY KEYs for virt_simnode_attributes by
       dropping the table and re-creating it correctly.

       drop table virt_simnode_attributes;

       create table virt_simnode_attributes ( \
         pid varchar(12) NOT NULL default '', \
         eid varchar(32) NOT NULL default '', \
         vname varchar(32) NOT NULL default '', \
         nodeweight smallint(5) unsigned not null default '1', \
         eventrate int(11) unsigned not null default '0', \
         PRIMARY KEY (pid,eid,vname));

1.216: Add mfs flag to os_info table, and temp_boot_osid to nodes
       table.

	alter table nodes add temp_boot_osid varchar(35) NOT NULL \
		default '' after def_boot_cmd_line;
	alter table os_info add mfs tinyint(4) NOT NULL default '0' \
		after max_concurrent;

1.217: Add slot to nodes table to facilitate better stated debugging.
      
	alter table nodes add stated_tag varchar(32) default NULL \
			after sfshostid;

1.218: Add nse_reswap_count in the experiments table to count how many
       times we tried re-mapping a sim experiment.

       alter table experiments add column sim_reswap_count \
             smallint(5) unsigned NOT NULL default '0';

1.219: Add pid to images table so we can kill frisbee for an image.

	alter table images add frisbee_pid int(11) default '0' \
		after load_address;

1.220: Add allowfixnode flag to experiments table so it can be turned off.
       This is useful when a user changes the vnode resources (such as cpu) 
       for a vnode and then does a swapmod.

	alter table experiments add veth_encapsulate tinyint(4) \
		NOT NULL default '1' after sim_reswap_count;

        alter table experiments add allowfixnode tinyint(4) \
	       not null default 0 after veth_encapsulate;

1.221: Fixed allowfixnode to default to 1 instead of 0

        alter table experiments change allowfixnode allowfixnode tinyint(4) \
	       not null default 1;

1.222: Added old_pid and old_eid in reserved table. This allows the moving of
       current reservations into a holding experiment with old_pid/old_eid
       suitably filled during assign_wrapper. Eventually, any unused
       entries will first be torn down and entries in the DB deleted.

       alter table reserved add column old_pid varchar(12) NOT NULL default '', \
             add column old_eid varchar(32) NOT NULL default '';

       alter table reserved add KEY old_pid (old_pid,old_eid);

1.223: Add jail_osname and delay_osname as temporary (well, perhaps)
       aids for paper effort. Note, not an osid, but an osname like we
       specify for a virt_node. Lookup rules are the same; first check
       the current project for a match, and then check emulab-ops.

       alter table experiments add jail_osname varchar(20) \
		default NULL after allowfixnode;
       alter table experiments add delay_osname varchar(20) \
		default NULL after jail_osname;
		
1.224: Add rtabid to nodes table, athough it is meaninful only on a
       jailed vnode. Set in assign_wrapper.

       alter table nodes add rtabid smallint(5) unsigned NOT NULL \
		default '0' after stated_tag;

1.225: Add 'veths' and 'mlinks' to the list of possible osfeatures in
       is_info table.

       alter table os_info change osfeatures osfeatures \
	set('ping','ssh','ipod','isup','veths','mlinks') default NULL;

1.226: Add a use_ipassign column to the experiments table, to enable and
       disable the use of Jon's ipassign program. Also add a column to
       specify arguments for it.

       alter table experiments add column use_ipassign tinyint(1) \
	   not null default 0;
       alter table experiments add column ipassign_args varchar(255) \
	   default NULL;

1.227: Add cable and len columns to the new_interfaces table, so that when
       we're adding a small number of nodes by hand, we can set these:

       alter table new_interfaces add cable smallint;
       alter table new_interfaces add len tinyint;

1.228: Increase size of eventlist arguments (and atstring) from
       tinytext (255 chars) to text (65K chars) to avoid too-short problems
       with program agent command lines. Note that the maximum size allowed
       by table_regex checking will be set to 1024 for now.

       alter table eventlist change arguments arguments text;
       alter table eventlist change atstring atstring text;

1.229: Change the definition of the plab_* tables to store module-specific
       data in opaque columns

       alter table plab_slices drop column privkey, \
           drop column pubkey, \
           add column slicemeta text default NULL;
           

       alter table plab_slice_nodes drop column ticketdata, \
           drop column leasedata, \
           add column nodemeta text default NULL;

1.230: Change all node_id-type columns to be 32 characters long

       alter table current_reloads modify node_id varchar(32) NOT NULL default '';
       alter table delays modify node_id varchar(32) NOT NULL default '';
       alter table delta_inst modify node_id varchar(32) NOT NULL default '';
       alter table iface_counters modify node_id varchar(32) NOT NULL default '';
       alter table interfaces modify node_id varchar(32) NOT NULL default '';
       alter table last_reservation modify node_id varchar(32) NOT NULL default '';
       alter table linkdelays modify node_id varchar(32) NOT NULL default '';
       alter table new_interfaces modify switch_id varchar(32) default NULL;
       alter table new_nodes modify node_id varchar(32) NOT NULL default '';
       alter table newdelays modify node_id varchar(32) NOT NULL default '';
       alter table next_reserve modify node_id varchar(32) NOT NULL default '';
       alter table node_activity modify node_id varchar(32) NOT NULL default '';
       alter table node_auxtypes modify node_id varchar(32) NOT NULL default '';
       alter table node_features modify node_id varchar(32) NOT NULL default '';
       alter table node_idlestats modify node_id varchar(32) NOT NULL default '';
       alter table node_rusage modify node_id varchar(32) NOT NULL default '';
       alter table node_status modify node_id varchar(32) NOT NULL default '';
       alter table nodeipportnum modify node_id varchar(32) NOT NULL default '';
       alter table nodelog modify node_id varchar(32) NOT NULL default '';
       alter table nodes modify node_id varchar(32) NOT NULL default '';
       alter table nodes modify phys_nodeid varchar(32) default NULL;
       alter table nodeuidlastlogin modify node_id varchar(32) NOT NULL default '';
       alter table ntpinfo modify node_id varchar(32) NOT NULL default '';
       alter table outlets modify node_id varchar(32) NOT NULL default '';
       alter table outlets modify power_id varchar(32) NOT NULL default '';
       alter table partitions modify node_id varchar(32) NOT NULL default '';
       alter table plab_slice_nodes modify node_id varchar(32) NOT NULL default '';
       alter table port_counters modify node_id char(32) NOT NULL default '';
       alter table reserved modify node_id varchar(32) NOT NULL default '';
       alter table scheduled_reloads modify node_id varchar(32) NOT NULL default '';
       alter table state_triggers modify node_id varchar(32) NOT NULL default '';
       alter table switch_paths modify node_id1 varchar(32) default NULL;
       alter table switch_paths modify node_id2 varchar(32) default NULL;
       alter table switch_stack_types modify stack_id varchar(32) NOT NULL default '';
       alter table switch_stacks modify node_id varchar(32) NOT NULL default '';
       alter table switch_stacks modify stack_id varchar(32) NOT NULL default '';
       alter table tiplines modify node_id varchar(32) NOT NULL default '';
       alter table tmcd_redirect modify node_id varchar(32) NOT NULL default '';
       alter table tunnels modify node_id varchar(32) NOT NULL default '';
       alter table uidnodelastlogin modify node_id varchar(32) NOT NULL default '';
       alter table v2pmap modify node_id varchar(32) NOT NULL default '';
       alter table veth_interfaces modify node_id varchar(32) NOT NULL default '';
       alter table widearea_accounts modify node_id varchar(32) NOT NULL default '';
       alter table widearea_delays modify node_id1 varchar(32) NOT NULL default '';
       alter table widearea_delays modify node_id2 varchar(32) NOT NULL default '';
       alter table widearea_nodeinfo modify node_id varchar(32) NOT NULL default '';
       alter table widearea_recent modify node_id1 varchar(32) NOT NULL default '';
       alter table widearea_recent modify node_id2 varchar(32) NOT NULL default '';
       alter table wires modify node_id1 char(32) NOT NULL default '';
       alter table wires modify node_id2 char(32) NOT NULL default '';

1.231 add leaseend column to plab_slices table

       alter table plab_slices add column leaseend datetime default NULL;

1.232 add isadmin column to plab_slices table

       alter table plab_slices add column admin tinyint(1) default 0;

1.233: Add location_info table for generating wireless location maps.

	CREATE TABLE location_info (
	  node_id varchar(32) NOT NULL default '',
	  floor varchar(32) default NULL,
	  building varchar(32) default NULL,
	  loc_x int(10) unsigned NOT NULL default '0',
	  loc_y int(10) unsigned NOT NULL default '0',
	  contact tinytext,
	  phone tinytext,
	  room varchar(32) default NULL,
	  PRIMARY KEY  (node_id)
	) TYPE=MyISAM;

1.234: Add a column to node_types identifying plab physical nodes.

       alter table node_types add column isplabphysnode tinyint(4) not null \
	   default 0 after isplabdslice;

1.235: Initial wireless support. 

	alter table virt_lans add column protocol varchar(30) NOT NULL \
		default 'ethernet' AFTER trivial_ok;
	alter table virt_lans add column is_accesspoint tinyint(4) \
		default '0' AFTER protocol;

	CREATE TABLE interface_capabilities (
	  type varchar(30) NOT NULL default '',
	  capkey varchar(64) NOT NULL default '',
	  capval varchar(64) NOT NULL default '',
	  PRIMARY KEY  (type, capkey)
	) TYPE=MyISAM;

	insert into interface_capabilities (type, capkey, capval) \
	    select type,"protocols","ethernet" from interface_types;
	insert into interface_capabilities (type, capkey, capval) \
	    select type,"ethernet_defspeed",max_speed from interface_types;

1.236: Add linktest_level to experiments table. Integer value 0-4
       where 0 means not to run linktest.

       alter table experiments add column linktest_level tinyint(4) \
	   not null default 0 after ipassign_args;

1.237: Add interface_settings table for storing and sending arbitrary
       interface settings to the nodes when they configure their
       interfaces. Added primarily for wireless interface support.

	CREATE TABLE interface_settings (
	  node_id varchar(32) NOT NULL default '',
	  iface varchar(32) NOT NULL default '',
	  capkey varchar(32) NOT NULL default '',
	  capval varchar(64) NOT NULL default '',
	  PRIMARY KEY  (node_id,iface,capkey),
          KEY node_id (node_id)
	) TYPE=MyISAM;

1.238: Add virt_lan_settings and virt_lan_member_settings for storing
       arbitrary interface settings associated with the virtual part
       of the topology. 

	CREATE TABLE virt_lan_member_settings (
	  pid varchar(12) NOT NULL default '',
	  eid varchar(32) NOT NULL default '',
	  vname varchar(32) NOT NULL default '',
	  member varchar(32) NOT NULL default '',
	  capkey varchar(32) NOT NULL default '',
	  capval varchar(64) NOT NULL default '',
	  PRIMARY KEY  (pid,eid,vname,member,capkey)
	) TYPE=MyISAM;

	CREATE TABLE virt_lan_settings (
	  pid varchar(12) NOT NULL default '',
	  eid varchar(32) NOT NULL default '',
	  vname varchar(32) NOT NULL default '',
	  capkey varchar(32) NOT NULL default '',
	  capval varchar(64) NOT NULL default '',
	  PRIMARY KEY  (pid,eid,vname,capkey)
	) TYPE=MyISAM;

1.239: Add "wirelesslans" slot to experiment_resources table.

       alter table experiment_resources add
          wirelesslans smallint(5) unsigned default '0' after shapedlans;

1.240: Add node_hostkeys table for recording sfs/ssh keys.

	CREATE TABLE node_hostkeys (
	  node_id varchar(32) NOT NULL default '',
	  sshrsa_v1 mediumtext,
	  sshrsa_v2 mediumtext,
	  sshdsa_v2 mediumtext,
	  sfshostid varchar(128) default NULL,
	  PRIMARY KEY  (node_id)
	) TYPE=MyISAM;

	insert into node_hostkeys (node_id, sfshostid) \
		select node_id,sfshostid from nodes;
	
	Be sure to restart tmcd after you make these changes.

1.241: Change to eventlist table; bump size of vname from 20 to 64. I
       do not see (or remember) any reason for this slot to be 20
       chars, when the name of every other vname slot is 32. I looked
       in the event scheduler and there do not appear to be any
       problems there with bumping it. Note that I choose 64 cause we
       tend to construct agent names that might be longer then 32
       since they are based on real vnames (lan0, node0, etc). 

	alter table eventlist change vname \
		vname varchar(64) NOT NULL default '';

       Make equiv change in virt_agents table:

	alter table virt_agents change vname \
		vname varchar(64) NOT NULL default '';

1.242: Add est_bandwidth and rest_bandwidth to virt_lans, to hold the estimated
       bandwidth that will be used on the link/LAN. This can then be passed to
       assign, to do less conservative bandwidth allocation.

       alter table virt_lans add est_bandwidth int(10) unsigned \
	   default NULL after bandwidth;
       alter table virt_lans add rest_bandwidth int(10) unsigned \
	   default NULL after rbandwidth;

1.243: Add bootdisk_unit to node_types so Mike can pass a unit number
       through to Frisbee in the tmcd loadinfo call.

       alter table node_types add column bootdisk_unit tinyint(3) unsigned \
	   not null default 0 after disktype;

1.244: Add trivlink_maxspeed for Mike.

      alter table node_types add trivlink_maxspeed int(11) unsigned \
	   NOT NULL default '0' after simnode_capacity;

1.245: Change use_ipassign in experiments table to more than a
       boolean:

	alter table experiments change use_ipassign \
		  use_ipassign tinyint(4) NOT NULL default '0';

1.246: Change routertype slots to include new type of route stuff.

	alter table nodes change routertype routertype \
		 enum('none','ospf','static','manual','static-ddijk') \
		 NOT NULL default 'none';

	alter table virt_nodes change routertype routertype \
		 enum('none','ospf','static','manual','static-ddijk') \
		 NOT NULL default 'none';

1.247:  Add a 'useprepass' column to the experiments table to enable or
        disable the assign prepass.

	 alter table experiments add column useprepass tinyint(1) \
		 default 0 not null;

1.248:  Add an 'identifier' column to the new_nodes table to give users a
        way to figure out which new node is which.

         alter table new_nodes add column identifier varchar(255);

1.249:  Add slots to virt_lans to rationalize the relationship between
        virt_lans and virt_nodes. The intent is to migrate away from
        the convention we use in virt_nodes:ips and virt_lans:member
        to a more acceptable representation (one that does not rely
        on textual conventions like space separated lists of colon
        seperate entities. Instead:

	virt_nodes
		vname:	nodeA
        virt_lans
		vname:  link0
		vport:  0
		ip:     1.1.1.2

		vname:  link1
		vport:  1
		ip:     1.1.2.2

	alter table virt_lans add vnode varchar(32) NOT NULL default '' \
		after vname;
	alter table virt_lans add vport tinyint(3) NOT NULL default '0' \
		after vnode;
        alter table virt_lans add ip varchar(15) NOT NULL default '' \
		after vport;

	Then run this script to update these new fields from the
	existing ips,member slots. This must be run after installing
	the parser changes, or you can just run it again. 

		./ipmember.pl

        This is a transitional phase; the old slots will be left in place
        until they are no longer used, at which time we will also add a
        unique key to the table (pid,eid,vname,vnode,vport). assign_wrapper
        will be the hardest to change, but other scripts should be easy. 

	Whats vport about? Rather then rely on IP addresses to form a
	unique key, we use vport (a small integer) so that we can delay the
	IP assignment until later (after initial DB insertion).

1.250: Add another index to virt_lans for above change.

	alter table virt_lans add index vnode (pid,eid,vnode);

1.251: Add floorimages and buildings tables for wireless floormap
       support. This is rather primitive still; We just need a place to
       define buildings and floors in buildings, so that we do not hardwire
       them into the code. This can get arbitrarily complicated, but not
       until we need it.

	CREATE TABLE buildings (
	  building varchar(32) NOT NULL default '',
	  image_path tinytext,
	  title tinytext NOT NULL,
	  PRIMARY KEY  (building)
	) TYPE=MyISAM;

       The image_path is optional for buildings. The title is a string to
       print along with the images (Merril Engineering Building).
       
	CREATE TABLE floorimages (
	  building varchar(32) NOT NULL default '',
	  floor varchar(32) NOT NULL default '',
	  image_path tinytext,
	  thumb_path tinytext,
	  x1 int(6) NOT NULL default '0',
	  y1 int(6) NOT NULL default '0',
	  x2 int(6) NOT NULL default '0',
	  y2 int(6) NOT NULL default '0',
	  PRIMARY KEY  (building, floor)
	) TYPE=MyISAM;

       The image_path is not optional; it is either an absolute path or a
       filename in $TB/www. The thumb_path is for a tiny view of it. Floor
       is something like 1, 2, 3 but could also be basement, lobby,
       penthouse, etc. The x,y coordinates are intended to be bounding box
       coords of the "interesting" part of the image so that it is easier
       to scale specific entries from the location_info table. But, not
       really sure about this yet; needs more thought and some
       investigation about appropriate ways to store coordinate values like
       this.

1.253: Add duplicate fields from the location_info table into the new_nodes
       table - this will allow us to place them on the map while they are still
       in limbo.

        ALTER TABLE new_nodes ADD COLUMN (floor varchar(32) default NULL,
	    building varchar(32) default NULL,
	    loc_x int(10) unsigned NOT NULL default '0',
	    loc_y int(10) unsigned NOT NULL default '0',
	    contact tinytext,
	    phone tinytext,
	    room varchar(32) default NULL);

1.254: Add a "force" field in widearea_updates to specify that the
       disk should be reloaded even though it's already registered as
       being the current version.  Good for cleaning up messes...

       ALTER TABLE widearea_updates ADD
           force enum('yes','no') NOT NULL default 'no' after update_started;

1.255: Add a linktest_pid slot to the experiments table so that we can
       kill off linktest async via the web interface.
       
	alter table experiments add linktest_pid int(11) default '0' \
		after linktest_level;

1.256: Add a usemodelnet slot to the experiments table to indicate
       that an experiment prefers to use modelnet for traffic shaping.
       At some future time maybe we can mix modelnet with delay nodes,
       but please do not hold your breath waiting.

	alter table experiments add usemodelnet tinyint(1) NOT NULL \
		default '0' after useprepass;

       Add modelnet_cores and modelnet_edges variables to hold user
       tunable number of physical core nodes and edge nodes to throw
       at a virtual topology. 

	alter table experiments add modelnet_cores tinyint(4) unsigned \
		NOT NULL default '0' after usemodelnet;
        alter table experiments add modelnet_edges tinyint(4) unsigned \
		NOT NULL default '0' after modelnet_cores;

       Add ismodelnet and isphantom slots to node_types table. ismodelnet
       is set for modelnet nodes (which are also going to be isvirt).  Add
       isphantom to mark nodes that do no get underlying physical nodes;
       there will be an entry in the reserved table but no entries in the
       nodes table. Initially, modelnet virtual nodes will all be phantoms.
       Will possibly change later.

	alter table node_types add ismodelnet tinyint(1) NOT NULL \
		default '0' after isvirtnode;
	alter table node_types add isphantom tinyint(1) NOT NULL \
		default '0' after ismodelnet;
		
       Not sure that isphantom is going to work cause of the number of
       queries that join reserved with the nodes table. I might end up
       making nodes dynamic instead, creating and detroying them on the
       fly. I would prefer that isphantom works, but I am willing to live
       with isdynamic since we can use that for all of our virtual nodes.

	alter table node_types add isdynamic tinyint(1) NOT NULL \
		default '0' after isphantom;

1.257: Change node_types:class to length 30 instead of 10.

	alter table node_types change class class varchar(30) default NULL;

1.258: Minor whitespace change in database-create.txt to make
       schemacheck happy. 

1.259: Add modelnet OSIDs to node_types table so we know what image to load
       when doing modelnet. Sure wish we had a better way to do this!

       alter table node_types add modelnetcore_osid varchar(35) \
                 default NULL after jail_osid;
       alter table node_types add modelnetedge_osid varchar(35) 
                 default NULL after modelnetcore_osid;

1.260: Change virt_nodes:type to length 30 instead of 12 (to match the rest
       of the database).

	alter table virt_nodes change type type varchar(30) default NULL;

1.261: Add modelnetcore_osname and modelnetedge_osname to experiments
       table so that user can select them (like jail/delay osname)

        alter table experiments add modelnetcore_osname varchar(20) \
		default NULL after modelnet_edges;
        alter table experiments add modelnetedge_osname varchar(20) \
		default NULL after modelnetcore_osname;

1.262: Change the current_speed enum in the interfaces table to allow "0"
       as a legal value; when interfaces are not in use, set the speed
       to 0.

	alter table interfaces change current_speed \
              current_speed enum('0','10','100','1000') \
	      NOT NULL default '0';

1.263: I fixed typo in previous revision; nothing to do, skip to next
       entry.

1.264: Add some new roles for modelnet nodes, not currently used. Drop
       node_types:isphantom which I added in 1.256 since I decided not
       to use it; just use isdynamic instead. Add an isjailed slot to
       node_types rather then hardwiring that fact to "pcvm" node type.

	alter table reserved change erole erole\
             enum('node','virthost','delaynode','simhost', \
                  'modelnet-core','modelnet-edge') \
              NOT NULL default 'node';
	alter table node_types drop isphantom;
	alter table node_types add isjailed tinyint(1) NOT NULL \
		default '0' after ismodelnet;

        update node_types set isjailed=1 where type='pcvm';
        update node_types set isjailed=1 where type='modelnet-edge';

1.265: Removed a field I never actually added; skip to next entry.

1.266: Change routertype slots to include token for old centralized
       routing calculation (static-old).

	alter table nodes change routertype routertype \
                 enum('none','ospf','static','manual', \
                      'static-ddijk','static-old') \
                  NOT NULL default 'none';

	alter table virt_nodes change routertype routertype \
                 enum('none','ospf','static','manual',\
                      'static-ddijk','static-old') \
                 NOT NULL default 'none';

1.267: Remove table definition that snuck in while developing; skip to
       next entry;

1.268: Add event_groups table to allow users to define groups of
       targets for events. The agent_name refers to an entry in the
       virt_agents table. All members of an eventgroup must of course
       be of the same type.  I am not currently enforcing this.  (note
       that the vnode slot of the eventlist table was effectively
       deprecated quite some time ago; the event scheduler uses the
       vnode slot of the virt_agents entry instead).

	CREATE TABLE event_groups (
	  pid varchar(12) NOT NULL default '',
	  eid varchar(32) NOT NULL default '',
	  idx int(10) unsigned NOT NULL auto_increment,
	  group_name varchar(64) NOT NULL default '',
	  agent_name varchar(64) NOT NULL default '',
	  PRIMARY KEY  (pid,eid,idx),
	  KEY group_name (group_name),
	  KEY agent_name (agent_name)
	) TYPE=MyISAM;


      Also add a boolean to the eventlist table to mark an event as a
      group event. 

        alter table eventlist add isgroup tinyint(1) unsigned \
              default '0' after eventtype;

      Add mustdelay boolean to virt_lans to relieve assign_wrapper
      from the chore of guessing when a delay node needs to be
      inserted; assign_wrapper can still override of course, but this
      should make it less error prone.

        alter table virt_lans add mustdelay tinyint(1) \
             default '0' after nobwshaping;
	update virt_lans set mustdelay=q_red;

      Then run:
	
		./mustdelay.pl

1.269: Add new table to generate a per virt_lan index for use with
       veth vlan tags. This would be so much easier if the virt_lans
       table had been split into virt_lans and virt_lan_members.
       Anyway, this table might someday become the per-lan table, with a
       table of member settings. This would reduce the incredible amount of
       duplicate info in virt_lans!

	CREATE TABLE virt_lan_lans (
	  pid varchar(12) NOT NULL default '',
	  eid varchar(32) NOT NULL default '',
	  idx int(11) NOT NULL auto_increment,  
	  vname varchar(32) NOT NULL default '',
	  PRIMARY KEY  (pid,eid,idx),
	  UNIQUE KEY vname (pid,eid,vname)
	) TYPE=MyISAM;

       This arrangement will provide a unique index per virt_lan, within
       each pid,eid. That is, it starts from 1 for each pid,eid. That is
       necessary since the limit is 16 bits, so a global index would
       quickly overflow. The above table is populated with:

	insert into virt_lan_lans (pid, eid, vname) 
            select distinct pid,eid,vname from virt_lans;

1.270: Add a 'role' column to the newnodes table so that we can add nodes
       other than experiment nodes (such as ops) using the newnode system.

       alter table new_nodes add column role varchar(32) not null \
	   default 'testnode';

1.271: Add new tables for experiment firewalls: firewalls, firewall_rules
       and default_firewall_rules:

	CREATE TABLE firewalls (
	  pid varchar(12) NOT NULL default '',
	  eid varchar(32) NOT NULL default '',
	  fwname varchar(32) NOT NULL default '',
	  type enum('ipfw','ipfw2','ipchains') NOT NULL default 'ipfw',
	  style enum('open','closed','basic') NOT NULL default 'basic',
	  PRIMARY KEY  (pid,eid,fwname)
	) TYPE=MyISAM;

	CREATE TABLE firewall_rules (
	  pid varchar(12) NOT NULL default '',
	  eid varchar(32) NOT NULL default '',
	  fwname varchar(32) NOT NULL default '',
	  ruleno int(10) unsigned NOT NULL default '0',
	  rule text NOT NULL,
	  PRIMARY KEY  (pid,eid,fwname,ruleno),
	  KEY fwname (fwname)
	) TYPE=MyISAM;

	CREATE TABLE default_firewall_rules (
	  type enum('ipfw','ipfw2','ipchains') NOT NULL default 'ipfw',
	  style enum('open','closed','basic') NOT NULL default 'basic',
	  enabled tinyint(4) NOT NULL default '0',
	  ruleno int(10) unsigned NOT NULL default '0',
	  rule text NOT NULL,
	  PRIMARY KEY  (type,style,ruleno)
	) TYPE=MyISAM;

       and the associated table_regex's for parsing:

	INSERT INTO table_regex VALUES \
	  ('firewalls','pid','text','redirect','projects:pid',0,0,NULL);
	INSERT INTO table_regex VALUES \
	  ('firewalls','eid','text','redirect','experimenets:eid',0,0,NULL);
	INSERT INTO table_regex VALUES \
	  ('firewalls','fwname','text','redirect','virt_nodes:vname',0,0,NULL);
	INSERT INTO table_regex VALUES \
	  ('firewalls','type','text','regex','^(ipfw|ipfw2|ipchains)$',0,0,NULL);
	INSERT INTO table_regex VALUES \
	  ('firewalls','style','text','regex','^(open|closed|basic)$',0,0,NULL);
	INSERT INTO table_regex VALUES \
	  ('firewall_rules','pid','text','redirect','projects:pid',0,0,NULL);
	INSERT INTO table_regex VALUES \
	  ('firewall_rules','eid','text','redirect','experimenets:eid',0,0,NULL);
	INSERT INTO table_regex VALUES \
	  ('firewall_rules','fwname','text','redirect','virt_nodes:vname',0,0,NULL);
	INSERT INTO table_regex VALUES \
	  ('firewall_rules','ruleno','int','redirect','default:int',0,50000,NULL);
	INSERT INTO table_regex VALUES \
	  ('firewall_rules','rule','text','regex','^\\w[-\\w \\t,/\\{\\}\\(\\)!:\\.]*$',0,1024,NULL);

       Note that there are no regex's for default_firewall_rules since user
       supplied data are never used to fill the table.

       Create the IPFW firewall OSID with:

	INSERT INTO os_info VALUES ('FW-IPFW','emulab-ops','FW-IPFW',\
	    'root',NULL,'IPFW Firewall','FreeBSD','',NULL,'FreeBSD',\
	    '','ping,ssh,ipod,isup,veths,mlinks',0,1,1,'NORMAL',\
	    'emulab-ops-FBSD47-STD',NULL,0);

       Poplulate the default_firewall_rules table using sql/fwrules-create.sql.
       Note that this file include a number of rules involving the networks
       155.98.32.0/23 and 155.98.36.0/22.  These are specific to Utah's
       Emulab and would have to be customized for your environment.
       155.98.32.0/23 refers to the combination of the 'public' and 'private'
       control net subnets as described in doc/setup-network.txt.  If your
       public and private nets cannot be covered by a single CIDR block,
       you will need to create a separate rule for each.
       155.98.36.0/22 refers to the 'control' net for all nodes.

1.272: Table to manage to SSL certs we create for people to access the
       SSL version of the RPC server. In addition to storing text
       versions of the cert and private keys, we also store the serial
       number of the cert so we can "revoke" certificates at the
       server simply by removing them from the table. The SSL server
       checks the serial number to make sure its still valid.

       CREATE TABLE user_sslcerts (
        uid varchar(8) NOT NULL default '',
        idx int(10) unsigned NOT NULL default '0',
	cert text,
	privkey text,
	created datetime default NULL,
	encrypted tinyint(1) NOT NULL default '0',
        PRIMARY KEY  (idx)
       ) TYPE=MyISAM;

       This next table is to deal with the need for a unique index
       that will not start from zero (filling in deleted rows) when
       the DB is dropped. We have several tables like that, and we
       should use this table for those too. 

       CREATE TABLE emulab_indicies (
        name varchar(64) NOT NULL default '',
        idx int(10) unsigned NOT NULL default '0',
        PRIMARY KEY  (name)
       ) TYPE=MyISAM;

       The certs for all users are created from the doc/UPDATING file.
       Please read that. 

1.273: Minor fix to previous revision; skip to next entry ...

1.274: Add usrp_orders table.

	CREATE TABLE usrp_orders (
	  order_id varchar(32) NOT NULL default '',
	  email tinytext,
	  name tinytext,
	  phone tinytext,
	  affiliation tinytext,
	  num_mobos int(11) default '0',
	  num_dboards int(11) default '0',
	  intended_use tinytext,
	  comments tinytext,
	  order_date datetime default NULL,
	  modify_date datetime default NULL,
	  PRIMARY KEY  (order_id)
	) TYPE=MyISAM;

       Also added a scale field to the floorimages table.

	ALTER TABLE floorimages ADD COLUMN scale tinyint(4) 
	  NOT NULL default '1' AFTER floor;
	ALTER TABLE floorimages DROP PRIMARY KEY;
	ALTER TABLE floorimages ADD PRIMARY KEY (building,floor,scale);

	REPLACE INTO floorimages (building, floor, scale, image_path, thumb_path)
	  VALUES ('MEB', 1, 1, 'meb1fl-1.jpg', 'meb1fl-thumb.jpg'),
	         ('MEB', 1, 2, 'meb1fl-2.jpg', 'meb1fl-thumb.jpg'),
	         ('MEB', 1, 3, 'meb1fl-3.jpg', 'meb1fl-thumb.jpg'),
	         ('MEB', 1, 4, 'meb1fl-4.jpg', 'meb1fl-thumb.jpg'),
	         ('MEB', 1, 5, 'meb1fl-5.jpg', 'meb1fl-thumb.jpg'),
	         ('MEB', 2, 1, 'meb2fl-1.jpg', 'meb2fl-thumb.jpg'),
	         ('MEB', 2, 2, 'meb2fl-2.jpg', 'meb2fl-thumb.jpg'),
	         ('MEB', 2, 3, 'meb2fl-3.jpg', 'meb2fl-thumb.jpg'),
	         ('MEB', 2, 4, 'meb2fl-4.jpg', 'meb2fl-thumb.jpg'),
	         ('MEB', 2, 5, 'meb2fl-5.jpg', 'meb2fl-thumb.jpg'),
	         ('MEB', 3, 1, 'meb3fl-1.jpg', 'meb3fl-thumb.jpg'),
	         ('MEB', 3, 2, 'meb3fl-2.jpg', 'meb3fl-thumb.jpg'),
	         ('MEB', 3, 3, 'meb3fl-3.jpg', 'meb3fl-thumb.jpg'),
	         ('MEB', 3, 4, 'meb3fl-4.jpg', 'meb3fl-thumb.jpg'),
	         ('MEB', 3, 5, 'meb3fl-5.jpg', 'meb3fl-thumb.jpg'),
	         ('MEB', 4, 1, 'meb4fl-1.jpg', 'meb4fl-thumb.jpg'),
	         ('MEB', 4, 2, 'meb4fl-2.jpg', 'meb4fl-thumb.jpg'),
	         ('MEB', 4, 3, 'meb4fl-3.jpg', 'meb4fl-thumb.jpg'),
	         ('MEB', 4, 4, 'meb4fl-4.jpg', 'meb4fl-thumb.jpg'),
	         ('MEB', 4, 5, 'meb4fl-5.jpg', 'meb4fl-thumb.jpg');

1.275: Add timed-based mapping table for generic OSIDs.  This augments the
       nextosid mechinism of 1.114 making it possible to map a generic *-STD
       OSID based on the time in which an experiment is created.  This
       provides backward compatibility for old experiments when the standard
       images are changed.

       The osid_map table lookup is triggered when the value of the nextosid
       field is set to 'MAP:osid_map'.  The nextosid also continues to behave
       as before: if it contains a valid osid, that OSID value is used to map
       independent of the experiment creation time.  The two styles can also
       be mixed, for example FBSD-JAIL has a nextosid of FBSD-STD which in
       turn is looked up and redirects to the osid_map and selects one of
       FBSD47-STD or FBSD410-STD depending on the time.

	CREATE TABLE osid_map (
	  osid varchar(35) NOT NULL default '',
	  btime datetime NOT NULL default '1000-01-01 00:00:00',
	  etime datetime NOT NULL default '9999-12-31 23:59:59',
	  nextosid varchar(35) default NULL,
	  PRIMARY KEY  (osid,btime,etime)
	) TYPE=MyISAM;

       Yeah, yeah, I'm using another magic date as a sentinel value.
       Tell ya what, in 7995 years, find out where I'm buried, dig me up,
       and kick my ass for being so short-sighted...

       The following commands are not strictly needed, they just give
       an example, default population of the table.  They cause the standard
       images to be revectored through the table and then remapped, based on
       two time ranges, to the exact same image.  Obviously, the second set
       would normally be mapped to a different set of images (say RHL90 and
       FBSD410):

	INSERT INTO osid_map (osid,etime,nextosid) VALUES \
	  ('RHL-STD','2004-09-08 08:59:59','emulab-ops-RHL73-STD');
	INSERT INTO osid_map (osid,etime,nextosid) VALUES \
	  ('FBSD-STD','2004-09-08 08:59:59','emulab-ops-FBSD47-STD');

	INSERT INTO osid_map (osid,btime,nextosid) VALUES \
	  ('RHL-STD','2004-09-08 09:00:00','emulab-ops-RHL73-STD');
	INSERT INTO osid_map (osid,btime,nextosid) VALUES \
	  ('FBSD-STD','2004-09-08 09:00:00','emulab-ops-FBSD47-STD');

	UPDATE os_info SET nextosid='MAP:osid_map' \
	  WHERE osname IN ('RHL-STD','FBSD-STD');

1.276: Add inner_elab_role for elab-in-elab. Add elab_in_elab boolean
       to the experiments table. Not sure these will survive.

	alter table experiments add elab_in_elab tinyint(1) NOT NULL \
		default '0' after modelnetedge_osname;

	alter table virt_nodes add \
	      inner_elab_role enum('boss', 'ops', 'node') \
	      default NULL after fixed;

1.277: Add cd_version to nodes table, only meaningful to CD booted nodes.
       Returned from nodes via tmcd.

       alter table nodes add cd_version varchar(32) default NULL;

1.278: Add partial support for hardware control net vlan implementation of
       firewalls.  The code to manipulate the control net switch has not
       yet been done and will no doubt lead to more DB changes.  The hardware
       assisted firewall is done at the moment by specifying a different type
       'ipfw2-vlan'.

       Note that you will need a FBSD410-IPFW2 image which is a standard
       image but with an IPFW2 enabled kernel and new versions of ipfw and
       libaliases (as mentioned in the ipfw man page).

       alter table default_firewall_rules change type type \
           enum('ipfw','ipfw2','ipchains','ipfw2-vlan') not null default 'ipfw';

       alter table firewalls change type type \
           enum('ipfw','ipfw2','ipchains','ipfw2-vlan') not null default 'ipfw';

       alter table firewalls add vlan int(11) default NULL;

       update table_regex set `check`='^(ipfw|ipfw2|ipchains|ipfw2-vlan)$' \
           where table_name='firewalls' and column_name='type';

       INSERT INTO os_info VALUES ('FW-IPFW2','emulab-ops','FW-IPFW2', \
           'root',NULL,'IPFW2 Firewall','FreeBSD','',NULL,'FreeBSD','', \
	   'ping,ssh,ipod,isup,veths,mlinks',0,1,1,'NORMAL', \
	   'emulab-ops-FBSD410-IPFW2',NULL,0);

       INSERT INTO os_info VALUES ('FBSD410-IPFW2','emulab-ops', \
           'emulab-ops-FBSD410-IPFW2','root',NULL, \
	   'FreeBSD 4.10 with IPFW2','FreeBSD','4.10',NULL,NULL,'', \
	   'ping,ssh,ipod,isup,veths,mlinks',1,1,1,'NORMALv2',NULL,NULL,0);

1.279: Still more VLAN-enforced firewall changes.

       alter table nodes add cnet_vlan int(11) default NULL;

       alter table firewalls add index(vlan);

1.280: Add another role for interfaces; an outer control network role,
       used for ElabinElab.

       alter table interfaces change role role \
          enum('ctrl','expt','jail','fake','other','gw','outer_ctrl') \
	  default NULL;

1.281: Add elabinelab_vlans table for mapping inner elab vlan ids to
       auto assigned outer elab vlan ids. 

	CREATE TABLE elabinelab_vlans (
	  pid varchar(12) NOT NULL default '',
	  eid varchar(32) NOT NULL default '',
	  inner_id int(11) unsigned NOT NULL default 0,
	  outer_id int(11) unsigned NOT NULL default 0,
	  PRIMARY KEY  (pid,eid,inner_id)
	) TYPE=MyISAM;

1.282: Add "archived" flag to webnews table for hiding entries.

	alter table webnews add archived tinyint(1) NOT NULL \
                default '0' after body;
	alter table webnews add archived_date datetime default NULL \
	        after archived;

1.283: Fix errors in last revision; skip to next entry.

1.284: Fix a firewall botch (see 1.279).  Should have placed the cnet_vlan
       column in the reserved table and not the nodes table:

	alter table reserved add cnet_vlan int(11) default NULL;

       The nodes cnet_vlan column should be NULL for all nodes since
       that column was never used before now.  Verify this by doing:

	select node_id from nodes where cnet_vlan is not null;

       The select should return no rows.  If it does, and you want to
       save those values, copy all the non-NULL values from nodes to the
       appropriate place in reserved.  Then do:

	alter table nodes drop column cnet_vlan;

1.285: More firewall state.  Possibly temporary hack, store unique vlan
       ID in firewalls table:

	alter table firewalls add vlanid int(11) default NULL;

1.286: ElabinElab and Firewall stuff
1.287: 

	alter table experiments add elabinelab_eid varchar(32) \
            default NULL after elab_in_elab;
	alter table experiments add security_level tinyint(1) NOT NULL \
            default '0' after elabinelab_eid;

	alter table experiment_stats add elabinelab tinyint(1) NOT NULL \
            default '0' after batch;
	alter table experiment_stats add elabinelab_exptidx int(10) \
             unsigned default NULL after elabinelab;
	alter table experiment_stats add security_level tinyint(1) NOT NULL \
            default '0' after elabinelab_exptidx;

	alter table reserved add \
              inner_elab_role enum('boss','ops','node') default NULL \
              after cnet_vlan;

1.288: Add a 'rebootable' bit to the node_types table to indicate that a 
       given type should not be attempted to be rebooted. This should be
       temporary, and will go away when we have node_capabilities:

         alter table node_types add (isrebootable tinyint(1) default '1');
	

1.289: Add "emulab" style of firewall for elabinelab

       ALTER table firewalls MODIFY style \
	 enum('open','closed','basic','emulab') not NULL default 'basic';
       ALTER table default_firewall_rules MODIFY style \
	 enum('open','closed','basic','emulab') not NULL default 'basic';
       UPDATE table_regex SET `check`='^(open|closed|basic|emulab)$' WHERE \
	 table_name='firewalls' AND column_name='style';

       and update the default rules:

       mysql tbdb < fwrules-create.sql

       If fwrules-create.sql does not exist (it disappeared circa 1.300),
       then instead do:

	cd <your_build_tree>/firewall
	gmake insertrules

1.290: Add conversion factor floorimages that converts from pixels to
      meters.

      alter table floorimages add pixels_per_meter float(10,3) \
             NOT NULL default '0.000' after scale;

1.291: Add Windows to the OS list in the os_info table.

	 alter table os_info modify column \
	   OS enum('Unknown','Linux','FreeBSD','NetBSD','OSKit','Windows','Other') \
	   NOT NULL default 'Unknown';

1.292: Add a settable Windows password.  We derive a default password
       from the Unix usr_pswd MD5 hash string.

       alter table users add column usr_w_pswd tinytext after usr_pswd;

1.293: Add "paniced" bit to experiments table.

	alter table experiments add paniced tinyint(1) NOT NULL \
            default '0' after security_level;
	alter table experiments add panic_date datetime default NULL \
            after paniced;

1.294: Add a "leader" column to the switch_stack_types table so that we no
       longer need to assume that the leader of a stack is the switch after
       which it was named - we can now name stacks things like 'Control' or
       'Experiment'.

       alter table switch_stack_types add column leader varchar(32) \
         default NULL;

       Set the leader names like this:

       update switch_stack_types set leader=stack_id;

       Then, determine the name of the experimental net stack like so:

       select distinct stack_id from nodes as n left join switch_stacks as \
         s on n.node_id=s.node_id where n.role='testswitch';

       You can then set the name of the experimental stack like this
       (substituting in the name of the stack you just found):

       update switch_stacks set stack_id='Experiment' where \
         stack_id='<stackid>';
       update switch_stack_types set stack_id='Experiment' where \
         stack_id='<stackid>';

       Then, do the same with the control net:

       select distinct stack_id from nodes as n left join switch_stacks as \
         s on n.node_id=s.node_id where n.role='ctrlswitch';
       update switch_stacks set stack_id='Control' where \
         stack_id='<stackid>';
       update switch_stack_types set stack_id='Control' where \
         stack_id='<stackid>';

1.295: Add some battery stuff for robots to the nodes table.

        alter table nodes add battery_voltage float default NULL;
        alter table nodes add battery_percentage float default NULL;
        alter table nodes add battery_timestamp int(10) unsigned default NULL;

1.296: Add stuff for capturing boot errors.

        alter table nodes add boot_errno int(11) NOT NULL default '0';

        CREATE TABLE node_bootlogs (
          node_id varchar(32) NOT NULL default '',
          bootlog text,
          bootlog_timestamp datetime default NULL,
          PRIMARY KEY  (node_id)
        ) TYPE=MyISAM;

1.297: Fix virt_vtypes table.

         alter table virt_vtypes change eid eid varchar(32) NOT NULL \
                default '';

1.298: Add webcams support.

         CREATE TABLE webcams (
          id int(11) unsigned NOT NULL default '0',
          server varchar(64) NOT NULL default '',
          last_update datetime default NULL,
          PRIMARY KEY  (id)
         ) TYPE=MyISAM;

1.299: Add obstacles table for the robots.

         CREATE TABLE obstacles (
          obstacle_id int(11) unsigned NOT NULL auto_increment,
          floor varchar(32) default NULL,
          building varchar(32) default NULL,
          x1 int(10) unsigned NOT NULL default '0',
          y1 int(10) unsigned NOT NULL default '0',
          z1 int(10) unsigned NOT NULL default '0',
          x2 int(10) unsigned NOT NULL default '0',
          y2 int(10) unsigned NOT NULL default '0',
          z2 int(10) unsigned NOT NULL default '0',
          description tinytext,
          PRIMARY KEY  (obstacle_id)
         ) TYPE=MyISAM;

1.300: Add default_firewall_vars table.  These are global (not
       per-experiment!) variables that get expanded on the client-side
       before using them.  Intended to keep the default rules
       site-independent.

	CREATE TABLE default_firewall_vars (
	  name varchar(255) NOT NULL default '',
	  value text,
	  PRIMARY KEY  (name)
	) TYPE=MyISAM;

       Populate the vars table at you site by:

	cd <your_build_tree>/firewall
	gmake insertvars

       Update the default_firewall_rules with (NOTE: this will clobber
       any rules you have added to default_firewall_rules!):

	cd <your_build_tree>/firewall
	gmake insertrules

1.301: Allow a switch to be in multiple stacks, and add a column that records
       of the memberships is the primary one.

        alter table switch_stacks drop primary key;
	alter table switch_stacks add index (node_id);
	alter table switch_stacks add column (is_primary tinyint(1) not null default '1');

1.302: Add node history table at Mike's request to track what
       experiments are assigned to over time.

	CREATE TABLE node_history (
	  history_id int(10) unsigned NOT NULL auto_increment,
	  node_id varchar(32) NOT NULL default '',
	  op enum('alloc','free','move') NOT NULL default 'alloc',
	  uid varchar(8) NOT NULL default '',
	  exptidx int(10) unsigned default NULL,
	  stamp int(10) unsigned default NULL,
	  PRIMARY KEY  (history_id),
	  KEY node_id (node_id)
	) TYPE=MyISAM;

1.303: Add a "lockdown" bit to the experiments table to prevent
       accidental swaps, even by admin people.

         alter table experiments add lockdown tinyint(1) NOT NULL \
              default '0' after security_level;

1.304: Add a table for the starting location of the robots.

	CREATE TABLE virt_node_startloc (
	  pid varchar(12) NOT NULL default '',
	  eid varchar(32) NOT NULL default '',
	  vname varchar(32) NOT NULL default '',
	  building varchar(32) NOT NULL default '',
	  floor varchar(32) NOT NULL default '',
	  loc_x float NOT NULL default '0',
	  loc_y float NOT NULL default '0',
	  orientation float NOT NULL default '0',
	  PRIMARY KEY  (pid,eid,vname)
	) TYPE=MyISAM;

1.305: Fix up minimum_nodes and maximum_nodes columns; they were
       tinyints which is too small.

        alter table experiments change minimum_nodes minimum_nodes \
            int(6) unsigned default NULL;

        alter table experiments change maximum_nodes maximum_nodes \
            int(6) unsigned default NULL; 

1.306: Add a parent slot to the eventlist table for tying events to a
       timeline or sequence.

	alter table eventlist add parent varchar(64) not null default '';

1.307: Policy stuff. See long comment in db/libadminctrl.pm.

	CREATE TABLE global_policies (
	  policy varchar(32) NOT NULL default '',
	  auxdata varchar(64) NOT NULL default '',
	  test varchar(32) NOT NULL default '',
	  count int(10) NOT NULL default '0',
	  PRIMARY KEY  (policy,auxdata)
	) TYPE=MyISAM;

	CREATE TABLE group_policies (
	  pid varchar(12) NOT NULL default '',
	  gid varchar(12) NOT NULL default '',
	  policy varchar(32) NOT NULL default '',
	  auxdata varchar(64) NOT NULL default '',
	  count int(10) NOT NULL default '0',
	  PRIMARY KEY  (pid,gid,policy,auxdata)
	) TYPE=MyISAM;

	CREATE TABLE user_policies (
	  uid varchar(8) NOT NULL default '',
	  policy varchar(32) NOT NULL default '',
	  auxdata varchar(64) NOT NULL default '',
	  count int(10) NOT NULL default '0',
	  PRIMARY KEY  (uid,policy,auxdata)
	) TYPE=MyISAM;

       Populating the tables from the existing nodetypeXpid_permissions.

       insert into group_policies (pid, gid, policy, auxdata, count) \
          select distinct '-','-','type',type,0 from nodetypeXpid_permissions;

       insert into group_policies (pid, gid, policy, auxdata, count) \
          select distinct pid,pid,'type',type,9999999 from \
	       nodetypeXpid_permissions;

1.308: Add a table for the robot tracking cameras.

	CREATE TABLE cameras (
	  name varchar(32) NOT NULL default '',
	  building varchar(32) NOT NULL default '',
	  floor varchar(32) NOT NULL default '',
	  hostname varchar(255) default NULL,
	  port smallint(5) unsigned NOT NULL default '6100',
	  device varchar(64) NOT NULL default '',
	  loc_x float NOT NULL default '0',
	  loc_y float NOT NULL default '0',
	  width float NOT NULL default '0',
	  height float NOT NULL default '0',
	  config tinytext,
	  PRIMARY KEY  (name,building,floor)
	) TYPE=MyISAM;

1.309: Add destination coords to the nodes table for robots.

	alter table nodes add destination_x float default NULL;
	alter table nodes add destination_y float default NULL;

       Unlike other coords, these are meters and translated to pixels
       later when displayed (trying to head in the right direction ...)

1.310: Addendum to previous revision. Add orientation and change
       default values to NULL.

	alter table location_info add orientation float \
			default NULL after loc_y;
	alter table nodes add destination_orientation float \
			default NULL;

1.311: Fix mistake in last revision. Skip to next entry.


1.312: Add delay capacity override so that users can alter the packing
       factor.

        alter table experiments add delay_capacity tinyint(3) \
		unsigned default NULL after panic_date;
        alter table experiment_resources add delay_capacity tinyint(3) \
		unsigned default NULL after maxlinks;

1.313: Add TinyOS as a supported OS in the os_info table:

        alter table os_info change column OS OS enum('Unknown','Linux', \
          'FreeBSD','NetBSD','OSKit','Windows','TinyOS','Other');
        alter table os_info alter column OS set default 'Unknown';

1.314: Add URL to webcams table which is used in the img script to
       grab the data off the camera.

         alter table webcams add URL tinytext;

1.315: Add timestamp (in unixtime) to location_info table.

	alter table location_info add stamp int(10) unsigned default NULL;

1.316: Add bios_waittime to node_types table and reboot_waittime to
       os_info table. Both in seconds. 

        alter table node_types add bios_waittime int(10) unsigned \
                default NULL after isrebootable;

        alter table os_info add reboot_waittime int(10) unsigned \
                default NULL after mfs;

       Insert bios wait times for your specific hardware types, or:

        update node_types set bios_waittime=60 where class='pc';

       Optionally update your os_info table with reboot times,
       although os_setup will continue to use a default if not
       specified.

        update os_info set reboot_waittime=150 where OS='Linux' or
	  OS='FreeBSD' or OS='NetBSD';
        update os_info set reboot_waittime=180 where OS='Windows';

1.317: Add loc_z to location_info table.

	alter table location_info add loc_z float default NULL after loc_y;

1.318: Add a stillimage URL to the webcams table until I figure this
       mess out.

       alter table webcams add stillimage_URL tinytext;

1.319: Add some more fields to virt_programs.

	alter table virt_programs add dir tinytext;
	alter table virt_programs add timeout int(10) unsigned default NULL;
	alter table virt_programs add expected_exit_code tinyint(4) unsigned 
	  default NULL;

       Add a table for storing user config data that gets turned into
       environment variables.

	CREATE TABLE virt_user_environment (
	  pid varchar(12) NOT NULL default '',
	  eid varchar(32) NOT NULL default '',
	  idx int(10) unsigned NOT NULL auto_increment,
	  name varchar(255) NOT NULL default '',
	  value text,
	  PRIMARY KEY  (pid,eid,idx)
	) TYPE=MyISAM;


1.320: Add wikiname to user and groups table so we can remember it and
       display it (and a link).

        alter table users add wikiname tinytext;
        alter table groups add wikiname tinytext;

1.321: DB support for disk wipe-age.  If 'mustwipe' is set in the reserved
       table entry for a node, then when nfree'd, the disk must be reloaded
       and all free blocks zeroed to prevent information leakage.

	alter table reserved add mustwipe tinyint(4) NOT NULL default '0';
	alter table current_reloads add mustwipe \
	    tinyint(4) NOT NULL default '0';
      
1.322: Whack-on-LAN power control support.  Add whol field to interfaces
       table to indicate if an interface supports WhOL.

	alter table interfaces add whol tinyint(4) NOT NULL default '0';

1.323: Add a table for the location of the robot holding pens.

	CREATE TABLE node_startloc (
	  node_id varchar(32) NOT NULL default '',
	  building varchar(32) NOT NULL default '',
	  floor varchar(32) NOT NULL default '',
	  loc_x float NOT NULL default '0',
	  loc_y float NOT NULL default '0',
	  orientation float NOT NULL default '0',
	  PRIMARY KEY  (node_id,building,floor)
	) TYPE=MyISAM;

1.324: Add a label field and a draw boolean to the obstacles
       table. The label is a tag for the box, and the draw flag says
       whether to draw the obstacle as a rectangle. The intent is to
       move away from fixed obstacles and labels in the jpeg files,
       and instead draw them dynamically. Kinda simple to start with;
       lets see if we can represent everything we need ...

	alter table obstacles add label tinytext;
	alter table obstacles add draw tinyint(1) NOT NULL default '0';

1.325: Add a wikionly boolean to the users table.

	alter table users add wikionly tinyint(1) default '0';


1.326: Add "role" to the new_interfaces table, that mirrors the role
       slot of the interfaces table. This will be used to override the
       default setting in newnode, which is necessary for elabinelab,
       where the roles of the interfaces are not going to be node_type
       specific, since its assign that is choosing the interfaces.

       alter table new_interfaces add role tinytext default NULL;

1.327: Add "fixed_x" and "fixed_y" fields to the cameras table which
       stores the fixed point on the ground where the camera origin is
       in world coordinates.

        alter table cameras add fixed_x float NOT NULL default '0';
	alter table cameras add fixed_y float NOT NULL default '0';

1.328: Add a table for vnodes whose serial consoles should be
       "mounted" on another node.

	CREATE TABLE virt_tiptunnels (
	  pid varchar(12) NOT NULL default '',
	  eid varchar(32) NOT NULL default '',
	  host varchar(32) NOT NULL default '',
	  vnode varchar(32) NOT NULL default '',
	  PRIMARY KEY  (pid,eid,host,vnode)
	) TYPE=MyISAM;

1.329: Add some booleans to obstacles table to 1) control the drawing of
       the exclusion zone on a per-obstacle basis, and 2) show the
       tooltip.

	alter table obstacles add no_exclusion tinyint(1) NOT NULL \
                default '0';
	alter table obstacles add no_tooltip tinyint(1) NOT NULL \
                default '0';

1.330: Add a numeric_id column to virt_nodes - for motes, this will be
       used to set an ID for the programmed mote.

        alter table virt_nodes add column numeric_id int default NULL;

1.331: Change location_info to include building and floor in the
       primary key.

	alter table location_info change floor floor varchar(32) \
	      NOT NULL default '';
	alter table location_info change building building varchar(32) \
	      NOT NULL default '';
	alter table location_info drop primary key;
	alter table location_info add primary key(node_id,building,floor);

1.332: Add an inner_elab_boot flag to the reserved table so that we
       know when and if the dhcpd config file needs special entries
       for those nodes.

       alter table reserved add inner_elab_boot tinyint(1) default '0' \
              after inner_elab_role;
       update reserved set inner_elab_boot=1 where inner_elab_role is not null;

1.333: Some minor changes for elabinelab support of newnodes.

       alter table wires change column type type enum('Node','Serial','Power','Dnard','Control','Trunk','OuterControl') NOT NULL default 'Node';

1.334: Split the firewalls table into virt and phys parts.

	CREATE TABLE virt_firewalls (
	  pid varchar(12) NOT NULL default '',
	  eid varchar(32) NOT NULL default '',
	  fwname varchar(32) NOT NULL default '',
	  type enum('ipfw','ipfw2','ipchains','ipfw2-vlan') NOT NULL default 'ipfw',
	  style enum('open','closed','basic','emulab') NOT NULL default 'basic',
	  PRIMARY KEY  (pid,eid,fwname)
	) TYPE=MyISAM;

	insert into virt_firewalls (pid,eid,fwname,type,style) \
          select pid,eid,fwname,type,style from firewalls;

	alter table firewalls drop type;
	alter table firewalls drop style;

1.335: Add elabinelab_cvstag to experiments table so people can
       specify a specific tag to use when building the inner elab.

       alter table experiments add elabinelab_cvstag varchar(64) \
                  default NULL after elabinelab_eid;

1.336: Add a process id and local port number fields for the location
       piper. 

	alter table experiments add locpiper_pid int(11) default '0' \
		after delay_capacity;
	alter table experiments add locpiper_port int(11) default '0' \
		after locpiper_pid;

1.337: Add a boolean to the experiments table to turn off full
       elabinelab setup.

	alter table experiments add elabinelab_nosetup tinyint(1) \
            NOT NULL default '0' after elabinelab_cvstag;

1.338: Add a table to track the progress of moving the robots back to
       their pens.

	CREATE TABLE reposition_status (
	  node_id varchar(32) NOT NULL default '',
	  attempts tinyint(4) NOT NULL default '0',
	  distance_remaining float default NULL,
	  PRIMARY KEY  (node_id)
	) TYPE=MyISAM;

1.339: Add stuff for tracing links and lans.

        alter table virt_lans add traced tinyint(1) default '0' \
                after is_accesspoint;
        alter table virt_lans add trace_type \
	        enum('header','packet','monitor') NOT NULL default 'header' \
		after traced;
        alter table virt_lans add trace_expr tinytext \
	        after trace_type;
        alter table virt_lans add trace_snaplen \
                int(11) NOT NULL default '0' \
	        after trace_expr;
        alter table virt_lans add trace_endnode \
               tinyint(1) NOT NULL default '0' \
               after trace_snaplen;

        alter table delays add noshaping tinyint(1) default '0' \
                after card1;

	CREATE TABLE traces (
	  node_id varchar(32) NOT NULL default '',
	  idx int(10) unsigned NOT NULL auto_increment,
	  iface0 varchar(8) NOT NULL default '',
	  iface1 varchar(8) NOT NULL default '',
	  pid varchar(32) default NULL,
	  eid varchar(32) default NULL,
	  linkvname varchar(32) default NULL,
	  vnode varchar(32) default NULL,
	  trace_type tinytext,
	  trace_expr tinytext,
	  trace_snaplen int(11) NOT NULL default '0',
	  PRIMARY KEY  (node_id,idx),
	  KEY pid (pid,eid)
	) TYPE=MyISAM;

4.1: Add mailman passwords. One to the groups table to hold the admin
     password for each project/group list, and another to the users
     table to hold each users password.

     These passwords are stored in cleartext. This is okay since the
     mailman password is deemed to be throw away since the mailman
     system is happy to mail them out to people in cleartext.

     We initially set them to a random value, and will provide a web
     interface on the Emulab side to change them. This is done in the
     mailman setup script though.

          alter table groups add mailman_password tinytext;
          alter table users add mailman_password tinytext;

4.2: Add a table to track user created mailman lists.

	CREATE TABLE mailman_listnames (
	  listname varchar(64) NOT NULL default '',
	  owner_uid varchar(8) NOT NULL default '',
	  created datetime default NULL,
	  PRIMARY KEY  (listname)
	) TYPE=MyISAM;

4.3: Add a last_activity field to user_stats to make it easier to
     determine recent users (in genelists).

	alter table user_stats add last_activity datetime \
               default NULL after exptswapmod_last;

      To seed this table:

	update user_stats set last_activity =
	    FROM_UNIXTIME(GREATEST(UNIX_TIMESTAMP(exptstart_last),
	                           UNIX_TIMESTAMP(exptpreload_last),
                                   UNIX_TIMESTAMP(exptswapin_last),
                                   UNIX_TIMESTAMP(exptswapout_last),
                                   UNIX_TIMESTAMP(exptswapmod_last)));

4.4: Ditto last revision for project_stats and group_stats

	alter table project_stats add last_activity datetime \
               default NULL after exptswapmod_last;
	alter table group_stats add last_activity datetime \
               default NULL after exptswapmod_last;

      To seed these:

	update group_stats set last_activity =
	    FROM_UNIXTIME(GREATEST(UNIX_TIMESTAMP(exptstart_last),
	                           UNIX_TIMESTAMP(exptpreload_last),
                                   UNIX_TIMESTAMP(exptswapin_last),
                                   UNIX_TIMESTAMP(exptswapout_last),
                                   UNIX_TIMESTAMP(exptswapmod_last)));

	update project_stats set last_activity =
	    FROM_UNIXTIME(GREATEST(UNIX_TIMESTAMP(exptstart_last),
	                           UNIX_TIMESTAMP(exptpreload_last),
                                   UNIX_TIMESTAMP(exptswapin_last),
                                   UNIX_TIMESTAMP(exptswapout_last),
                                   UNIX_TIMESTAMP(exptswapmod_last)));

4.5: Add knowledge_base_entries table.

	CREATE TABLE knowledge_base_entries (
	  idx int(11) NOT NULL auto_increment,
	  creator_uid varchar(8) NOT NULL default '',
	  date_created datetime default NULL,
	  section tinytext,
	  title tinytext,
	  body text,
	  xref_tag varchar(64) default NULL,
	  faq_entry tinyint(1) NOT NULL default '0',
	  date_modified datetime default NULL,
	  modifier_uid varchar(8) default NULL,
	  archived tinyint(1) NOT NULL default '0',
	  date_archived datetime default NULL,
	  archiver_uid varchar(8) default NULL,
	  PRIMARY KEY  (idx)
	) TYPE=MyISAM;

4.6: Fix up previous revision; skip to next entry.
4.7: Ditto.

4.8: Add a cvsrepo public flag to the project table. 

	alter table projects add cvsrepo_public tinyint(1) \
                NOT NULL default '0' after linked_to_us;

4.9: Add a 'global_vtypes' table to allow admins to create vtypes that apply
    to all users:

        create table global_vtypes \
	 (vtype varchar(30) not null default '' primary key, \
          weight float not null default 0.5, \
          types text not null default "");

4.10: New inner_elab roles to support separate ops and fs nodes.
      While I'm here, add future roles for distinguishing boss and the router.
      Then update the virt_nodes and reserved tables to map old values of
      boss/ops to new values of boss+router/ops+fs.

	alter table virt_nodes change inner_elab_role \
	      inner_elab_role enum('boss','boss+router','router',\
				   'ops','ops+fs','fs','node') default NULL;
	alter table reserved change inner_elab_role \
	      inner_elab_role enum('boss','boss+router','router',\
				   'ops','ops+fs','fs','node') default NULL;

	update virt_nodes set inner_elab_role='boss+router'
		where inner_elab_role='boss';
	update virt_nodes set inner_elab_role='ops+fs'
		where inner_elab_role='ops';
	update reserved set inner_elab_role='boss+router'
		where inner_elab_role='boss';
	update reserved set inner_elab_role='ops+fs'
		where inner_elab_role='ops';

4.11: Add 'amrd' as potential disk type in node_types.

        alter table node_types change disktype \
	        disktype enum('ad','da','ar','amrd') default NULL;

4.12: Increase length of auxdata in the global_policies table.

        alter table global_policies change auxdata \
                auxdata varchar(128) NOT NULL default '';

4.13: Skip to 4.14

4.14: Add disk loader and admin MFS fields to node_types.

      alter table node_types add adminmfs_osid varchar(35) \
	        default 'FREEBSD-MFS' after bios_waittime;
      alter table node_types add diskloadmfs_osid varchar(35) \
	        default 'FRISBEE-MFS' after adminmfs_osid;

4.15 Create node_attributes table; migrate a column from the nodes table.

     CREATE TABLE node_attributes (
       node_id varchar(32) NOT NULL default '',
       attrkey varchar(32) NOT NULL default '',
       attrvalue tinytext NOT NULL,
       PRIMARY KEY  (node_id,attrkey),
       KEY node_id (node_id)
     ) TYPE=MyISAM;

     Migrate bios_version info:

     Run:
                ./bios_move.pl | mysql tbdb

     Check the node_attributes table to be sure it contains your bios
     version entries.  Then remove the column from the nodes table:

     alter table nodes drop column bios_version;

4.16: Add new tables for the logging subsystem (libdblog)

	mysql tbdb < libtblog-orig.sql

4.17: Add linktest feature.

       alter table os_info change osfeatures osfeatures \
	set('ping','ssh','ipod','isup','veths','mlinks','linktest') default NULL;

      Also add some experimental fields to project table.

       alter table projects add inactive tinyint(4) default '0' \
             after approved;
       alter table projects add date_inactive datetime default NULL \
             after inactive;

4.18: Add PlanetLab node mapping table

     CREATE TABLE plab_mapping (
       node_id varchar(32) NOT NULL default '',
       plab_id varchar(32) NOT NULL default '',
       hostname varchar(255) NOT NULL default '',
       IP varchar(15) NOT NULL default  '',
       mac varchar(17) NOT NULL default '',
       create_time datetime default NULL,
       PRIMARY KEY  (node_id)
     ) TYPE=MyISAM;

4.19: Infrastructure for disk state saving.  Add imageid and imagepid
      fields to partitions table to track what image is loaded on the disk
      and savedisk field in experiments table.

      alter table partitions add imageid varchar(45) default NULL \
             after osid; 
      alter table partitions add imagepid varchar(12) NOT NULL default '' \
             after imageid; 
      alter table experiments add savedisk tinyint(1) NOT NULL default 0 \
             after delay_capacity;	

4.20: Add more digits to display when retrieving the lossrate from
      virt_lans.

     alter table virt_lans change lossrate lossrate float(10,5) default NULL;
     alter table virt_lans change rlossrate rlossrate float(10,5) default NULL;

4.21: Add a slot to nodes table to be used for reserving a node for
      use in the emulab-ops project only, so that we can more easily take
      nodes out of the general pool, but still be able to use them.
      This slot actually takes a pid, so we could potentially use it more
      generally for reserving nodes to particular projects, but I am
      not sure that is the best approach yet.

      alter table nodes add reserved_pid varchar(12) default NULL \
                  after destination_orientation;

4.22: Experimental archiving code. Sure to change!

        CREATE TABLE archive_tags (
          idx int(10) unsigned NOT NULL auto_increment,
          tag varchar(64) NOT NULL default '',
          archive_idx int(10) unsigned NOT NULL default '0',
          date_created int(10) unsigned NOT NULL default '0',
          PRIMARY KEY (idx),
          UNIQUE KEY (tag,archive_idx)
        ) TYPE=MyISAM;
        
        CREATE TABLE archive_views (
          view varchar(64) NOT NULL default '',
          archive_idx int(10) unsigned NOT NULL default '0',
          current_tag varchar(64) NOT NULL default '',
          previous_tag varchar(64) default NULL,
          date_created int(10) unsigned NOT NULL default '0',
          PRIMARY KEY  (view,archive_idx)
        ) TYPE=MyISAM;
        
        CREATE TABLE archives (
          idx int(10) unsigned NOT NULL auto_increment,
          directory tinytext,
          date_created int(10) unsigned NOT NULL default '0',
          PRIMARY KEY  (idx)
        ) TYPE=MyISAM;
        
        alter table experiment_stats add
             archive_idx int(10) unsigned default NULL
             after security_level;
        
        alter table experiment_resources add
             archive_tag varchar(32) NOT NULL default ''
             after delay_capacity;

4.23: [TENTATIVE]
      Add tables to store the set of files accessed by an experiment.

	CREATE TABLE fs_resources (
	  rsrcidx int(10) unsigned NOT NULL default '0',
	  fileidx int(11) unsigned NOT NULL default '0',
	  exptidx int(10) unsigned NOT NULL default '0',
	  type enum('r','w','rw','l') default 'r',
	  size int(11) unsigned default '0',
	  PRIMARY KEY  (rsrcidx,fileidx),
	  KEY rsrcidx (rsrcidx),
	  KEY fileidx (fileidx)
	) TYPE=MyISAM;

	CREATE TABLE accessed_files (
	  fn text NOT NULL,
	  idx int(11) unsigned NOT NULL auto_increment,
	  PRIMARY KEY  (fn(255)),
	  KEY idx (idx)
	) TYPE=MyISAM;

4.24: Add support for maintaining records of deleted users.

      Change unix_uid in the users table to use an index from
      emulab_indicies table (instead of an auto increment).

      replace into emulab_indicies (name, idx) \
             select 'next_uid',max(unix_uid)+1 from users;

      alter table users change unix_uid unix_uid smallint(5) \
                unsigned NOT NULL default '0';

      alter table user_stats add uid_idx smallint(5) unsigned NOT NULL \
                default '0' after uid;

      Run this script:

	    sql/mod-userstats.pl

      alter table user_stats add unique uid_idx (uid_idx); 
      alter table user_stats drop primary key;
      alter table user_stats add primary key (uid_idx);
      alter table user_stats drop index uid_idx;

	CREATE TABLE deleted_users (
	  uid varchar(8) NOT NULL default '',
	  uid_idx smallint(5) unsigned NOT NULL default '0',
	  usr_created datetime default NULL,
	  usr_deleted datetime default NULL,
	  usr_name tinytext,
	  usr_title tinytext,
	  usr_affil tinytext,
	  usr_email tinytext,
	  usr_URL tinytext,
	  usr_addr tinytext,
	  usr_addr2 tinytext,
	  usr_city tinytext,
	  usr_state tinytext,
	  usr_zip tinytext,
	  usr_country tinytext,
	  usr_phone tinytext,
	  webonly tinyint(1) default '0',
	  wikionly tinyint(1) default '0',
	  notes text,
	  PRIMARY KEY  (uid_idx)
        ) TYPE=MyISAM;

4.25: Modify tables for the logging subsystem

  alter table log
    modify level tinyint(2) not null default '0',
    add sublevel tinyint(2) NOT NULL default 0 after level,
    modify type 
      enum('normal','entering','exiting','thecause','extra','summary')
      NOT NULL default 'normal';

  alter table scripts change name script_name varchar(24) NOT NULL default '';

  alter table priorities change name priority_name varchar(8) \
      NOT NULL default '';

4.26: Add tables for the checkup_daemon.

	CREATE TABLE active_checkups (
	  object varchar(128) NOT NULL default '',
	  object_type varchar(64) NOT NULL default '',
	  type varchar(64) NOT NULL default '',
	  state varchar(16) NOT NULL default 'new',
	  start datetime default NULL,
	  PRIMARY KEY  (object)
	) TYPE=MyISAM;

	CREATE TABLE checkup_types (
	  object_type varchar(64) NOT NULL default '',
	  checkup_type varchar(64) NOT NULL default '',
	  major_type varchar(64) NOT NULL default '',
	  expiration int(10) NOT NULL default '86400',
	  PRIMARY KEY  (object_type,checkup_type)
	) TYPE=MyISAM;

	CREATE TABLE checkups (
	  object varchar(128) NOT NULL default '',
	  object_type varchar(64) NOT NULL default '',
	  type varchar(64) NOT NULL default '',
	  next datetime default NULL,
	  PRIMARY KEY  (object,type)
	) TYPE=MyISAM;

	CREATE TABLE checkups_temp (
	  object varchar(128) NOT NULL default '',
	  object_type varchar(64) NOT NULL default '',
	  type varchar(64) NOT NULL default '',
	  next datetime default NULL,
	  PRIMARY KEY  (object,type)
	) TYPE=MyISAM;

4.27: Some changes to the archive table:

      alter table archives add archived tinyint(1) default '0';
      alter table archives add date_archived int(10) unsigned \
		NOT NULL default '0';

4.29: Some changes to the archive_tags table, for support of forking
      an archive.

	CREATE TABLE archive_tags_new (
	  idx int(10) unsigned NOT NULL auto_increment,
	  tag varchar(64) NOT NULL default '',
	  archive_idx int(10) unsigned NOT NULL default '0',
	  view varchar(64) NOT NULL default '',
	  date_created int(10) unsigned NOT NULL default '0',
	  PRIMARY KEY  (idx),
	  UNIQUE KEY tag (tag,archive_idx,view)
	) TYPE=MyISAM;
      
	insert into archive_tags_new (idx,tag,archive_idx,view,date_created) \
           select distinct NULL,t.tag,t.archive_idx,v.view,t.date_created \
	   from archive_tags as t left join archive_views as v on \
	   v.archive_idx=t.archive_idx;

        rename table archive_tags TO archive_tags_old, \
                  archive_tags_new TO archive_tags;
	drop table archive_tags_old;

4.30: Add more fields to archive_tags table.

	alter table archive_tags add tagtype enum('user','commit',\
            'savepoint','internal') NOT NULL default 'internal';
        alter table archive_tags add description text;

4.31: Add a contact email to the location_info table.

      alter table location_info add email tinytext after contact;

4.32: Add slots to archive_views table to track branching.

	alter table archive_views add branch_tag varchar(64) default NULL;
	alter table archive_views add parent_view varchar(64) default NULL;

4.33: Add Fedora as an OS to the os_info table.

	alter table os_info change column OS OS \
	    enum('Unknown','Linux','Fedora','FreeBSD','NetBSD',\
	         'OSKit','Windows','TinyOS','Other') default 'Unknown';

4.34: Add Fedora as an OS to the os_info table.

       alter table os_info change osfeatures osfeatures \
	    set('ping','ssh','ipod','isup','veths','mlinks', \
	         'linktest','linkdelays') default NULL;

4.35: Table that maps an OS, version, and role to a boot command line.
      It is referred to when assign_wrapper needs to assign a command
      line to a delay or jail node.

	CREATE TABLE os_boot_cmd (
	  OS enum('Unknown','Linux','Fedora','FreeBSD','NetBSD','OSKit',\
		'Windows','TinyOS','Other') NOT NULL default 'Unknown',
	  version varchar(12) NOT NULL default '',
	  role enum('default','delay','linkdelay','vnodehost') \
		NOT NULL default 'default',
	  boot_cmd_line text,
	  PRIMARY KEY  (OS,version,role)
	) TYPE=MyISAM;

4.36: Add plab_site_mapping table for plab nodes, for use with the
      datapository.

	CREATE TABLE plab_site_mapping (
	  site_name varchar(255) NOT NULL default '',
	  site_idx smallint(5) unsigned NOT NULL auto_increment,
	  node_id varchar(32) NOT NULL default '',
	  node_idx tinyint(3) unsigned NOT NULL default '0',
	  PRIMARY KEY  (site_name,site_idx,node_idx)
	) TYPE=MyISAM;

4.37: Add batchmode flag to experiment_resources table so we can track
      the usage of the batch daemon on swapin.

      alter table experiment_resources add batchmode tinyint(1) \
               unsigned default '0' after delay_capacity;

4.38: Add field to virt_firewalls to allow specification of rule logging.

      alter table virt_firewalls add log tinytext NOT NULL default '' after style;

4.39: Add new table, wireless_stats, to store some basic config info 
      for the new wireless stats applet.

      CREATE TABLE wireless_stats (
        name varchar(32) NOT NULL default '',
	floor varchar(32) NOT NULL default '',
	building varchar(32) NOT NULL default '',
	data_eid varchar(32) default NULL,
	data_pid varchar(32) default NULL,
	type varchar(32) default NULL,
	altsrc tinytext,
	PRIMARY KEY  (name)
      ) TYPE=MyISAM;

4.40: Add stuff to store the error, as determined by tblog, in a more
     structured fashion:

	CREATE TABLE errors (
	  session int(1) unsigned NOT NULL default '0',
	  stamp int(10) unsigned NOT NULL default '0',
	  exptidx int(11) NOT NULL default '0',
	  script smallint(3) NOT NULL default '0',
	  cause varchar(16) NOT NULL default '',
	  confidence float NOT NULL default '0',
	  mesg text NOT NULL,
	  primary key (session)
	);

        alter table experiment_stats
	  add last_error int unsigned;

        alter table testbed_stats
	  add log_session int unsigned;

	CREATE TABLE causes (
	  cause varchar(16) NOT NULL default '',
	  cause_desc varchar(32) NOT NULL default '',
	  primary key (cause),
	  unique key (cause_desc)
	);

        ALTER TABLE log 
          change cause cause varchar(16) NOT NULL default '',
          change pidx exptidx int NOT NULL default '0';

	INSERT INTO exported_tables values ('causes');

	INSERT INTO causes values ('temp', 'Temp Resource Shortage');
	INSERT INTO causes values ('user', 'User Error');
	INSERT INTO causes values ('internal', 'Internal Error');
	INSERT INTO causes values ('software', 'Software Problem');
	INSERT INTO causes values ('hardware', 'Hardware Problem');
	INSERT INTO causes values ('unknown', 'Cause Unknown');

     
     The new code will than store all errors in the new table.  Before
     they where stored as a special entry in the "log" table.  To copy
     them over into the "errors" table you may also want to run:

         perl errors-migrate.pl.

     If the script completed with no errors you can than safely purge
     those entries from the "log" table using:

        delete from log where type = 'thecause';

4.41: A lot of Template stuff. This is experimental! 

	mysql tbdb < templates.sql

4.42: Some new tables for motelog stuff.  motelogfiles stores all info
      about classfiles necessary for logging; virt_node_motelog stores any
      experiment-specific motelog config.

      CREATE TABLE motelogfiles (
        logfileid varchar(45) NOT NULL default '',
	pid varchar(12) NOT NULL default '',
	gid varchar(12) default NULL,
	creator varchar(8) NOT NULL default '',
	created datetime NOT NULL default '0000-00-00 00:00:00',
	updated datetime default NULL,
	description tinytext NOT NULL,
	classfilepath tinytext NOT NULL,
	specfilepath tinytext,
	mote_type varchar(30) default NULL,
	PRIMARY KEY  (logfileid,pid)
      ) TYPE=MyISAM;

      CREATE TABLE virt_node_motelog (
        pid varchar(12) NOT NULL default '',
	eid varchar(32) NOT NULL default '',
	vname varchar(32) NOT NULL default '',
	logfileid varchar(45) NOT NULL default '',
	PRIMARY KEY  (pid,eid,vname)
      ) TYPE=MyISAM;

4.43: Un-deprecate the node pxe_boot_path field (did you even know it was
      gone?)  It is now used to specify alternate PXE boot programs (which
      show up as the "filename" command in dhcpd.conf).  While we are at
      it, get rid of the still deprecated fields: pxe_boot_path field in
      node_types and next_pxe_boot_path in nodes;

      update nodes set pxe_boot_path=NULL where pxe_boot_path is not NULL;
      alter table node_types drop column pxe_boot_path;
      alter table nodes drop column next_pxe_boot_path;

4.44: Changes to templates.sql. Skip this revision for now.

4.45: More changes to templates.sql. Also:

	alter table experiments add column instance_idx int(10) \
	    unsigned NOT NULL default '0' AFTER locpiper_port;

4.46: Changes to templates.sql. Skip this revision for now.

4.47: Ack, need another field in the primary key for virt_node_motelog:

      alter table virt_node_motelog drop primary key;
      alter table virt_node_motelog add primary key(pid,eid,vname,logfileid);

4.48: Add index to log table.

      alter table log add key stamp (stamp);

4.49: Ugh, node_types.pxe_boot_path is back.  Allows alternate PXE boot
      path for a whole type of node, e.g., one which does not support a
      serial console.  Put it right back where it was before.

      alter table node_types add column pxe_boot_path text \
          after modelnetedge_osid;

4.50: Make 'state' an index in the experiment table to knock down a couple
      of frequent heavyweight queries.

      alter table experiments add index (state);

4.51: Another index to improve lookup in linkdelays.

      alter table linkdelays add index id (pid,eid);

4.52: Mr. Index strikes again.  Take a nodecontrol_form query from 21 to 1 sec.

      alter table partitions add index (osid);

4.53: Changes to templates.sql. Skip this revision for now.

4.54: Minor changes to schema; add some quotes around field names that
      are now reserved words mysql 5.X. Skip to the next entry ...

4.55: Changes to templates.sql. Skip this revision for now.

4.56: Refactor "log" table to move some stuff into a new table.

      CREATE TABLE session_info (
        session int(11) NOT NULL default '0',
        uid int(11) NOT NULL default '0',
        exptidx int(11) NOT NULL default '0',
        PRIMARY KEY  (session)
      );

      lock tables log write, session_info write;

      insert into session_info
        select session, uid, exptidx from log 
        where uid != 0 or exptidx != 0
        group by session;

      [If either of the above queries failed.  Stop now and fix it as
       the next will destroy the information.]

      alter table log
        drop column uid,
        drop column exptidx;

      lock tables log read, session_info read;

      [Now install the new code, do it before you unlock the table, as
       the last statement made an incompatible change to the "log" table]

      unlock tables;

4.57: Changes to templates.sql. Skip this revision for now.

4.58: Fix to the schema in last revision; Skip to next extry.

4.59: Add reserved table plab_role field to distinguish nodes in an
      "inner planetlab".

      alter table reserved add plab_role enum('plc','node','none') \
	NOT NULL default 'none' after inner_elab_boot;

      alter table reserved add plab_boot tinyint(1) \
	default '0' after plab_role;

      alter table virt_nodes add plab_role enum('plc','node','none') \
	NOT NULL default 'none' after inner_elab_role;

4.60: Various changes to templates.

      **** Skip this if you just did 4.41 above.

      alter table experiment_template_metadata_items \
               change value value mediumtext;

      alter table experiment_template_metadata \
               add hidden tinyint(1) NOT NULL default '0';

      alter table experiment_template_metadata \
               add metadata_type enum('tid','template_description',\
                        'parameter_description') default NULL;

      alter table experiment_template_parameters add \
               metadata_guid varchar(16) default NULL;
      alter table experiment_template_parameters add \
               metadata_vers smallint(5) unsigned NOT NULL default '0';

4.61: Add archive_tag slot to experiment runs so we can find the
      corresponding spot in the archive.

      **** Skip this if you just did 4.41 above.

      alter table experiment_runs add \
            archive_tag varchar(32) default NULL after description;

4.62:
4.63: Add a slot to the hold the name of optional per-experiment DB.

      alter table experiments add dpdb tinyint(1) NOT NULL default '0';
      alter table experiments add dpdbname varchar(64) default NULL;
      alter table experiment_stats add dpdbname varchar(64) default NULL;

4.64: Fix archive tags to be proper size.

      alter table experiment_resources change archive_tag \
          archive_tag varchar(64) default NULL;

      **** Skip this statement if you just did 4.41 above.

      alter table experiment_runs change archive_tag \
          archive_tag varchar(64) default NULL;

4.65: Minor fix; skip to next entry;
4.66: More fixes; skip to next entry;

4.67: Add a foreign_admin field to the users table for testbed-admins elsewhere.
       alter table users add column foreign_admin tinyint(4) default '0' after admin;

4.68: Changes to the login table to allow users to be logged in from
      more then one browser at a time.

      drop table login;

      CREATE TABLE login (
        uid varchar(10) NOT NULL default '',
        hashkey varchar(64) NOT NULL default '',
        hashhash varchar(64) NOT NULL default '',
        timeout varchar(10) NOT NULL default '',
        adminon tinyint(1) NOT NULL default '0',
        PRIMARY KEY  (uid,hashkey),
        UNIQUE KEY hashhash (uid,hashhash)
      ) TYPE=MyISAM;

      This immediately logs everyone out from the web interface. but
      thats not really a big deal.

4.69: Add template_tag to experiment_template_instances table.

      **** Skip this if you just did 4.41 above.

      	alter table experiment_template_instances add \
		template_tag varchar(64) default NULL;

4.70: Add latitude and longitude to the widearea_nodeinfo table.

      alter table widearea_nodeinfo
          add latitude latitude float default NULL,
          add longitude longitude float default NULL;
 
4.71: Support for 802.1q tagged VLAN based virtual interfaces.
      First, generalize the encapsulation field.  For compatibility,
      we create a new field, we'll delete the old veth_encapsulate at
      some future time.  We also add a VLAN number field to the vlans
      table, create

        alter table experiments add encap_style \
		enum('alias','veth','veth-ne','vlan','default') \
		NOT NULL default 'default' after veth_encapsulate;
	insert into table_regex values \
		('experiments','encap_style','text','regex','^(alias|veth|veth-ne|vlan|default)$',0,0,NULL);
	update experiments set encap_style='veth-ne' where veth_encapsulate=0;

	alter table virt_lans add encap_style \
		enum('alias','veth','veth-ne','vlan','default') \
		NOT NULL default 'default' after usevethiface;
	insert into table_regex values \
		('virt_lans','encap_style','text','redirect','experiments:encap_style',0,0,NULL);
	update virt_lans set encap_style='veth' where usevethiface=1;

	alter table vlans add tag smallint(5) NOT NULL default '0' \
		after id;
        alter table vlans drop index pid;
        alter table vlans add index pid (pid,eid,virtual);

	alter table interfaces drop column IPalias;

	CREATE TABLE vinterfaces (
	  node_id varchar(32) NOT NULL default '',
	  unit int(10) unsigned NOT NULL auto_increment,
	  mac varchar(12) NOT NULL default '000000000000',
	  IP varchar(15) default NULL,
	  mask varchar(15) default NULL,
	  type enum('alias','veth','veth-ne','vlan') NOT NULL default 'veth',
	  iface varchar(10) default NULL,
	  rtabid smallint(5) unsigned NOT NULL default '0',
	  vnode_id varchar(32) default NULL,
	  PRIMARY KEY (node_id, unit),
	  KEY bynode (node_id, iface),
	  KEY type (type)
	) TYPE=MyISAM;

      To populate the vinterfaces table run:

        sudo ./initvinterfaces.pl

4.72: Re-add changes I made in revision 4.54 which got lost when Rob
      did revision 4.70. Skip to next entry please ...

4.73: Add two columns for to "log" table for better error reporting:

       alter table log
          add attempt tinyint(1) not null default 0 after session,
          add cleanup tinyint(1) not null default 0 after attempt;

4.74: Add new node_type_attributes table:

	CREATE TABLE node_type_attributes (
	  type varchar(30) NOT NULL default '',
	  attrkey varchar(32) NOT NULL default '',
	  attrvalue tinytext NOT NULL,
	  attrtype enum('integer','float','boolean','string') default 'string',
	  PRIMARY KEY  (type,attrkey),
	  KEY node_id (type)
	) TYPE=MyISAM;

      To populate:

         ./init_nodeattrs.pl | mysql tbdb

      Now it is safe to do this:

	create table node_types_save like node_types;
	insert into node_types_save select * from node_types;
	alter table node_types drop proc;
	alter table node_types drop speed;
	alter table node_types drop RAM;
	alter table node_types drop HD;
	alter table node_types drop max_interfaces;
	alter table node_types drop osid;
	alter table node_types drop control_net;
	alter table node_types drop power_time;
	alter table node_types drop imageid;
	alter table node_types drop imageable;
	alter table node_types drop delay_capacity;
	alter table node_types drop virtnode_capacity;
	alter table node_types drop control_iface;
	alter table node_types drop disktype;
	alter table node_types drop bootdisk_unit;
	alter table node_types drop delay_osid;
	alter table node_types drop jail_osid;
	alter table node_types drop pxe_boot_path;
	alter table node_types drop simnode_capacity;
	alter table node_types drop trivlink_maxspeed;
	alter table node_types drop isrebootable;
	alter table node_types drop bios_waittime;
	alter table node_types drop adminmfs_osid;
	alter table node_types drop diskloadmfs_osid;

      At some point you will want to drop the node_types_save table
      ...

4.75: Add table to cache last viewed visualization, to avoid
      regeneration delays.
  
	CREATE TABLE vis_graphs (
	  pid varchar(12) NOT NULL default '',
	  eid varchar(32) NOT NULL default '',
	  zoom decimal(8,3) NOT NULL default '0',
	  detail tinyint(2) NOT NULL default '0',
	  image mediumblob,
	  PRIMARY KEY  (pid,eid)
	) TYPE=MyISAM;


      Also add a "active" flag to the experiment_template to use in
      determining which templates the user is currently interested in.

      **** Skip this if you just did 4.41 above.

      alter table experiment_templates add \
            active tinyint(1) NOT NULL default '0.000';

4.76: Change to previous revision; skip to next entry.

4.77: Add a child template pointer to experiment_templates to store
      the guid of the most recent child (modification). Better then
      passing this info back in a print statement to be parsed.

      **** Skip this if you just did 4.41 above.

      alter table experiment_templates add \
          child_guid varchar(16) default NULL after parent_vers;
      alter table experiment_templates add \
          child_vers smallint(5) unsigned default NULL after child_guid;

4.78: Add trace_db flags to virt_lans and traces tables.

      alter table virt_lans add \
               trace_db tinyint(1) NOT NULL default '0';
      alter table traces add \
               trace_db tinyint(1) NOT NULL default '0';

      **** Skip this stuff below if you just did 4.41 above.

      Add timestamp the experiment_template_instances to note when the
      last export was done. 
       
      alter table experiment_template_instances add \
                export_time datetime default NULL;

4.79: Add a table to record temporary databases created on ops, that
      are not associated with an experiment (or a project/group). This
      is to make it easier to generate the proper permission lists for
      db access.
       
	CREATE TABLE datapository_databases (
	  dbname varchar(64) NOT NULL default '',
	  pid varchar(12) NOT NULL default '',
	  gid varchar(16) NOT NULL default '',
	  uid varchar(8) NOT NULL default '',
	  created datetime default NULL,
	  PRIMARY KEY  (dbname)
	) TYPE=MyISAM;

4.80: Fix to previous revision; Skip to next entry.

4.81: Add a table to store dynamic template events. These events are
      copied into the event stream when creating an instance (added to
      the eventlist for the experiment).

      **** Skip this stuff below if you just did 4.41 above.

	CREATE TABLE experiment_template_events (
	  parent_guid varchar(16) NOT NULL default '',
	  parent_vers smallint(5) unsigned NOT NULL default '0',
	  vname varchar(64) NOT NULL default '',
	  vnode varchar(32) NOT NULL default '',
	  time float(10,3) NOT NULL default '0.000',
	  objecttype smallint(5) unsigned NOT NULL default '0',
	  eventtype smallint(5) unsigned NOT NULL default '0',
	  arguments text,
	  PRIMARY KEY  (parent_guid, parent_vers, vname)
	) TYPE=MyISAM;

4.82: Add Support For Mike Kasick Reporter Mechanism.  This need to be
      done in two parts.
  
      1) Add report_* tables:

         mysql tbdb < tbreport.sql

      2) Modify exiting tables:     

         lock tables log write, emulab_indicies write;

         insert into emulab_indicies (name,idx) 
             select 'cur_log_seq', max(seq) from log;

         alter table log 
            change seq seq int unsigned not null default '0', 
            change type type enum('normal','entering','exiting','thecause',
                                  'extra','summary','primary','secondary') 
                             default 'normal';

         lock tables log read, emulab_indicies read;

         [Now install the new code, do it before you unlock the table, 
          otherwise risk cur_log_seq getting out if sync.]

         unlock tables;

4.83: Add a per-experiment port registration table. See tmcd.c

	CREATE TABLE port_registration (
	  pid varchar(12) NOT NULL default '',
	  eid varchar(32) NOT NULL default '',
	  service varchar(64) NOT NULL default '',
	  node_id varchar(32) NOT NULL default '',
	  port int(11) unsigned NOT NULL default '0',
	  PRIMARY KEY  (pid,eid,service)
	) TYPE=MyISAM;

4.84: Add "invocation" column to report_error

      alter table report_error
          add column invocation integer unsigned not null after session;

4.85: Fix to previous revision; Skip to next entry.

4.86: Fix up column definitions for latitude and longitude in 
      widearea_nodeinfo table.

      alter table widearea_nodeinfo
          change latitude latitude float default NULL,
          change longitude longitude float default NULL;

4.87: Add description field to virt_parameters so that we can pass
      through a default description from the NS file for parameters.

      **** Skip this stuff below if you just did 4.41 above.
      
      alter table virt_parameters add description text;

4.88: Add bwlimit field to widearea_nodinfo table to track the bandwidth
      caps for plab nodes.

      alter table widearea_nodeinfo add bwlimit varchar(32) default NULL;

4.89: Add starting and ending archive tags to experiment run, to
      replace the single end of run archive tag.

      **** Skip this stuff below if you just did 4.41 above.

      alter table experiment_runs add \
        starting_archive_tag varchar(64) default NULL after description;
      alter table experiment_runs add \
        ending_archive_tag varchar(64) default NULL after starting_archive_tag;
      update experiment_runs set ending_archive_tag=archive_tag \
           where archive_tag is not null and archive_tag!='';
      update experiment_runs set starting_archive_tag=archive_tag \
           where archive_tag is not null and archive_tag!='';

4.90: Add a swapmod flag to the experiment run to indicate that a swapmod
      was resquested by the user.

      **** Skip this stuff below if you just did 4.41 above.

      alter table experiment_runs add swapmod tinyint(1) NOT NULL default '0';

4.91: Add a table to store the ids of nodes that fail during an
      instance (well, run). 

	CREATE TABLE experiment_template_instance_deadnodes (
	  instance_idx int(10) unsigned NOT NULL default '0',
	  exptidx int(10) unsigned NOT NULL default '0',
	  runidx int(10) unsigned NOT NULL default '0',
	  node_id varchar(32) NOT NULL default '',
	  vname varchar(32) NOT NULL default '',
	  PRIMARY KEY  (instance_idx, runidx, node_id)
	) TYPE=MyISAM;

4.92: Add a per-experiment DP password so that users do not need to
      use their own.

      alter table experiments add dpdbpassword varchar(64) default NULL;

4.93: Add pause_time field to template instance to track when user
      stops time. Since this is strictly for the purposes of setting
      the timestamps on "record" events, its very simple. In other
      words, this ain't gonna support time travel!

      **** Skip this stuff below if you just did 4.41 above.

      alter table experiment_template_instances add \
         pause_time datetime default NULL after stop_time;
      alter table experiment_template_instances add \
         continue_time datetime default NULL after stop_time;
      alter table experiment_template_instances add \
         runtime int(10) unsigned default 0 after continue_time;

4.94: Minor fix to last revision; skip to next entry please.

4.95: Add a locked field to the instances table.

      alter table experiment_template_instances add \
           locked datetime default NULL;

4.96: Oops, forgot part of last revision!

      alter table experiment_template_instances add \
             locker_pid int(11) default '0';

4.97: Add description to instances table, to hold until the swapin is
      done. Cannot be modified (yet).

      **** Skip this stuff below if you just did 4.41 above.

      alter table experiment_template_instances add \
             description tinytext after uid;

4.98: Drop the columns from the node_types table, that were supposed
      to be done in revision 4.74 above. Skip to next revision ...

4.99: Add columns to errors table for better information on errors

      alter table errors
          add column rank tinyint(1) not null default 0 after session,
	  drop primary key,
	  add primary key (session, rank),
	  add column inferred tinyint(1) null after confidence,
	  add column need_more_info tinyint(1) null after inferred,
	  add column tblog_revision varchar(8) not null after mesg;

4.100: Add uid_idx column to users table, to become the new unique id
       for all users.
       Add pid_idx column to projects table, to become the new unique id
       for all projects.
       Add gid_idx column to groups table, to become the new unique id
       for all groups.

       Order matters ...

       alter table users add 
           uid_idx mediumint(8) unsigned NOT NULL default '0' after uid;
       alter table users drop primary key;
       alter table users add UNIQUE KEY uid (uid);
       
       alter table user_stats change uid_idx 
           uid_idx mediumint(8) unsigned NOT NULL default '0';

       alter table deleted_users change uid_idx 
           uid_idx mediumint(8) unsigned NOT NULL default '0';

       alter table projects add 
           pid_idx mediumint(8) unsigned NOT NULL default '0' after pid;
       alter table projects drop primary key;
       alter table projects add UNIQUE KEY pid (pid);

       alter table project_stats add 
           pid_idx mediumint(8) unsigned NOT NULL default '0' after pid;
       alter table project_stats drop primary key;
       alter table project_stats add UNIQUE KEY pid (pid);
	   
       alter table groups add 
           pid_idx mediumint(8) unsigned NOT NULL default '0' after gid;
       alter table groups add 
           gid_idx mediumint(8) unsigned NOT NULL default '0' after pid_idx;
       alter table groups drop primary key;
       alter table groups add KEY pididx (pid_idx,gid_idx);
       alter table groups add UNIQUE KEY pidgid (pid,gid);

       alter table group_stats add 
           gid_idx mediumint(8) unsigned NOT NULL default '0' after gid;
       alter table group_stats drop primary key;
       alter table group_stats add UNIQUE KEY pidgid (pid,gid);

       alter table group_membership add 
           uid_idx mediumint(8) unsigned NOT NULL default '0' after pid;
       alter table group_membership add 
           pid_idx mediumint(8) unsigned NOT NULL default '0' after uid_idx;
       alter table group_membership add 
           gid_idx mediumint(8) unsigned NOT NULL default '0' after pid_idx;
       alter table group_membership drop primary key;
       alter table group_membership add UNIQUE KEY uid (uid,pid,gid);
       
       # Now run this script to populate the indexes and create new KEYS.

         ./init_newids.pl

4.101: Add a dual/single elabinelab control network flag to
       experiments table.

	alter table experiments add elabinelab_singlenet tinyint(1) \
            NOT NULL default '0' after elabinelab_nosetup;

4.102: Fixes to report tables for mysql 3.23; must provide defaults
       when declared NOT NULL.

	alter table report_assign_violation change `seq`
                  `seq` int(10) unsigned NOT NULL default '0';

	alter table report_context change `seq`
                  `seq` int(10) unsigned NOT NULL default '0';

	alter table errors change tblog_revision
                  tblog_revision varchar(8) NOT NULL default '';

	alter table report_error
            change `seq` `seq` int(10) unsigned NOT NULL default '0',
            change `stamp` `stamp` int(10) unsigned NOT NULL default '0',
            change `session` `session` int(10) unsigned NOT NULL default '0',
            change `invocation` `invocation` int(10) unsigned NOT NULL default '0',
            change `attempt` `attempt` tinyint(1) NOT NULL default '0',
            change `severity` `severity` smallint(3) NOT NULL default '0',
            change `script` `script` smallint(3) NOT NULL default '0',
            change `error_type` `error_type` varchar(255) NOT NULL default '';

4.103: Change the login table to use the uid_idx field, but also map
       from the uid_idx to the uid for compatability with unchanged
       code.

        drop table login;
	
	CREATE TABLE login (
	  uid_idx mediumint(8) unsigned NOT NULL default '0',
	  uid varchar(10) NOT NULL default '',
	  hashkey varchar(64) NOT NULL default '',
	  hashhash varchar(64) NOT NULL default '',
	  timeout varchar(10) NOT NULL default '',
	  adminon tinyint(1) NOT NULL default '0',
	  PRIMARY KEY  (uid_idx,hashkey),
	  UNIQUE KEY hashhash (uid_idx,hashhash),
	  UNIQUE KEY uidkey (uid,hashkey)
	) TYPE=MyISAM;
       

4.104: More uid changes. First, add new status to users table:

       alter table users change status 
          status enum('newuser','unapproved','unverified','active',
                      'frozen','archived','other') NOT NULL default 'newuser';

       All of the other sql differences are made in the following script:

         ./step2_newids.pl

4.105: New type of metadata; annotations on templates, instances,
       runs.

       alter table experiment_template_metadata change metadata_type
         metadata_type enum('tid','template_description',
              'parameter_description', 'annotation') default NULL;

4.106: More new metadata_types,

       alter table experiment_template_metadata change metadata_type
         metadata_type enum('tid','template_description',
              'parameter_description', 'annotation',
              'instance_description', 'run_description') default NULL;

4.107: Fix to previous revision; skip to next entry.

4.108: Add a table to store remote power cycling keys.  Should do fine for ASF
       or IPMI.  Neither key_role nor key_uid is numeric since different specs
       define the notions of roles and uids differently.  The auth_meta field
       provides some expandability for additional operational metadata down the
       road.

       DROP TABLE IF EXISTS `outlets_remoteauth`;
       CREATE TABLE `outlets_remoteauth` (
         `node_id` varchar(32) NOT NULL,
	 `key_type` varchar(64) NOT NULL,
	 `key_role` varchar(64) NOT NULL default '',
	 `key_uid` varchar(64) NOT NULL default '',
	 `mykey` text NOT NULL,
	 PRIMARY KEY  (`node_id`,`key_type`,`key_role`,`key_uid`)
       ) ENGINE=MyISAM DEFAULT CHARSET=latin1;

4.109: More pid/gid changes.

       All of the sql changes are made in the following script:

         ./step3_newids.pl

4.110: Minor fix to schema file; skip to next entry.

4.111: Minor fix to schema file; skip to next entry.

4.112: OSIDs and IMAGEIDs are now globally unique.

       All of the sql changes are made in the following script:

         ./step4_newids.pl

4.113: Minor fix to schema file; skip to next entry.

4.114: Add a workbench flag to the project table.

       alter table projects add 
           `allow_workbench` tinyint(1) NOT NULL default '0'
	    after cvsrepo_public;

4.115: Add custom history table for planetlab nodes.

       DROP TABLE IF EXISTS `plab_nodehist`;
       CREATE TABLE `plab_nodehist` (
           `idx` mediumint(10) unsigned NOT NULL auto_increment,
	   `node_id` varchar(32) NOT NULL,
	   `phys_node_id` varchar(32) NOT NULL,
	   `timestamp` datetime NOT NULL,
	   `component` varchar(64) NOT NULL,
	   `operation` varchar(64) NOT NULL,
	   `status` enum('success','failure','unknown') NOT NULL default 'unknown',
	   `msg` text,
	   PRIMARY KEY  (`idx`,`node_id`)
       ) ENGINE=MyISAM DEFAULT CHARSET=latin1;

4.116: Add a field to specify to which network a private PLC is connected.

       alter table virt_nodes add 
           `plab_plcnet` varchar(32) NOT NULL default 'none'
	   after plab_role;

4.117: Add a field to hold a legacy PLC slice ticket (since the migration from
       3.x to 4.x continues).

       alter table plab_slices add 
           `slicemeta_legacy` text 
	   after slicemeta;

4.118: Add UUIDs to lots of tables.

       All of the sql changes are made in the following script:

         ./step5_newids.pl

4.119: Add MBR "version number" to images table.  This might be considered
       a step backward since it is not a GUID, but this field is viewed as
       a temporary step.  Ultimately, OSIDs will have to have max sizes
       associated with them so that MBRs (or GPTs or ...) can be dynamically
       created per-image based on the OSIDs in the image, where they reside,
       and what machine type they are being loaded on.

       alter table images add
	  `mbr_version` tinyint(4) NOT NULL default '1'
	  after global;

4.120: Convert to zip archives.

	CREATE TABLE `archive_revisions` (
	  `archive_idx` int(10) unsigned NOT NULL default '0',
	  `revision` int(10) unsigned NOT NULL auto_increment,
	  `parent_revision` int(10) unsigned default NULL,
	  `tag` varchar(64) NOT NULL default '',
	  `view` varchar(64) NOT NULL default '',
	  `date_created` int(10) unsigned NOT NULL default '0',
	  `description` text,
	  `converted` tinyint(1) default '0',
	  PRIMARY KEY  (`archive_idx`,`revision`)
	) ENGINE=MyISAM DEFAULT CHARSET=latin1;

	alter table archive_views add `revision` int(10) unsigned
                default NULL after archive_idx;
	alter table archive_views add `parent_revision` int(10) unsigned
                default NULL after parent_view;
	alter table archive_views change current_tag
	        `current_tag` varchar(64) default NULL;
	alter table archive_tags add `version` tinyint(1)
	            default '0' after tagtype;

4.121: Add a hidden bit to the runs table.

	alter table experiment_runs add hidden tinyint(1) NOT NULL default '0';

4.122: Add a table to store PlanetLab CoMon data, and another to store
       cache latest statistics about planetlab nodes (a reduction of the data
       in plab_nodehist).

       CREATE TABLE `plab_comondata` (
         `node_id` varchar(32) NOT NULL,
	 `resptime` float default NULL,
	 `uptime` float default NULL,
	 `lastcotop` float default NULL,
	 `date` double default NULL,
	 `drift` float default NULL,
	 `cpuspeed` float default NULL,
	 `busycpu` float default NULL,
	 `syscpu` float default NULL,
	 `freecpu` float default NULL,
	 `1minload` float default NULL,
	 `5minload` float default NULL,
	 `numslices` int(11) default NULL,
	 `liveslices` int(11) default NULL,
	 `connmax` float default NULL,
	 `connavg` float default NULL,
	 `timermax` float default NULL,
	 `timeravg` float default NULL,
	 `memsize` float default NULL,
	 `memact` float default NULL,
	 `freemem` float default NULL,
	 `swapin` int(11) default NULL,
	 `swapout` int(11) default NULL,
	 `diskin` int(11) default NULL,
	 `diskout` int(11) default NULL,
	 `gbfree` float default NULL,
	 `swapused` float default NULL,
	 `bwlimit` float default NULL,
	 `txrate` float default NULL,
	 `rxrate` float default NULL,
	 PRIMARY KEY  (`node_id`)
       ) ENGINE=MyISAM DEFAULT CHARSET=latin1;

       CREATE TABLE `plab_nodehiststats` (
         `node_id` varchar(32) NOT NULL,
	 `unavail` float default NULL,
	 `jitdeduct` float default NULL,
	 `succtime` int(11) default NULL,
	 `succnum` int(11) default NULL,
	 `succjitnum` int(11) default NULL,
	 `failtime` int(11) default NULL,
	 `failnum` int(11) default NULL,
	 `failjitnum` int(11) default NULL,
	 PRIMARY KEY  (`node_id`)
       ) ENGINE=MyISAM DEFAULT CHARSET=latin1;

4.123: Improvements to stats gathering code for experiments.

	alter table experiment_resources 
          add `uid_idx` mediumint(8) unsigned NOT NULL default '0'
             after tstamp,
	  add `swapin_time` int(10) unsigned NOT NULL default '0'
	     after uid_idx,
	  add `swapout_time` int(10) unsigned NOT NULL default '0'
	     after swapin_time,
	  add `swapmod_time` int(10) unsigned NOT NULL default '0'
	     after swapout_time,
	  add  `byswapmod` tinyint(1) unsigned default '0'
	     after swapmod_time,
	  add `byswapin` tinyint(1) unsigned default '0'
	     after byswapmod;

	Then run the following script. It is better if the testbed is
	not in use at the time.

	./resources.pl

4.124: Add summary node utilization support.

	CREATE TABLE `node_utilization` (
	  `node_id` varchar(32) NOT NULL default '',
	  `allocated` int(10) unsigned NOT NULL default '0',
	  `down` int(10) unsigned NOT NULL default '0',
	  PRIMARY KEY  (`node_id`)
	) ENGINE=MyISAM DEFAULT CHARSET=latin1;

	alter table nodes add `inception` datetime default NULL after role;

	Then run the following script. It is better if the testbed is
	not in use at the time.

	./nodeutil.pl

4.125: Minor fix to schema file; skip to next entry.

4.126: The recent changes made to the firewalls table in step3_newids.pl were
       omitted.  Nothing to do unless you had already passed version 4.109 .
       Otherwise, re-run ./step3_newids.pl .

4.127: Increase vtype name from 12 to 32 chars.

	alter table virt_vtypes change name
                  `name` varchar(32) NOT NULL default '';

4.128: More historical data for experiments.

	CREATE TABLE `experiment_input_data` (
	  `idx` int(10) unsigned NOT NULL auto_increment,
	  `md5` varchar(32) NOT NULL default '',
	  `compressed` tinyint(1) unsigned default '0',
	  `input` mediumblob,
	  PRIMARY KEY  (`idx`),
	  UNIQUE KEY `md5` (`md5`)
	) ENGINE=MyISAM DEFAULT CHARSET=latin1;

	DROP TABLE IF EXISTS `experiment_pmapping`;
	CREATE TABLE `experiment_pmapping` (
	  `rsrcidx` int(10) unsigned NOT NULL default '0',
	  `vname` varchar(32) NOT NULL default '',
	  `node_id` varchar(32) NOT NULL default '',
	  `node_type` varchar(30) NOT NULL default '',
	  `node_erole` varchar(30) NOT NULL default '',
	  PRIMARY KEY  (`rsrcidx`,`vname`,`node_id`)
	) ENGINE=MyISAM DEFAULT CHARSET=latin1;

	CREATE TABLE `experiment_inputs` (
	  `rsrcidx` int(10) unsigned NOT NULL default '0',
	  `exptidx` int(10) unsigned NOT NULL default '0',
	  `input_data_idx` int(10) unsigned NOT NULL default '0',
	  PRIMARY KEY  (`rsrcidx`,`input_data_idx`),
	  KEY `rsrcidx` (`rsrcidx`),
	  KEY `exptidx` (`exptidx`)
	) ENGINE=MyISAM DEFAULT CHARSET=latin1;

	alter table experiment_resources add 
           `input_data_idx` int(10) unsigned default NULL after archive_tag;
	alter table experiment_resources add
	    KEY `inputdata` (`input_data_idx`);

	And then run this script:

	./nsfiles.pl

4.129: Minor fix to previous revision; skip to next entry.
4.130: Minor fix to previous revision; skip to next entry.

4.131: Add some new WA support.

	alter table widearea_nodeinfo
          add `privkey` varchar(128) default NULL,
	  add `IP` varchar(15) default NULL,
	  add KEY `IP` (`IP`),
	  add KEY `privkey` (`privkey`);

4.132: Add an access key to images table for distribution to
       widearea nodes.

       alter table images add `access_key` varchar(64) default NULL;

4.133: Add a table to save template searches.

	CREATE TABLE `experiment_template_searches` (
	  `parent_guid` varchar(16) NOT NULL default '',
	  `parent_vers` smallint(5) unsigned NOT NULL default '0',
	  `uid_idx` mediumint(8) unsigned NOT NULL default '0',
	  `name` varchar(64) NOT NULL default '',
	  `expr` mediumtext,
	  `created` datetime default NULL,
	  PRIMARY KEY  (`parent_guid`,`parent_vers`,`uid_idx`,`name`)
	) ENGINE=MyISAM DEFAULT CHARSET=latin1;

4.134: Start cleaning up logfiles.

	CREATE TABLE `logfiles` (
	  `logid` varchar(40) NOT NULL default '',
	  `filename` tinytext,
	  `isopen` tinyint(4) NOT NULL default '0',
	  `gid_idx` mediumint(8) unsigned NOT NULL default '0',
	  `date_created` datetime default NULL,
	  PRIMARY KEY  (`logid`)
	) ENGINE=MyISAM DEFAULT CHARSET=latin1;

	alter table experiment_template_instances add \
	    `logfileid` varchar(40) default NULL after uid_idx;

4.135: Change to previous revision. Run the following script.

        ./logfiles.pl
	
4.136: Fix to previous revision; skip to next entry.

4.137: Add support for fixing link interfaces:

       alter table virt_lans add `fixed_iface` varchar(16) default '';

       insert into table_regex values \
         ('virt_lans','fixed_iface','text','redirect','default:tinytext',0,0,'');

4.138: Add backpointers from vinterfaces to its virt_lan and underlying vlan to
       avoid problems upcoming cutover to new lans stuff. Besides, the
       join hoops we jump through are kinda silly.

       alter table vinterfaces add `exptidx` int(10) NOT NULL default '0';
       alter table vinterfaces add `virtlanidx` int(11) NOT NULL default '0';
       alter table vinterfaces add `vlanid` int(11) NOT NULL default '0';

       update vinterfaces as vi left join reserved as r on
       if(vi.vnode_id is
       null,r.node_id=vi.node_id,r.node_id=vi.vnode_id) left join
       virt_lans as vl on vl.exptidx=r.exptidx and vl.vnode=r.vname
       and vl.ip=vi.IP left join virt_lan_lans as vll on
       vll.exptidx=vl.exptidx and vll.vname=vl.vname left join vlans
       as vn on vn.exptidx=vl.exptidx and vn.virtual=vl.vname set
       vi.exptidx=r.exptidx,vi.virtlanidx=vll.idx,vi.vlanid=vn.id;

4.139: Change to previous revision; Skip to next entry.

4.140: Big changes to vlans table. That table is deprecated in favor of
       these new tables. You want to make these changes while the
       system is quiet (disable web interface to prevent swapping).

       CREATE TABLE `lans` (
	  `lanid` int(11) NOT NULL auto_increment,
	  `exptidx` int(11) NOT NULL default '0',
	  `pid` varchar(12) NOT NULL default '',
	  `eid` varchar(32) NOT NULL default '',
	  `vname` varchar(64) NOT NULL default '',
	  `vidx` int(11) NOT NULL default 0,
	  `type` varchar(32) NOT NULL default '',
	  `link` int(11) default NULL,
	  `ready` tinyint(1) default '0',
	  PRIMARY KEY  (`lanid`),
	  KEY `pideid` (`pid`,`eid`),
	  KEY `exptidx` (`exptidx`)
	) ENGINE=MyISAM DEFAULT CHARSET=latin1;

	CREATE TABLE `lan_attributes` (
	  `lanid` int(11) NOT NULL default '0',
	  `attrkey` varchar(32) NOT NULL default '',
	  `attrvalue` tinytext NOT NULL,
	  `attrtype` enum('integer','float','boolean','string') default 'string',
	  PRIMARY KEY  (`lanid`,`attrkey`)
	) ENGINE=MyISAM DEFAULT CHARSET=latin1;
	
	CREATE TABLE `lan_members` (
	  `lanid` int(11) NOT NULL default '0',
	  `memberid` int(11) NOT NULL auto_increment,
  	  PRIMARY KEY  (`lanid`,`memberid`)
	) ENGINE=MyISAM DEFAULT CHARSET=latin1;
	
	CREATE TABLE `lan_member_attributes` (
	  `lanid` int(11) NOT NULL default '0',
	  `memberid` int(11) NOT NULL default '0',
	  `attrkey` varchar(32) NOT NULL default '',
	  `attrvalue` tinytext NOT NULL,
	  `attrtype` enum('integer','float','boolean','string') default 'string',
	  PRIMARY KEY  (`lanid`,`memberid`,`attrkey`)
	) ENGINE=MyISAM DEFAULT CHARSET=latin1;
	
	CREATE TABLE `ifaces` (
	  `lanid` int(11) NOT NULL default '0',
	  `ifaceid` int(11) NOT NULL default '0',
	  `exptidx` int(11) NOT NULL default '0',
	  `pid` varchar(12) NOT NULL default '',
	  `eid` varchar(32) NOT NULL default '',
	  `node_id` varchar(32) NOT NULL default '',
	  `vnode` varchar(32) NOT NULL default '',
	  `vname` varchar(32) NOT NULL default '',
	  `vidx` int(11) NOT NULL default 0,
	  `vport` tinyint(3) NOT NULL default '0',
	  PRIMARY KEY  (`lanid`,`ifaceid`),
	  KEY `pideid` (`pid`,`eid`),
	  KEY `exptidx` (`exptidx`),
	  KEY `lanid` (`lanid`)
	) ENGINE=MyISAM DEFAULT CHARSET=latin1;

	Run the following script. The testbed should be quiet (no swaps).

		./newlans.pl

        Run this query to fix a previous problem (after doing an install).
	
	update experiment_resources as r left join testbed_stats as s
	on s.rsrcidx=r.idx set swapin_time=UNIX_TIMESTAMP(tstamp)
	where action='start' and exitcode=0 and swapin_time=0;

4.141: Bump pnode/vnode duration counters to floats since several
       users/projects have overflowed an unsigned int.

       alter table group_stats change `allexpt_vnode_duration`
         `allexpt_vnode_duration` double(14,0) unsigned default '0';
       alter table group_stats change `allexpt_pnode_duration`
         `allexpt_pnode_duration` double(14,0) unsigned default '0';

       alter table project_stats change `allexpt_vnode_duration`
         `allexpt_vnode_duration` double(14,0) unsigned default '0';
       alter table project_stats change `allexpt_pnode_duration`
         `allexpt_pnode_duration` double(14,0) unsigned default '0';

       alter table user_stats change `allexpt_vnode_duration`
         `allexpt_vnode_duration` double(14,0) unsigned default '0';
       alter table user_stats change `allexpt_pnode_duration`
         `allexpt_pnode_duration` double(14,0) unsigned default '0';

4.142: GRE and EGRE tunnels.

       ALTER TABLE virt_lans MODIFY encap_style
        enum('alias','veth','veth-ne','vlan','vtun','egre','gre','default')
        NOT NULL default 'default'; 

       ALTER TABLE experiments MODIFY encap_style
        enum('alias','veth','veth-ne','vlan','vtun','egre','gre','default')
        NOT NULL default 'default'; 

       DROP TABLE IF EXISTS `tunnels`;

       alter table lan_members add `node_id` varchar(32) NOT NULL default '';
       alter table lan_members add  KEY `node_id` (`node_id`);
       
       update lan_members as lm left join lan_member_attributes as lma
       on lma.lanid=lm.lanid and lma.memberid=lm.memberid and
       attrkey='node_id' set node_id=attrvalue;

4.143: Support management of and operations on multiple PLCs, including
       support for slices from multiple PLCs in one experiment.

       If you have data in these tables (extremely unlikely!), ask Utah for
       instructions on how to change over to multiple PLC support.

       	alter table plab_mapping 
	  add column `deleted` tinyint(1) NOT NULL default '0', 
          add column `plc_idx` int(10) unsigned NOT NULL default '0';

	CREATE TABLE `plab_plc_attributes` (
	  `plc_idx` int(10) unsigned NOT NULL default '0',
	  `attrkey` varchar(64) NOT NULL default '',
	  `attrvalue` tinytext NOT NULL,
	  PRIMARY KEY  (`plc_idx`,`attrkey`)
	) ENGINE=MyISAM DEFAULT CHARSET=latin1;

	CREATE TABLE `plab_plc_info` (
	  `plc_idx` int(10) unsigned NOT NULL auto_increment,
	  `plc_name` varchar(64) NOT NULL default '',
	  `api_url` varchar(255) NOT NULL default '',
	  `def_slice_prefix` varchar(32) NOT NULL default '',
	  `nodename_prefix` varchar(30) NOT NULL default '',
	  `node_type` varchar(30) NOT NULL default '',
	  `svc_slice_name` varchar(64) NOT NULL default '',
	  PRIMARY KEY  (`plc_idx`),
	  KEY `plc_name` (`plc_name`)
	) ENGINE=MyISAM DEFAULT CHARSET=latin1;

	alter table plab_site_mapping
	  add column `plc_idx` int(10) unsigned NOT NULL default '0',
	  drop primary key,
	  add primary key (`site_name`,`site_idx`,`node_idx`,`plc_idx`);

	CREATE TABLE `plab_slice_attributes` (
	  `plc_idx` int(10) unsigned NOT NULL default '0',
	  `slicename` varchar(64) NOT NULL default '',
	  `attrkey` varchar(64) NOT NULL default '',
	  `attrvalue` tinytext NOT NULL,
	  PRIMARY KEY  (`plc_idx`,`slicename`,`attrkey`)
	) ENGINE=MyISAM DEFAULT CHARSET=latin1;

	alter table plab_slice_nodes
	  drop key `exptidx`,
	  drop column `pid`,
	  drop column `eid`,
	  drop column `exptidx`,
	  add column `plc_idx` int(10) unsigned NOT NULL default '0',
	  drop primary key,
	  add primary key (`slicename`,`plc_idx`,`node_id`);

	alter table plab_slices
	  add column `plc_idx` int(10) unsigned NOT NULL default '0',
	  add column `is_created` tinyint(1) default '0',
	  add column `is_configured` tinyint(1) default '0',
	  add column `no_cleanup` tinyint(1) default '0',
	  add column `no_destroy` tinyint(1) default '0',
	  drop key `pideid`,
	  drop primary key,
	  add primary key (`exptidx`,`slicename`,`plc_idx`);

4.144: Add daily stats for generating reports and graphs?

	CREATE TABLE `daily_stats` (
          `theday` date NOT NULL default '0000-00-00',
	  `exptstart_count` int(11) unsigned default '0',
	  `exptpreload_count` int(11) unsigned default '0',
	  `exptswapin_count` int(11) unsigned default '0',
	  `exptswapout_count` int(11) unsigned default '0',
	  `exptswapmod_count` int(11) unsigned default '0',
	  `allexpt_duration` int(11) unsigned default '0',
	  `allexpt_vnodes` int(11) unsigned default '0',
	  `allexpt_vnode_duration` int(11) unsigned default '0',
	  `allexpt_pnodes` int(11) unsigned default '0',
	  `allexpt_pnode_duration` int(11) unsigned default '0',
	  PRIMARY KEY  (`theday`)
	) ENGINE=MyISAM DEFAULT CHARSET=latin1;

	alter table experiment_stats add
	      `last_activity` datetime default NULL after destroyed;

	# this is fine for an initial value.
	update experiment_stats set last_activity=created
	      where last_activity is NULL;

4.145: Fix error in previous revision; skip to next entry;

4.146: Add columns in widearea_nodeinfo to specify a boot method (i.e., static
       IP or DHCP), a default gateway, and dns servers, for widearea nodes:

       alter table widearea_nodeinfo 
         add column `gateway` varchar(15) NOT NULL default '' after `IP`;

       alter table widearea_nodeinfo 
         add column `dns` tinytext NOT NULL default '' after `gateway`;

       alter table widearea_nodeinfo 
         add column `boot_method` enum('static','dhcp','') NOT NULL 
           default '' after `dns`;

4.147: Add a more general notion of plab attributes (attributes are now keyed
       off plc,slice,nodegroup,node_id tuples, as appropriate).  Also add
       support for sucking down plab nodegroups.

       CREATE TABLE `plab_attributes` (
         `attr_idx` int(11) unsigned NOT NULL auto_increment,
	 `plc_idx` int(10) unsigned default NULL,
	 `slicename` varchar(64) default NULL,
	 `nodegroup_idx` int(10) unsigned default NULL,
	 `node_id` varchar(32) default NULL,
	 `attrkey` varchar(64) NOT NULL default '',
	 `attrvalue` tinytext NOT NULL,
	 PRIMARY KEY  (`attr_idx`),
	 UNIQUE KEY `realattrkey` (`plc_idx`,`slicename`,`nodegroup_idx`,`node_id`,`attrkey`)
       ) ENGINE=MyISAM DEFAULT CHARSET=latin1;

       CREATE TABLE `plab_nodegroup_members` (
         `plc_idx` int(10) unsigned NOT NULL default '0',
	 `nodegroup_idx` int(10) unsigned NOT NULL default '0',
	 `node_id` varchar(32) NOT NULL default '',
	 PRIMARY KEY  (`plc_idx`,`nodegroup_idx`,`node_id`)
       ) ENGINE=MyISAM DEFAULT CHARSET=latin1;

       CREATE TABLE `plab_nodegroups` (
         `plc_idx` int(10) unsigned NOT NULL default '0',
	 `nodegroup_idx` int(10) unsigned NOT NULL default '0',
	 `name` varchar(64) NOT NULL default '',
	 `description` text NOT NULL,
	 PRIMARY KEY  (`plc_idx`,`nodegroup_idx`,`name`)
       ) ENGINE=MyISAM DEFAULT CHARSET=latin1;

4.148: Add a table to map Emulab objects that have been synchronized at a PLC
       to the corresponding object at that PLC.

       CREATE TABLE `plab_objmap` (
         `plc_idx` int(10) unsigned NOT NULL,
	 `objtype` varchar(32) NOT NULL,
	 `elab_id` varchar(64) NOT NULL,
	 `plab_id` varchar(255) NOT NULL,
	 `plab_name` tinytext NOT NULL,
	 PRIMARY KEY  (`plc_idx`,`objtype`,`elab_id`)
       ) ENGINE=MyISAM DEFAULT CHARSET=latin1;

4.149: Add usr_affil_abbrev column to users and deleted users tables
       and add 'slot' to table_regex

       alter table users add usr_affil_abbrev varchar(16) after usr_affil;
       alter table deleted_users add usr_affil_abbrev varchar(16) after usr_affil;

       REPLACE INTO `table_regex` VALUES ('users','usr_affil_abbrev','text','regex','^[\\040-\\176]*$',0,16,NULL);

4.150: Improvements to the sslcerts table for GENI support.
       Generally, its nice to support real revocation, but
       specifically, we want to remember expired and revoked
       certificates so we can generate crls, and we also want to store
       the passwords associated with the (encrypted) keys so that
       users do not have to remember them; they can get them from us
       if they know their Emulab password.

       alter table user_sslcerts
       	 add `status` enum('valid','revoked','expired') default 'valid',
	 add `orgunit` tinytext,
         add `revoked` datetime default NULL,
	 add `password` tinytext,
	 add KEY `uid` (`uid`),
	 add KEY `uid_idx` (`uid_idx`);

4.151: Add a uuid slot to the nodes table, for protogeni.

       alter table nodes add `uuid` varchar(40) NOT NULL default '';
       update nodes set uuid=UUID();

4.152: Add a marker to the reserved table to indicate the node is part of
       a sliver.

       alter table reserved add `genisliver_idx` int(10) unsigned
            default NULL;
       
4.153: Federation (Geni) support; table of non-local users. I thought
       about putting these into the users table, but that worries me
       cause of so many queries in the system that join with uid
       instead of uid_idx.

       CREATE TABLE `nonlocal_users` (
        `uid` varchar(8) NOT NULL default '',
        `uid_idx` mediumint(8) unsigned NOT NULL default '0',
        `uid_uuid` varchar(40) NOT NULL default '',
        `created` datetime default NULL,
        `name` tinytext,
        `email` tinytext,
        PRIMARY KEY  (`uid_idx`),
        KEY `uid` (`uid`),
        UNIQUE KEY `uid_uuid` (`uid_uuid`)
       ) ENGINE=MyISAM DEFAULT CHARSET=latin1;

4.154: Addition to previous revision. This table is for tmcd, to find
       out what nonlocal users need to be created on slivers (nodes).

       CREATE TABLE `nonlocal_user_bindings` (
        `uid` varchar(8) NOT NULL default '',
        `uid_idx` mediumint(8) unsigned NOT NULL default '0',
        `exptidx` int(11) NOT NULL default '0',
        PRIMARY KEY  (`uid_idx`),
        KEY `uid` (`uid`)
       ) ENGINE=MyISAM DEFAULT CHARSET=latin1;

4.155: Add uuids to the interfaces table.

       alter table interfaces add `uuid` varchar(40) NOT NULL default '';
       alter table interfaces add  KEY `uuid` (`uuid`);
       update interfaces set uuid=UUID();

4.156: Create emulab_pubs and related tables.
       Add support for UTF-8 fields in table_regex.

       mysql tbdb < emulab_pubs.sql

4.157: Add isgeninode column in node_types table. A geninode can be
       either physical or virtual, as indicated by the isvirtnode flag.

       alter table node_types add isgeninode tinyint(4) not null default 0;

4.158: Add isfednode column in node_types table. A fednode can be
       either physical or virtual, as indicated by the isvirtnode flag.

       alter table node_types add isfednode tinyint(4) not null default 0;

4.159: Fix spelling mistake.

       alter table interface_types change manufacturuer
                `manufacturer` varchar(30) default NULL;

4.160: Add current and near-future speed values for interfaces.

       alter table interfaces modify current_speed \
           enum('0','10','100','1000','4000','10000','40000','100000') \
           NOT NULL default '0';

NOTE: The above entry (4.160) is the last entry in this file. Database
updates are now scripted. After you have built your object tree,
please go to your src directory, and cd into the sql/updates subdir.
Then run the following:

	/your/objdir/db/dbupdate tbdb

For developers, please look in the updates/4/1 file for an example of
how to do updates. For each revision in database-create.sql, create a
corresponding script and add it to the repository. The scripts will be
applied in numeric order (see db/dbupdate.in), starting with the
version recorded in the version_info table. This table is updated by
dbupdate as it runs each script.


