use strict;
use libdb;

sub DoUpdate($$$)
{
    my ($dbhandle, $dbname, $version) = @_;

    if (!DBSlotExists("apt_reservation_group_reservations",
		      "approved_pushed")) {
	DBQueryFatal("alter table apt_reservation_group_reservations add ".
		     " `approved_pushed` datetime DEFAULT NULL after approved");
    }
    if (!DBSlotExists("apt_reservation_group_reservations",
		      "canceled_pushed")) {
	DBQueryFatal("alter table apt_reservation_group_reservations add ".
		     " `canceled_pushed` datetime DEFAULT NULL ".
		     "   after canceled");
    }
    if (!DBSlotExists("apt_reservation_group_reservations",
		      "cancel_canceled")) {
	DBQueryFatal("alter table apt_reservation_group_reservations add ".
		     " `cancel_canceled` datetime DEFAULT NULL ".
		     "   after canceled_pushed");
    }
    if (!DBSlotExists("apt_reservation_group_reservations",
		      "deleted_pushed")) {
	DBQueryFatal("alter table apt_reservation_group_reservations add ".
		     " `deleted_pushed` datetime DEFAULT NULL after deleted");
    }
    if (!DBSlotExists("apt_reservation_group_rf_reservations", "canceled")) {
	DBQueryFatal("alter table apt_reservation_group_rf_reservations add ".
		     " `canceled` datetime DEFAULT NULL after approved");
    }
    if (!DBSlotExists("apt_reservation_groups", "canceled")) {
	DBQueryFatal("alter table apt_reservation_groups add ".
		     " `canceled` datetime DEFAULT NULL after created ");
    }
    if (!DBTableExists("apt_reservation_group_reservation_history")) {
	DBQueryFatal("CREATE TABLE ".
		     "  `apt_reservation_group_reservation_history` (".
		     " `idx` mediumint(8) unsigned NOT NULL AUTO_INCREMENT, ".
		     " `uuid` varchar(40) NOT NULL default '', ".
		     " `aggregate_urn` varchar(128) NOT NULL default '', ".
		     " `remote_uuid` varchar(40) NOT NULL default '', ".
		     " `type` varchar(30) NOT NULL DEFAULT '', ".
		     " `count` smallint(5) unsigned NOT NULL DEFAULT '0', ".
		     " `submitted` datetime DEFAULT NULL, ".
		     " `approved` datetime DEFAULT NULL, ".
		     " `canceled` datetime DEFAULT NULL, ".
		     " `deleted` datetime DEFAULT NULL, ".
		     " PRIMARY KEY (`idx`), ".
		     " KEY `agguuid` (`uuid`,`aggregate_urn`,`type`) ".
		     " ) ENGINE=MyISAM DEFAULT CHARSET=latin1");
    }
    if (!DBTableExists("apt_reservation_group_rf_reservation_history")) {
	DBQueryFatal("CREATE TABLE ".
		     "     `apt_reservation_group_rf_reservation_history` (".
		     " `idx` mediumint(8) unsigned NOT NULL AUTO_INCREMENT, ".
		     " `uuid` varchar(40) NOT NULL default '', ".
		     " `freq_uuid` varchar(40) NOT NULL default '', ".
		     " `freq_low` float NOT NULL DEFAULT '0', ".
		     " `freq_high` float NOT NULL DEFAULT '0', ".
		     " `submitted` datetime DEFAULT NULL, ".
		     " `approved` datetime DEFAULT NULL, ".
		     " `canceled` datetime DEFAULT NULL, ".
		     " `deleted` datetime DEFAULT NULL, ".
		     " PRIMARY KEY (`idx`), ".
		     " KEY `uuids` (`uuid`,`freq_uuid`) ".
		     " ) ENGINE=MyISAM DEFAULT CHARSET=latin1");
    }
    if (!DBTableExists("apt_reservation_group_history")) {
	DBQueryFatal("CREATE TABLE `apt_reservation_group_history` (".
		     " `uuid` varchar(40) NOT NULL default '', ".
		     " `pid` varchar(48) NOT NULL default '', ".
		     " `pid_idx` mediumint(8) unsigned NOT NULL default '0', ".
		     " `creator_uid` varchar(8) NOT NULL default '', ".
		     " `creator_idx` mediumint(8) unsigned NOT NULL default '0', ".
		     " `start` datetime DEFAULT NULL, ".
		     " `end` datetime DEFAULT NULL, ".
		     " `created` datetime DEFAULT NULL, ".
		     " `canceled` datetime DEFAULT NULL, ".
		     " `deleted` datetime DEFAULT NULL, ".
		     " `reason` mediumtext, ".
		     " PRIMARY KEY (`uuid`) ".
		     " ) ENGINE=MyISAM DEFAULT CHARSET=latin1");
    }
    return 0;
}

1;

# Local Variables:
# mode:perl
# End:
