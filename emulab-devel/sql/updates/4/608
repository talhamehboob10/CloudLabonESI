#
# New table for storing alternate user/system passwords that user
# clients can use to obtain temporary-, restricted-access tokens.
# Currently, only the Docker image registry uses this table.  However,
# it was designed to support backend-specific granular password
# authentication, so we'll see if that is ever helpful for anything
# else.
#
use strict;
use libdb;

sub DoUpdate($$$)
{
    my ($dbhandle, $dbname, $version) = @_;

    if (!DBTableExists("user_token_passwords")) {
	DBQueryFatal("CREATE TABLE `user_token_passwords` (".
		     " `idx` int(10) unsigned NOT NULL AUTO_INCREMENT,".
		     " `uid_idx` mediumint(8) unsigned NOT NULL DEFAULT '0',".
		     " `uid` varchar(8) NOT NULL DEFAULT '',".
		     " `subsystem` varchar(64) NOT NULL,".
		     " `scope_type` tinytext,".
		     " `scope_value` tinytext,".
		     " `username` varchar(64) NOT NULL,".
		     " `plaintext` varchar(64) NOT NULL DEFAULT '',".
		     " `hash` varchar(64) NOT NULL,".
		     " `issued` datetime NOT NULL,".
		     " `expiration` datetime DEFAULT NULL,".
		     " `token_lifetime` int(10) unsigned NOT NULL,".
		     " `token_onetime` tinyint(1) NOT NULL DEFAULT '0',".
		     " `system` tinyint(1) NOT NULL DEFAULT '0',".
		     " PRIMARY KEY (`idx`),".
		     " UNIQUE KEY `user_token` (`subsystem`,`username`,".
		     "                          `plaintext`)".
		     ") ENGINE=MyISAM DEFAULT CHARSET=latin1;");
    }
    return 0;
}

1;

# Local Variables:
# mode:perl
# End:

