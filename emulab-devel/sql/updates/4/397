#
# Image versioning!
#
use strict;
use libdb;
use Image;
use EmulabFeatures;

sub DoUpdate($$$)
{
    my ($dbhandle, $dbname, $version) = @_;

    if (!DBTableExists("image_versions")) {
	DBQueryFatal("rename table images to image_versions");
    }
    if (!DBSlotExists("image_versions", "version")) {
	DBQueryFatal("ALTER TABLE image_versions ADD ".
		     " `version` int(8) unsigned NOT null default '0' ".
		     "   AFTER imagename");
	DBQueryFatal("alter table image_versions drop primary key");
	DBQueryFatal("alter table image_versions add primary key ".
		     "  (`imageid`,`version`)");
	DBQueryFatal("alter table image_versions drop key `pid`");
	DBQueryFatal("alter table image_versions add key `pid` ".
		     "  (`pid`,`imagename`,`version`)");
    }
    if (!DBSlotExists("image_versions", "deleted")) {
	DBQueryFatal("ALTER TABLE image_versions ADD ".
		     " `deleted` datetime default NULL ".
		     "   AFTER updated");
    }
    if (!DBSlotExists("image_versions", "parent_imageid")) {
	DBQueryFatal("ALTER TABLE image_versions ADD ".
		     " `parent_imageid` int(8) unsigned default NULL ".
		     "   AFTER imageid");
    }
    if (!DBSlotExists("image_versions", "parent_version")) {
	DBQueryFatal("ALTER TABLE image_versions ADD ".
		     " `parent_version` int(8) unsigned default NULL ".
		     "   AFTER parent_imageid");
    }
    foreach my $n ("part1", "part2", "part3", "part4") {
	my $slot = "${n}_vers";
	my $prev = "${n}_osid";
	
	if (!DBSlotExists("image_versions", $slot)) {
	    DBQueryFatal("ALTER TABLE image_versions ADD ".
			 " `$slot` int(8) unsigned NOT NULL default '0' ".
			 "   AFTER $prev");
	}
    }
    if (!DBSlotExists("image_versions", "default_vers")) {
	DBQueryFatal("ALTER TABLE image_versions ADD ".
		     " `default_vers` int(8) unsigned not null default '0' ".
		     "   AFTER default_osid");
    }
    if (!DBSlotExists("image_versions", "ready")) {
	DBQueryFatal("ALTER TABLE image_versions ADD ".
		     " `ready` tinyint(1) NOT NULL default '0' ".
		     "   AFTER noexport");
	DBQueryFatal("update image_versions set ready=1");
    }
    if (!DBSlotExists("image_versions", "isdelta")) {
	DBQueryFatal("ALTER TABLE image_versions ADD ".
		     " `isdelta` tinyint(1) NOT NULL default '0' ".
		     "   AFTER ready");
    }
    if (!DBSlotExists("image_versions", "released")) {
	DBQueryFatal("ALTER TABLE image_versions ADD ".
		     " `released` tinyint(1) NOT NULL default '0' ".
		     "   AFTER isdelta");
	DBQueryFatal("update image_versions set released=1");
    }
    if (!DBSlotExists("image_versions", "nodetypes")) {
	DBQueryFatal("ALTER TABLE image_versions ADD ".
		     " `nodetypes` text default NULL ".
		     "   AFTER released");
    }
    if (!DBTableExists("os_info_versions")) {
	DBQueryFatal("rename table os_info to os_info_versions");
    }
    if (!DBSlotExists("os_info_versions", "vers")) {
	DBQueryFatal("ALTER TABLE os_info_versions ADD ".
		     " `vers` int(8) unsigned NOT null default '0' ".
		     "   AFTER osname");
	DBQueryFatal("alter table os_info_versions drop primary key");
	DBQueryFatal("alter table os_info_versions add primary key ".
		     "  (`osid`,`vers`)");
	DBQueryFatal("alter table os_info_versions drop key `pid`");
	DBQueryFatal("alter table os_info_versions add key `pid` ".
		     "  (`pid`,`osname`,`vers`)");
    }
    if (!DBSlotExists("os_info_versions", "deleted")) {
	DBQueryFatal("ALTER TABLE os_info_versions ADD ".
		     " `deleted` datetime default NULL ".
		     "   AFTER created");
    }
    if (!DBSlotExists("os_info_versions", "parent_osid")) {
	DBQueryFatal("ALTER TABLE os_info_versions ADD ".
		     " `parent_osid` int(8) unsigned default NULL ".
		     "   AFTER osid");
    }
    if (!DBSlotExists("os_info_versions", "parent_vers")) {
	DBQueryFatal("ALTER TABLE os_info_versions ADD ".
		     " `parent_vers` int(8) unsigned default NULL ".
		     "   AFTER parent_osid");
    }
    if (!DBSlotExists("partitions", "osid_vers")) {
	DBQueryFatal("ALTER TABLE `partitions` ADD ".
		     " `osid_vers` int(8) unsigned default NULL ".
		     "   AFTER osid");
    }
    if (!DBSlotExists("partitions", "imageid_version")) {
	DBQueryFatal("ALTER TABLE `partitions` ADD ".
		     " `imageid_version` int(8) unsigned default NULL ".
		     "   AFTER imageid");
    }
    if (!DBSlotExists("image_history", "osid_vers")) {
	DBQueryFatal("ALTER TABLE image_history ADD ".
		     " `osid_vers` int(8) default NULL ".
		     "   AFTER osid");
    }
    if (!DBSlotExists("image_history", "imageid_version")) {
	DBQueryFatal("ALTER TABLE image_history ADD ".
		     " `imageid_version` int(8) default NULL ".
		     "   AFTER imageid");
    }
    if (!DBSlotExists("frisbee_blobs", "imageid_version")) {
	DBQueryFatal("ALTER TABLE frisbee_blobs ADD ".
		     " `imageid_version` int(8) unsigned default NULL  ".
		     "   AFTER imageid");
    }
    if (!DBTableExists("images")) {
	DBQueryFatal("CREATE TABLE `images` ( ".
		     " `imagename` varchar(30) NOT NULL default '', ".
		     " `version` int(8) unsigned NOT NULL default '0', ".
		     " `imageid` int(8) unsigned NOT NULL default '0', ".
		     " `pid` varchar(48) NOT NULL default '', ".
		     " `pid_idx` mediumint(8) unsigned NOT NULL default '0', ".
		     " `gid` varchar(32) NOT NULL default '', ".
		     " `gid_idx` mediumint(8) unsigned NOT NULL default '0', ".
		     " `uuid` varchar(40) NOT NULL default '', ".
		     " `nodelta` tinyint(1) NOT NULL default '0', ".
		     " `locked` datetime default NULL, ".
		     " `locker_pid` int(11) default '0', ".
		     " PRIMARY KEY  (`imageid`), ".
		     " UNIQUE KEY `pid` (`pid`,`imagename`), ".
		     " KEY `uuid` (`uuid`) ".
		     ") ENGINE=MyISAM DEFAULT CHARSET=latin1");
	DBQueryFatal("insert into images select imagename,version,imageid, ".
		     "    pid,pid_idx,gid,gid_idx,uuid,0,locked,locker_pid ".
		     "  from image_versions");
	DBQueryFatal("update image_versions set uuid=uuid()");
    }
    if (!DBTableExists("os_info")) {
	DBQueryFatal("CREATE TABLE `os_info` ( ".
		     " `osname` varchar(30) NOT NULL default '', ".
		     " `version` int(8) unsigned NOT NULL default '0', ".
		     " `pid` varchar(48) NOT NULL default '', ".
		     " `pid_idx` mediumint(8) unsigned NOT NULL default '0', ".
		     " `osid` int(8) unsigned NOT NULL default '0', ".
		     " `uuid` varchar(40) NOT NULL default '', ".
		     " PRIMARY KEY  (`osid`), ".
		     " UNIQUE KEY `pid` (`pid`,`osname`), ".
		     " KEY `uuid` (`uuid`) ".
		     " ) ENGINE=MyISAM DEFAULT CHARSET=latin1");
	DBQueryFatal("insert into os_info select osname,vers,pid, ".
		     "    pid_idx,osid,uuid ".
		     "  from os_info_versions");
    }
    if (!DBSlotExists("nodes", "def_boot_osid_vers")) {
	DBQueryFatal("ALTER TABLE nodes ".
		     "  add `def_boot_osid_vers` int(8) unsigned default NULL ".
		     "    after def_boot_osid, ".
		     "  add `temp_boot_osid_vers` int(8) unsigned default NULL".
		     "    after temp_boot_osid, ".
		     "  add `next_boot_osid_vers` int(8) unsigned default NULL".
		     "    after next_boot_osid");
    }
    if (!DBSlotExists("current_reloads", "imageid_version")) {
	DBQueryFatal("ALTER TABLE current_reloads add ".
		     " `imageid_version` int(8) unsigned NOT NULL default '0'".
		     "   after image_id");
    }
    DBQueryFatal("REPLACE INTO table_regex VALUES ".
		 " ('virt_nodes','osname','text','regex',".
		 "  '^((([-\\\\w]+\\\\/{0,1})[-\\\\w\\\\.+]+(:\\\\d+){0,1})|".
		 "((http|https|ftp)\\\\:\\\\/\\\\/[-\\\\w\\\\.\\\\/\\\\@\\\\:".
		 "\\\\~\\\\?\\\\=\\\\&]*))\$',2,128,NULL)");

    #
    # Create this feature to avoid warnings until generally released.
    #
    if (!defined(EmulabFeatures->Lookup("ImageProvenance"))) {
	my $feature =
	    EmulabFeatures->Create("ImageProvenance",
				   "Image Provenance and versioning");
	if (!defined($feature)) {
	    print STDERR "Could not create ImageProvenance feature!\n";
	    return -1;
	}
    }
    return 0;
}

# Local Variables:
# mode:perl
# End:
