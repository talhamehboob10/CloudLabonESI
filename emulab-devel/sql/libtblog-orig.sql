-- MYSQL TABLES used for logging subsystem

CREATE TABLE log (
  seq int unsigned NOT NULL auto_increment,
  stamp int(10) unsigned NOT NULL default '0',
  pidx int NOT NULL,             -- unique project id
  uid  int default NULL,         -- numeric user id
  session int(10) unsigned NOT NULL default '0', -- session id (1)
  invocation int(10) unsigned NOT NULL default '0', -- invocation id - unique id for a 
                                 --   particular execution of a script (1)
  parent int(10) unsigned NOT NULL default '0',  -- invocation id of the parent script
  script smallint(3) NOT NULL default '0',   -- numeric id for the script name
  level smallint(2) NOT NULL default '0', -- depth of the script in the call chain
  priority smallint(3) NOT NULL default '0', -- syslog priority
  inferred tinyint(1) NOT NULL default '0',  -- 0 - log created with tblog
                                 -- 1 - log created by catching a die or warn
				 -- 2 - log created with a normal print and
                                 --     given the non-default priority
                                 -- 3 - log created with a normal print and
                                 --     given the default priority
  cause varchar(32) NOT NULL default '',    -- string identifying the "cause" of the error
  type enum('normal','entering','exiting','thecause') 
       NOT NULL default 'normal',-- type of error:
                                 -- normal: normal error generated by tblog
                                 -- entering: auto gen when a script starts
				 -- exiting:  auto gen when a script exists (2)
                                 -- thecause: created by tblog_find_error
  relevant tinyint(1) NOT NULL default '0',  -- if the error was considered relevent
                                 -- by tblog_find_error
  mesg text NOT NULL,            -- the text of the message
  PRIMARY KEY (seq),
  KEY (session)
);

-- (1) These ids are equal to the sequence number of the "entering" log
--     message
-- (2) Due to a number of factors every "exiting" message in not 
--     garanteed to have a 1-1 relation with the "entering" message.
--     The two major ones are
--     (1) A Fork not followed by a "exec" will most likely to cause
--     multiple exiting messages.  (2) If "exec" is used the script
--     will not have an exiting message.

-- NOTE: It may be beneficial to split this table into three:
--   session pidx uid
--   invocation session parent script level 
--   seq stamp [session] invocation priority inferred cause type relevant mesg
-- ...

CREATE TABLE scripts (
  script smallint(3) NOT NULL auto_increment,
  name varchar(24) NOT NULL default '',
  PRIMARY KEY  (script),
  UNIQUE KEY id (name)
);

CREATE TABLE priorities (
  priority smallint(3) NOT NULL default '0',
  name varchar(8) NOT NULL default '',
  primary key (priority),
  unique key (name)
);

replace into priorities values (000, 'EMERG');
replace into priorities values (100, 'ALERT');
replace into priorities values (200, 'CRIT');
replace into priorities values (300, 'ERR');
replace into priorities values (400, 'WARNING');
replace into priorities values (500, 'NOTICE');
replace into priorities values (600, 'INFO');
replace into priorities values (700, 'DEBUG');

replace into exported_tables values ('state_timeouts');
