-- MYSQL TABLES used for logging subsystem

CREATE TABLE log (
  seq int unsigned NOT NULL auto_increment,
  stamp int unsigned NOT NULL,   -- timestamp
  session int unsigned NOT NULL, -- session id (1)
  invocation int unsigned NOT NULL, -- invocation id - unique id for a 
                                 --   particular execution of a script (1)
  parent int unsigned NOT NULL,  -- invocation id of the parent script
  script smallint(3) NOT NULL,   -- numeric id for the script name
  level tinyint(2) NOT NULL   ,  -- depth of the script in the call chain
  sublevel tinyint(2) NOT NULL,  -- sub level
  priority smallint(3) NOT NULL, -- syslog priority
  inferred tinyint(1) NOT NULL,  -- 0 - log created with tblog
                                 -- 1 - log created by catching a die or warn
				 -- 2 - log created with a normal print and
                                 --     given the non-default priority
                                 -- 3 - log created with a normal print and
                                 --     given the default priority
  cause varchar(16) NOT NULL,    -- string identifying the cause of the error
  type enum('normal','entering','exiting','thecause','extra','summary') 
       NOT NULL default 'normal',-- type of error:
                                 -- normal: normal error generated by tblog
                                 -- entering: auto gen when a script starts
				 -- exiting:  auto gen when a script exists (2)
                                 -- thecause: no longer used, see the 
				 --   "errors" table
				 -- extra: extra information to normal info
				 --   at a lower level
				 -- summary: useful summary of errors,
				 --   ignore all info at lower levels
  relevant tinyint(1) NOT NULL,  -- if the error was considered relevent
                                 -- by tblog_find_error
  mesg text NOT NULL,            -- the text of the message
  PRIMARY KEY (seq),
  KEY (session)
);

CREATE TABLE session_info (
  session int NOT NULL,         -- session id (1)
  uid int default NULL,         -- numeric user id
  exptidx int NOT NULL,         -- unique experment id
  PRIMARY KEY  (session)
);

-- (1) These ids are equal to the sequence number of the "entering" log
--     message
-- (2) Due to a number of factors every "exiting" message in not 
--     garanteed to have a 1-1 relation with the "entering" message.
--     The two major ones are
--     (1) A Fork not followed by a "exec" will most likely to cause
--     multiple exiting messages.  (2) If "exec" is used the script
--     will not have an exiting message.

-- NOTE: It may be beneficial to factor out "invocation" specific info:
--   invocation session parent script level 
--   seq stamp [session] invocation priority inferred cause type relevant mesg
-- ...

CREATE TABLE errors (
  session int unsigned NOT NULL, -- session id
  stamp int unsigned NOT NULL,   -- timestamp
  exptidx int NOT NULL,          -- unique experment id
  script smallint(3) NOT NULL,   -- numeric id for the script name
  cause varchar(16) NOT NULL,    -- string identifying the cause of the error
  confidence float NOT NULL,     -- number between 0 and 1 indicating how
                                 --   confident tblog is that this it 
                                 --   correctly identified the error.
  mesg text NOT NULL,            -- the text of the message
  primary key (session)
);


CREATE TABLE scripts (
  script smallint(3) NOT NULL auto_increment,
  script_name varchar(24) NOT NULL default '',
  PRIMARY KEY  (script),
  UNIQUE KEY id (script_name)
);

CREATE TABLE priorities (
  priority smallint(3) NOT NULL,
  priority_name varchar(8) NOT NULL,
  primary key (priority),
  unique key (priority_name)
);

CREATE TABLE causes (
  cause varchar(16) NOT NULL,
  cause_desc varchar(32) NOT NULL,
  primary key (cause)
  unique key (cause_desc)
);


alter table experiment_stats
  add last_error int unsigned; -- session id of last error, otherwise 0

alter table testbed_stats
  add log_session int unsigned;

replace into priorities values (000, 'EMERG');
replace into priorities values (100, 'ALERT');
replace into priorities values (200, 'CRIT');
replace into priorities values (300, 'ERR');
replace into priorities values (400, 'WARNING');
replace into priorities values (500, 'NOTICE');
replace into priorities values (600, 'INFO');
replace into priorities values (700, 'DEBUG');

replace into causes values ('temp', 'Temp Resource Shortage');
replace into causes values ('user', 'User Error');
replace into causes values ('internal', 'Internal Error');
replace into causes values ('software', 'Software Problem');
replace into causes values ('hardware', 'Hardware Problem');
replace into causes values ('unknown', 'Cause Unknown');

replace into exported_tables values ('priorities');
replace into exported_tables values ('causes');

replace into exported_tables values ('state_timeouts');



