<?php
#
# Copyright (c) 2000-2021 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
chdir("..");
chdir("apt");
include_once("profile_defs.php");
include_once("instance_defs.php");
include_once("ajax-routines.ajax");
include_once("rfrange_defs.php");
include_once("resgroup_defs.php");

# We set this in CheckPageArgs
$target_project = null;

#
# Need to check the permission, since we allow admins to mess with
# other accounts.
#
function CheckPageArgs()
{
    global $this_user, $target_project;
    global $ajax_args;
    global $TB_PROJECT_READINFO;

    if (!isset($ajax_args["pid"])) {
	SPITAJAX_ERROR(-1, "Missing target pid");
	return -1;
    }
    $pid = $ajax_args["pid"];
    
    if (!TBvalid_pid($pid)) {
	SPITAJAX_ERROR(-1, "Invalid target pid");
        return -1;
    }
    $target_project = Project::Lookup($pid);
    if (!$target_project) {
        sleep(2);
	SPITAJAX_ERROR(-1, "Unknown target pid");
        return -1;
    }
    if (!ISADMIN() && !ISFOREIGN_ADMIN() && 
        !$target_project->AccessCheck($this_user, $TB_PROJECT_READINFO)) {
	SPITAJAX_ERROR(-1, "Not enough permission");
	return -1;
    }
    return 0;
}

function Do_ExperimentList()
{
    global $this_user, $target_project;

    if (CheckPageArgs()) {
        return;
    }
    $results = ExperimentList("project", $target_project);
    SPITAJAX_RESPONSE($results);
}

function Do_ClassicExperimentList()
{
    global $this_user, $target_project;

    if (CheckPageArgs()) {
        return;
    }
    $results = ClassicExperimentList("project", $target_project);
    SPITAJAX_RESPONSE($results);
}

function Do_ClassicProfileList()
{
    global $this_user, $target_project;

    if (CheckPageArgs()) {
        return;
    }
    $results = ClassicExperimentList("project", $target_project, "inactive");
    SPITAJAX_RESPONSE($results);
}

function Do_ProfileList()
{
    global $this_user, $target_project;

    if (CheckPageArgs()) {
        return;
    }
    $results = ProfileList("project", $target_project);
    SPITAJAX_RESPONSE($results);
}

function Do_DatasetList()
{
    global $this_user, $target_project;

    if (CheckPageArgs()) {
        return;
    }
    $results = DatasetList("project", $target_project);
    SPITAJAX_RESPONSE($results);
}

function Do_ResgroupList()
{
    global $this_user, $target_project;
    $reservations = array();

    if (CheckPageArgs()) {
        return;
    }
    $resgroups = ReservationGroup::LookupForProject($target_project);
    foreach ($resgroups as $resgroup) {
        $reservations[$resgroup->uuid()] = $resgroup->Blob();
    }
    SPITAJAX_RESPONSE($reservations);
}

function Do_ClassicDatasetList()
{
    global $this_user, $target_project;

    if (CheckPageArgs()) {
        return;
    }
    $results = ClassicDatasetList("project", $target_project);
    SPITAJAX_RESPONSE($results);
}

function Do_MemberList()
{
    global $this_user, $target_project;
    global $newTrustMap, $TB_PROJECT_ADDUSER;

    if (CheckPageArgs()) {
        return;
    }
    $target_idx  = $target_project->pid_idx();
    $target_pid  = $target_project->pid();
    $target_group= $target_project->DefaultGroup();
    $results     = array();
    $members     = $target_project->MemberList();
    # Canapprove is a proxy for group_root or better.
    $statsokay   = (ISADMIN() ||
                    $target_project->AccessCheck($this_user,
                                                 $TB_PROJECT_ADDUSER));

    foreach ($members as $user) {
        $membership = $target_project->MemberShipInfo($user);

        $blob = array();
        $blob["uid"]      = $user->uid();
        $blob["name"]     = $user->name();
        $blob["email"]    = $user->email();
        $blob["joined"]   = DateStringGMT($membership["date_applied"]);
        $blob["trust"]    = $newTrustMap[$membership["trust"]];
        $blob["approved"] = ($target_project->UserTrust($user) ==
                             TBDB_TRUSTSTRING_NONE ? 0 : 1);
        # Can the current user delete this user from the project.
        $blob["candelete"]=
            (ISADMIN() ||
             $target_project->CanDeleteUser($this_user, $user) ? 1 : 0);

        if ($statsokay) {
            list($pcount, $phours) = Instance::MonthsUsage($user,
                                                           $target_group);
            if ($phours) {
                $blob["usage"] = array("pcount" => $pcount,
                                       "phours" => intval($phours));
            }
        }
        $results[$user->uid()] = $blob;
    }
    SPITAJAX_RESPONSE($results);
}

function Do_GroupList()
{
    global $this_user, $target_project;

    if (CheckPageArgs()) {
        return;
    }
    $results     = array();
    $groups      = $target_project->SubGroups();

    foreach ($groups as $group) {
        $blob = array();
        $leader = $group->GetLeader();

        $blob["pid"]          = $group->pid();
        $blob["pid_idx"]      = $group->pid_idx();
        $blob["gid"]          = $group->gid();
        $blob["gid_idx"]      = $group->gid_idx();
        $blob["description"]  = $group->description();
        $blob["leader"]       = $group->leader();
        $blob["leader_idx"]   = $group->leader_idx();
        $blob["leader_name"]  = $leader->name();

        $results[$group->gid()] = $blob;
    }
    SPITAJAX_RESPONSE($results);
}

function Do_ProjectProfile()
{
    global $this_user, $target_project;
    global $ISPOWDER;

    if (CheckPageArgs()) {
        return;
    }
    $results = array();

    $results["pid"]         = $target_project->pid();
    $results["pid_idx"]     = $target_project->pid_idx();
    $results["leader"]      = $target_project->head_uid();
    $results["portal"]      = $target_project->portal();
    $results["created"]     = DateStringGMT($target_project->created());
    $results["approved"]    = $target_project->approved() ? true : false;
    $results["disabled"]    = $target_project->disabled() ? true : false;
    $results["bound_portal"]= $target_project->bound_portal() ? true : false;
    $results["url"]         = $target_project->URL();
    $results["description"] = $target_project->name();
    $results["why"]         = $target_project->why();
    $results["forClass"]    = $target_project->forClass() ? true : false;
    $results["industry"]    = $target_project->industry() ? true : false;
    $results["consortium"]  = $target_project->consortium() ? true : false;
    $results["expert_mode"] = $target_project->expert_mode() ? true : false;
    $results["reservations_disabled"] =
        $target_project->reservations_disabled() ? true : false;
    $results["licenses"]    = array();
    $results["nsf_awards"]  = $target_project->nsf_awards();

    if ($ISPOWDER) {
        $licenses = $target_project->LicenseStatus();
        foreach ($licenses as $license) {
            $blob = array("idx"              => $license["license_idx"],
                          "name"             => $license["license_name"],
                          "description_type" => $license["description_type"],
                          "description_text" => $license["description_text"],
                          "requested"        => $license["pid"],
                          "accepted"         => $license["accepted"]);

            $results["licenses"][] = $blob;
        }
    }
    SPITAJAX_RESPONSE($results);
}

#
# Usage for the user, in pnode hours. 
#
function Do_UsageSummary()
{
    global $this_user, $target_project;
    global $ajax_args;

    if (CheckPageArgs()) {
        return;
    }
    list($pcount, $phours)           = Instance::CurrentUsage($target_project);
    list($weekpcount, $weekphours)   = Instance::WeeksUsage($target_project);
    list($monthpcount, $monthphours) = Instance::MonthsUsage($target_project);
    list($rank, $ranktotal)          = Instance::Ranking($target_project, 30);

    if ($phours < 2) {
        $phours = sprintf("%.1f", $phours);
    }
    else {
        $phours = sprintf("%.0f", $phours);
    }
    if ($weekphours < 2) {
        $weekphours = sprintf("%.1f", $weekphours);
    }
    else {
        $weekphours = sprintf("%.0f", $weekphours);
    }
    if ($monthphours < 2) {
        $monthphours = sprintf("%.1f", $monthphours);
    }
    else {
        $monthphours = sprintf("%.0f", $monthphours);
    }
    $blob = array("pnodes"      => $pcount,
                  "phours"      => $phours,
                  "weekpnodes"  => $weekpcount,
                  "weekphours"  => $weekphours,
                  "monthpnodes" => $monthpcount,
                  "monthphours" => $monthphours,
                  "rankdays"    => 30,
                  "rank"        => $rank,
                  "ranktotal"   => $ranktotal,
                  "expcount"    => Instance::CurrentInstanceCount($target_project),
    );
    
    SPITAJAX_RESPONSE($blob);
}

#
# Toggle flags.
#
function Do_Toggle()
{
    global $this_user, $target_project, $ajax_args;
    global $TBMAIL_OPS, $TBMAIL_AUDIT, $TBMAIL_WWW;

    if (CheckPageArgs()) {
        return;
    }
    if (!ISADMIN()) {
	SPITAJAX_ERROR(-1, "Not enough permission");
        return;
    }
    $this_uid    = $this_user->uid();
    $target_pid  = $target_project->pid();
    
    if (!isset($ajax_args["toggle"])) {
	SPITAJAX_ERROR(-1, "Missing toggle name");
	return -1;
    }
    $toggle = $ajax_args["toggle"];

    if ($toggle == "project_disable") {
        $target_project->SetDisabled($target_project->disabled() ? 0 : 1);
        $which = $target_project->disabled() ? "disabled" : "enabled";
        TBMAIL($TBMAIL_OPS,
               "Project '$target_pid' has been $which",
               "$this_uid has $which project $target_pid!\n\n",
               "From: $TBMAIL_OPS\n".
               "Bcc: $TBMAIL_AUDIT\n".
               "Errors-To: $TBMAIL_WWW");
    }
    if ($toggle == "project_resdisable") {
        $newvalue = $target_project->reservations_disabled() ? 0 : 1;
        $target_project->SetResDisabled($newvalue);
    }
    elseif ($toggle == "bound_portal") {
        $target_project->SetBoundPortal($target_project->bound_portal() ? 0 : 1);
        if ($target_project->bound_portal()) {
            $target_project->GetLeader()->SetBoundPortal(1);
            $members = $target_project->MemberList();
            foreach ($members as $user) {
                $user->SetBoundPortal(1);
            }
        }
    }
    elseif ($toggle == "project_forClass") {
        $target_project->SetforClass($target_project->forClass() ? 0 : 1);
    }
    elseif ($toggle == "industry") {
        $target_project->SetIndustry($target_project->industry() ? 0 : 1);
    }
    elseif ($toggle == "consortium") {
        $target_project->SetConsortium($target_project->consortium() ? 0 : 1);
    }
    elseif ($toggle == "expert_mode") {
        $target_project->SetExpertMode($target_project->expert_mode() ? 0 : 1);
    }
    else {
	SPITAJAX_ERROR(-1, "Unknown toggle name: $toggle");
        return;
    }
    SPITAJAX_RESPONSE(1);
}

function Do_DeleteProject()
{
    global $this_user, $target_project;
    global $suexec_output;
    global $TBADMINGROUP;

    if (CheckPageArgs()) {
        return;
    }
    if (!ISADMIN()) {
	SPITAJAX_ERROR(-1, "Not enough permission");
	return -1;
    }
    $uid = $this_user->uid();
    $pid = $target_project->pid();
    
    if (SUEXEC($uid, $TBADMINGROUP, "webrmproj $pid", SUEXEC_ACTION_CONTINUE)) {
        SPITAJAX_ERROR(-1, $suexec_output);
        return -1;
    }
    SPITAJAX_RESPONSE(1);
}

function Do_NSF()
{
    global $this_user, $target_project, $ajax_args;

    if (CheckPageArgs()) {
        return;
    }
    if (!ISADMIN()) {
	SPITAJAX_ERROR(-1, "Not enough permission");
        return;
    }
    $pid = $target_project->pid();

    if (!isset($ajax_args["award"])) {
	SPITAJAX_ERROR(2, "Missing award argument");
	return -1;
    }
    else {
        $award = trim($ajax_args["award"]);
        if ($award == "" ||
            !TBvalid_slot($award, "projects", "nsf_awards")) {
            SPITAJAX_ERROR(2, "Invalid award argument");
            return -1;
        }
    }
    if (isset($ajax_args["supplement"]) && $ajax_args["supplement"]) {
        $supplement = 1;
    }
    else {
        $supplement = 0;
    }
    $target_project->AddNSFAward($award, $supplement);
    SPITAJAX_RESPONSE(1);
}

# Local Variables:
# mode:php
# End:
?>
