<?php
#
# Copyright (c) 2000-2019 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
chdir("..");
include_once("webtask.php");
chdir("apt");
include_once("profile_defs.php");
include_once("instance_defs.php");

#
# Need to check the permission, since we allow admins to mess with
# other accounts.
#
function CheckPageArgs()
{
    global $this_user;
    global $ajax_args;

    if (!(ISADMIN())) {
        $approved = 0;
        $project = Project::Lookup("PowderStop");
    
        if (!$project ||
            !$project->IsMember($this_user, $approved) || !$approved) {
            SPITAJAX_ERROR(-1, "Not enough permission");
            return -1;
        }
    }
    return 0;
}

function Do_StartShutdown()
{
    global $this_user, $urn_mapping;
    global $ajax_args;
    $results = array();

    if (CheckPageArgs()) {
        return;
    }
    $webtask = WebTask::CreateAnonymous();
    $retval = SUEXEC($this_user->uid(), "nobody",
		     "webpowder_shutdown -t " . $webtask->task_id() . " -b -d -n",
		     SUEXEC_ACTION_CONTINUE);
    $webtask->Refresh();

    if ($retval != 0) {
        SPITAJAX_ERROR(-1, "Internal error starting emergency stop");
        $webtask->Delete();
	return;
    }
    $instances = $webtask->TaskValue("instanceList");
    if (count($instances)) {
        for($i = 0; $i < count($instances); $i++) {
            $uuid = $instances[$i];
            $instance = Instance::Lookup($uuid);
            if (!$instance) {
                continue;
            }
            $blob = array("name"    => $instance->name(),
                          "uuid"    => $instance->uuid(),
                          "creator" => $instance->creator(),
                          "created" => DateStringGMT($instance->created()),
                          "status"  => $instance->status(),
                          "paniced" => $instance->paniced() ? 1 : 0);

            $clusters = array();
            foreach ($instance->slivers() as $sliver) {
                $clusters[] = $sliver->aggregate_name();
            }
            $blob["clusters"] = join(",", $clusters);
            $results[] = $blob;
        }
    }
    $webtask->Delete();
    SPITAJAX_RESPONSE($results);    
}

function Do_ShutdownStatus()
{
    global $this_user, $urn_mapping;
    global $ajax_args;
    $results = array();

    if (CheckPageArgs()) {
        return;
    }
    if (!isset($ajax_args["instances"])) {
	SPITAJAX_ERROR(1, "Missing instance list");
	return;
    }
    $instances = $ajax_args["instances"];
    for($i = 0; $i < count($instances); $i++) {
        $uuid = $instances[$i];
        $instance = Instance::Lookup($uuid);
        if (!$instance) {
            continue;
        }
        $blob = array("uuid"    => $instance->uuid(),
                      "status"  => $instance->status(),
                      "paniced" => $instance->paniced() ? 1 : 1);
        $results[] = $blob;
    }
    SPITAJAX_RESPONSE($results);    
}

# Local Variables:
# mode:php
# End:
?>
