<?php
#
# Copyright (c) 2000-2019 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
chdir("..");
chdir("apt");
include_once("profile_defs.php");
include_once("instance_defs.php");
include_once("ajax-routines.ajax");

# This is set in CheckPageArgs();
$project = null;

#
# Need to check the permission, since we allow admins to mess with
# other accounts.
#
function CheckPageArgs()
{
    global $this_user;
    global $ajax_args, $project;

    if (!ISADMIN()) {
	SPITAJAX_ERROR(-1, "Not enough permission");
	return -1;
    }
    if (!isset($ajax_args["pid"])) {
        SPITAJAX_ERROR(-1, "Must supply project");
        return -1;
    }
    $project = Project::LookupByPid($ajax_args["pid"]);
    if (!$project) {
        SPITAJAX_ERROR(-1, "No such project");
        return -1;
    }
    return 0;
}

function Do_ProjectList()
{
    global $this_user;
    global $ajax_args;
    $results = array();

    if (!ISADMIN()) {
	SPITAJAX_ERROR(-1, "Not enough permission");
	return;
    }

    #
    # Look in the projects table to see which projects have not been approved.
    #
    $projlist = Project::PendingProjectList();

    foreach ($projlist as $project) {
        $blob = array();
        $leader = $project->GetLeader();
        $portal = $project->portal();
        if (!$portal) {
            $portal = "Classic";
        }
        $blob["pid"]          = $project->pid();
        $blob["pid_idx"]      = $project->pid_idx();
        $blob["created"]      = DateStringGMT($project->created());
        $blob["description"]  = $project->name();
        if ($project->URL() && $project->URL() != "") {
            if (preg_match("/^http[s]?:\/\//", $project->URL())) {
                $blob["url"] = $project->URL();
            }
            else {
                $blob["url"] = "http://" . $project->URL();
            }
        }
        $blob["portal"]       = $portal;
        $blob["why"]          = $project->why();
        $blob["leader"]       = $project->head_uid();
        $blob["leader_idx"]   = $project->head_idx();
        $blob["leader_name"]  = $leader->name();
        $blob["leader_affil"] = $leader->affil();
        $blob["leader_email"] = $leader->email();
        $blob["leader_notyet"]= ($leader->status() == TBDB_USERSTATUS_NEWUSER ? 1 : 0);

        $results[$project->pid()] = $blob;
    }

    SPITAJAX_RESPONSE($results);    
}

#
# Save new project description.
#
function Do_SaveDescription()
{
    global $this_user;
    global $ajax_args, $project;

    if (CheckPageArgs()) {
        return;
    }
    if (!isset($ajax_args["description"])) {
        SPITAJAX_ERROR(-1, "Must supply description");
        return;
    }
    $description = $ajax_args["description"];
    if (!TBvalid_why($description)) {
        SPITAJAX_ERROR(-1, "Not a valid description: " + TBFieldErrorString());
        return;
    }
    $pid_idx  = $project->pid_idx();
    $safe_why = addslashes($description);

    if (!DBQueryWarn("update projects set why='$safe_why' ".
		     "where pid_idx='$pid_idx'")) {
        SPITAJAX_ERROR(-1, "Error saving new description");
        return;
    }
    SPITAJAX_RESPONSE(0);
}

#
# Request more info.
#
function Do_MoreInfo()
{
    global $this_user;
    global $ajax_args, $project;

    if (CheckPageArgs()) {
        return;
    }
    if (!isset($ajax_args["message"])) {
        SPITAJAX_ERROR(-1, "Must supply message");
        return;
    }
    $message = $ajax_args["message"];

    if (! ($leader = $project->GetLeader())) {
        TBERROR("Error getting leader for $pid", 0);
        SPITAJAX_ERROR(-1, "Internal error getting project leader");
        
    }
    $headuid       = $project->head_uid();
    $headuid_email = $leader->email();
    $headname      = $leader->name();
    $pid           = $project->pid();

    SendProjAdminMail
        ($project, "ADMIN", "$headname '$headuid' <$headuid_email>",
         "Request for more info about project '$pid'",
         "This message is to notify you that your project application\n".
         "for $pid has been postponed until we have more information\n".
         "or you take certain actions.  You can just reply to this message\n".
         "to provide that information or report your actions.\n".
         "----------------------------------------------------------------\n".
         "\n".
         $message.
         "\n\n".
         "Thanks!\n");
    
    SPITAJAX_RESPONSE(0);
}

#
# Approve
#
function Do_Approve()
{
    global $this_user;
    global $ajax_args, $project, $TBADMINGROUP, $suexec_output;

    if (CheckPageArgs()) {
        return;
    }
    if (!isset($ajax_args["message"])) {
        SPITAJAX_ERROR(-1, "Must supply message");
        return;
    }
    $message = $ajax_args["message"];

    if (! ($leader = $project->GetLeader())) {
        TBERROR("Error getting leader for $pid", 0);
        SPITAJAX_ERROR(-1, "Internal error getting project leader");
        return;
    }
    $curstatus     = $leader->status();
    $headuid       = $project->head_uid();
    $headuid_email = $leader->email();
    $headname      = $leader->name();
    $pid           = $project->pid();
    # See if we are in an initial Emulab setup.
    $FirstInitState= (TBGetFirstInitState() == "approveproject" ? 1 : 0);
    $optargs       = "";

    # Sanity check the leader status.
    if ($curstatus != TBDB_USERSTATUS_ACTIVE &&
	$curstatus != TBDB_USERSTATUS_UNAPPROVED) {
        SPITAJAX_ERROR(-1, "Invalid $headuid status $curstatus");
        return;
    }
    # Optional message passed along.
    if ($message != "") {
	$filename = tempnam("/tmp", "approveproject");
	$fp = fopen($filename, "w");
        if (!$fp) {
            SPITAJAX_ERROR(-1, "Could not create temporary file for message");
            return;
        }
	fwrite($fp, $message);
	fclose($fp);
	$optargs = " -f " . escapeshellarg($filename);
    }
    $retval = SUEXEC($this_user->uid(), $TBADMINGROUP,
                     "webmkproj $optargs $pid", SUEXEC_ACTION_CONTINUE);
    if (isset($filename)) {
        unlink($filename);
    }
    if ($retval) {
        SPITAJAX_ERROR(-1, "Internal error creating project, ".
                       "see the email sent to your testbed-ops list");
        return;
    }
    #
    # Page throws up a message.
    #
    if ($FirstInitState) {
        #
        # Move to next phase. 
        # 
        TBSetFirstInitState("Ready");
        SPITAJAX_RESPONSE(1);
        return;
    }
    SPITAJAX_RESPONSE(0);
}

#
# Deny
#
function Do_Deny()
{
    global $this_user;
    global $ajax_args, $project, $TBADMINGROUP, $suexec_output;
    $this_uid = $this_user->uid();

    if (CheckPageArgs()) {
        return;
    }
    if (!isset($ajax_args["message"])) {
        SPITAJAX_ERROR(-1, "Must supply message");
        return;
    }
    if (!isset($ajax_args["deleteuser"])) {
        SPITAJAX_ERROR(-1, "Must supply deleteuser");
        return;
    }
    $message = $ajax_args["message"];
    $deleteuser = ($ajax_args["deleteuser"] == 1 ? 1 : 0);
    $silent = 0;
    if (isset($ajax_args["silent"]) && $ajax_args["silent"] == 1) {
        $silent = 1;
    }
    if (! ($leader = $project->GetLeader())) {
        TBERROR("Error getting leader for $pid", 0);
        SPITAJAX_ERROR(-1, "Internal error getting project leader");
        return;
    }
    $curstatus     = $leader->status();
    $headuid       = $project->head_uid();
    $headuid_email = $leader->email();
    $headname      = $leader->name();
    $pid           = $project->pid();
    $optargs       = "";

    if ($deleteuser) {
	#
	# Take the user out of the project group first.
	#
	$retval = SUEXEC($this_uid, $TBADMINGROUP,
                         "webmodgroups -r $pid:$pid $headuid",
                         SUEXEC_ACTION_CONTINUE);
        if ($retval) {
            SPITAJAX_ERROR(-1, "Internal error removing user from project");
            return;
        }
	#
	# See if user is in any other projects (even unapproved).
	#
	$project_list = $leader->ProjectMembershipList();

	#
	# If yes, then we cannot safely delete the user account.
	#
	if (! count($project_list)) {
	    #
	    # No other project membership. If the user is unapproved/newuser,
	    # it means he was never approved in any project, and so will
	    # likely not be missed. He will be unapproved if he did his
	    # verification.
	    #
	    if ($curstatus == TBDB_USERSTATUS_NEWUSER ||
                $curstatus == TBDB_USERSTATUS_UNAPPROVED) {
		$retval = SUEXEC($this_uid, $TBADMINGROUP,
                                 "webrmuser -n -p $pid $headuid",
                                 SUEXEC_ACTION_CONTINUE);
                if ($retval) {
                    SPITAJAX_ERROR(-1, "Internal error removing user");
                    return;
                }
	    }
	}
    }
    
    $retval = SUEXEC($this_uid, $TBADMINGROUP,
                     "webrmproj $pid", SUEXEC_ACTION_CONTINUE);

    if ($retval) {
        SPITAJAX_ERROR(-1, "Internal error removing project, ".
                       "see the email sent to your testbed-ops list");
        return;
    }
    if (!$silent) {
        # This works cause we still have the project object in memory.
        SendProjAdminMail
            ($project, "ADMIN", "$headname '$headuid' <$headuid_email>",
             "Project application '$pid' has been denied.",
             "This message is to notify you that your project application\n".
             "for $pid has been denied.\n".
             ($message == "" ? "" :
              "----------------------------------------------------------------\n".
              "\n".
              $message . "\n"));
    }
    SPITAJAX_RESPONSE(0);
}

# Local Variables:
# mode:php
# End:
?>
