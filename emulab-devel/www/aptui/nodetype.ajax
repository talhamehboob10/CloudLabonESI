<?php
#
# Copyright (c) 2000-2020 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
chdir("..");
include_once("webtask.php");
include_once("experiment_defs.php");
include_once("node_defs.php");
include_once("nodetype_defs.php");
include_once("imageid_defs.php");
include_once("osinfo_defs.php");
chdir("apt");

#
# Set this for functions
#
$nodetype = null;

#
# We allow anonynous users to get ONLY node type info!
#
$GuestUserOkay = false;

function CheckPageArgs($write)
{
    global $this_user, $ajax_args, $GuestUserOkay, $nodetype;
    global $TB_NODEACCESS_READINFO, $TB_NODEACCESS_MODIFYINFO;

    if (! ($GuestUserOkay || $this_user)) {
	SPITAJAX_ERROR(-1, "Not enough permission");
	return -1;
    }
    if (!isset($ajax_args["type"])) {
	SPITAJAX_ERROR(-1, "Missing node type");
	return -1;
    }
    $type = $ajax_args["type"];
    if (!TBvalid_node_type($type)) {
	SPITAJAX_ERROR(-1, "Invalid node type");
	return -1;
    }
    $nodetype = NodeType::Lookup($type);
    if (!$nodetype) {
	SPITAJAX_ERROR(-1, "No such type");
	return -1;
    }
    if (ISADMIN()) {
        return 0;
    }
    if ($write && !ISADMIN()) {
	SPITAJAX_ERROR(-1, "Not enough permission");
	return -1;
    }
    return 0;
}

#
# Get the info for a type
#
function Do_GetInfo()
{
    global $this_user, $ajax_args, $GuestUserOkay, $nodetype;
    global $TBBASE, $ISEMULAB, $TBMAINSITE, $OURDOMAIN;
    $blob = array();
    $osinfo = array();

    # Only this function allows guest users.
    $GuestUserOkay = true;
    
    if (CheckPageArgs(0)) {
        return;
    }
    $blob["type"]         = $nodetype->type();
    $blob["class"]        = $nodetype->typeclass();
    $blob["architecture"] = $nodetype->architecture();
    $blob["isvirtnode"]   = $nodetype->isvirtnode();
    $blob["isjailed"]     = $nodetype->isjailed();
    $blob["isdynamic"]    = $nodetype->isdynamic();
    $blob["isremotenode"] = $nodetype->isremotenode();
    $blob["issubnode"]    = $nodetype->issubnode();
    $blob["isswitch"]     = $nodetype->isswitch();
    $blob["features"]     = GetTypeFeatures($nodetype->type());

    #
    # We want to convert osids and imageids in the attributes array.
    #
    GetTypeAttributes($nodetype->type(), $attributes, $osinfo);
    $blob["attributes"] = $attributes;
    $blob["osinfo"]     = $osinfo;
    SPITAJAX_RESPONSE($blob);
}

function ConvertOSID($osid)
{
    global $TBBASE;
    $osinfo = OSInfo::Lookup($osid);

    if ($osinfo) {
        $blob = array();
        $url  = "$TBBASE/showosinfo.php3?osid=${osid}";

        $blob["osid"] = $osinfo->osid();
        $blob["uuid"] = $osinfo->uuid();
        $blob["name"] = $osinfo->osname();
        $blob["vers"] = $osinfo->vers();
        $blob["mfs"]  = intval($osinfo->mfs());
        $blob["type"] = "os";
        $blob["url"]  = $url;
        return $blob;
    }
    return $osid;
}

function ConvertImageID($imageid)
{
    global $TBBASE;
    $image = Image::Lookup($imageid);

    if ($image) {
        $blob = array();
        $url = "show-image.php?imageid=${imageid}";

        $blob["osid"] = $image->imageid();
        $blob["uuid"] = $image->uuid();
        $blob["name"] = $image->imagename();
        $blob["vers"] = $image->version();
        $blob["type"] = "image";
        $blob["mfs"]  = 0;
        $blob["url"]  = $url;
        return $blob;
    }
    return $imageid;
}

#
# Get the node type attributes (minus root password)
#
function GetTypeAttributes($type, &$attributes, &$osinfo)
{
    $attributes = array();
    $osinfo     = array();

    $query_result =
        DBQueryFatal("select attrkey,attrvalue from node_type_attributes ".
                     "where type='$type' and ".
                     "      attrkey not like '%password%' ".
                     "order by attrkey");

    if (!mysql_num_rows($query_result)) {
        return null;
    }
    while ($row = mysql_fetch_array($query_result)) {
        $key = $row["attrkey"];
        $val = $row["attrvalue"];

        if (preg_match("/_osid$/", $key)) {
            $osinfo[$key] = ConvertOSID($val);
        }
        elseif (preg_match("/_imageid$/", $key)) {
            $osinfo[$key] = ConvertImageID($val);
        }
        else {
            $attributes[$key] = $val;
        }
    }
    return 0;
}

#
# Get the node type features.
#
function GetTypeFeatures($type)
{
    $blob = array();

    $query_result =
        DBQueryFatal("select feature,weight from node_type_features ".
                     "where type='$type' order by feature");
    if (!mysql_num_rows($query_result)) {
        return null;
    }
    while ($row = mysql_fetch_array($query_result)) {
        $blob[$row["feature"]] = $row["weight"];
    }
    return $blob;
}

#
# Save a new or changed feature/attribute
#
function Do_SaveFeature()
{
    SaveRow("feature");
}
function Do_SaveAttribute()
{
    SaveRow("attribute");
}
function Do_SaveOSImage()
{
    SaveRow("osimage");
}
function Do_SaveFlag()
{
    SaveRow("flag");
}

function SaveRow($which)
{
    global $this_user, $ajax_args, $nodetype;
    $isnew = 0;
    
    if (CheckPageArgs(1)) {
        return;
    }
    if (isset($ajax_args["isnew"])) {
        $isnew = 1;
    }
    $type = $nodetype->type();

    if (!isset($ajax_args["name"]) || $ajax_args["name"] == "") {
	SPITAJAX_ERROR(-1, "Missing feature name");
	return -1;
    }
    $name = $ajax_args["name"];
    if (!preg_match('/^(\?\+)?[A-Za-z][-\w]+$/', $name)) {
	SPITAJAX_ERROR(-1, "Invalid feature name");
	return -1;
    }
    if ($which != "flag" &&
        (!isset($ajax_args["value"]) || $ajax_args["value"] == "")) {
	SPITAJAX_ERROR(-1, "Missing feature or attribute value");
	return -1;
    }
    $value = $ajax_args["value"];
    if ($which == "feature") {
        if (!is_numeric($value)) {
            SPITAJAX_ERROR(-1, "Feature weight is not an integer or float");
            return -1;
        }
    }
    elseif ($which == "osimage") {
        if (!is_numeric($value)) {
            SPITAJAX_ERROR(-1, "OSID is not an integer or float");
            return -1;
        }
        $attrtype = "integer";
    }
    elseif ($which == "flag") {
        if ($value != "" &&
            !TBcheck_dbslot($value, "node_attributes", "attrvalue",
                            TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
            SPITAJAX_ERROR(-1, "Invalid value for $name");
            return -1;
        }
    }
    else {
        if (!TBcheck_dbslot($value, "node_attributes", "attrvalue",
                            TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
            SPITAJAX_ERROR(-1, "Invalid attrvalue value");
            return -1;
        }
        if ($isnew) {
            if (!isset($ajax_args["attrtype"]) ||
                $ajax_args["attrtype"] == "") {
                SPITAJAX_ERROR(-1, "Missing attribute type");
                return -1;
            }
            $attrtype = $ajax_args["attrtype"];
            if (! ($attrtype == "integer" || $attrtype == "boolean" ||
                   $attrtype == "string"  || $attrtype == "float")) {
                SPITAJAX_ERROR(-1, "Invalid attribute type");
                return -1;
            }
            if (!TBcheck_dbslot($value, "node_types", "attr_${attrtype}",
                            TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
                SPITAJAX_ERROR(-1, "Attribute is not a/an $attrtype");
                return -1;
            }
        }
    }
    # Check to see if what we are adding or changing exists.
    if ($which == "feature") {
        $query_result =
            DBQueryFatal("select feature from node_type_features ".
                         "where type='$type' and feature='$name'");
    }
    elseif ($which != "flag") {
        $query_result =
            DBQueryFatal("select attrkey from node_type_attributes ".
                         "where type='$type' and attrkey='$name'");
    }
    if ($which == "flag") {
        $query_result =
            DBQueryWarn("update node_types set ${name}='$value' ".
                        "where type='$type'");
    }
    elseif ($isnew) {
        if (mysql_num_rows($query_result)) {
            SPITAJAX_ERROR(-1, "Feature or attribute already exists");
            return -1;
        }
        if ($which == "feature") {
            $query_result =
                DBQueryWarn("insert into node_type_features set ".
                            "  type='$type',feature='$name',weight='$value'");
        }
        else {
            $query_result =
                DBQueryWarn("insert into node_type_attributes set ".
                            "  type='$type',attrkey='$name',".
                            "  attrvalue='$value',attrtype='$attrtype'");
        }
    }
    else {
        if (!mysql_num_rows($query_result)) {
            SPITAJAX_ERROR(-1, "Feature or attribute does not exist");
            return -1;
        }
        if ($which == "feature") {
            $query_result =
                DBQueryWarn("update node_type_features set weight='$value' ".
                            "where type='$type' and feature='$name'");
        }
        else {
            $query_result =
                DBQueryWarn("update node_type_attributes set ".
                            "  attrvalue='$value' ".
                            "where type='$type' and attrkey='$name'");
        }
    }
    if (!$query_result) {
            SPITAJAX_ERROR(-1, "Internal error updating database");
            return -1;
    }
    SPITAJAX_RESPONSE(1);
}


#
# Delete a feature or attribute
#
function Do_DeleteFeature()
{
    Delete("feature");
}
function Do_DeleteAttribute()
{
    Delete("attribute");
}
function Do_DeleteOSImage()
{
    Delete("osimage");
}

function Delete($which)
{
    global $this_user, $ajax_args, $nodetype;
    
    if (CheckPageArgs(1)) {
        return;
    }
    $type = $nodetype->type();

    if (!isset($ajax_args["name"]) || $ajax_args["name"] == "") {
	SPITAJAX_ERROR(-1, "Missing feature or attribute name");
	return -1;
    }
    $name = $ajax_args["name"];
    if (!preg_match('/^(\?\+)?[A-Za-z][-\w]+$/', $name)) {
	SPITAJAX_ERROR(-1, "Invalid feature or attribute name");
	return -1;
    }
    if ($which == "feature") {
        $query_result =
            DBQueryWarn("delete from node_type_features ".
                        "where type='$type' and feature='$name'");
    }
    else {
        $query_result =
            DBQueryWarn("delete from node_type_attributes ".
                        "where type='$type' and attrkey='$name'");
    }
    if (!$query_result) {
            SPITAJAX_ERROR(-1, "Internal error updating database");
            return -1;
    }
    SPITAJAX_RESPONSE(1);
}

function Do_GetHardwareInfo()
{
    global $this_user, $ajax_args, $node, $GuestUserOkay, $nodetype;
    global $TBBASE, $ISEMULAB, $TBMAINSITE, $OURDOMAIN;

    # Only this function allows guest users.
    $GuestUserOkay = true;

    if (isset($ajax_args["typelist"])) {
        $typelist = preg_split("/,/", $ajax_args["typelist"]);
        foreach ($typelist as $t) {
            if (!TBvalid_node_type($t)) {
                SPITUSERERROR("$t contains illegal characters!");
                return -1;
            }
            $query_result =
                DBQueryFatal("select type from node_types where type='$t'");
            if (!mysql_num_rows($query_result)) {
                SPITUSERERROR("No such node type $t");
                return -1;
            }
        }
    }
    elseif (CheckPageArgs(0)) {
        return;
    }
    $result = array();
    
    if (isset($typelist)) {
        foreach ($typelist as $t) {
            $blob = GetHardwareInfoForType($t);
            if (!$blob) {
                SPITAJAX_ERROR(-1, "No hardware info available for $t");
                return -1;
            }
            $result[$t] = $blob;
        }
    }
    else {
        $type = $nodetype->type();
        $blob = GetHardwareInfoForType($type);
        if (!$blob) {
            SPITAJAX_ERROR(-1, "No hardware info available for $type");
            return -1;
        }
        $result[$type] = $blob;
    }
    SPITAJAX_RESPONSE($result);
}

function GetHardwareInfoForType($type)
{
    $query_result =
        DBQueryFatal("select * from node_type_hardware where type='$type'");
    if (!mysql_num_rows($query_result)) {
        return null;
    }
    $row = mysql_fetch_array($query_result);

    $blob = array("type"    => $type,
                  "updated" => DateStringGMT($row["updated"]),
                  "uname"   => $row["uname"],
                  "paths"   => array(),
    );
    $query_result =
        DBQueryFatal("select path,value from node_type_hardware_paths ".
                     "where type='$type'");
    if (!mysql_num_rows($query_result)) {
        return null;
    }
    while ($row = mysql_fetch_array($query_result)) {
        $path  = $row["path"];
        $value = $row["value"];
        $blob["paths"][$path] = $value;
    }
    return $blob;
}

# Local Variables:
# mode:php
# End:
?>
