#!/usr/bin/perl -w
#
# Copyright (c) 2008-2016, 2018 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use Data::Dumper;
use Time::HiRes qw( gettimeofday tv_interval );
use JSON;

sub usage()
{
    print "Usage: portal_xmlrpc [-d] [-a urn] method [PARAM=VALUE ...]\n";
    exit(1);
}
my $optlist   = "da:t:";
my $debug     = 0;
my $errmsg;
my $aggurn;
my $webtask_id;
my $webtask;

#
# Configure variables
#
my $TB		  = "@prefix@";
my $EMCERT	  = "$TB/etc/emulab.pem";
my $EMKEY	  = "$TB/etc/emulab.key";
my $OURDOMAIN	  = "@OURDOMAIN@";
my $MYURN	  = "urn:publicid:IDN+${OURDOMAIN}+authority+cm";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Protos
sub fatal($);

# We always use the CM db.
use vars qw($GENI_DBNAME);
$GENI_DBNAME = "geni-cm";

#
# Turn off line buffering on output
#
$| = 1; 

# Now we can load the libraries after setting the proper DB.
use lib '@prefix@/lib';
use WebTask;
use GeniHRN;
use Genixmlrpc;
use GeniResponse;
use GeniAuthority;
use APT_Aggregate;
use APT_Geni;

my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"t"})) {
    $webtask_id = $options{"t"};
    $webtask = WebTask->Lookup($webtask_id);
    if (!defined($webtask)) {
	fatal("Could not lookup webtask $webtask_id");
    }
    # Convenient.
    $webtask->AutoStore(1);
}
if (defined($options{"a"})) {
    $aggurn = $options{"a"};
}
else {
    $aggurn = $MYURN;
}
usage()
    if (!@ARGV);
my $method = shift(@ARGV);

my $context = Genixmlrpc->Context($EMCERT, $EMKEY);
if (!defined($context)) {
    fatal("Could not create context to talk to image server");
}
Genixmlrpc->SetContext($context);
# Shorten default timeout.
Genixmlrpc->SetTimeout(15);

my $aggregate = APT_Aggregate->Lookup($aggurn);
if (!defined($aggregate)) {
    fatal("No such aggregate: $aggurn");
}
my $authority = GeniAuthority->Lookup($aggurn);
if (!defined($authority)) {
    fatal("No such aggregate authority: $aggurn");
}
# Check online and reachable. Additional arg says to test Portal RPC.
if ($aggregate->CheckStatus(\$errmsg, 1)) {
    if (defined($webtask)) {
	$webtask->output($errmsg);
	$webtask->Exited(1);
    }
    print STDERR $errmsg . "\n";
    exit(1);
}

my @args = ();
if (@ARGV) {
    my $args = {};

    while (@ARGV) {
	my $opt = shift(@ARGV);
	if ($opt =~ /^(.*)=(.*)$/) {
	    if ($2 eq "[]") {
		$args->{$1} = [];
	    }
	    else {
		$args->{$1} = $2;
	    }
	}
	else {
	    fatal("Bad option: $opt");
	}
    }
    @args = ($args);
}
my $starttime = [gettimeofday()];
my $response  = APT_Geni::PortalRPC($authority, undef, $method, @args);
my $elapsed   = tv_interval($starttime);

if ($response->code() != GENIRESPONSE_SUCCESS) {
    print STDERR $response->error() . "\n";
    if (defined($webtask)) {
	$webtask->output($response->error());
	$webtask->Exited($response->code())
    }
    exit($response->code());
}
if (defined($webtask)) {
    $webtask->results($response->value());
    $webtask->Exited(0);
}
else {
    print encode_json($response->value());
}
exit(0);

sub fatal($)
{
    my ($msg) = @_;

    if (defined($webtask)) {
	$webtask->output($msg);
	$webtask->Exited(-1);
    }
    print STDERR "*** $0:\n".
	         "    $msg\n";
    # exit value important.
    exit(-1);
}
