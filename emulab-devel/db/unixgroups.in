#!/usr/bin/perl -w

#
# Copyright (c) 2000-2002, 2010 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;
use strict;

#
# Function prototypes
#
sub checkGroup ($$);

#
# Configure variables
#
use lib '@prefix@/lib';
use libdb;
use User;

my $TB        = "@prefix@";
my $SETGROUPS = "$TB/sbin/setgroups";

#
# Turn off line buffering on output
#
$| = 1;

#
# Only root or admin types!
# 
if (($UID != 0) && (!TBAdmin($UID))) {
    die("Only root or TB administrators can control UNIX groups.\n");
}

#
# Proccess command-line args
#
my %opt = ();
getopts('rhpa',\%opt);

my ($uid, $uid_idx, @gid);
if ($opt{a} || $opt{r}) {
    if (@ARGV < 2) {
	die "Not enough arguments - see '$0 -h' for help\n";
    }
    $uid = shift @ARGV;
    @gid = @ARGV;

    my $target_user = User->Lookup($uid);
    if (!defined($target_user)) {
	die "No such active user $uid exists\n";
    }
    $uid_idx = $target_user->uid_idx();
} else {
    if (@ARGV != 0) {
	die "Too many arguments - see '$0 -h' for help\n";
    }
}

if ($opt{p}) {
    #
    # Print out groups in a format that looks vaguely like the /etc/group
    # format
    #
    my %members = ();
    my $result = DBQueryFatal("SELECT gid,uid FROM unixgroup_membership");
    while (my ($gid,$uid) = $result->fetchrow() ) {
	push @{$members{$gid}},$uid;
    }

    while (my ($gid,$members) = each %members) {
	print "$gid:" . join(",",@$members) . "\n";
    }
} elsif ($opt{a}) {
    #
    # Add a user to the database
    #
    foreach my $gid (@gid) {
	print "Adding user $uid to group $gid in the database\n";
	if (checkGroup($uid_idx,$gid)) {
	    warn "User $uid is already in group $gid, skipping ...\n";
	    next;
	} else {
	    DBQueryFatal("INSERT INTO unixgroup_membership SET ".
			 "  uid='$uid', uid_idx='$uid_idx', gid='$gid'");
	}
    }

    print "Updating groups for $uid on control nodes\n";
    if (system "$SETGROUPS $uid" ) {
	warn "Group update for $uid failed\n";
    }

} elsif ($opt{r}) {
    #
    # Remove a user from the database
    #
    foreach my $gid (@gid) {
	print "Removing $uid from group $gid in the database\n";
	if (!checkGroup($uid_idx,$gid)) {
	    warn "User $uid is not in group $gid, skipping ...\n";
	    next;
	} else {
	    DBQueryFatal("DELETE FROM unixgroup_membership ".
			 "WHERE uid_idx='$uid_idx' AND gid='$gid'");
	}
    }
    
    print "Updating groups for $uid on control nodes\n";
    if (system "$SETGROUPS $uid" ) {
	warn "Group update for $uid failed\n";
    }

} else {
    #
    # Usage message
    #
    warn "Usage: $0 <-h | -p | < <-a | -r> uid gid...> >\n";
    warn "-h            This message\n";
    warn "-p            Print group information\n";
    warn "-a uid gid... Add a user to one (or more) groups\n";
    warn "-r uid gid... Remove a user from one (or more) groups\n";
    exit(-1);
}


#
# Check to see if the given uid is in the given gid. Return 1 if it is, 0
# if not.
#
sub checkGroup ($$) {
    my ($uid_idx,$gid) = @_;
    
    my $result = DBQueryFatal("SELECT gid,uid FROM unixgroup_membership WHERE ".
				"uid_idx='$uid_idx' AND gid='$gid'");
    return ($result->num_rows() > 0);
}
