#!/usr/bin/perl -wT

#
# Copyright (c) 2000-2015 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;

#
# Boottime cleanup of the DB. A series of specialize commands that are
# likely yo get out of synch with reality!
# 

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1; 

# Load the Testbed support stuff.
use lib "@prefix@/lib";
use libdb;
use libtestbed;

#
# Only real root can call this.
# 
if ($UID != 0) {
    print STDERR "You must be root to run this script!\n";
    exit(-1);
}

#
# Form a temp name.
#
my $logname = TBMakeLogname("dbboot");

#
# Reopen both stdout and stderr so that we can record all the output for
# later mailing.
# 
open(STDERR, ">> $logname") or die("opening $logname for STDERR: $!");
open(STDOUT, ">> $logname") or die("opening $logname for STDOUT: $!");

#
# Clear the frisbee_blobs table since any frisbee's
# that were running are obviously not running anymore! 
#
DBQueryFatal("delete from frisbee_blobs");

#
# Clear the event scheduler pids. Its okay to set them to zero since
# thats not a valid process id. 
# 
DBQueryFatal("update experiments set event_sched_pid=0");

#
# Clear image locks.
#
DBQueryFatal("update images set locked=NULL,locker_pid=0");

#
# Clear old logins. 
#
DBQueryFatal("delete from login");

#
# Clear the pool daemon lock.
#
DBQueryFatal("replace into emulab_locks set name='pool_daemon',value='0'");
# And other locks.
DBQueryFatal("update emulab_locks set value='0'");

#
# Check for experiments stuck in transition.
#
$query_result =
    DBQueryFatal("select pid,eid,expt_locked,state from experiments ".
		 "where expt_locked is not NULL");
if ($query_result->numrows) {
    print "The following experiments are stuck in transition.\n\n";

    print "Pid          Eid                  When\n";
    print "------------ -------------------- ------------------------\n";
    while (($pid,$eid,$locked,$state) = $query_result->fetchrow_array) {
	printf("%-12s %-20s %s %s\n", $pid, $eid, $locked, $state);
    }
    print "\n";
}

#
# Send email if anything was reported.
#
if (-s $logname) {
    SENDMAIL($TBOPS, "DB Boot Finished", "DB Boot results:",
	     $TBOPS, undef, ($logname));
}

unlink("$logname");
exit 0;

sub fatal($) {
    my ($msg) = @_;

    print STDERR "$msg\n";
    SENDMAIL($TBOPS, "DB Boot Failed", $msg, undef, undef, ($logname));
    unlink("$logname");
    exit(1);
}
