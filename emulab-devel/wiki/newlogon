#!/usr/bin/perl
sub BEGIN { $ENV{PTKDB_STOP_TAG_COLOR} = "yellow" } 
#
# TWiki WikiClone (see wiki.pm for $wikiversion and other info)
#
# Copyright (C) 1999 Peter Thoeny, peter@thoeny.com
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details, published at 
# http://www.gnu.org/copyleft/gpl.html

use CGI::Carp qw(fatalsToBrowser);
use CGI;
use lib ( '.' );
use lib ( '../lib' );
use TWiki;
use TWiki::Plugins::SessionPlugin;

my $oopsurl = "oopsloginfail";
my $CREDDIR = "/var/db/cgisess";

$query= new CGI;

sub myerror($)
{
    my ($msg) = @_;

    my $url = &TWiki::getOopsUrl(undef, "", $oopsurl, $msg);
    TWiki::redirect($query, $url);
}

&main();

sub main
{
    my $username = $query->param('username');
    my $password = $query->param('password');
    my $redurl   = $query->param('redurl');
    my $bosscred = $query->param('bosscred');

    #
    # If bosscred provided, boss is trying to autologin the user using
    # a key that it sent across via a backend script and stashed in the
    # cookie dir. Find that file, compare the keys and if the key is not
    # too terribly old, give the user the nod.
    #
    if (defined($bosscred)) {
	if (!defined($username) || $username eq "") {
	    myerror("Missing username argument");
	    return;
	}

	my $file = "${CREDDIR}/$username";

	if (! -e $file) {
	    myerror("Cred file does not exist!");
	    return;
	}
	if (!open(COK, $file)) {
	    myerror("Cannot open cred file!");
	    return;
	}
	my $cred  = <COK>;
	my $stamp = <COK>;
	close(COK);

	# Compare credentials.
	if (defined($cred)) {
	    chomp($cred);
	    if ($cred eq $bosscred) {
		goto accepted;
	    }
	}
	# Does not match. Redirect to login page.
      dologon:
	my $url = &TWiki::getViewUrl("TWiki", "DoLogin");
	$url .= "?username=${username}";
	$url .= "&redurl=${redurl}"
	    if (defined($redurl) && $redurl ne "");
	
	TWiki::redirect($query, $url);
	return;
    }

    #
    # Normal login.
    # 
    if (! ($username && $password)) {
	myerror("Missing arguments (username or password)");
	return;
    }
    chomp($username);
    chomp($password);

    #
    # Suck out the password entry.
    #
    my $pwentry;
    
    open(HTP, $TWiki::htpasswdFilename) or
	die("Could not open $TWiki::htpasswdFilename\n");

    while (<HTP>) {
	if ($_ =~ /^${username}:.*$/) {
	    $pwentry = $_;
	    last;
        }
    }
    close(HTP);

    if (!defined($pwentry)) {
	myerror("No such user: '$username'");
	return;
    }

    #
    # Split up the entry and compare.
    #
    my ($wikiname, $encryptedpasswd) = split(":", $pwentry);
    chomp($encryptedpasswd);

    my $str = crypt($password, $encryptedpasswd);

    if ($str ne $encryptedpasswd) {
	myerror("Incorrect Password");
	return;
    }
 
    # This causes the query object to suddenly have a remote_user() value.
    # SessionPlugin uses that ...
 accepted:
   $ENV{REMOTE_USER} = $username;

    #
    # Stuff we need to pass down. Note that I am not bothering with the
    # topic cause of how this script will typically be invoked. 
    #
    my $thePathInfo = $query->path_info(); 
    my $theRemoteUser = $query->remote_user();
    my $theUrl = $query->url;
    my $theTopic = (defined($redurl) ? $redurl : "");

    # This appears to be necessary.
    $query->delete_all();

    my ($topic, $webName) = 
        &TWiki::initialize($thePathInfo, $theRemoteUser,
			   $theTopic, $theUrl, $query);

    my $url = &TWiki::getViewUrl($webName, $topic);

    $url .= ( '?' . $query->query_string() ) if $query->query_string();

    &TWiki::redirect( $query, $url );
}
