#!/usr/bin/perl -w
#
# Copyright (c) 2005, 2006, 2007 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;
use Errno;
    
#
# A wrapper for messing with the wiki support from boss.
#
sub usage()
{
    print "Usage: wikiproxy adduser <uid> <wikiname> <passhash> or\n";
    print "       wikiproxy deluser <uid> <wikiname> or\n";
    print "       wikiproxy addproject <pid> <wikiname> or\n";
    print "       wikiproxy setgroups <wikiuser> <wikigroup> ...\n";
    exit(-1);
}
my $optlist = "d";
my $debug   = 0;

#
# Configure variables
#
my $TB       = "@prefix@";
my $TBOPS    = "@TBOPSEMAIL@";

# Should be configure variables.
my $WIKIDIR  = "/usr/local/www/data/twiki";

# And other stuff.
my $USERTEMPLATE = "$TB/lib/wiki/usertemplate";
my $HOMETEMPLATE = "$TB/lib/wiki/webhometemplate";
my $WIKIDATADIR  = "$WIKIDIR/data";
my $WIKIUSERDIR  = "$WIKIDATADIR/Main";
my $WIKIGROUPDIR = "$WIKIDATADIR/Main";
my $WIKIARCHIVE  = "$WIKIDATADIR/_archive";
my $WIKIPASSWD   = "$WIKIDIR/data/.htpasswd";
my $USERMAPDB    = "$WIKIDIR/data/.usermap";
my $COOKIEDIR    = "/var/db/cgisess";
my $WIKIUSER     = "nobody";
my $WIKIGROUP    = "nobody";
my $CI		 = "ci";
my $TAR		 = "tar";
    
#
# Turn off line buffering on output
#
$| = 1;

# Protos
sub AddWikiUser(@);
sub DelWikiUser(@);
sub AddWikiProject(@);
sub AddWikiGroup(@);
sub FixWikiProject(@);
sub FixWikiUser(@);
sub FixWikiGroup(@);
sub SetWikiGroups(@);
sub CI($$);
sub WikixLogin(@);
sub WikiRemap(@);
sub UserMapping(@);
sub fatal($);

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Avoid quota and out of space on /tmp.
$ENV{'TMPDIR'} = "/var/tmp";

#
# Only real root, cause the script has to read/write a pid file that
# cannot be accessed by the user.
#
if ($UID != 0) {
    die("*** $0:\n".
	"    Must be root to run this script!\n");
}

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libtestbed;

# Version of FreeBSD.
my $FBSD_VERSION = 4;
if (`uname -r` =~ /^(\d)/) {
    $FBSD_VERSION = $1;
}
else {
    die("Could not determine what version of FreeBSD you are running!\n");
}

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (! @ARGV) {
    usage();
}

my $action = shift(@ARGV);

if ($action eq "adduser") {
    exit(AddWikiUser(@ARGV));
}
elsif ($action eq "deluser") {
    exit(DelWikiUser(@ARGV));
}
elsif ($action eq "addproject") {
    exit(AddWikiProject(@ARGV));
}
elsif ($action eq "addgroup") {
    exit(AddWikiGroup(@ARGV));
}
elsif ($action eq "setgroups") {
    exit(SetWikiGroups(@ARGV));
}
elsif ($action eq "xlogin") {
    exit(WikixLogin(@ARGV));
}
elsif ($action eq "remap") {
    exit(WikiRemap(@ARGV));
}
elsif ($action eq "fixproject") {
    exit(FixWikiProject(@ARGV));
}
elsif ($action eq "mapping") {
    exit(UserMapping(@ARGV));
}
else {
    die("*** $0:\n".
	"    Do not know what to do with '$action'!\n");
}
exit(0);

#
# Add entry (or update password) for a user.
#
sub AddWikiUser(@)
{
    usage()
	if (@_ != 3);

    my ($user, $wikiname, $passwd) = @_;

    chdir("$WIKIUSERDIR") or
	fatal("Could not chdir to $WIKIUSERDIR");

    #
    # If the password file does not have the entry, just tack it onto
    # the end of the file. Otherwise we have to get fancier so we 
    # change the password atomically. It appears that the TWiki code
    # does not lock the password file when it makes it own changes! 
    #
    if (system("egrep -q -s '^${wikiname}:' $WIKIPASSWD")) {
	print "Adding $user to $WIKIPASSWD\n"
	    if ($debug);
	
	open(PWD, ">> $WIKIPASSWD") or
	    fatal("Could not open $WIKIPASSWD for appending");
	print PWD "${wikiname}:${passwd}\n";
	print PWD "${user}:${passwd}\n";
	close(PWD);

	#
	# Add to the user map. 
	#
	dbmopen(%MAPDB, $USERMAPDB, 0644) or
	    fatal("Cannot open $USERMAPDB: $!");

	$MAPDB{$user} = $wikiname;

	# Write the DB back out.
	dbmclose(%MAPDB);	
    }
    else {
	#
	# Open up the file and read it, creating a new version.
	#
	my $data = "";
	
	print "Updating $wikiname in $WIKIPASSWD\n"
	    if ($debug);
	
	open(PWD, "$WIKIPASSWD") or
	    fatal("Could not open $WIKIPASSWD for reading");
	
	while (<PWD>) {
	    if ($_ =~ /^${wikiname}:.*$/) {
		$data .= "${wikiname}:${passwd}\n";
	    }
  	    elsif ($_ =~ /^${user}:.*$/) {
	        $data .= "${user}:${passwd}\n";
	    }
	    else {
		$data .= $_;
	    }
	}
	close(PWD);

	open(PWD, "> ${WIKIPASSWD}.$$") or
	    fatal("Could not open ${WIKIPASSWD}.$$ for writing");
	print PWD $data;
	close(PWD);

	system("chown ${WIKIUSER}:${WIKIGROUP} ${WIKIPASSWD}.$$") == 0
	    or fatal("Could not chown ${WIKIPASSWD}.$$");

	rename("${WIKIPASSWD}.$$", $WIKIPASSWD)
	    or fatal("Could not rename ${WIKIPASSWD}.$$");
    }

    #
    # Create the stub topic file for the user if it does not exist.
    #
    return 0
	if (-e "${WIKIUSERDIR}/${wikiname}.txt");

    print "Creating ${WIKIUSERDIR}/${wikiname}.txt\n"
	if ($debug);
    
    system("cp -p ${USERTEMPLATE} ${wikiname}.txt") == 0
	or fatal("Could not copy ${USERTEMPLATE} to ${wikiname}.txt");

    #
    # Set the initial groups list to the user.
    #
    open(PREFS, "${wikiname}.txt") or
	fatal("Could not open ${wikiname}.txt for reading");

    while (<PREFS>) {
	if ($_ =~ /^(.* Set ALLOWTOPIC.*)\r$/ ||
	    $_ =~ /^(.* Set ALLOWTOPIC.*)$/) {
	    $data .= $1 . "%MAINWEB%.${wikiname}\n";
	}
	else {
	    $data .= $_;
	}
    }
    close(PREFS);

    #
    # Now write the file out.
    #
    open(PREFS, "> ${wikiname}.txt") or
	fatal("Could not open ${wikiname}.txt for writing");
    print PREFS $data;
    close(PREFS);
    
    #
    # Check it in (locked).
    #
    CI("${wikiname}.txt", "AddWikiUser $user $wikiname") == 0
        or fatal("Could not ci ${wikiname}.txt");
    
    return 0;
}

#
# Delete entry for a user.
#
sub DelWikiUser(@)
{
    usage()
	if (@_ != 2);

    my ($user, $wikiuser) = @_;

    chdir("$WIKIUSERDIR") or
	fatal("Could not chdir to $WIKIUSERDIR");

    #
    # First, find groups the user is currently a member of, and remove.
    #
    my $currentgroups =
	`egrep -l -s 'GROUP = .*${wikiuser}.*' *Group.txt`;
    $currentgroups =~ s/Group.txt//g;

    if (!$?) {
	my @glist = split(/\s+/, $currentgroups);
	    
	print "Current groups for $wikiuser are @glist\n"
	    if ($debug);

	foreach my $group (@glist) {
	    my $wikiname = "${group}Group";
	    my $data     = "";

	    print "Removing $wikiuser from $group\n";

	    open(GRP, "${wikiname}.txt") or
		fatal("DelWikiUser: ".
		      "Could not open ${wikiname}.txt (read)\n");

	    while (<GRP>) {
		if ($_ =~ /^(\s*\*\s*Set\s*GROUP\s*=\s*)(.*)$/) {
		    my @tokens = split(/,\s*/, $2);

		    # Cut out the user.
		    @tokens = grep {$_ ne $wikiuser} @tokens;

		    # And reform the group list.
		    $data .= $1 . join(", ", @tokens) . "\n";
		}
		else {
		    $data .= $_;
		}
	    }
	    close(GRP);

	    #
	    # Now write the new text back out to the file.
	    #
	    open(GRP, ">${wikiname}.txt") or
		fatal("DelWikiUser: ".
		      "Could not open ${wikiname}.txt (write)\n");
	    print GRP $data;
	    close(GRP);
	    
	    #
	    # Check it in (locked).
	    #
	    CI("${wikiname}.txt", "DelWikiUser $user $wikiuser") == 0
		or fatal("Could not ci ${wikiname}.txt");
	}
    }
    
    #
    # Remove user from the password file.
    #
    print "Removing $user from $WIKIPASSWD\n"
	if ($debug);
	
    open(PWD, "$WIKIPASSWD") or
	fatal("Could not open $WIKIPASSWD for reading");
	
    while (<PWD>) {
	if ($_ =~ /^${wikiuser}:.*$/ ||
	    $_ =~ /^${user}:.*$/) {
	    next;
	}
	else {
	    $data .= $_;
	}
    }
    close(PWD);

    open(PWD, "> ${WIKIPASSWD}.$$") or
	fatal("Could not open ${WIKIPASSWD}.$$ for writing");
    print PWD $data;
    close(PWD);

    system("chown ${WIKIUSER}:${WIKIGROUP} ${WIKIPASSWD}.$$") == 0
	or fatal("Could not chown ${WIKIPASSWD}.$$");

    rename("${WIKIPASSWD}.$$", $WIKIPASSWD)
	or fatal("Could not rename ${WIKIPASSWD}.$$");

    #
    # Delete from the user map. 
    #
    dbmopen(%MAPDB, $USERMAPDB, 0644) or
        fatal("Cannot open $USERMAPDB: $!");

    delete($MAPDB{$user});

    # Write the DB back out.
    dbmclose(%MAPDB);	

    #
    # Archive the user file. Removing users is kinda bogus cause I do not
    # attempt to remove any other files the user created. We could figure
    # this out of course, but not bothering right now.
    #
    if (! -e $WIKIARCHIVE) {
	mkdir($WIKIARCHIVE, 0775) or
	    fatal("Could not mkdir $WIKIDATADIR!");

	system("chown ${WIKIUSER}:${WIKIGROUP} $WIKIARCHIVE") == 0
	    or fatal("Could not chown $WIKIARCHIVE");
    }
    my $wikifile = "${wikiuser}.txt";    
    my $oldname  = "${wikifile},v";
    my $newname  = "${oldname}-" . TBDateTimeFSSafe();

    print "Renaming $oldname to $WIKIARCHIVE/$newname\n"
	if ($debug);

    rename($oldname, "$WIKIARCHIVE/$newname")
	or fatal("Could not rename $oldname to $WIKIARCHIVE/$newname");
    unlink($wikifile)
	or fatal("Could not remove $wikifile");

    return 0;
}

#
# Create a "web" for a new project.
#
sub AddWikiProject(@)
{
    my $data = "";
    
    usage()
	if (@_ != 2);

    my ($pid, $wikiname) = @_;

    chdir("$WIKIDATADIR") or
	fatal("Could not chdir to $WIKIDATADIR");

    # Skip if already there. 
    return 0
	if (-d $wikiname);

    print "Creating ${WIKIDATADIR}/${wikiname}\n"
	if ($debug);

    mkdir("${WIKIDATADIR}/${wikiname}", 0775) or
	fatal("Could not mkdir $WIKIDATADIR/$wikiname!");
    
    system("chown ${WIKIUSER}:${WIKIGROUP} $WIKIDATADIR/$wikiname") == 0
	or fatal("Could not chown $WIKIDATADIR/$wikiname!");

    #
    # Copy the _default directory to the new WEB name. This "creates"
    # the new wiki web. 
    #
    system("$TAR cf - -C _default . | $TAR xf - -C $wikiname") == 0
	or fatal("Could not copy _default to $wikiname");

    system("cp -p ${HOMETEMPLATE} ${wikiname}/WebHome.txt") == 0
	or fatal("Could not copy ${HOMETEMPLATE} to ${wikiname}/WebHome.txt");

    #
    # We also need a group for this project to restrict who can access it.
    #
    AddWikiGroup($pid, "${wikiname}Group", "${wikiname}Group");

    #
    # And another group for the project leaders and group roots, who are
    # allowed to change the preferences for the web.
    #
    AddWikiGroup("${pid}Root", "${wikiname}RootGroup", "${wikiname}Group");

    #
    # Now finish up in the new web directory.
    # 
    chdir("$WIKIDATADIR/$wikiname") or
	fatal("Could not chdir to $WIKIDATADIR/$wikiname");

    #
    # Remove all the RCS control files. They are old and pointless.
    # Create new ones instead. 
    #
    system("rm -f *.txt,v") == 0 or
	fatal("Could not remove old RCS control files!");

    system("chown ${WIKIUSER}:${WIKIGROUP} *.txt")
	== 0 or fatal("Could not chown *.txt to ${WIKIUSER}:${WIKIGROUP}");

    system("sudo -u nobody ci -u '-mInitial Revision by wikiproxy:\n".
	   "AddWikiProject $pid $wikiname' ".
	   "      '-t-Initial Revision by wikiproxy' *.txt") == 0
        or fatal("Could not create new RCS control files.");

    #
    # Now edit the web preferences file to set who is allowed to access
    # this web. Basically, only people in the project (wiki group) and
    # the admin group.
    #
    open(PREFS, "WebPreferences.txt") or
	fatal("Could not open WebPreferences.txt for reading");

    while (<PREFS>) {
	if ($_ =~ /^.* Set (ALLOWWEB.*) = \r$/ ||
	    $_ =~ /^.* Set (ALLOWWEB.*) = $/) {
	    $data .= "\t\t* Set $1 = " .
		"%MAINWEB%.${wikiname}Group, %MAINWEB%.TWikiAdminGroup\n";
	}
	elsif ($_ =~ /^(.* Set ALLOWTOPIC.*)\r$/ ||
	       $_ =~ /^(.* Set ALLOWTOPIC.*)$/) {
	    $data .= $1 . "%MAINWEB%.${wikiname}RootGroup\n";
	}
	elsif ($_ =~ /^(.* Set NOSEARCHALL.*)\r$/ ||
	       $_ =~ /^(.* Set NOSEARCHALL.*)$/) {
	    $data .= $1 . "on\n";
	}
	else {
	    $data .= $_;
	}
    }
    close(PREFS);

    #
    # Now write the file out and check it in.
    #
    open(PREFS, ">WebPreferences.txt") or
	fatal("Could not open WebPreferences.txt for writing");
    print PREFS $data;
    close(PREFS);

    CI("WebPreferences.txt", "AddWikiProject $pid $wikiname") == 0
        or fatal("Could not ci WebPreferences.txt");

    return 0;
}

#
# Create a wiki group. 
#
sub AddWikiGroup(@)
{
    usage()
	if (@_ < 2 || @_ > 3);

    my ($group, $wikiname, $allowed) = @_;
    $allowed = $wikiname
	if (!defined($allowed));

    chdir("$WIKIGROUPDIR") or
	fatal("Could not chdir to $WIKIGROUPDIR");

    # Skip if already there. 
    return 0
	if (-e "${wikiname}.txt");

    print "Creating ${WIKIGROUPDIR}/${wikiname}.txt\n"
	if ($debug);

    open(GRP, "> ${wikiname}.txt") or
	fatal("Could not open ${WIKIGROUPDIR}/${wikiname}.txt for writing");

    print GRP "*Project/Group Members for ${wikiname}*\n";
    print GRP "\n";
    print GRP "\t* Set GROUP = \n";
    print GRP "\t* Set ALLOWTOPICVIEW = %MAINWEB%.TWikiAdminGroup, ".
	"%MAINWEB%.${allowed}\n";
    print GRP "\t* Set ALLOWTOPICCHANGE = %MAINWEB%.TWikiAdminGroup\n";
    print GRP "\t* Set ALLOWTOPICRENAME = %MAINWEB%.TWikiAdminGroup\n";
    print GRP "\n";
    close(GRP);

    #
    # Check it in (locked).
    #
    CI("${wikiname}.txt", "AddWikiGroup $group $wikiname") == 0
        or fatal("Could not ci ${wikiname}.txt");

    return 0;
}

#
# Fix a wiki project.
#
sub FixWikiProject(@)
{
    usage()
	if (@_ != 2);

    my ($pid, $wikiname) = @_;

    chdir("$WIKIDATADIR/$wikiname") or
	fatal("Could not chdir to $WIKIDATADIR/$wikiname");

    open(PREFS, "$WIKIDATADIR/_default/WebPreferences.txt") or
	fatal("Could not open WebPreferences.txt for reading");

    while (<PREFS>) {
	if ($_ =~ /^.* Set (ALLOWWEB.*) = \r$/ ||
	    $_ =~ /^.* Set (ALLOWWEB.*) = $/) {
	    $data .= "\t\t* Set $1 = " .
		"%MAINWEB%.${wikiname}Group , %MAINWEB%.TWikiAdminGroup\n";
	}
	else {
	    $data .= $_;
	}
    }
    close(PREFS);

    #
    # Now write the file out and check it in.
    #
    open(PREFS, ">WebPreferences.txt") or
	fatal("Could not open WebPreferences.txt for writing");
    print PREFS $data;
    close(PREFS);

    CI("WebPreferences.txt", "AddWikiProject $pid $wikiname") == 0
        or fatal("Could not ci WebPreferences.txt");

    return 0;
}

#
# Fix a wiki user home page,
#
sub FixWikiUser(@)
{
    usage()
	if (@_ != 2);

    my ($user, $wikiname, $passwd) = @_;

    chdir("$WIKIUSERDIR") or
	fatal("Could not chdir to $WIKIUSERDIR");

    if (! system("egrep -q -s ".
		 "'<!-- Please leave this line here' ${wikiname}.txt")) {
	return 0;
    }

    system("cp -p ${USERTEMPLATE} ${wikiname}.txt") == 0
	or fatal("Could not copy ${USERTEMPLATE} to ${wikiname}.txt");

    #
    # Set the initial groups list to the user.
    #
    open(PREFS, "${wikiname}.txt") or
	fatal("Could not open ${wikiname}.txt for reading");

    while (<PREFS>) {
	if ($_ =~ /^(.* Set ALLOWTOPIC.*)\r$/ ||
	    $_ =~ /^(.* Set ALLOWTOPIC.*)$/) {
	    $data .= $1 . "%MAINWEB%.${wikiname}\n";
	}
	else {
	    $data .= $_;
	}
    }
    close(PREFS);

    #
    # Now write the file out.
    #
    open(PREFS, "> ${wikiname}.txt") or
	fatal("Could not open ${wikiname}.txt for writing");
    print PREFS $data;
    close(PREFS);
    
    #
    # Check it in (locked).
    #
    CI("${wikiname}.txt", "FixWikiUser $user $wikiname") == 0
        or fatal("Could not ci ${wikiname}.txt");
    
    return 0;
}

#
# Fix a wiki group. 
#
sub FixWikiGroup(@)
{
    usage()
	if (@_ != 3);

    my ($group, $wikiname, $allowed) = @_;

    chdir("$WIKIGROUPDIR") or
	fatal("Could not chdir to $WIKIGROUPDIR");

    return 0
	if (! -e "${wikiname}.txt");

    if (system("egrep -q -s 'ALLOWTOPICVIEW' ${wikiname}.txt")) {
	my @lines = ();
	
	print "Fixing ${WIKIGROUPDIR}/${wikiname}.txt\n";
	
	open(GRP, "< ${wikiname}.txt") or
	    fatal("Could not open ${WIKIGROUPDIR}/${wikiname}.txt");
	while (<GRP>) {
	    push(@lines, $_);

	    if ($_ =~ /ALLOWTOPICCHANGE/) {
		push(@lines,
		     "\t* Set ALLOWTOPICVIEW = %MAINWEB%.TWikiAdminGroup, ".
		     "%MAINWEB%.${allowed}\n");
	    }
	}
	close(GRP);

	open(GRP, "> ${wikiname}.txt") or
	    fatal("Could not open ${WIKIGROUPDIR}/${wikiname}.txt");
	
	foreach my $line (@lines) {
	    print GRP $line
	}
	close(GRP);

	#
	# Check it in (locked).
	#
	CI("${wikiname}.txt", "FixWikiGroup $group $wikiname") == 0
	    or fatal("Could not ci ${wikiname}.txt");
    }
    return 0;
}

#
# Set the wiki groups for a user.
#
sub SetWikiGroups(@)
{
    usage()
	if (@_ < 1);

    my $wikiuser  = shift(@_);
    my @groups    = @_;
    my %grouphash = ();
    
    foreach my $group (@groups) {
	$grouphash{$group} = $group;
    }

    chdir("$WIKIGROUPDIR") or
	fatal("Could not chdir to $WIKIGROUPDIR");

    #
    # First, find groups the user is currently a member of, and remove
    # from those groups not supposed to be in.
    #
    my $currentgroups =
	`egrep -l -s 'GROUP = .*${wikiuser}.*' *Group.txt`;
    $currentgroups =~ s/Group.txt//g;

    if (!$?) {
	my @glist = split(/\s+/, $currentgroups);
	    
	print "Current groups for $wikiuser are @glist\n"
	    if ($debug);

	foreach my $group (@glist) {
	    my $wikiname = "${group}Group";
	    my $data     = "";

	    next
		if (exists($grouphash{$group}));
	    
	    print "Removing $wikiuser from $group\n";

	    open(GRP, "${wikiname}.txt") or
		fatal("SetWikiGroups: ".
		      "Could not open ${wikiname}.txt (read)\n");

	    while (<GRP>) {
		if ($_ =~ /^(\s*\*\s*Set\s*GROUP\s*=\s*)(.*)$/) {
		    my @tokens = split(/,\s*/, $2);

		    # Cut out the user.
		    @tokens = grep {$_ ne $wikiuser} @tokens;

		    # And reform the group list.
		    $data .= $1 . join(", ", @tokens) . "\n";
		}
		else {
		    $data .= $_;
		}
	    }
	    close(GRP);

	    #
	    # Now write the new text back out to the file.
	    #
	    open(GRP, ">${wikiname}.txt") or
		fatal("SetWikiGroups: ".
		      "Could not open ${wikiname}.txt (write)\n");
	    print GRP $data;
	    close(GRP);
	    
	    #
	    # Check it in (locked).
	    #
	    CI("${wikiname}.txt", "SetWikiGroups $wikiuser @groups") == 0
		or fatal("Could not ci ${wikiname}.txt");
	}
    }

    #
    # Now add user to other groups.
    #
    foreach my $group (@groups) {
	my $wikiname = "${group}Group";
	my $data     = "";
	    
	# Error if no such wikigroup
	if (! -e "${wikiname}.txt") {
	    print "No group file for wiki group $wikiname! Skipping ...\n";
	    next;
	}

	next
	    if (!system("egrep -q -s 'GROUP = .*${wikiuser}.*' ".
			"${wikiname}.txt\n"));
	    
	print "Adding $wikiuser to wikigroup ${wikiname}.txt\n";

	open(GRP, "${wikiname}.txt") or
	    fatal("SetWikiGroups: Could not open ${wikiname}.txt (read)\n");

	while (<GRP>) {
	    if ($_ =~ /^(\s*\*\s*Set\s*GROUP\s*=)\s*$/) {
		# First name in the group.
		$data .= $1 . " $wikiuser\n";
	    }
	    elsif ($_ =~ /^(\s*\*\s*Set\s*GROUP\s*=\s*)(.*)$/) {
		$data .= $1 . "${2}, $wikiuser\n";
	    }
	    else {
		$data .= $_;
	    }
	}
	close(GRP);

	#
	# No write the new text back out to the file.
	#
	open(GRP, ">${wikiname}.txt") or
	    fatal("SetWikiGroups: Could not open ${wikiname}.txt (write)\n");
	print GRP $data;
	close(GRP);

	#
	# Check it in (locked).
	#
	CI("${wikiname}.txt", "SetWikiGroups $wikiuser @groups") == 0
	    or fatal("Could not ci ${wikiname}.txt");
    }

    #
    # And finally, change the home page for the user. This is basically
    # to avoid searching the entire wiki for the membership.
    #
    $data = "";
    
    open(PREFS, "${wikiuser}.txt") or
	fatal("Could not open ${wikiuser}.txt for reading");

    while (<PREFS>) {
	if ($_ =~ /^__These are your Projects.*$/) {
	    $data .= "__These are your Projects:__\n";

	    #
	    # Add a list of just the Projects. 
	    #
	    foreach my $group (@groups) {
		if (-d "../$group") {
		    $data .= "\t* [[${group}.WebHome][${group}]]\n";
		}
	    }

	    #
	    # And skip the current ones.
	    #
	    while (<PREFS>) {
		last
		    if ($_ =~ /^\s$/);
	    }
	    $data .= "\n";
	}
	else {
	    $data .= $_;
	}
    }
    close(PREFS);

    #
    # Now write the file out.
    #
    open(PREFS, "> ${wikiuser}.txt") or
	fatal("Could not open ${wikiuser}.txt for writing");
    print PREFS $data;
    close(PREFS);
    
    #
    # Check it in (locked).
    #
    CI("${wikiuser}.txt", "SetWikiGroups $wikiuser @groups") == 0 
        or fatal("Could not ci ${wikiuser}.txt");
    
    return 0;
}

sub CI($$) {
    my ($file, $comment) = @_;

    system("chown ${WIKIUSER}:${WIKIGROUP} $file")
	== 0 or fatal("Could not chown $file to ${WIKIUSER}:${WIKIGROUP}");

    my $locking = ($FBSD_VERSION == 4 ? "-l" : "-u");

    my $cmd = "sudo -u nobody ci -u '-mRevision by wikiproxy:\n$comment'".
	"      '-t-Revision by wikiproxy' $file 2>&1";
    my $output = `$cmd`;
    if ($? && $output =~ /no lock set by/ ) {
	my $unlockcmd = "rcs -u -M $file";
	print "'$unlockcmd'\n"
	    if ($debug);
	my $output = `$unlockcmd`;
	return -1
	    if ($?);
	my $lockcmd = "rcs -l $file";
	print "'$lockcmd'\n"
	    if ($debug);
	system("sudo -u nobody $lockcmd");
	return -1
	    if ($?);
        return system($cmd);	
    }
    return $? >> 8;
}

#
# Backdoor Login
#
sub WikixLogin(@)
{
    usage()
	if (@_ != 2);

    my ($user, $secretkey) = @_;

    #
    # Create a little file that holds the secret key, named by the user.
    # The TWiki login script will check for the existence of this file,
    # and use the key inside it to match against the key provided by the
    # client browser.
    #
    open(KEY, ">${COOKIEDIR}/$user") or
	fatal("Could not open ${COOKIEDIR}/$user for writing!");

    print KEY "$secretkey\n";
    print KEY time() . "\n";
    close(KEY);
    return 0;
}
     
#
# Remap user.
#
sub WikiRemap(@)
{
    usage()
	if (@_ != 2);

    my ($user, $wikiname) = @_;

    #
    # Remap user in the user map. 
    #
    dbmopen(%MAPDB, $USERMAPDB, 0644) or
	fatal("Cannot open $USERMAPDB: $!");

    print "Current mapping is ". $MAPDB{$user} . "\n";

    $MAPDB{$user} = $wikiname;

    # Write the DB back out.
    dbmclose(%MAPDB);	

    return 0;
}

#
# Get user mapping
#
sub UserMapping(@)
{
    usage()
	if (@_ != 1);

    my ($user) = @_;

    dbmopen(%MAPDB, $USERMAPDB, 0644) or
	fatal("Cannot open $USERMAPDB: $!");

    print "Current mapping is ". $MAPDB{$user} . "\n";

    # Write the DB back out.
    dbmclose(%MAPDB);	

    return 0;
}
    
sub fatal($)
{
    my($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}
