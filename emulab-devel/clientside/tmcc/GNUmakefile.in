#
# Copyright (c) 2000-2020 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
SRCDIR		= @srcdir@
TESTBED_SRCDIR	= @top_srcdir@
OBJDIR		= @top_builddir@
SUBDIR		= $(subst $(TESTBED_SRCDIR)/,,$(SRCDIR))
SYSTEM	       := $(shell $(SRCDIR)/osstuff.sh -o)

include $(OBJDIR)/Makeconf

all:	fullclient client
fullclient: tmcc
client: tmcc tmcc-nossl findif dostype tdd

# for subboss we use the full SSL tmcc
subboss: tmcc findif dostype

# For VPATH.
MOSTLY_SRCDIRS = ${TESTBED_LIBSRCDIR}/libtb \
		 ${TESTBED_LIBSRCDIR}/tmcd

include $(TESTBED_SRCDIR)/GNUmakerules

CFLAGS	+= -O -g -Wall -DUDP \
		-I${OBJDIR} -I/usr/local/include \
		-I${TESTBED_LIBSRCDIR}/libtb \
		-I${TESTBED_LIBSRCDIR}/tmcd \
		-L/usr/local/lib
ifeq ($(SYSTEM),Cygwin)
CFLAGS	+=	-L/usr/lib/w32api
endif

TMLIBS	 = ${TESTBED_LIBOBJDIR}/tmcd/libtmcc.a
TMLIBS  += ${TESTBED_LIBOBJDIR}/libtb/libtb.a
LDFLAGS += $(LDSTATIC)

#
# For SSL enabled tmcd/tmcc
#
CFLAGS	+= -DETCDIR='"$(INSTALL_ETCDIR)"'
SSLFLAGS = -DWITHSSL 
TMLIBS	+= -lssl -lcrypto -lz

ifeq ($(SYSTEM),Linux)
ifneq ($(LDSTATIC),)
NOKERB := $(shell nm /usr/lib/libssl.a | grep -q krb; echo $$?)
else
NOKERB := 1
endif
ifeq ($(NOKERB),0)
CFLAGS   += `/usr/kerberos/bin/krb5-config --cflags`
TMLIBS   += `/usr/kerberos/bin/krb5-config --libs krb5`
ifneq ($(wildcard /usr/lib/libkrb5support.a),)
TMLIBS     += -lkrb5support
endif
endif
TMLIBS  += -ldl
endif

#
# Take care of historic naming fubars:
#	Redhat 7.x ->  linux
#	Redhat 9.0 ->  linux9
#	Fedora 4/6 ->  fedora
#	Stargate 1  -> linux-sg
#	FreeBSD 4.x -> freebsd
#	Windows XP  -> cygwinxp
#
MDSUBDIR  := $(shell $(SRCDIR)/osstuff.sh -t)
MDREL     := $(shell $(SRCDIR)/osstuff.sh -r)

ifeq ($(SYSTEM),Linux)
ifeq ($(MDSUBDIR),redhat7)
MDSUBDIR  = linux
endif
ifeq ($(MDSUBDIR),redhat9)
MDSUBDIR  = linux9
endif
ifeq ($(MDSUBDIR),PPC64leUbuntu20)
MDSUBDIR  = ubuntu20-ppc64le
endif
ifeq ($(MDSUBDIR),PPC64leUbuntu18)
MDSUBDIR  = ubuntu18-ppc64le
endif
ifeq ($(MDSUBDIR),MoonshotUbuntu20)
MDSUBDIR  = ubuntu20-ms
endif
ifeq ($(MDSUBDIR),MoonshotUbuntu18)
MDSUBDIR  = ubuntu18-ms
endif
ifeq ($(MDSUBDIR),MoonshotUbuntu16)
MDSUBDIR  = ubuntu16-ms
endif
ifeq ($(MDSUBDIR),Moonshot)
MDSUBDIR  = linux-ms
endif
ifeq ($(MDSUBDIR),ubuntu12)
MDSUBDIR  = ubuntu11
endif
# XXX lets try this
ifeq ($(MDSUBDIR),debian8)
MDSUBDIR  = ubuntu15
endif
ifeq ($(MDSUBDIR),debian9)
MDSUBDIR  = ubuntu16
endif
# Just point debian sid to the latest Ubuntu supported and hope for
# the best.
ifeq ($(MDSUBDIR),debianS)
MDSUBDIR  = ubuntu16
endif
# We don't want to have a dir named "arch"; that would be confusing.
# Hence archlinux.
ifeq ($(MDSUBDIR),arch)
MDSUBDIR  = archlinux
endif
ifeq ($(findstring fedora,$(MDSUBDIR)),fedora)
ifeq ($(MDREL),15)
MDSUBDIR  = fedora15
else
MDSUBDIR  = fedora
endif
endif
ifeq ($(MDSUBDIR),centos5)
MDSUBDIR  = fedora
endif
ifeq ($(MDSUBDIR),centos7)
MDSUBDIR  = centos7
endif
ifeq ($(MDSUBDIR),centos8)
MDSUBDIR  = centos8
endif
ifeq ($(MDSUBDIR),stargate1)
MDSUBDIR  = linux-sg
endif
endif

ifeq ($(SYSTEM),FreeBSD)
ifeq ($(MDSUBDIR),freebsd4)
MDSUBDIR  = freebsd
endif
ifeq ($(MDSUBDIR),freebsd8)
MDSUBDIR  = freebsd7
endif
endif

ifeq ($(SYSTEM),Cygwin)
TMLIBS  += -liphlpapi
TMSLIBS   = $(TMLIBS)
# Cygwin on  Windows XP (a.k.a. NT 5.1) - resembles the Linux case.
ifeq ($(MDREL),5.1)
MDSUBDIR  = cygwinxp
else
# Cygwin on  Windows 7 (a.k.a. NT 6.1) - resembles the Linux case.
ifeq ($(MDREL),6.1)
MDSUBDIR  = cygwinseven
endif
endif
endif

tmcc: tmcc.c tmcd.h $(TPMLIB) 
	$(CC) $(CFLAGS) $(SSLFLAGS) $(LDSTATIC) -g -o tmcc \
		$< $(LFLAGS) $(TMLIBS)

tmcc-shared: tmcc.c tmcd.h $(TPMLIB) 
	$(CC) $(CFLAGS) $(SSLFLAGS) -g -o tmcc $< $(LFLAGS) $(TMLIBS)

tmcc-nossl-debug: tmcc.c tmcd.h
	$(CC) $(CFLAGS) $(LDSTATIC) -g -o $@ $< $(LFLAGS) $(TMSLIBS)

findif-debug: findif.o
	$(CC) $(CFLAGS) -g -o $@ findif.o $(LFLAGS) $(LDSTATIC)

dostype-debug: dostype.o
	$(CC) $(CFLAGS) -g -o $@ dostype.o $(LFLAGS)

tdd-debug: tdd.o
	$(CC) $(CFLAGS) -g -o $@ tdd.o $(LFLAGS) $(LDSTATIC)

post-install:
install:
boss-install:	$(INSTALL_SBINDIR)/findif \
		elabinelabfiles

control-install: tmcc findif
	@$(MAKE) -C freebsd control-install

fs-install: tmcc findif
	@$(MAKE) -C freebsd fs-install

subboss-install: subboss
	@$(MAKE) -C $(MDSUBDIR) subboss-install

client-install: client
	@$(MAKE) -C $(MDSUBDIR) install

mfs: client

mfs-install: mfs
	@$(MAKE) -C $(MDSUBDIR) mfs-install

frisbee-mfs: client

frisbee-mfs-install: frisbee-mfs
	@$(MAKE) -C $(MDSUBDIR) frisbee-mfs-install

onie-dongle: tmcc tmcc-nossl
onie-dongle-install: onie-dongle
	@$(MAKE) -C onie onie-dongle-install

newnode-mfs: client

newnode-mfs-install: newnode-mfs
	@$(MAKE) -C $(MDSUBDIR) newnode-mfs-install

mobile-control-install:
	$(MAKE) -C common mobile-control-install

#
# XXX argh!  assumes FreeBSD inner boss
#
elabinelabfiles:
	mkdir -p $(INSTALL_ETCDIR)
	$(INSTALL_PROGRAM) $(SRCDIR)/common/config/rc.mkelab \
			   $(INSTALL_ETCDIR)/rc.mkelab
	$(INSTALL_PROGRAM) $(SRCDIR)/freebsd/mkextrafs.pl \
			   $(INSTALL_ETCDIR)/mkextrafs.pl

#
# Here so that the event system libraries, and libraries they depend upon,
# can get made.
#
${TESTBED_LIBOBJDIR}/tmcd/%:
	cd ${TESTBED_LIBOBJDIR}/tmcd && gmake $<
${TESTBED_LIBOBJDIR}/libtb/%:
	cd ${TESTBED_LIBOBJDIR}/tbdb && gmake $<

clean:	subdir-clean
	rm -f *.o core tmcd tmcc tmcc-nossl findif dostype tdd *-debug

subdir-clean:
	@$(MAKE) -C $(MDSUBDIR) clean
