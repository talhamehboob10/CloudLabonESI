#!/bin/sh
#
# Copyright (c) 2000-2018 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

# The device is always the same in ONIE.
DISKDEV=/dev/sda

# Special grub env file for our flipping.
EMULABENV=/mnt/onie-boot/emulabenv

# Marker file for MLNX reload. See below.
MLNXRELOAD=/mnt/onie-boot/mlnxreload

if [ -r /etc/emulab/paths.sh ]; then
	. /etc/emulab/paths.sh
else
	BINDIR=/etc/testbed
	BOOTDIR=/etc/testbed
	ETCDIR=/etc/testbed
fi

PLATFORM=`onie-sysinfo -b`
TMCC="$BINDIR/tmcc"

# Make sure this exists.
if [ ! -s $EMULABENV ]; then
    grub-editenv $EMULABENV create
    rc=$?
    if [ $rc -ne 0 ]; then
	echo "Failed to create new grub env"
	exit 1
    fi
fi

#
# Extract a variable of interest from the VAR=VALUE string and return value.
# If variable does not exist, return the given default (if provided).
#
getvar() {
    local _VAR=$1
    local _STR=$2
    local _DFL=$3

    for _kv in $_STR; do
	_k=${_kv%%=*}
	if [ -n "$_k" -a "$_k" = "$_VAR" ]; then
	    echo "${_kv##*=}"
	    return 0
	fi
    done
    echo "$_DFL"
    return 0
}

get_value()
{
    local data=$1
    local key=$2

    echo `getvar $key "$data"`
    return 0
}

#
# Wait for bootinfo to send us a command.
#
waitmode()
{
    echo "Waiting for something to do"

    #
    # We use bootinfoclient. If we get a reboot command do that,
    # otherwise we just return to query bootwhat again.
    #
    local WHAT=`$BINDIR/bootinfoclient -s boss`
    rc=$?
    if [ $rc -ne 0 ]; then
	echo "bootinfoclient returned $rc."
	# Wait so we do not go into a tight loop trying to query. No rush.
	sleep 10
	return 1
    fi
    echo "bootinfo said to $WHAT"
    
    # We reboot if told.
    if [ "$WHAT" = "reboot" ]; then
	/sbin/reboot
	exit 0
    fi
    # Otherwise just return to query again.
    return 0
}

#
# Reload the flash with a NOS. 
#
reload_nos()
{
    echo "Setting up to reload the NOS"

    # Tell boss we are booting into reload MFS.
    $TMCC state BOOTING

    $BINDIR/rc.reload
    rc=$?
    if [ $rc -ne 0 ]; then
	echo "Dropping into the shell after failed reload"
	exit 1
    fi
    return 0
}

#
# Update the grubenv to tell grub to boot the NOS.
#
boot_nos()
{
    echo "Setting up to boot the NOS"

    grub-editenv $EMULABENV set bootnos=yes
    rc=$?
    if [ $rc -ne 0 ]; then
	echo "Failed to update grub env with bootnos=yes"
	return 1
    fi
    # Tell boss we are booting into the NOS.
    $TMCC state BOOTING
    sleep 5
    
    echo "Rebooting into the NOS"
    /sbin/reboot
    exit 0;
}

#
# Special case; we just did a reload on an MLNX switch that did a kexec
# did the install and then rebooted. So we get here and this file exists
# (see rc.reload). Remove the file, send the RELOADDONE event and keep
# going.
#
if [ "$PLATFORM" = "mlnx_x86" ]; then
    if [ -e $MLNXRELOAD ]; then
	/bin/rm -f $MLNXRELOAD

	echo "sending RELOADDONE"
	$TMCC state RELOADDONE
	echo "waiting a bit for server to react"
	sleep 15
    fi
fi

#
# We might need to wait for something to do, so loop.
#
while : ; do
    # Ask what we are supposed to boot.
    BOOTWHAT=`$TMCC bootwhat`
    rc=$?
    if [ $rc -ne 0 -o "$BOOTWHAT" = "" ]; then
	echo "Failed to get bootwhat, status $rc. Waiting a bit."
	sleep 10
	continue
    fi

    TYPE=`get_value "$BOOTWHAT" TYPE`
    #
    # Look to see if we are in wait mode. 
    #
    if [ $TYPE -eq 4 ]; then
	waitmode
	# Just loop to query again.
	continue;
    fi
    
    WHAT=`get_value "$BOOTWHAT" WHAT`
    case $WHAT in
	1)
	    boot_nos
	    # Does not return
	    exit 1
	    ;;
	*onie_reload)
	    reload_nos
	    # We loop again to see what we do next. If we got here by the
	    # reload daemon, we are probably going into waitmode.
	    ;;
	*onie_admin)
	    echo "Dropping into admin mode"
	    # Tell boss we are running
	    $TMCC state ISUP
	    exit 0
	    ;;
	*)
	    echo "Bad BOOTWHAT: $BOOTWHAT";
	    echo "Dropping into shell"
	    exit 1
	    ;;
    esac
done
