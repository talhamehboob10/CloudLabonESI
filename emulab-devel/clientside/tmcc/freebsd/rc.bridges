#!/usr/bin/perl -w
#
# Copyright (c) 2010 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;

#
# Set up the bridges.
#
sub usage()
{
    print "Usage: " .
	scriptname() . " [-j vnodeid] boot|shutdown|reconfig|reset\n";
    exit(1);
}
my $optlist = "j:";
my $action  = "boot";
my $vnodeid;

# Turn off line buffering on output
$| = 1;

# Drag in path stuff so we can find emulab stuff.
BEGIN { require "/etc/emulab/paths.pm"; import emulabpaths; }

# Only root.
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be root to run this script!\n");
}

#
# Load the OS independent support library. It will load the OS dependent
# library and initialize itself. 
# 
use libsetup;
use libtmcc;
use librc;

#
# Not all clients support this.
#
exit(0)
    if (MFS() || REMOTE() || JAILED() || INXENVM() || PLAB());

# Protos.
sub doboot();
sub doshutdown();
sub doreconfig();
sub docleanup();

# Parse command line.
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{'j'})) {
    $vnodeid = $options{'j'};
    libsetup_setvnodeid($vnodeid);
}
# Allow default above.
if (@ARGV) {
    $action = $ARGV[0];
}

my $FBSD_VERSION = `uname -v`;

if ($FBSD_VERSION =~ /FreeBSD ([0-9]).*/) {
    $FBSD_VERSION = int($1);
}
else {
    fatal("  Cannot determine OS version\n");
}

# Execute the action.
SWITCH: for ($action) {
    /^boot$/i && do {
	doboot();
	last SWITCH;
    };
    /^shutdown$/i && do {
	doshutdown();
	last SWITCH;
    };
    /^reconfig$/i && do {
	doreconfig();
	last SWITCH;
    };
    /^reset$/i && do {
	docleanup();
	last SWITCH;
    };
    fatal("Invalid action: $action\n");
}
exit(0);

#
# Boot Action.
#
sub doboot()
{
    my $upcmds       = "";
    my $downcmds     = "";
    my %bridges      = ();
    my @tmccresults;

    print STDOUT "Checking Testbed bridge configuration ... \n";

    if (tmcc(TMCCCMD_BRIDGES, undef, \@tmccresults) < 0) {
	fatal("Could not get bridge info from server!");
    }
    return 0
	if (! @tmccresults);

    foreach my $str (@tmccresults) {
	if ($str =~
	    /^BRIDGE IDX=(\d+) IFACE=(\w+) VNODE=([-\w]+) LINKNAME=([-\w]+)/){

	    my $idx   = $1;
	    my $iface = $2;
	    my $vnode = $3;
	    my $vname = $4;

	    if (! defined($bridges{"$idx"})) {
		$bridges{"$idx"} = {};
	    }
	    $bridges->{"$idx"}->{$iface} = [$iface, $vnode, $vname];
	}
	else {
	    warning("Bad bridge line: $str");
	}
    }

    open(BR, ">" . TMBRIDGES)
	or fatal("Could not open " . TMBRIDGES . ": $!");

    print BR "#!/bin/sh\n";
    print BR "# auto-generated by delaysetup.pm, DO NOT EDIT\n";
    print BR "if [ x\$1 = x ]; then action=enable; else action=\$1; fi\n";

    #
    # Shutdown: undo only the stuff that might get redone during
    # a reconfig.
    #
    print BR "if [ \"\$action\" = \"disable\" ]; then\n";

    # bridging
    if ($FBSD_VERSION <= 4) {
	print BR "    sysctl -w net.link.ether.bridge=0\n";
	print BR "    sysctl -w net.link.ether.bridge_ipfw=0\n";
    }
    elsif ($FBSD_VERSION <= 6) {
	print BR "    sysctl -w net.link.ether.bridge.enable=0\n";
	print BR "    sysctl -w net.link.ether.bridge.ipfw=0\n";
    }
    else {
	foreach my $bix (keys(%bridges)) {
	    my ($bix) = @$bridge;
	    print BR "    ifconfig bridge$bix down destroy\n";
	}
	print BR "    sysctl -w net.link.bridge.ipfw=0\n";
	print BR "    sysctl -w net.link.bridge.ipfw_arp=0\n";
    }
    print BR "    exit 0\n";
    print BR "fi\n";

    #
    # For FreeBSD 6 and beyond we must configure the number of kernel
    # mbuf clusters via sysctl, there is no param in the kernel anymore.
    #
    # We also load the bridge module.
    #
    if ($FBSD_VERSION >= 7) {
	my $MPATH = "/boot/kernel";

	print BR "if ! kldstat -q -m if_bridge >/dev/null 2>&1; then\n";
	print BR "    echo \"Loading bridge module...\"\n";
	print BR "    kldload $MPATH/if_bridge.ko || {\n";
	print BR "        echo '  *** Could not load bridge code'\n";
	print BR "        exit 1\n";
	print BR "    }\n";
	print BR "fi\n";
    }
    elsif ($FBSD_VERSION >= 6) {
	my $MPATH = "/boot/kernel";

	print BR "if ! sysctl net.link.ether.bridge >/dev/null 2>&1; then\n";
	print BR "    kldload $MPATH/bridge.ko || {\n";
	print BR "        echo \"Could not load bridge code\"\n";
	print BR "        exit 1\n";
	print BR "    }\n";
	print BR "fi\n";
    }

    #
    # Starting with FreeBSD 7, we use the new if_bridge module
    #
    if ($FBSD_VERSION >= 7) {
	# Turn these off before setting bridge_cfg.
	print BR "sysctl -w net.link.bridge.ipfw=0\n";
	print BR "sysctl -w net.link.bridge.ipfw_arp=0\n";

	foreach my $bix (keys(%bridges)) {
	    print BR "ifconfig bridge$bix create || {\n";
	    print BR "    echo \"Could not create bridge$bix\"\n";
	    print BR "    exit 1\n";
	    print BR "}\n";
	    print BR "ifconfig bridge$bix ";

	    foreach my $iface (keys($bridges->{$bix})) {
		print BR "addm $iface ";
	    }
	    print BR "up || {\n";
	    print BR "    echo \"Could not add $if1/$if2 to bridge$bix\"\n";
	    print BR "    ifconfig bridge$bix down destroy\n";
	    print BR "    exit 1\n";
	    print BR "}\n";
	}

	# Now turn them back on.
	print BR "sysctl -w net.link.bridge.ipfw=1\n";
	print BR "sysctl -w net.link.bridge.ipfw_arp=1\n";
    } else {
	# Turn these off before setting bridge_cfg.
	if ($FBSD_VERSION <= 4) {
	    print BR "sysctl -w net.link.ether.bridge=0\n";
	    print BR "sysctl -w net.link.ether.bridge_ipfw=0\n";
	    print BR "sysctl -w net.link.ether.bridge_cfg=";
	}
	else {
	    print BR "sysctl -w net.link.ether.bridge.enable=0\n";
	    print BR "sysctl -w net.link.ether.bridge.ipfw=0\n";
	    print BR "sysctl -w net.link.ether.bridge.config=";
	}
	foreach my $bix (keys(%bridges)) {
	    foreach my $iface (keys($bridges->{$bix})) {
		print BR "$iface:$bix,";
	    }
	}
	print BR "\n";
	# Now turn them back on.
	if ($FBSD_VERSION <= 4) {
	    print BR "sysctl -w net.link.ether.bridge=1\n";
	    print BR "sysctl -w net.link.ether.bridge_ipfw=1\n";
	}
	else {
	    print BR "sysctl -w net.link.ether.bridge.enable=1\n";
	    print BR "sysctl -w net.link.ether.bridge.ipfw=1\n";
	}
    }
    print BR "echo \"Bridge Configuration Complete\"\n";
    print BR "exit 0\n";
    close(BR);
    chmod(0755, TMBRIDGES);
    
    system("$TMBRIDGES enable");
    if ($?) {
	fatal("Error running $TMBRIDGES");
    }
}

#
# Shutdown Action.
#
sub doshutdown()
{
    if (-e $TMBRIDGES) {
	system("$TMBRIDGES disable");
	if ($?) {
	    fatal("Error running $TMBRIDGES");
	}
    }
}

#
# Node Reconfig Action (without rebooting).
#
sub doreconfig()
{
    doshutdown();
    return doboot();
}

#
# Node cleanup action (node is reset to completely clean state).
#
sub docleanup()
{
    unlink TMBRIDGES;
}

