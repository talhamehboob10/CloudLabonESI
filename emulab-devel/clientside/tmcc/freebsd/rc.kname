#!/usr/bin/perl -w
#
# Copyright (c) 2004-2012 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;

# Turn off line buffering on output
$| = 1;

# Drag in path stuff so we can find emulab stuff.
BEGIN { require "/etc/emulab/paths.pm"; import emulabpaths; }

use libsetup;

# XXX right now Xen FreeBSD guests don't have kernel files.
exit(0)
    if (INXENVM());

#
# Check to see what the kernel says was booted, and copy to /kernel.
#
my $kernel = `sysctl -n kern.bootfile`;

#
# Taint check just cause.
#
if ($kernel =~ /^([-\w\.\/]+)$/) {
    $kernel = $1;
}
else {
    die("*** $0:\n".
	"    Tainted filename: $kernel\n");
}

if (-e $kernel) {
    #
    # In FreeBSD 5, the kernel is in /boot/<kernelname> along with its
    # constituent modules.  We need to figure our what the correct thing
    # to do is.
    #
    if ($kernel =~ m#^/boot/#) {
	if ($kernel !~ m#^/boot/kernel/kernel$#) {
	    print "WARNING: FreeBSD 5 running alternate kernel\n";
	}
	exit(0);
    }

    if (system("cmp -s /kernel $kernel") != 0) {
	my $failed = 0;

	if (system("cp -f /kernel /kernel.save")) {
	    $failed = 1;
	    print "Could not backup /kernel! Aborting kernel change\n";
	}
	elsif (! unlink("/kernel")) {
	    $failed = 1;
	    if (-x "/usr/bin/chflags") {
		system("/usr/bin/chflags noschg /kernel");
		if (! unlink("/kernel")) {
		    print "Could not unlink /kernel! Aborting kernel change\n";
		} else {
		    $failed = 0;
		}
	    }
	}
	if ($failed == 0) {
	    if (system("cp -f $kernel /kernel")) {
		print "Could not cp $kernel to /kernel!\n";
	    }
	    else {
		print "Copied $kernel to /kernel.\n";
	    }
	}
    }
}
else {
    die("*** $0:\n".
	"    Kernel $kernel does not exist!\n");
}

exit(0);
