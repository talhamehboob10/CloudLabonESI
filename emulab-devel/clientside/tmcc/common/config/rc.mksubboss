#! /usr/bin/perl -w
#
# Copyright (c) 2004-2012 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

use English;
use strict;

sub mysystem($;$);
sub RecreateDir($$);
sub SetupFatal($);

# Turn off line buffering on output
$| = 1;

# Drag in path stuff so we can find emulab stuff.
BEGIN { require "/etc/emulab/paths.pm"; import emulabpaths; }

# Only root.
if ($EUID != 0) {
    die("*** $0:\n".
        "    Must be root to run this script!\n");
}

use libsetup;
use libtmcc;
use librc;

my $TBDIR = "/usr/testbed";

my ($bossname, $outer_bossip) = tmccbossinfo();

my @LOGS = ("dhcpd", "tftpd", "frisbeed", "mfrisbeed");

sub fix_syslog_conf()
{
	my @buffer;
	open SYSLOG_CONF, "+</etc/syslog.conf" or
		Fatal("Couldn't open syslog.conf for writing");
	while (my $line = <SYSLOG_CONF>) {
		next if grep($line =~ /$_/i, @LOGS);
		push @buffer, $line;
	}
	
	seek SYSLOG_CONF, 0, 0;
	
	print SYSLOG_CONF $_ for @buffer;
	
	foreach my $f (@LOGS) {
	    print SYSLOG_CONF "!$f\n";
	    print SYSLOG_CONF "*.*\t\t\t\t\t\t/usr/testbed/log/$f.log\n";
	}
	
	close SYSLOG_CONF;

	foreach my $f (@LOGS) {
	    my $path = "/usr/testbed/log/$f.log";
	    mysystem("cp /dev/null $path")
		if (! -e "$path");
	}
}

sub fix_newsyslog_conf()
{
	my @buffer;
	open SYSLOG_CONF, "+</etc/newsyslog.conf" or
		Fatal("Couldn't open newsyslog.conf for writing");
	while (my $line = <SYSLOG_CONF>) {
		next if grep($line =~ /$_/i, @LOGS);
		push @buffer, $line;
	}
	
	seek SYSLOG_CONF, 0, 0;
	
	print SYSLOG_CONF $_ for @buffer;
	
	foreach my $f (@LOGS) {
	    my $path = "/usr/testbed/log/$f.log";
	    print SYSLOG_CONF "$path\t\t640  35\t   *\t\@T00  Z\n";
	}

	close SYSLOG_CONF;
}

sub doboot()
{
    my $EXTRAFS = "/z";
    my $TFTPBOOT_DIR = "$EXTRAFS/tftpboot";
    my $LOG_DIR = "$EXTRAFS/log";
    my $IMAGES_DIR = "$EXTRAFS/image_cache";
    my $stuffdir = "$EXTRAFS/tmp";
    my $MFSTARBALL = "tftpboot-subboss.tar.gz";

    if (!SUBBOSS() || -e "$ETCDIR/issubboss") {
	return;
    }

    print "Stopping tftpd (if running)\n ";
    # This needs to be system(), not mysystem since we don't
    # care if it fails.
    system("/usr/local/etc/rc.d/tftpd-hpa.sh stop");
    RecreateDir($EXTRAFS,1);
    mysystem("$BINDIR/mkextrafs.pl -f $EXTRAFS");
    mysystem("mkdir -p $TFTPBOOT_DIR $IMAGES_DIR $LOG_DIR $stuffdir");
    if (-d "/tftpboot") {
	mysystem("mv /tftpboot /tftpboot.old.$$");
    }
    mysystem("ln -sf $TFTPBOOT_DIR /tftpboot");
    if (-d "$TBDIR/image_cache") {
	mysystem("mv $TBDIR/image_cache $TBDIR/image_cache.old.$$");
    }
    mysystem("ln -sf $IMAGES_DIR $TBDIR/image_cache");
    if (-d "$TBDIR/log") {
	mysystem("mv $TBDIR/log $TBDIR/log.old.$$");
    }
    mysystem("ln -sf $LOG_DIR $TBDIR/log");

    my $url = "http://$bossname/downloads/$MFSTARBALL";
    print "Fetching tftpboot tarball $url\n ";
    mysystem("fetch -q -o $stuffdir/tftpboot.tar.gz $url");

    print "Unpacking tftpboot tarball into /tftpboot\n ";
    mysystem("tar xzf $stuffdir/tftpboot.tar.gz -C /tftpboot");

    print "Restarting tftpd\n ";
    mysystem("/usr/local/etc/rc.d/tftpd-hpa.sh start");
    
    print "Configuring syslogd\n ";
    fix_syslog_conf();
    fix_newsyslog_conf();

    if (-r "/var/run/syslog.pid") {
	print "HUPing syslogd\n ";
	mysystem("kill -HUP `cat /var/run/syslog.pid`");
    }

    # XXX magic flag that says we have been initialized
    mysystem("cp /dev/null $ETCDIR/issubboss");
}


#
# Run a command string.
#
sub mysystem($;$)
{
    my ($command, $retrycount) = @_;

    $retrycount = 1
	if (!defined($retrycount));

    while ($retrycount--) {
	print "Command: '$command'\n";
	print "Started at:  " . libsetup::TBTimeStamp() . "\n";

	system($command);
	last
	    if ($? == 0 || $retrycount == 0);

	sleep(1);
    }
    if ($?) {
	SetupFatal("Command failed: $? - $command");
    }
    print "Finished at: " . libsetup::TBTimeStamp() . "\n";
}

#
# Very paranoid routine to "remove" and optionally recreate a directory.
#
# If the directory exists and is a mount point, we umount it and
# fixup /etc/fstab so it doesn't get remounted.
#
# If we could not unmount it or it isn't a mount point, we just move
# the directory out of the way.
#
# If it exists but is not a directory, we move it out of the way.
#
sub RecreateDir($$)
{
    my ($dir,$docreate) = @_;

    #
    # If path is a directory and already exists, we need to get rid of it.
    # If it is a mount point, unmount it.  Otherwise, rename it.
    #
    if (-d "$dir") {
	if (system("umount $dir") == 0) {
	    # was a mounted FS, need to remove it from fstab if present
	    mysystem("sed -i '.orig' -E '\\;\[\[:space:\]\]$TBDIR\[\[:space:\]\];d' /etc/fstab");
	}
	# remove it if it is empty
	rmdir("$dir");
    }

    #
    # At this point, if the target still exists (directory or not)
    # we have to move it out of the way.  If that fails, we die.
    #
    if (-e "$dir") {
	mysystem("mv $dir $dir.old.$$");
    }

    #
    # Finally, make the directory
    #
    if ($docreate) {
	mysystem("mkdir -p $dir");
    }
}

#
# Print error and exit.
#
sub SetupFatal($)
{
    my ($msg) = @_;

    die("*** $0:\n".
	"    $msg\n");
}

doboot();
