#!/usr/bin/perl -w
#
# Copyright (c) 2004-2014 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;

#
# Hosts we need un-firewalled static routes for
#
my $elvinip = "224.4.0.1";
my $viproutes = "boss ops fs $elvinip";

my $action = "boot";
my $debug = 0;
my $fwinfo;
my @fwrules;
my @fwhosts;

sub usage()
{
    print "Usage: " .
	scriptname() . "boot|shutdown|reconfig|reset\n";
    exit(1);
}

# Turn off line buffering on output
$| = 1;

# Drag in path stuff so we can find emulab stuff.
BEGIN { require "/etc/emulab/paths.pm"; import emulabpaths; }

#
# Load the OS independent support library. It will load the OS dependent
# library and initialize itself. 
# 
use libsetup;
use liblocsetup;
use libtmcc;
use librc;

#
# Must be root.
# 
if ($UID != 0) {
    die("*** $0:\n".
	"    Must be root to run this script!\n");
}

#
# Only local cluster nodes right now
#
exit(0)
    if (MFS() || REMOTE() || SIMHOST());

# Protos.
sub doboot();
sub doshutdown();
sub doreconfig();
sub docleanup();
sub firewaller();
sub firewallee();

# XXX for testing
#configtmcc("portnum", 7778);

#
# XXX for debugging default rules: make sure we always fetch
# from boss so we can pick up changes without rebooting using
# "/usr/local/etc/emulab/rc/rc.firewall reconfig"
#
#configtmcc("nocache", 1);

# Allow default above.
if (@ARGV) {
    $action = $ARGV[0];
}

my $TMFWC = TMFWCONFIG;

# Execute the action.
SWITCH: for ($action) {
    /^boot$/i && do {
	doboot();
	last SWITCH;
    };
    /^shutdown$/i && do {
	doshutdown();
	last SWITCH;
    };
    /^reconfig$/i && do {
	doreconfig();
	last SWITCH;
    };
    /^reset$/i && do {
	docleanup();
	last SWITCH;
    };
    fatal("Invalid action: $action\n");
}
exit(0);

sub doboot()
{
    #
    # Get our firewall info
    #
    if (getfwconfig(\$fwinfo, \@fwrules, \@fwhosts) != 0) {
	exit(0);
    }

    #
    # Common case: no firewall, bug out
    #
    if ($fwinfo->{TYPE} eq "none") {
	print "No firewall\n"
	    if ($debug);
	exit(0);
    }

    print "Setting up firewall\n";

    #
    # Create the rc.firewall script
    #
    open(FWC, ">$TMFWC") or
	fatal("Could not open $TMFWC: $!\n");
    print FWC "#!/bin/sh\n";
    print FWC "# auto-generated by $BINDIR/rc/rc.firewall, DO NOT EDIT\n";
    print FWC "if [ x\$1 = x ]; then action=enable; else action=\$1; fi\n";

    #
    # If TYPE is not "remote", we ourselves are a firewall
    #
    my $rc = 0;
    SWITCH: for ($fwinfo->{TYPE}) {
	/^ipfw$/i && do {
	    $rc = firewaller();
	    last SWITCH;
	};
	/^ipfw2-vlan$/i && do {
	    $rc = firewaller();
	    last SWITCH;
	};
	/^iptables$/i && do {
	    $rc = firewaller();
	    last SWITCH;
	};
	/^iptables-vlan$/i && do {
	    $rc = firewaller();
	    last SWITCH;
	};
	/^iptables-dom0$/i && do {
	    $rc = firewaller();
	    last SWITCH;
	};
	/^remote$/i && do {
	    last SWITCH;
	};
	fatal("Invalid firewall type: $fwinfo->{TYPE}\n");
    }

    #
    # If FWIP is set, we are the "client" of another firewall
    #
    if ($rc == 0 && defined($fwinfo->{FWIP})) {
	$rc = firewallee();
    }

    close(FWC);
    if ($rc) {
	unlink($TMFWC);
	exit($rc);
    }

    #
    # Update the hosts file with unqualified names for firewalled hosts
    #
    if (@fwhosts > 0) {
	if (genhostsfile($HOSTSFILE, @fwhosts) != 0) {
	    fatal("Could not update $HOSTSFILE!");
	}
    }

    #
    # and execute it!
    #
    chmod(0755, $TMFWC);
    system("$TMFWC enable");
    if ($?) {
	fatal("Error running $TMFWC");
    }
}

sub firewaller()
{
    my ($upline, $downline) = os_fwconfig_line($fwinfo, @fwrules);

    print FWC "case \"\$action\" in\n";
    print FWC "  enable)\n";
    print FWC "    $upline\n";
    print FWC "    ;;\n";
    print FWC "  disable)\n";
    print FWC "    $downline\n";
    print FWC "    ;;\n";
    print FWC "  *)\n";
    print FWC "    echo \"Usage: rc.firewall {enable|disable}\"\n";
    print FWC "    exit 1\n";
    print FWC "    ;;\n";
    print FWC "esac\n";
    print FWC "exit 0\n";
    return 0;
}

#
# Configuration for a firewalled node.
#
# For a "transparent" firewall, there is nothing to do.
#
# However, in our "all volunteer" firewall model, we must replace our
# default route with one leading to the firewall node.  Before doing that,
# we ensure that we have static routes for boss, ops, fs, elvind, and the
# firewall node.
#
sub firewallee()
{
    #
    # XXX a firewall IP of 0 implies a transparent firewall
    #
    if ($fwinfo->{FWIP} eq "0.0.0.0") {
	print FWC "true\n";
	return 0;
    }

    my $orouter = `cat $BOOTDIR/routerip`;
    chomp($orouter);

    #
    # Assume the firewall itself is on a local interface with an already
    # existing interface route.  Thus we don't need to force a route.
    #
    #$viproutes .= " $fwinfo->{FWIP}";

    my ($upline, $downline) =
	os_fwrouteconfig_line($orouter, $fwinfo->{FWIP}, $viproutes);
    my $addroute =
	os_routing_add_manual("default", undef, undef, "\$nrouter", undef);
    my $delroute =
	os_routing_del_manual("default", undef, undef, undef, undef);

    print FWC "case \"\$action\" in\n";
    print FWC "  enable)\n";
    print FWC "    $upline\n";
    print FWC "    cp -p $BOOTDIR/routerip $BOOTDIR/orouterip\n";
    print FWC "    nrouter=$fwinfo->{FWIP}\n";
    print FWC "    ;;\n";
    print FWC "  disable)\n";
    print FWC "    nrouter=\`cat $BOOTDIR/orouterip\`\n";
    print FWC "    ;;\n";
    print FWC "  *)\n";
    print FWC "    echo \"Usage: rc.firewall {enable|disable}\"\n";
    print FWC "    exit 1\n";
    print FWC "    ;;\n";
    print FWC "esac\n";
    print FWC "$delroute >/dev/null 2>&1\n";
    print FWC "$addroute || {\n";
    print FWC "    echo \"Could not establish new default route\"\n";
    print FWC "    exit 1\n";
    print FWC "}\n";
    print FWC "echo \$nrouter >$BOOTDIR/routerip\n";
    print FWC "case \"\$action\" in\n";
    print FWC "  enable)\n";
    print FWC "    ;;\n";
    print FWC "  disable)\n";
    print FWC "    $downline\n";
    print FWC "    ;;\n";
    print FWC "esac\n";
    print FWC "exit 0\n";
    return 0;
}

#
# Shutdown Action.
#
sub doshutdown()
{
    # Bring all interfaces down.
    if (-e $TMFWC) {
	system("$TMFWC disable");
	if ($?) {
	    fatal("Error running $TMFWC");
	}
    }
}

#
# Node Reconfig Action (without rebooting).
#
sub doreconfig()
{
    doshutdown();
    return doboot();
}

#
# Node cleanup action (node is reset to completely clean state).
#
sub docleanup()
{
    unlink $TMFWC;
}
