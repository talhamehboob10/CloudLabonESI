#!/usr/bin/perl -w
#
# Copyright (c) 2020 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;

#
# Configure a convenience link for accessing any write-back store.
# We create a sub directory for each node and point /save to that
# so that there is a unique store per experiment node in the event
# that an experiment has multiple nodes on the same aggregate.
#

sub usage()
{
    print "Usage: " .
	scriptname() . " [-d] boot|shutdown|reconfig|reset\n";
    exit(1);
}
my $optlist = "d";
my $action  = "boot";
my $debug = 0;

# Turn off line buffering on output
$| = 1;

# Drag in path stuff so we can find emulab stuff.
BEGIN { require "/etc/emulab/paths.pm"; import emulabpaths; }

# Only root.
if ($EUID != 0) {
    warn("wbstore: must be root to run this script!\n");
    exit(0);
}

#
# Load the OS independent support library. It will load the OS dependent
# library and initialize itself.
# (NB: liblocstorage must be imported after argument processing.)
# 
use libsetup;
use liblocsetup;
use libtmcc;
use librc;

# Script specific goo

# Not all clients support this.
exit(0)
    if (MFS() || (REMOTE() && !(REMOTEDED() || JAILED() || GENVNODE())));

# Protos.
sub doboot();
sub doshutdown();
sub doreset();
sub doreconfig();

my $LINK = "$VARDIR/save";

# Parse command line.
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{'d'})) {
   $debug = 1;
}
# Allow default above.
if (@ARGV) {
    $action = $ARGV[0];
}

# Execute the action.
SWITCH: for ($action) {
    /^boot$/i && do {
	doboot();
	last SWITCH;
    };
    /^shutdown$/i && do {
	doshutdown();
	last SWITCH;
    };
    /^reconfig$/i && do {
	doreconfig();
	last SWITCH;
    };
    /^reset$/i && do {
	doreset();
	last SWITCH;
    };
    warn("wbstore: invalid action '$action' ignored\n");
}
exit(0);

sub doboot()
{
    my @tmccinfo = ();
    if (tmcc(TMCCCMD_WBSTORE, undef, \@tmccinfo) < 0) {
	warn("*** WARNING: Could not get wbstore info from server, ignored\n");
	return;
    }
    if (@tmccinfo == 0) {
	return;
    }

    my $line = shift(@tmccinfo);
    chomp($line);

    my @kvs = split(/\s+/, $line);
    my %res = ();
    foreach my $kv (@kvs) {
	my ($key,$val) = split(/=/, $kv);
	$res{$key} = $val;
    }

    my ($path,$pid,$uuid,$domain);

    foreach my $k ('UUID','PID') {
	if (!exists($res{$k})) {
	    warn("*** WARNING: No $k in wbstore info, wbstore not setup\n");
	    return;
	}
    }
    $uuid = $res{'UUID'};
    $pid = $res{'PID'};
    if (-e "$BOOTDIR/mydomain") {
	$domain = `cat $BOOTDIR/mydomain`;
	chomp $domain;
    }
    if (!$uuid || !$pid || !$domain) {
	warn("*** WARNING: did not get uuid/pid/domain, wbstore not setup\n");
	return;
    }

    #
    # Determine our node name.
    # We use the experiment vname if available, otherwise use the local
    # part of the hostname.
    #
    my $node;
    if (-e "$BOOTDIR/nickname") {
	$node = `cat $BOOTDIR/nickname`;
    } elsif (-e "$BOOTDIR/realname") {
	$node = `cat $BOOTDIR/realname`;
    } else {
	$node = `hostname`;
    }
    chomp $node;
    if ($node =~ /^([^\.]+)\..*$/) {
	$node = $1;
    }
    
    my $found = 0;
    $path = "/proj/$pid/wbstore/$uuid/$domain";
    if (! -d "$path") {
	# XXX do not complain, this is the path for non-wbstore experiments
	;
    } elsif (! -d "$path/$node" && !mkdir("$path/$node")) {
	warn("*** WARNING: could not create '$path/$node', ".
	     "setting up symlink anyway\n");
    } else {
	chmod(0775, "$path/$node");
	$found = 1;
    }
    if (!system("ln -sfn $path/$node $LINK") && $found) {
	print "$LINK available for archiving data.\n";
    }
}    

sub doshutdown()
{
    unlink($LINK);
}

sub doreconfig()
{
    unlink($LINK);
}

sub doreset()
{
    unlink($LINK);
}
