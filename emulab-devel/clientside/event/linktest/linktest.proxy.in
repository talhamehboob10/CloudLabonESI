#!/usr/bin/perl -w

#
# Copyright (c) 2000-2016 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

use English;
use Getopt::Std;
use Errno;
use POSIX ":sys_wait_h";
    
#
# A wrapper for controlling the event scheduler from boss. 
#
# The first argument option is the user to run this script as, since we
# get invoked by a root ssh from boss. 
#
#
sub usage()
{
    print "Usage: linktest.proxy [-d level] [-N] -u user -p unix_pid -g unix_gid -e pid/eid ".
	"-l level -o logfile -t timeout -r\n";
    exit(-1);
}
my $optlist = "d:u:g:e:l:o:t:rp:N";
my $debug   = 0;
my $user;
my $pid;
my $eid;
my $level;
my $logfile;
my $timeout;
my $reportonly = 0;
my $nonfs = 0;
my $unix_gid;
my $unix_pid;

#
# Configure variables
#
my $TB       = "@prefix@";
my $TBOPS    = "@TBOPSEMAIL@";
my $linktest = "$TB/bin/run_linktest.pl";

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Only real root, from boss.
#
if ($UID != 0) {
    die("*** $0:\n".
	"    Must be root to run this script!\n");
}

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libtestbed;

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (@ARGV) {
    usage();
}
if (! defined($options{"u"}) ||
    ! defined($options{"e"}) ||
    ! defined($options{"p"}) ||
    ! defined($options{"l"}) ||
    ! defined($options{"g"})) {
    usage();
}    
	    
$user       = $options{"u"};
$level      = $options{"l"};
$unix_gname = $options{"g"};
$unix_pname = $options{"p"};

if ($options{"e"} =~ /^([-\w]*)\/([-\w]*)$/) {
    $pid = $1;
    $eid = $2;
}
else {
    usage();
}
if (defined($options{"d"})) {
    $debug = $options{"d"};
}
if (defined($options{"t"})) {
    $timeout = $options{"t"};
}
if (defined($options{"o"})) {
    $output = $options{"o"};
}
if (defined($options{"r"})) {
    $reportonly = $options{"r"};
}
if (defined($options{"N"})) {
    $nonfs = 1
}

#
# Okay, now flip to user before running linktest. Must put the user
# into both the project group and the experiment subgroup.
#
my (undef,undef,$unix_uid) = getpwnam($user) or
    die("*** $0:\n".
	"    No such user $user\n");

my (undef,undef,$unix_ggid) = getgrnam($unix_gname) or
    die("*** $0:\n".
	"    No such group $unix_gname\n");

my (undef,undef,$unix_pgid) = getgrnam($unix_pname) or
    die("*** $0:\n".
	"    No such group $unix_pname\n");

# Flip to user and never go back!
$GID            = $unix_ggid;
$EGID           = "$unix_ggid $unix_ggid $unix_pgid";
$EUID = $UID    = $unix_uid;
$ENV{'USER'}    = $user;
$ENV{'LOGNAME'} = $user;

# And run it. Pass a list to exec to avoid extra shell.
my @cmdandargs = ("$linktest", "-v", "-l", $level, "-s", "localhost",
		  "-e", "$pid/$eid");
push(@cmdandargs, ("-d", $debug))
    if ($debug);
push(@cmdandargs, ("-t", $timeout))
    if (defined($timeout));
push(@cmdandargs, ("-o", $output))
    if (defined($output));
push(@cmdandargs, "-r")
    if ($reportonly);
push(@cmdandargs, "-N")
    if ($nonfs);

exec(@cmdandargs);
die("*** $0:\n".
    "    Could not exec $linktest!");

