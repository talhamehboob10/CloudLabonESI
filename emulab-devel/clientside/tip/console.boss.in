#!/usr/bin/perl -w
#
# Copyright (c) 2005-2017 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;
use POSIX qw(setsid);
use File::Temp qw(tempfile);

#
# Wrapper for console and tiptunnel programs; grab tipacl from XMLRPC server, 
# and feed it to the appropriate binary.
#
sub usage()
{
    print(STDOUT "Usage: console.boss [-d] [-t -s <speed>] pcXXX\n");
    exit(-1);
}
my $optlist  = "dp:ts:";
my @opts = ();

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";
my $CONSOLEBIN  = "$TB/bin/console.bin";
my $TIPTUNNELBIN = "$TB/bin/tiptunnel";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output. Very important for this script!
#
$| = 1; 

#
# Load the Testbed support stuff. 
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;
use Node;
use User;

sub fatal($)
{
    my ($msg) = @_;

    die("*** $0:\n".
	"    $msg\n");
}

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}

my $tipmode = 0;
my $interactivetip = 1;

# pass through select options
if (defined($options{"d"})) {
    push @opts, "-d";
}
if (defined($options{"p"})) {
    push @opts, "-p";
    push @opts, $options{"p"};
}
# are we going to run tiptunnel instead?
if (defined($options{"t"})) {
    $tipmode = 1;
    push @opts, "-l";
}
if ($tipmode) {
    # allow users to set serial line speed
    if (defined($options{"s"})) {
	push @opts, "-s";
	push @opts, $options{"s"};
	$interactivetip = 0;
    }
    # otherwise give them an interactive session
    else {
	push @opts, "-";
    }
}

usage()
    if (@ARGV != 1);
my $nodeid = $ARGV[0];

# Map invoking user to object.
my $this_user = User->ThisUser();
if (! defined($this_user)) {
    fatal("You ($UID) do not exist!");
}

my $node = Node->Lookup($nodeid);
if (!defined($node)) {
    fatal("No such node $nodeid");
}

#
# Figure out who called us. Must have admin status to do this, OR must have
# permission to mess with the node!
#
if (!$this_user->IsAdmin() 
    && !$node->AccessCheck($this_user,TB_NODEACCESS_MAX)) {
    fatal("You must be a TB administrator, or have permission to access this node's serial console, to run this script!");
}

#
# Grab what we need out of the DB.
#
my ($tipserver, $tipname, $portnum, $keydata);
if ($node->TipServer(\$tipserver, \$tipname, \$portnum, \$keydata)) {
    fatal("Could not find tipserver info for $nodeid");
}

#
# Make a temp file for the acl.
#
$ENV{'TMPDIR'} = "/tmp";

my ($fh, $tempfile) = tempfile(UNLINK => 0);
fatal("Could not create tempfile for acl stuff")
    if (!defined($fh));

print $fh "server: $tipserver\n";
print $fh "portnum: $portnum\n";
print $fh "keydata: $keydata\n";
close($fh);

#
# Do not want to leave the acl file around, and do not want to wait for
# the user to quit the program, so fork a child to wait a moment and remove
# the file. We have the child do it so as to avoid messing with the session
# and tty goo.
#
my $syspid = fork();

# Child delays a moment and exits. 
if (!$syspid) {
    sleep(1);
    unlink($tempfile);
    exit(0);
}
my @cmdargs;
if ($tipmode) {
    @cmdargs = ($TIPTUNNELBIN);
}
else {
    @cmdargs = ($CONSOLEBIN);
}
push @cmdargs, "-a", "$tempfile", @opts, "$nodeid";
if ($tipmode && $interactivetip) {
    push @cmdargs, "-";
}
exec(@cmdargs);
die("*** $0:\n".
    "    Exec failure: '@cmdargs'\n");
