#!/usr/bin/perl -w
#
# Copyright (c) 2000-2011 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

#
# Confiigure variables
#
my $CLIENT_BINDIR = "@CLIENT_BINDIR@";
my $CLIENT_ETCDIR = "@CLIENT_ETCDIR@";

use lib '@prefix@/lib';

use libdb;
use English;
use Getopt::Long;
use strict;

# Turn off line buffering
$|=1;

my $t = 120;

sub usage() {
    die("Usage: $0 [-s] [<pid> <eid>]
  -s    start slothd if not running.
If no pid/eid are given, do all nodes that haven't reported slothd
data in the last $t minutes.\n"); }

my %opts = ();

GetOptions(\%opts,'s');

if ($opts{"h"}) {
    usage();
}

my @nodes = ();

if (@ARGV > 0) {
    my ($pid, $eid) = @ARGV;
    @nodes = ExpNodes($pid, $eid);
} else {
    DBQueryFatal("drop table if exists idletemp2");
    #(print "create temporary table idletemp2
    DBQueryFatal("create temporary table idletemp2
select pid,eid,r.node_id,max(tstamp) as t from reserved as r 
left join node_idlestats as n on r.node_id=n.node_id 
where r.node_id not like \"sh%\" and r.node_id not like \"wireless%\" 
and r.node_id not like \"%ron%\" and r.node_id not like \"%plab%\" 
group by pid,eid,node_id 
having t is null or (unix_timestamp(now())-unix_timestamp(t) >= $t*60) 
order by pid,eid,node_id");
    # We now have a table that says the last time each node reported
    # for all nodes that haven't reported in last $t minutes.
    # (Note: Don't change group by above to pid,eid!)
    my $r = DBQueryFatal("select node_id from idletemp2");
    while (my %row = $r->fetchhash) {
	push(@nodes,$row{"node_id"});
    }
}

# Stolen from snmpit_lib.pm:
#
# Used to sort a set of nodes in testbed order (ie. pc2 < pc10)
sub tbsort { 
    my ($a,$b) = @_;
    $a =~ /^([a-z]*)([0-9]*):?([0-9]*)/;
    my $a_let = ($1 || "");
    my $a_num = ($2 || 0);
    my $a_num2 = ($3 || 0);
    $b =~ /^([a-z]*)([0-9]*):?([0-9]*)/;
    my $b_let = ($1 || "");
    my $b_num = ($2 || 0);
    my $b_num2 = ($3 || 0);
    if ($a_let eq $b_let) {
        if ($a_num == $b_num) {
            return $a_num2 <=> $b_num2;
        } else {
            return $a_num <=> $b_num;
        }
    } else {
        return $a_let cmp $b_let;
    }
    return 0;
}

foreach my $n (sort {tbsort($a,$b)} @nodes) {
    print "checking slothd on $n: ";
    #print "\n"; next;
    print check($n);
    print "\n";
}

exit 0;

sub check {
    my $ssh="sshtb -q";
    my $node = shift;
    my $cmd1 = "ps auxwww | grep slothd | grep -v grep";
    my $cmd2 = "'rm -f /tmp/.sdpid ; ${CLIENT_BINDIR}/slothd'";
    # Run an ssh command in a child process, protected by an alarm to
    # ensure that the ssh is not hung up forever if the machine is in
    # some funky state.
    my $str = "";
    my $syspid = fork();
    if ($syspid) {
	# parent
        local $SIG{ALRM} = sub { kill("TERM", $syspid); };
        alarm 5;
	#print "$syspid - Alarm set.\n";
        waitpid($syspid, 0);
	my $rv = $?;
	if ($rv > 255) { $rv /= 256; }
	#print "$syspid - Done waiting. Got '$rv' ",$rv/256," ",$rv%256,"\n";
        alarm 0;
	if ($rv == 15) { 
	    $str="operation timed out"; 
	#} elsif ($rv == 256) { 
	#    $str="SSH not available"; 
	} elsif ($rv == 0) {
	    $str="running";
	} elsif ($rv == 1) {
	    $str="not running";
	} elsif ($rv == 2) {
	    $str="not running, started";
	} elsif ($rv == 3) { 
	    $str="not running, couldn't start slothd"; 
	} else {
	    $str="I don't know what happened...returned $rv";
	}
    } else {
	# child
	$str = `sudo $ssh -host $node $cmd1`;
	#print "$syspid - ssh succeeded:'$str'\n";
	if ($str) {
	    #print "running.\n";
	    exit(0);
	} else {
	    #print "not running. ";
	    if ($opts{"s"}) {
		my $f = "/tmp/tmp-$node-$$";
		open (STDERR, "> $f") || 
		  warn("Couldn't open $f: $!\n");
		$str = `sudo $ssh -host $node $cmd2`;
		my $rv = $?;
		if ($rv > 255) { $rv /= 256; }
		#print "\n(start=$rv)\n";
		#system("ls -l $f");
		if ( -s "$f") {
		    $rv=127;
		    print "Error starting slothd:\n";
		    system("cat $f");
		}
		system("rm $f");
		#print "(start=$rv)\n";
		if ($str) {
		    print "(start returned '$str') ";
		}
		if ($rv==1) {
		    # success
		    exit(2);
		} elsif ($rv==127) {
		    # error trying to run slothd
		    exit(3);
		} else {
		    # I dunno...
		    exit($rv);
		}
	    }
	    #print "\n";
	    exit(1);
	}
	exit(-1);
    }
    return $str;
}
