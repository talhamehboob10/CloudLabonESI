#!/usr/bin/perl -w
#
# Copyright (c) 2000-2002 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

#
# Confiigure variables
#
my $CLIENT_BINDIR = "@CLIENT_BINDIR@";
my $CLIENT_ETCDIR = "@CLIENT_ETCDIR@";

use lib '@prefix@/lib';

use libdb;
use English;
use Getopt::Long;
use strict;

sub usage() {
    print "Usage: $0 [-a] | [-e <pid> <eid>] | [vnode ...]\n";
}

sub InstallSlothd($);

my %opts = ();
my $pid;
my $eid;
my @nodes = ();
my @failed = ();

if (@ARGV < 1) {
    exit &usage;
}

my $linpath = "~kwebb/src/testbed/sensors/slothd/linux/slothd";
my $fbsdpath = "~kwebb/src/testbed/sensors/slothd/fbsd/slothd";
my $linrcpath = "~kwebb/src/testbed/tmcd/common/rc.testbed";
my $fbsdrcpath = "~kwebb/src/testbed/tmcd/common/rc.testbed";

my $SSH = "sudo ssh -q";
my $SCP = "sudo scp -q -o Loglevel=QUIET";

GetOptions(\%opts,'h','f=s','e=s','a');

if ($opts{"f"}) {
    open(NODEFILE, "<$opts{'f'}");
    while (<NODEFILE>) {
        chomp;
        push @nodes, $_;
    }
}

elsif ($opts{"a"}) {
    my $qres = DBQuery("select a.node_id from reserved as a "
                       . "left join nodes as b "
                       . "on a.node_id = b.node_id "
                       . "where b.type = 'pc850' or b.type = 'pc600'");
    if ($qres) {
        while(my @row = $qres->fetchrow_array()) {
            push @nodes, $row[0];
        }
    }
}

elsif ($opts{"e"}) {
    $pid = $opts{"e"};
    $eid = shift;
    @nodes = ExpNodes($pid, $eid);
    print "pid: $pid\n";
    print "eid: $eid\n";
} 

else {
    @nodes = @ARGV;
}

print "Installing on the following nodes: @nodes\n";

my $j;
foreach $j (@nodes) {
    if (InstallSlothd($j)) {
        push @failed, $j;
    }
}

if (@failed) {
    print "failed nodes: @failed\n\n";
}

exit 0;

sub InstallSlothd($) {
    my $node = shift;
    my $nodeos = "";
    
    print "Executing for $node ...\n";
    print "pinging node..\n";
    `ping -q -c 2 $node > /dev/null`;
    if ($?) {
        print "host down.. skipping.\n";
        return 1;
    }

    $nodeos = `$SSH $node uname -s`;
    
    if ($nodeos =~ /linux/i) {
        print "Node type is linux\n";
        print "stopping slothd on $node\n";
        `$SSH $node killall slothd`;
        sleep 1;
        `$SCP $linpath $node:$CLIENT_BINDIR`;
        `$SCP $linrcpath $node:$CLIENT_BINDIR`;
    }
    elsif ($nodeos =~ /freebsd/i) {
        print "Node type is FreeBSD\n";
        print "stopping slothd on $node\n";
        `$SSH $node killall slothd`;
        sleep 1;
        `$SCP $fbsdpath $node:$CLIENT_BINDIR`;
        `$SCP $fbsdrcpath $node:$CLIENT_BINDIR`;    
    }
    else {
        print "Unknown node OS: $nodeos: not deploying.\n";
        return 1;
    }

    print "starting slothd on $node\n";
    `$SSH $node $CLIENT_BINDIR/slothd`;
    if ($?) {
        return 1;
    }
    return 0;
}

exit 0;
