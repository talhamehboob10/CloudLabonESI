.\"
.\" Copyright (c) 2004 University of Utah and the Flux Group.
.\" 
.\" {{{EMULAB-LICENSE
.\" 
.\" This file is part of the Emulab network testbed software.
.\" 
.\" This file is free software: you can redistribute it and/or modify it
.\" under the terms of the GNU Affero General Public License as published by
.\" the Free Software Foundation, either version 3 of the License, or (at
.\" your option) any later version.
.\" 
.\" This file is distributed in the hope that it will be useful, but WITHOUT
.\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
.\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
.\" License for more details.
.\" 
.\" You should have received a copy of the GNU Affero General Public License
.\" along with this file.  If not, see <http://www.gnu.org/licenses/>.
.\" 
.\" }}}
.\"
.TH EMULAB-SYNC 1 "April 5, 2004" "Emulab" "Emulab Commands Manual"
.OS
.SH NAME
emulab-sync \- Simple distributed synchronization client.
.SH SYNOPSIS
.BI emulab-sync
[\fB-hV\fR]
[\fB-n \fIname\fR]
[\fB-d\fR]
[\fB-s \fIserver\fR]
[\fB-p \fIport-number\fR]
[\fB-i \fIcount\fR]
[\fB-a\fR]
[\fB-u\fR]
[\fB-e \fIerror-number\fR]
[\fB-m\fR]
.SH DESCRIPTION
The
.B emulab-sync
utility is used to wait for other programs in your experiment to reach some
specific point before proceeding forward.  This utility and its server,
.B emulab-syncd\fR,
implement this synchronization through a simple counter based barrier.  The
counter is increased by
.B emulab-sync
when using the
.B -i
option and then decremented by one on each regular use.  Once the counter
reaches zero, all of the waiters will return and execution can proceed.
.P
Multiple synchronizations can take place at the same time by using the
.B -n
option to specify a separate name for each barrier.  For example, scripts on
nodeA and nodeB can be waiting on a barrier named "foo" while (other) scripts
on nodeA and nodeC can be waiting on a barrier named "bar." You may reuse an
existing barrier (including the default barrier) once it has been released (all
clients arrived and woken up).
.P
Basic error reporting is also supported using the
.B -e
option and the program's exit code.  For example, if a client encountered an
error and would be unable to continue after crossing the barrier, it can signal
its peers by using the
.B -e
option with a non-zero error code.  Then, when all of the clients have arrived,
they will wake up and exit with this non-zero error code.  If multiple peers
encounter errors, the maximum of all of the errors will be returned.
.P
Available options:
.P
.TP
\fB-h
Print out a usage message.
.TP
\fB-V
Print out version information and exit.
.TP
\fB-n \fIname
The name of the barrier, must be less than 64 bytes long.  (Default: barrier)
.TP
\fB-d
Turn on debugging.
.TP
\fB-s \fIserver
Specify the host where the
.B emulab-syncd
server is running.  Normally, you do not need to use this option since Emulab
will automatically use the experiment's default sync server.  The experiment's
sync server is picked at random or specified by the
.B tb-set-sync-server
NS command when creating the experiment.
.TP
\fB-p \fIport-number
Specify the port number the server is listening on.  (Default: 16534)
.TP
\fB-i \fIcount
Increase the number of waiters by
.I count
waiters.
.B NOTE\fR:
The number of waiters should not include this call, unless you are using the
.B -a
option and intend to do another sync later on.
.TP
\fB-a
Return immediately after increasing the barrier value.  Can only be used 
with the
.B -i
option.
.TP
\fB-u
Use UDP to contact the server.  (Default: TCP)
.TP
\fB-e \fIerror-number

Specify the error code for this client.  The value must be greater than zero
(indicating no error) and less than 240 because we reserve the range [240, 256)
for internal use.  The error codes for all of the clients are collected by the
server and the maximum is returned by the clients when they exit.  (Default: 0)
.TP
\fB-m
Check if this node is where the default sync server is running and then
immediately exit.  If this node
.I is
running the server, the return value is zero, otherwise it is one.  This mode
is useful for detecting the "master" node when the experimental nodes all run
the same startup script.
.SH RETURN VALUES
.TP
A \fB-e \fRerror value
If the barrier was crossed, but atleast one of the clients reported a non-zero
error code.
.TP
240
If the server received a SIGHUP from a user, causing all of the barriers 
to be cleared and the clients released.
.TP
76
If there was an error while communicating with the server.
.TP
68
If the server name lookup failed.
.TP
64
If there was an invalid command line argument.
.TP
1
If the
.B -m
option was used and this node is not the master.
.TP
0
If the barrier was successfully crossed without error or the
.B -m
option was used and this node is the master.
.SH EXAMPLES
.PP
To synchronize one machine with another:
.PP
.RS
[gob@bluth1 ~] emulab-sync -i 1
.P
[michael@bluth2 ~] emulab-sync
.RE
.PP
To perform two different synchronizations at the same time using barriers named
"staircar" and "prison":
.PP
.RS
[marta@bluth1 ~] emulab-sync -i 1 -n staircar
.P
[michael@bluth2 ~] emulab-sync -n staircar
.P
[gob@bluth1 ~] emulab-sync -i 1 -n prison
.P
[george@bluth2 ~] emulab-sync -n prison
.RE
.PP
To synchronize and report an error code of "100":
.PP
.RS
.PD 0
[buster@bluth1 ~] emulab-sync -i 1 -e 100; echo $?
.P
100
.PD
.P
.PD 0
[annyong@bluth2 ~] emulab-sync -e 0; echo $?
.P
100
.PD
.RE
.PP
To use a single script to synchronize N nodes:
.PP
.RS
.PD 0
#! /bin/sh

# Get number of nodes to synchronize against.
.P
node_count=${1}

# Synchronize first.
.P
\fBif\fR emulab-sync -m; \fBthen\fR
.P
    # This is the master node, initialize the
.P
    # barrier to N - 1 since the master node
.P
    # is not counted.
.P
    emulab-sync -i `expr ${node_count} - 1`
.P
\fBelse\fR
.P
    # This is a regular node, just do a regular
.P
    # sync.
.P
    emulab-sync
.P
\fBfi\fR

# ... then do something interesting.
.RE
.PD
.SH FILES
.TP
/var/emulab/boot/syncserver
Contains the name and port number of the experiment's default sync server.
.SH NOTES
If a client using TCP is unable to connect to the server, it will continue to
retry at five second intervals.  Clients using UDP do not support such
reliability, so be careful.
.P
If you terminate a TCP client before it returns, the server will recognize the
closed socket and adjust the counter so that it appears that the call 
never occurred.
.SH BUGS
Despite the above efforts, it is still possible for a barrier's counter to end
up with an unknown value.  Typical symptoms of this condition are clients that
refuse to wakeup despite all of them checking in.  At this point it is probably
best to use a different barrier name or you can clear all of the barriers by
sending a SIGHUP to the experiment's
.B emulab-syncd\fR.
.SH SEE ALSO
emulab-syncd(1)
.SH AUTHOR
The Emulab project at the University of Utah.
.SH NOTES
The Emulab project can be found on the web at
.IR http://www.emulab.net
