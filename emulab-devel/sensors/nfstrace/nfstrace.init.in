#!/bin/sh
#
# chkconfig: 2345 90 10
# description: trace NFS on the experimental network.
#
# processname: nfstrace
#
#
# Copyright (c) 2006 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

prefix=@prefix@
exec_prefix=@exec_prefix@
INSTALL_SBIN=@sbindir@

# Execute as the nfstrace user.
AS_NT="sudo -u nfstrace"
# The nfstrace home directory.
ND_DIR="/var/nfstrace"
# Temporary file for nfsdump output.
ND_TEMPNAME="${ND_DIR}/temp"
# The base name for trace output.
ND_BASENAME="${ND_DIR}/trace"
# The number of trace files to use.
ND_COUNT="10"
# The interface to listen on for NFS traffic.  XXX Needs improvement.
ND_IF=`/sbin/ifconfig -u -l | sed 's/lo0//' | cut -f 1 -d ' '`
# Standard flags for nfsdump
ND_FLAGS="-i $ND_IF -v -s400 -I 1 -N $ND_COUNT -T $ND_TEMPNAME -B $ND_BASENAME"
ND_FLAGS="$ND_FLAGS -P"
# BPF expression for nfsdump.  Captures NFS traffic between the FS node and the
# experimental nodes.
ND_FILTER="(port 2049 or port 900) and host @FSNODE@ and not @BOSSNODE@"

# Build the list of trace file names.
ND_TRACES=""

lpc=0
while test $lpc -lt $ND_COUNT; do
    ND_TRACES="$ND_TRACES $ND_BASENAME.txt.0$lpc"
    lpc=`expr $lpc + 1`
done

PYTHONUNBUFFERED=1
export PYTHONUNBUFFERED

case "$1" in
    start)
	rm -f $ND_TRACES
	echo -n "Starting nfstrace daemons:"
	ps axuw | grep -v grep | grep ${INSTALL_SBIN}/nfsdump > /dev/null
	if test $? -eq 0; then
	    echo " already running"
	    exit 0
	fi
	${AS_NT} \
	    ${INSTALL_SBIN}/nfsdump $ND_FLAGS $ND_FILTER \
	    > /var/nfstrace/nfsdump.log 2>&1 &
	echo $! > /var/nfstrace/nfsdump.pid
	ps axuw | grep -v grep | grep ${INSTALL_SBIN}/nfsdump > /dev/null
	if test $? -eq 0; then
	    ${AS_NT} \
		${INSTALL_SBIN}/nfsdump2db $ND_TRACES \
		> /var/nfstrace/nfsdump2db.log 2>&1 &
	    echo $! > /var/nfstrace/nfsdump2db.pid
	    ps axuw | grep -v grep | grep ${INSTALL_SBIN}/nfsdump2db \
		> /dev/null
	    if test $? -eq 0; then
		echo " done"
		exit 0
	    else
		${AS_NT} kill `cat /var/nfstrace/nfsdump.pid`
		echo " failed"
		exit 1
	    fi
	else
	    echo " failed"
	    exit 1
	fi
	;;
    stop)
	echo -n "Shutting down nfstrace daemons:"
	ps axuw | grep -v grep | grep ${INSTALL_SBIN}/nfsdump > /dev/null
	if test $? -eq 0; then
	    ${AS_NT} kill `cat /var/nfstrace/nfsdump.pid`
	    ${AS_NT} kill `cat /var/nfstrace/nfsdump2db.pid`
	    echo " done"
	else
	    echo " already stopped"
	fi
	exit 0
	;;
    restart)
	# Just restart the nfsdump2db daemon.  Need to do a full stop/start for
	# nfsdump.
	echo -n "Shutting down nfsdump2db daemon:"
	ps axuw | grep -v grep | grep ${INSTALL_SBIN}/nfsdump2db > /dev/null
	if test $? -eq 0; then
	    ${AS_NT} kill `cat /var/nfstrace/nfsdump2db.pid`
	    echo " done"
	else
	    echo " already stopped"
	fi

	rm -f $ND_TRACES
	echo -n "Starting nfsdump2db daemon:"
	${AS_NT} \
	    ${INSTALL_SBIN}/nfsdump2db $ND_TRACES \
	    > /var/nfstrace/nfsdump2db.log 2>&1 &
	echo $! > /var/nfstrace/nfsdump2db.pid
	ps axuw | grep -v grep | grep ${INSTALL_SBIN}/nfsdump2db \
	    > /dev/null
	if test $? -eq 0; then
	    echo " done"
	    exit 0
	else
	    echo " failed"
	    exit 1
	fi
	exit 0
	;;
    *)
	echo "Usage: $0 {start|stop|restart}"
	exit 1
esac
