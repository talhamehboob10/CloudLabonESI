#!/usr/bin/perl -w
#
# Copyright (c) 2000-2012 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use Getopt::Std;
use Socket;

#
# Convert the ipfw rule template files into actual rule files. If you want
# to run these rules on your boss and/or ops, you will need to make
# sure you have the ipfw modules built or an ipfw enabled kernel already
# running. More info on this is in the "ipfirewall" man page. Then, you
# need to change /etc/rc.conf:
#
#  firewall_enable="YES"
#  firewall_flags="-f"
#  firewall_type="/etc/myrules"
#
# where /etc/myrules is the appropriate rule file from the build
# directory. 
#
sub usage {
	print "Usage: $0 <templatefile>\n";
}

#
# Configure variables
#
my $OURDOMAIN                = "@OURDOMAIN@";
my $ELABINELAB		     = @ELABINELAB@;
my ($BOSSTOKEN)              = ("@BOSSNODE@" =~ /^([-\w]+).*$/);
my ($USERTOKEN)              = ("@USERNODE@" =~ /^([-\w]+).*$/);
my ($FSTOKEN)                = ("@FSNODE@" =~ /^([-\w]+).*$/);
my $TESTBED_NETWORK          = "@TESTBED_NETWORK@";
my $TESTBED_NETMASK          = "@TESTBED_NETMASK@";
my $EXTERNAL_TESTBED_NETWORK = "@EXTERNAL_TESTBED_NETWORK@";
my $EXTERNAL_TESTBED_NETMASK = "@EXTERNAL_TESTBED_NETMASK@";
my $BOSSNODE_IP              = "@BOSSNODE_IP@";
my $USERNODE_IP              = "@USERNODE_IP@";
my $FSNODE_IP                = "@FSNODE_IP@";
my $NTPSERVER                = "@NTPSERVER@";
my $EXTERNAL_BOSSNODE_IP     = "@EXTERNAL_BOSSNODE_IP@";
my $EXTERNAL_USERNODE_IP     = "@EXTERNAL_USERNODE_IP@";
my $EXTERNAL_FSNODE_IP       = "@EXTERNAL_FSNODE_IP@";
my $CONTROL_ROUTER_IP        = "@CONTROL_ROUTER_IP@";
my $CONTROL_NETWORK          = "@CONTROL_NETWORK@";
my $CONTROL_NETMASK          = "@CONTROL_NETMASK@";
my $PRIVATE_NETWORK          = "@PRIVATE_NETWORK@";
my $PRIVATE_ROUTER           = "@PRIVATE_ROUTER@";
my $PRIVATE_NETMASK          = "@PRIVATE_NETMASK@";
my $PUBLIC_NETWORK           = "@PUBLIC_NETWORK@";
my $PUBLIC_ROUTER            = "@PUBLIC_ROUTER@";
my $PUBLIC_NETMASK           = "@PUBLIC_NETMASK@";
my $NAMED_FORWARDERS         = "@NAMED_FORWARDERS@";
my $GREP		     = "/usr/bin/grep";
my $FIREWALL_BOSS_LOCALRULETMPL = "@FIREWALL_BOSS_LOCALRULETMPL@";
my $FIREWALL_OPS_LOCALRULETMPL  = "@FIREWALL_OPS_LOCALRULETMPL@";

# Simple is good. I stole this out of a google search.
my @NETMASKS =
    (0x10000000,                                             # 0
     0x80000000, 0xC0000000, 0xE0000000, 0xF0000000,         #  1 -  4
     0xF8000000, 0xFC000000, 0xFE000000, 0xFF000000,         #  5 -  8
     0xFF800000, 0xFFC00000, 0xFFE00000, 0xFFF00000,         #  9 - 12
     0xFFF80000, 0xFFFC0000, 0xFFFE0000, 0xFFFF0000,         # 13 - 16
     0xFFFF8000, 0xFFFFC000, 0xFFFFE000, 0xFFFFF000,         # 17 - 20
     0xFFFFF800, 0xFFFFFC00, 0xFFFFFE00, 0xFFFFFF00,         # 21 - 24
     0xFFFFFF80, 0xFFFFFFC0, 0xFFFFFFE0, 0xFFFFFFF0,         # 25 - 28
     0xFFFFFFF8, 0xFFFFFFFC, 0xFFFFFFFE, 0xFFFFFFFF          # 29 - 32
);

my %SUB = (
    "alltestbed"        => "$TESTBED_NETWORK:$TESTBED_NETMASK",
    "publicnetwork"     => "$PUBLIC_NETWORK:$PUBLIC_NETMASK",
    "controlnetwork"    => "$CONTROL_NETWORK:$CONTROL_NETMASK",
    "jailnetwork"	=> "172.16.0.0/12",
    "multicast"         => "$TESTBED_NETWORK:$TESTBED_NETMASK,172.16.0.0/12",
);

#
# Ug, for elabinelab, it is easier to just set the multicast rule
# to "any" to avoid problems. 
#
if ($ELABINELAB) {
    $SUB{"multicast"} = "any";
}

#
# Natd is optional. 
#
my $NATDRULE = "add divert natd ip4 from any to any";

# Testbed libraries.
use lib "@prefix@/lib";

usage()
    if (@ARGV != 1);

my $infile = $ARGV[0];


#
# Look to see if natd is enabled in /etc/rc.conf and what the
# natd interface is. Might be easier to just read in the shell
# variables and process them. 
#

system("$GREP '^natd_enable' /etc/rc.conf | $GREP -q -i yes");
if (!$?) {
    my $natd_interface = `$GREP '^natd_interface' /etc/rc.conf`;
    if (!$? && $natd_interface =~ /=\"(.*)\"$/) {
	$NATDRULE = "$NATDRULE via $1";
    }
    else {
	die("natd is enabled in /etc/rc.conf, but no natd_interface!\n");
    }
}
else {
    $NATDRULE = "";
}

open(IF,"<$infile") or
    die("Unable to open $infile for reading\n");

while (<IF>) {
    if (/^(.*)\%([-\w]*)\%\s*(.*)$/) {
	if ($2 eq "localrules") {
	    my $which = $3;
	    my $filename;

	    if ($which eq "ops" && $FIREWALL_OPS_LOCALRULETMPL ne "") {
		$filename .= "${FIREWALL_OPS_LOCALRULETMPL}.ipfw";
	    }
	    elsif ($which eq "boss" && $FIREWALL_BOSS_LOCALRULETMPL ne "") {
		$filename .= "${FIREWALL_BOSS_LOCALRULETMPL}.ipfw";
	    }
	    next
		if (! defined($filename));
	    
	    if (-e $filename) {
		system("cat $filename");
	    }
	    else {
		die("Local template file for $which does not exist\n");
	    }
	}
	elsif ($2 eq "natdrules") {
	    print "$NATDRULE\n";
	}
	elsif (exists($SUB{$2})) {
	    print "$1" . $SUB{$2} . " $3\n";
	}
	else {
	    die("No substitution for '$2'\n");
	}
	next;
    }
    print $_;
}
close(IF);

exit(0);

