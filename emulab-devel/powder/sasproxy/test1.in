#!/usr/bin/perl -w
#
# Copyright (c) 2005-2021 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use strict;
use Getopt::Std;
use Data::Dumper;
use Date::Parse;

#
# Test case 1&2: https://support.google.com/sas/answer/9281248
#

sub usage()
{
    print "Usage: test\n";
    exit(1);
}
my $optlist   = "d";
my $debug     = 0;

#
# Configure variables
#
my $TB		     = "@prefix@";
my $SRCDIR           = "@srcdir@";

# Load the Testbed support stuff.
use lib "@prefix@/lib";
use lib ".";
use emdb;
use emutil;
use sas;
use sasutil;

#
# Turn off line buffering on output
#
$| = 1;

my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}

sub CheckResponse($$$)
{
    my ($response, $request, $which) = @_;
    
    if (!$response) {
	die("No response to $which");
    }
    if ($response->responseCode()) {
	$response->Dump();
	die("Error returned by $which");
    }
    return $response;
}

my $device_a = sasutil::LoadJson("$SRCDIR/google-meb.json");
if (!$device_a) {
    die("Cannot load device");
}
print Dumper($device_a);

my $request  = sas::Request::Registration->new($device_a);
my $response = $request->Send();
CheckResponse($response, $request, "registration");
print "cbsdId: " . $response->cbsdId() . "\n";

my $spectrum = sas::Request::SpectrumInquiry->new($response->cbsdId(),
						  3550000000, 3700000000);
my $spectrumResponse = $spectrum->Send();
CheckResponse($spectrumResponse, $spectrum, "spectruminquiry");
$spectrumResponse->Dump() if ($debug);
$spectrumResponse->printChannels();
my $slist = $spectrumResponse->availableChannels();
my $channel = $slist->[0];

my $grant = sas::Request::Grant->new($response->cbsdId(),
				     $channel->lowFrequency(),
				     $channel->highFrequency());
my $grantResponse = $grant->Send();
CheckResponse($grantResponse, $grant, "grant");
$grantResponse->print();

sleep(2);
my $heartbeat = sas::Request::Heartbeat->new($response->cbsdId(),
					     $grantResponse->grantId());
my $heartbeatResponse = $heartbeat->Send();
CheckResponse($heartbeatResponse, $heartbeat, "heartbeat");

sleep(2);
$heartbeat->operationState("AUTHORIZED");
$heartbeatResponse = $heartbeat->Send();
CheckResponse($heartbeatResponse, $heartbeat, "heartbeat");
$heartbeatResponse->Dump() if ($debug);

sleep(2);
$heartbeatResponse = $heartbeat->Send();
CheckResponse($heartbeatResponse, $heartbeat, "heartbeat");
$heartbeatResponse->Dump() if ($debug);

sleep(2);
my $relinquishment = sas::Request::Relinquishment->new($response->cbsdId(),
					       $grantResponse->grantId());
my $relinquishmentResponse = $relinquishment->Send();
CheckResponse($relinquishmentResponse,
	      $relinquishment, "relinquishment");

my $deregistration = sas::Request::Deregistration->new($response->cbsdId());
my $deregistrationResponse = $deregistration->Send();
CheckResponse($deregistrationResponse,
	      $deregistrationResponse, "deregistration");
