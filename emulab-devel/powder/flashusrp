#!/usr/bin/perl -w
#
# Copyright (c) 2005-2021 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use strict;
use Getopt::Std;
use Data::Dumper;
use IO::Handle;
use Socket;

my $UHD      = "/opt/uhd";
my $SETUPENV = "$UHD/fpga/usrp3/top/x300/setupenv.sh";
# This will need to get smarter when we have more then x310s.
my $BITFILE  = "usrp_x310_fpga_XG.bit";
my $BASH     = "/bin/bash";

#
# Reflash via the JTAG using the vivavdo command line interface.
# This is installed on the control node where the USBs are attached.
#
sub usage()
{
    print "Usage: reflash [-d] ... <serial>\n";
    exit(1);
}
my $optlist   = "d";
my $debug     = 0;

# Protos
sub GetDeviceList();
sub FlashDevice($);
sub PipeToViv($$);
sub fatal($);

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
usage()
    if (!@ARGV);
my $target = $ARGV[0];

# Weird.
if ($target =~ /^31(\w+)$/) {
    $target = "1" . ${1};
}

# uhd can be in own of two places.
if (-e "/usr/share/uhd/images/$BITFILE") {
    $BITFILE = "/usr/share/uhd/images/$BITFILE";
}
elsif (-e "/usr/local/share/uhd/images/$BITFILE") {
    $BITFILE = "/usr/local/share/uhd/images/$BITFILE";
}
else {
    fatal("Cannot find $BITFILE");
}

#
# Get a listing of the devices
#
my $devices = GetDeviceList();
if (!$devices || !keys(%{$devices})) {
    fatal("Cannot find any devices");
}
my $device;
foreach my $serial (keys(%{$devices})) {
    my $dev = $devices->{$serial};
    if ($serial =~ /${target}/) {
	$device = $dev;
	last;
    }
}
if (!defined($device)) {
    fatal("No matching device with this serial number");
}
print "Flashing Target${device}:Device0\n";
#
# This will throw a fatal error
#
FlashDevice($target);
exit(0);

#
# The environment is whacky.
#
sub GetDeviceList()
{
    my $error;
    my $devices = {};

    my $output = PipeToViv("viv_jtag_list", \$error);
    if (!$output) {
	fatal($error);
    }
    if ($debug) {
	print $output;
    }
    foreach my $line (split(/\n/, $output)) {
	if ($line =~ /^== Target(\d+): .+\/(\w+) ==$/) {
	    $devices->{$2} = $1; 
	}
    }
    if ($debug) {
	print Dumper($devices);
    }
    return $devices;
}

sub FlashDevice($)
{
    my ($serial) = @_;
    my $error;

    my $output = PipeToViv("viv_jtag_program $BITFILE $serial", \$error);
    if (!$output) {
	fatal($error);
    }
    print $output;
    return 0;
}

sub PipeToViv($$)
{
    my ($input, $pmsg) = @_;
    my $command = "$BASH --norc -s";

    if (! socketpair(CHILD, PARENT, AF_UNIX(), SOCK_STREAM(), PF_UNSPEC())) {
	print STDERR "*** PipeTo: Could not create socketpair\n";
	return undef;
    }
    CHILD->autoflush(1);
    PARENT->autoflush(1);

    my $childpid = fork();
    if (! $childpid) {
	close CHILD;

	#
	# Dup our descriptors to the parent, and exec the program.
	# The parent then talks to it read/write.
	#
	open(STDIN,  "<&PARENT") || die "Cannot redirect stdin";
	open(STDOUT, ">&PARENT") || die "Cannot redirect stdout";
	open(STDERR, ">&PARENT") || die "Cannot redirect stderr";

	exec($command);
	die("*** $0:\n".
	    "    exec '$command' failed: $!\n");
    }
    close PARENT;

    # Setup vivavdo environment in the shell
    print CHILD "source $SETUPENV\n";
    
    # Write input to the child.
    print CHILD $input;
    # Tell the process we are done writing. ie: Send it an EOF.
    shutdown(CHILD,1);
    
    my $output = "";
    while (<CHILD>) {
	$output .= $_;
    }
    close(CHILD);
    waitpid($childpid, 0);
    if ($?) {
	$$pmsg = "PipeCommand failed: '$command'";
	if ($output ne "") {
	    $$pmsg .= "\n" . $output;
	}
	return undef;
    }
    return $output;
}

sub fatal($)
{
    my ($msg) = @_;

    die("*** $0:\n".
	"    $msg\n");
}

