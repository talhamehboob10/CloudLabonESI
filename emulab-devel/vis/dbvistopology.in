#!/usr/bin/perl -wT

#
# Copyright (c) 2000-2013 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

use English;
use Getopt::Std;

#
# Generate a PNG image of the topology for an experiment.
#
sub usage()
{
    print STDOUT
	"Usage: dbvistoplogy [-o <outputfile>] [-t <thumbsize> ] [-z <zoomfactor>] [-d <detaillevel>] <pid> <eid>\n";
    exit(-1);
}
my  $optlist = "o:z:d:t:xs:";

#
# Configure variables
#
my $TB       = "@prefix@";

#
# Testbed Support libraries
#
use lib "/usr/testbed/lib";
use libdb;
use libtestbed;

my $render   = "$TB/libexec/vis/render";
my $output;
my $zoom;
my $detail;
my $thumb;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Parse command arguments. Once we return from getopts, all that should
# be left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (@ARGV != 2) {
    usage();
}
my $pid   = $ARGV[0];
my $eid   = $ARGV[1];

if (defined($options{"t"})) {
    $thumb = $options{"t"};
    
    if ($thumb =~ /^([0-9]+)$/) {
	$thumb = $1;
    }
    else {
	die("Bad data in thumbnail size: $thumb");
    } 
}

if (defined($options{"o"})) {
    $output = $options{"o"};

    if ($output =~ /^([-\@\w.\/]+)$/) {
	$output = $1;
    }
    else {
	die("Bad data in output name: $output");
    }
}

if (defined($options{"z"})) {
    $zoom = $options{"z"};
    if ($zoom =~ /^([\.0-9]+)$/) {
	$zoom = $1;
    }
    else {
	die("Bad data in zoom factor: $zoom");
    }
}

if (defined($options{"d"})) {
    $detail = $options{"d"};
    if ($detail =~ /^([0-9]+)$/) {
	$detail = $1;
    }
    else {
	die("Bad data in detail level: $detail");
    }
}

#
# Untaint the arguments.
#
if ($pid =~ /^([-\@\w]+)$/) {
    $pid = $1;
}
else {
    die("Tainted argument $pid!\n");
}
if ($eid =~ /^([-\@\w]+)$/) {
    $eid = $1;
}
else {
    die("Tainted argument $eid!\n");
}

#
# Verify existing experiment.
#
if (! ExpState($pid, $eid)) {
    die("*** $0:\n".
	"    No such experiment $pid/$eid\n");
}
my $args = "";

if (defined($options{"x"})) {
    $args .= "-x ";
}
if (defined($options{"s"})) {
    my $uid = $options{"s"};
    if ($uid =~ /^([-\w]+)$/) {
	$uid = $1;
    }
    $args .= "-s $uid ";
}

if (defined($zoom)) {
    $args .= "-z $zoom ";
} 

if (defined($detail)) {
    $args .= "-d $detail ";
}

if (defined($thumb)) {
    $args .= "-t $thumb ";
}

$args .= "$pid $eid ";

if (defined($output)) {
    $args .= "> $output";
} else {
    $args .= "2> /dev/null";
}

if (system("nice $render $args") != 0) { 
    exit(1);
}

exit(0);
