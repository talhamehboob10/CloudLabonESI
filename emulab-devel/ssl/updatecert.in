#!/usr/bin/perl -w
#
# Copyright (c) 2008-2014 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use Cwd qw(realpath);

#
# Update a certificate using the existing private key.
# 
sub usage()
{
    print "Usage: updatecert [-d] [-o file | -w] [-k keyfile] <certfile.pem>\n";
    exit(1);
}
my $optlist   = "do:k:w";
my $debug     = 0;
my $overwrite = 0;
my $outfile;
my $keyfile;

#
# Configure variables
#
my $TB		  = "@prefix@";
my $TBOPS         = "@TBOPSEMAIL@";
my $OPENSSL       = "/usr/bin/openssl";
my $SSLDIR        = "$TB/lib/ssl";
my $CACONFIG      = "$SSLDIR/ca.cnf";
my $EMULAB_CERT   = "$TB/etc/emulab.pem";
my $EMULAB_KEY    = "$TB/etc/emulab.key";
my $WORKDIR       = "$TB/ssl";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Protos
sub fatal($);
sub UpdateCert($$);

#
# Turn off line buffering on output
#
$| = 1; 

# Load the Testbed support stuff.
use lib "@prefix@/lib";
use libtestbed;
use emutil qw(TBGetUniqueIndex);

if ($UID != 0) {
    fatal("Must be root to run this script\n");
}

#
# Check args.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug++;
}
if (defined($options{"o"})) {
    $outfile = $options{"o"};
}
elsif (defined($options{"w"})) {
    $overwrite = 1;
}
if (defined($options{"k"})) {
    $keyfile = $options{"k"};
}
usage()
    if (!@ARGV);
my $certfile = $ARGV[0];
$keyfile = $certfile
    if (!defined($keyfile));

fatal("No such file: $certfile")
    if (! -e $certfile);

exit(UpdateCert($certfile, $keyfile));

#
# Update a certificate using the installed CA.
#
sub UpdateCert($$)
{
    my ($certfile, $keyfile) = @_;

    $keyfile = realpath($keyfile);
    chomp($keyfile);
    $certfile = realpath($certfile);
    chomp($certfile);

    #
    # Make sure we can get find the private key in the file, and
    # save it for later.
    #
    my $privkey;
    my $string;
    
    open(CERT, $keyfile)
	or fatal("Could not open $keyfile");
    while (<CERT>) {
	my $line = $_;
	if ($line =~ /^-----BEGIN RSA/) {
	    $string = $line;
	    next;
	}
	if ($line =~ /^-----END RSA/) {
	    $string  = $string .= $line;
	    $privkey = $string;
	    next;
	}
	$string .= $line
	    if (defined($string));
    }
    close(CERT);
    if (!defined($privkey)) {
	fatal("Could not find private key in $keyfile");
    }

    #
    # CD to the workdir, and then serialize on the lock file since
    # there is some shared goop that the ssl tools muck with (serial
    # number, index, etc.).
    # 
    chdir("$WORKDIR") or
	fatal("Could not chdir to $WORKDIR: $!");

    TBScriptLock("mkusercert") == 0 or
	fatal("Could not get the lock!");

    # Update by changing serial.
    my $serial = TBGetUniqueIndex( "user_sslcerts" );

    #
    # Need an index file, which is the openssl version of the DB.
    #
    if (! -e "index.txt") {
	open(IND, ">index.txt")
	    or fatal("Could not create index.txt");
	close(IND);
    }
    
    #
    # Save the new certificate to a temporary file: OpenSSL will reuse the
    # plain text from the old certificate instead of the current version,
    # so we regenerate the whole thing to avoid confusion.
    #
    my $newcert = "/tmp/$$.pem";
    my $newreq  = "/tmp/$$.req";

    # Need a serial number file.
    open(SER, ">serial")
	or fatal("Could not open serial for writing");
    printf SER "%08x\n", $serial;
    close(SER);

    system("$OPENSSL x509 -x509toreq -in $certfile ".
	   "   -signkey $keyfile -out $newreq");
    if ($?) {
	fatal("Could not create new certificate request");
    }
    system("$OPENSSL ca -batch -policy policy_match -days 2000 ".
	   " -name CA_syscerts -config $CACONFIG -in $newreq ".
	   " -extensions typical_extensions -md sha1 ".
	   " -cert $EMULAB_CERT -keyfile $EMULAB_KEY -out $newcert");
    if ($?) {
	fatal("Could not create new certificate");
    }

    # Put the private key back into the new file, if they were originally
    # in the same file.
    if ($certfile eq $keyfile) {
	open(CERT, ">>$newcert")
	    or fatal("Could not open $newcert for writing");
	print CERT $privkey;
	close(CERT);
    }
    if (defined($outfile) || $overwrite) {
	$outfile = $certfile
	    if ($overwrite);

	if ($overwrite) {
	    system("/bin/mv -f $outfile ${outfile}.bak");
	    fatal("Could not backup $outfile to ${outfile}.bak")
		if ($?);
	}
	system("/bin/mv -f $newcert $outfile");
	fatal("Could not rename $newcert to $outfile")
	    if ($?);
	
	print "New certificate written to $outfile\n";
    }
    else {
	system("/bin/cat $newcert");
	unlink($newcert);
    }
    TBScriptUnlock();

    return 0;
}

sub fatal($)
{
    my ($msg) = @_;

    die("*** $0:\n".
	"    $msg\n");
}
