#/usr/bin/perl
#
# Copyright (c) 2009 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

use Data::Dumper;

# Turn off line buffering on output
$| = 1; 

chdir "@prefix@/data/node_usage";

open A, "node_usage.raw";

my $keep = 100;
my @data;
$data[0] = {time => -1};
$data[$keep-1] = undef;

sub fetch_until ($) {

    my ($until) = @_;

    while ($data[0]{time}[0] <= $until && ($_ = <A>)) {
	pop @data;
	chop;
	s/^(\d+) (\d+) // or die;
	my $time = $2;
	my %d;
	while (s/^ ([\w\d\-\?]+): (\d+) (\d+) (\d+) //) {
	    my $type = $1;
	    my @d = ($2, $3, $4);
	    next unless $type =~ /^pc(600|850|2000|3000)$/;
	    $d{$type} = \@d;
	}
	$data[0]{time}[1] = $time - 1;
	unshift @data, {time => [$time, $time], data => \%d};
    }
}

open B, "from_ptop.raw";

while (<B>) {
    chop;
    s/^(\d+).+ ::// or die;
    my $time = $1;
    my %d;
    while (s/^ ([\w\d\-\?]+): (\d+)//) {
	my $type = $1;
	my @d = ($2);
	next unless $type =~ /^pc(600|850|2000|3000)$/;
	$d{$type} = $d[0];
    }
    my %r;
    fetch_until $time + 5;
    my $c = 0;
    foreach my $d (@data) {
	last unless $d->{time}[1] >= $time - 10;
	next unless $d->{time}[0] <= $time + 1;
	$c++;
	#print ">>$d->{time}[0] $d->{time}[1]\n";
	while (my ($k,$v) = each %{$d->{data}}) {
	    if (exists $r{$k}) {
		foreach my $i (0 .. 2) {
		    $r{$k}[$i][0] = $v->[$i] if $v->[$i] < $r{$k}[$i][0];
		    $r{$k}[$i][1] = $v->[$i] if $v->[$i] > $r{$k}[$i][1];
		}
	    } else {
		$r{$k} = [map {[$_, $_]} @$v];
	    }
	}
    }
    #print "XXX ";
    #foreach my $k (sort keys %r) {
    #    print "$k: [$r{$k}[0][0] $r{$k}[0][1]] [$r{$k}[1][0] $r{$k}[1][1]] [$r{$k}[2][0] $r{$k}[2][1]]  ";
    #}
    #print "\nYYY ";
    #foreach my $k (sort keys %d) {
    #    print "$k: $d{$k}  ";
    #}
    my @errors;
    foreach my $k (sort keys %r) {
	my ($min,$max) = @{$r{$k}[1]};
	my $errmax = $r{$k}[2][1];
	push @errors, sprintf("%s -%d [%d %d]",$k,$min - $d{$k},$min,$max) if $d{$k} < $min && $min - $d{$k} > $errmax;
	push @errors, sprintf("%s +%d [%d %d]",$k,$d{$k} - $max,$min,$max) if $d{$k} > $max && $d{$k} - $max > $errmax;
    }
    print "$time ";
    foreach (@errors) {
	print " $_ ";
    }
    print "\n";
}
