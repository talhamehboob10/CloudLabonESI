#
#
#
use strict;
use libinstall;
use installvars;
use Cwd qw(realpath);

sub Install($$$)
{
    my ($server, $isupdate, $impotent) = @_;

    # Boss is the FS *only* when OPS is a VM (jail) on boss. 
    return 0
	if (ISBOSSNODE($server) && !ISFS($server));

    if ($isupdate) {
	#
	# Replace the old domain/IP with the new domain/IP.
	#
	my ($a,$b,$c,$d) = ($CONTROL_NETWORK =~ /^(\d*)\.(\d*)\.(\d*)\.(\d*)/);
	my @replacements = (
	    # Looking for hostname.emulab.net 
	    [qr{\s(\w*boss)\.[-\w\.]+\s}, '" $1.' . ${OURDOMAIN} . ' "'],
	    # Looking for "-network a.b.c.d -mask a.b.c"
	    [qr{share\s+\-netmask\s+[\d\.]+\s+\-mask\s+[\d\.]+\s},
	     '"share\t-network' .
	     "${a}.${b}.${c}.${d} -mask " . $CONTROL_NETMASK . ' "'],
	    );
	Phase "exports", "Updating $EXPORTS_HEAD", sub {
	    QueryReplaceFileFatal($EXPORTS_HEAD, \@replacements);
	};
	return 0;
    }

    Phase "exports", "Setting up exports", sub {
	Phase "ex.head", "Creating $EXPORTS_HEAD", sub {
	    DoneIfExists($EXPORTS_HEAD);

	    #
	    # Figure out which of these directories are on the same
	    # filesystems.  Note: we cannot do /share on the same
	    # exports line as the other filesystems because of the RO
	    # mount below (trust me).
	    #
	    my @exports_lines = ();

	    if (!$OPSVM_ENABLE) {
		my %filesystems;
		my @dirs = ();
		if (ISOPSNODE($server)) {
		    # Ops always exports these to boss.
		    @dirs = ('/var', $PREFIX);
		}
		if (ISFS($server)) {
		    # The fileserver exports these too.
		    # But only /share if ZFS.
		    if ($WITHZFS) {
			@dirs = (@dirs, $SHAREROOT);
		    } else {
			@dirs = (@dirs, @MOUNTPOINTS);
		    }
		}
		foreach my $dir (@dirs) {
		    if ($dir ne $SHAREROOT) {
			my $dir = realpath($dir);
			chomp($dir);
			my $dev = (stat($dir))[0];
			push @{$filesystems{$dev}}, $dir;
		    }
		}

		#
		# Use that knowledge to create lines for /etc/exports.head
		#
		foreach my $key (keys %filesystems) {
		    push @exports_lines,
			join(" ",@{$filesystems{$key}}) .
			"\t$BOSSNODE -maproot=root";
		    # if not the ops node, must export to that node as well
		    if (!ISOPSNODE($server)) {
			push @exports_lines,
			    join(" ",@{$filesystems{$key}}) .
			    "\t$USERNODE -maproot=root";
		    }
		}
	    }

	    #
	    # /share is special. We want to export to boss read-write,
	    # but to the control network read-only.
	    #
	    if ($SHAREDIR && ISFS($server)) {
		my $realdir = realpath($SHAREROOT);
		chomp($realdir);
		push(@exports_lines,
		     "$realdir\t$BOSSNODE -maproot=root");
		# if not the ops node, must export to that node as well
		if (!ISOPSNODE($server) && !$OPSVM_ENABLE) {
		    push(@exports_lines,
			 "$realdir\t$USERNODE -maproot=root");
		}
		if (!$NOSHAREDFS) {
		    my ($a,$b,$c,$d) =
			($CONTROL_NETWORK =~ /^(\d*)\.(\d*)\.(\d*)\.(\d*)/);
		    push(@exports_lines,
			 "$realdir\t-network ${a}.${b}.${c}.${d} ".
			 "-mask $CONTROL_NETMASK -maproot=root -ro -alldirs");
		    if ($PROTOGENI_GENIRACK) {
			push(@exports_lines,
			     "$realdir\t-network 172.16.0.0 ".
			     "-mask 255.240.0.0 -maproot=root -ro -alldirs");
		    }
		}
	    }
	    
	    #
	    # Put them in exports.head, and copy that to /etc/exports
	    #
	    CreateFileFatal($EXPORTS_HEAD, @exports_lines);
	    ExecQuietFatal("cp $EXPORTS_HEAD $EXPORTS_FILE");
	};

	# XXX Newhup
	Phase "mountd", "HUPing mountd", sub {
	    PhaseSkip("No new exports file") if PhaseWasSkipped("ex.head");
	    PhaseSkip("mountd not running")
		unless `ps -auxw | grep mountd | grep -v grep`;
	    ExecQuietFatal("killall -HUP mountd");
	};
    };
    return 0;
}

# Local Variables:
# mode:perl
# End:
