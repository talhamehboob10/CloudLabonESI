#
# The template
#
use strict;
use libinstall;
use installvars;

sub Install($$$)
{
    my ($server, $isupdate, $impotent) = @_;

    if ($isupdate) {
	return 0;
    }

    Phase "Automount", "Setting up automounter", sub {
	if (!$WITHZFS || ISFS($server) ||
	    (ISOPSNODE($server) && $OPSVM_ENABLE)) {
	    PhaseSkip("Unneeded");
	}

	#
	# Create the mountpoints so that AMD/autofs don't fail.
	# Actually, this doesn't seem to matter for AMD, but will
	# blow autofs startup out of the water.
	#
	Phase "mountpoints", "Creating mountpoints", sub {
	    foreach my $dir ("/groups", "/proj", "/users") {
		Phase $dir, $dir, sub {
		    DoneIfExists($dir);
		    mkdir $dir, 0777 or
			PhaseFail("Unable to create $dir : $!");
		};
	    }
	};

	if ($WITHAMD) {
	    my @lines = ();
	    Phase "amd", "Enabling AMD", sub {
		foreach my $map ("groups", "proj", "users") {
		    Phase "amd-$map", "Create $map map", sub {
			DoneIfExists("/etc/amd.$map");
			@lines = (
			    "/defaults opts:=rw,nosuid,vers=3,proto=tcp",
			    "* type:=nfs;rhost:=ops;rfs:=/$map/\${key}"
			);
			CreateFileFatal("/etc/amd.$map", @lines);
		    };
		}
		Phase "amd-rc", "Add to $RCCONF", sub {
		    @lines = (
			"amd_enable=\"YES\"",
			"amd_flags=\"-k amd64 -x all -l syslog /users /etc/amd.users /proj /etc/amd.proj /groups /etc/amd.groups\""
		    );
		    DoneIfUpdated($RCCONF, @lines);
		    AppendToFileFatal($RCCONF, @lines);
		};
		Phase "amd-start", "(Re)starting", sub {
		    ExecQuietFatal("/etc/rc.d/amd restart");
		};
	    };
	}
	#
	# Use autofs.
	#
	else {
	    Phase "autofs", "Enabling autofs", sub {
		# XXX autofs had problems with long paths before FreeBSD 10.3.
		if ($FBSD_MAJOR < 10 ||
		    ($FBSD_MAJOR == 10 && $FBSD_MINOR < 2)) {
		    PhaseFatal("No autofs in this version of FreeBSD; ".
			       "use WITHAMD instead.");
		}
		if ($FBSD_MAJOR == 10 && $FBSD_MINOR < 3) {
		    print STDERR "WARNING: autofs ".
			"is buggy in this version of FreeBSD\n";
		}
		Phase "autofs-maps", "Creating maps", sub {
		    DoneIfExists("$ETCDIR/autofs_boss.sh");
		    ExecQuietFatal("$GMAKE -C $TOP_OBJDIR/autofs first-install");
		    ExecQuietFatal("touch $ETCDIR/validmounts.txt");
		};

		Phase "autofs-rc", "Add to $RCCONF", sub {
		    my @lines = (
			"autofs_enable=\"YES\"",
			"automountd_flags=\"-v\"",
			"autounmountd_flags=\"-v\""
			);
		    DoneIfUpdated($RCCONF, @lines);
		    AppendToFileFatal($RCCONF, @lines);
		};
		Phase "autofs-start", "(Re)starting", sub {
		    ExecQuietFatal("/etc/rc.d/autounmountd restart");
		    ExecQuietFatal("/etc/rc.d/automountd restart");
		    ExecQuietFatal("/etc/rc.d/automount restart");
		};
	    };
	}
    };
    return 0;
}

# Local Variables:
# mode:perl
# End:
