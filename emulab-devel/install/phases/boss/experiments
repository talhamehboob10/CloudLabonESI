#
# The template
#
use strict;
use libinstall;
use installvars;

# Initial experiments to create. Indexed by eid.
my %EXPERIMENTS =
    ("hwdown"	     => {"pid"	       => "emulab-ops",
			 "description" => "Node reported as down"},
     "reloading"     => {"pid"	       => "emulab-ops",
			 "description" => "Nodes reloading images"},
     "reloadpending" => {"pid"	       => "emulab-ops",
			 "description" => "Nodes waiting for reload"},
     "oldreserved"   => {"pid"	       => "emulab-ops",
			 "description" => "Nodes in limbo during swap modify"},
     "nfree-leases"  => {"pid"	       => "emulab-ops",
			 "description" => "Nodes in limbo during nfree"},
     "nfree-locked"  => {"pid"	       => "emulab-ops",
			 "description" => "Nodes in limbo during nfree"},
     "opsnodes"	     => {"pid"	       => "emulab-ops",
			 "description" => "Nodes designated as Ops Nodes"},
     "subbossnodes"  => {"pid"	       => "emulab-ops",
			 "description" => "Nodes designated as subbosses"},
     "holding"	     => {"pid"	       => "emulab-ops",
			 "description" => "Nodes in a holding pattern"},
     "shared-nodes"  => {"pid"	       => "emulab-ops",
			 "description" => "Nodes in shared mode"},
     "hwcheckup"     => {"pid"	       => "emulab-ops",
			 "description" => "Nodes being testing after failure"},
     "imageimport"   => {"pid"	       => "emulab-ops",
			 "description" => "Nodes being loaded with new images"},
     "external-holding" => {"pid"      => "emulab-ops",
			 "description" => "Holding experiment for fake nodes"},
     "vlan-holding"  => {"pid"      => "emulab-ops",
			 "description" =>
			     "Holding experiment for internal vlans"},
     "openflow-vlans"=> {"pid"      => "emulab-ops",
			 "description" =>
			     "Holding experiment for static openflow vlans"},
     "shared-vlans"  => {"pid"         => "emulab-ops",
			 "description" => "Holding experiment for shared vlans"},
    );

sub Install($$$)
{
    my ($server, $isupdate, $impotent) = @_;

    # Replace if this script does an update for ip/domain.
    return 0
	if ($isupdate);

    Phase "experiments", "Setting up system experiments", sub {
	foreach my $eid (keys(%EXPERIMENTS)) {
	    my $pid  = $EXPERIMENTS{$eid}->{"pid"};
	    my $desc = $EXPERIMENTS{$eid}->{"description"};
	    
	    Phase "$pid/$eid", "$pid/$eid", sub {
		PhaseSkip("Experiment Created")
		    if (-d "$PROJROOT/$pid/exp/$eid");
		ExecQuietFatal("$SUDO -u $PROTOUSER $WAP $BATCHEXP ".
			       "  -q -i -k -j -w -f -n -S 'System Experiment' ".
			       "  -L 'System Experiment' ".
			       "  -E '$desc - DO NOT DELETE' ".
			       "  -p $pid -e $eid");
		#
		# XXX create an empty topomap so that nodes booting up in
		# one of these experiments won't fail in rc.topomap.
		#
		ExecQuiet("$SUDO -u $PROTOUSER $GENTOPOFILE $pid $eid");
	    };
	}
    };
    return 0;
}

# Local Variables:
# mode:perl
# End:
