
#
# This is the powder-fixed specific parts of target system setup
#
use strict;
use English;
use libinstall;
use installvars;
use libtestbed;
use EmulabConstants;
use EmulabFeatures;
use emutil;
use libEmulab;
use emdb;
use NodeType;
use Node;
use Interface;
use OSImage;
use Image;

my $CONFIGVARS   = "$PREFIX/configvars.txt";
my $TARGETSYSVARS= "$PREFIX/etc/targetsys/variables.txt";
my $NODEFILE     = "$PREFIX/etc/targetsys/nodes.txt";
my $RADIOFILE    = "$PREFIX/etc/targetsys/radios.txt";
my $IFACEFILE    = "$PREFIX/etc/targetsys/interfaces.txt";
my $WIREFILE     = "$PREFIX/etc/targetsys/wires.txt";
my $ADDNODETYPE  = "$PREFIX/bin/editnodetype";
my $GRANTFEATURE = "$TBROOT/sbin/grantfeature";
my $ADDNODE      = "$PREFIX/sbin/addnode";
my $ADDINTERFACE = "$PREFIX/sbin/addinterface";
my $ADDWIRE      = "$PREFIX/sbin/addwire";
my $ADDMNGIFACE  = "$PREFIX/sbin/addmanagementiface";
my $TARGETSYS_DIR= lc($TARGETSYS_TARGET);

my $RUNCAPTURE   = "$TOP_SRCDIR/install/$TARGETSYS_DIR/run_capture";
my $SQLSTUFF     = "$TOP_SRCDIR/install/$TARGETSYS_DIR/tbdb.sql";
my %TYPEFILES;
my $DEFAULTTYPE;
my $TELEGRAFCONF = "/usr/local/etc/telegraf.conf";
my $TELEGRAFPSWD = "$PREFIX/etc/targetsys/telegraf.pswd";
my $IPMIPSWD     = "$PREFIX/etc/ipmi.pswd";

if ($TARGETSYS_TARGET eq "POWDER-FIXED") {
    %TYPEFILES  = ("nuc8650" =>
		      "$TOP_SRCDIR/install/$TARGETSYS_DIR/nuc8650.xml",
		   "nuc8559" =>
		      "$TOP_SRCDIR/install/$TARGETSYS_DIR/nuc8559.xml",
		   "iris030" =>
		      "$TOP_SRCDIR/install/$TARGETSYS_DIR/iris030.xml");
    $DEFAULTTYPE = "nuc8650";
}
elsif ($TARGETSYS_TARGET eq "POWDER-BUS") {
    %TYPEFILES  = ("e300-8d" =>
		      "$TOP_SRCDIR/install/$TARGETSYS_DIR/e300-8d.xml",
		   "n300" =>
		      "$TOP_SRCDIR/install/$TARGETSYS_DIR/n300.xml");
    $DEFAULTTYPE = "e300-8d";
}
elsif ($TARGETSYS_TARGET eq "POWDER-PORTABLE") {
    %TYPEFILES  = ("nexus5" =>
		       "$TOP_SRCDIR/install/powder-fixed/nexus5.xml");
    $DEFAULTTYPE = "nexus5";
}
# For UEs. 
my $ANDROID444 = "https://www.emulab.net/image_metadata.php".
    "?uuid=c40718d8-e56f-11e5-b570-99cadac50270";

# Placeholders. 
my %HOSTNAMES  = ();
my %INTERFACES = ();

if ($TARGETSYS_TARGET eq "POWDER-BUS") {
    %INTERFACES  = ("xn1"        => "inet 10.10.11.2 netmask 255.255.255.0");
    %HOSTNAMES   = ("n300-1-mng" => "10.10.11.6");
}

sub Install($$$)
{
    my ($server, $isupdate, $impotent) = @_;
    my %configvars = ();

    # Replace if this script does an update for ip/domain.
    return 0
	if ($isupdate);

    SET_TESTBED_VERSION($TARGETSYS_TARGET);

    Phase "fixednode", "Doing additional fixed node tasks", sub {
	PhaseSkip("Not a target system")
	    if (!$CONFIG_TARGETSYS);

	Phase "config", "Reading in Emulab config variables", sub {
	    PhaseFail("No config file")
		if (! -e $CONFIGVARS);
	    
	    open(CN, $CONFIGVARS)
		 or PhaseFail("Could not open $CONFIGVARS: $!");
	    while (<CN>) {
		if ($_ =~ /^([-\w]*)\s*=\s*(.*)$/) {
		    my $key = $1;
		    my $val = $2;
		    if ($val =~ /^'(.*)'$/) {
			$val = $1;
		    }
		    $configvars{$key} = "$val";
		}
	    }
	    close(CN);
	};
	
	Phase "targetconfig", "Reading in targetsys config variables", sub {
	    PhaseFail("No config file")
		if (! -e $TARGETSYSVARS);
	    
	    open(CN, $TARGETSYSVARS)
		 or PhaseFail("Could not open $TARGETSYSVARS: $!");
	    while (<CN>) {
		if ($_ =~ /^([-\w]*)\s*=\s*(.*)$/) {
		    my $key = $1;
		    my $val = $2;
		    if ($val =~ /^'(.*)'$/) {
			$val = $1;
		    }
		    $configvars{$key} = "$val";
		}
	    }
	    close(CN);
	};

	#
	# Extra install
	# 
	if ($TARGETSYS_TARGET eq "POWDER-BUS") {
	    Phase "extra", "Installing extra scripts", sub {
		ExecQuietFatal("cd $TOP_OBJDIR/install/$TARGETSYS_DIR; ".
			       "$GMAKE; $GMAKE install install-poweron");
	    };
	}

	#
	# Need ipmi tools on the Buses
	#
	if ($TARGETSYS_TARGET eq "POWDER-BUS") {
	    Phase "tipserv", "Installing emulab-tipserv package", sub {
		DoneIfPackageInstalled("emulab-tipserv", 0);
		# Oh, this is clever.
		$ENV{"ASSUME_ALWAYS_YES"} = "true";
		ExecQuietFatal("pkg install -r Emulab emulab-tipserv");
	    };
	}

	#
	# Install and localize the telegraf configuration.
	#
	Phase "telegraf", "Setting up telegraf", sub {
	    Phase "package", "Installing telegraf package", sub {
		DoneIfPackageInstalled("telegraf", 0);
		# Oh, this is clever.
		$ENV{"ASSUME_ALWAYS_YES"} = "true";
		ExecQuietFatal("pkg install telegraf");
	    };
	    my $config = "$TOP_OBJDIR/install/powder-fixed/telegraf.conf";
	    my $password;

	    Phase "password", "Picking up telegraf password", sub {
		PhaseFail("Password file does not exist")
		    if (! -e $TELEGRAFPSWD);

		$password = `/bin/cat $TELEGRAFPSWD`;
		PhaseFail("Cannot read password from file")
		    if ($?);
		
		chomp($password);
	    };

	    Phase "conf", "Generating telegraf config file", sub {
		ExecQuietFatal("cd $TOP_OBJDIR/install/powder-fixed; ".
			       "$GMAKE telegraf.conf");
		ExecQuietFatal(" cat $config | sed ".
			       "   -e 's/__powderpassword__/$password/' ".
			       "   > $TELEGRAFCONF");
	    };
	};

	# These are handy.
	Phase "fstab", "Adding extras to $FSTAB", sub {
	    DoneIfEdited($FSTAB);
	    AppendToFileFatal($FSTAB,
			      "proc\t\t/proc\tprocfs\trw\t0\t0",
			      "fdesc\t\t/dev/fd\tfdescfs\trw\t0\t0");
	};

	#
	# Add /etc/hosts entries for the switches. 
	#
	if (keys(%HOSTNAMES)) {
	    Phase "etchosts", "Adding hosts entries for switches", sub {
		my @strings = ();
	    
		foreach my $switch (keys(%HOSTNAMES)) {
		    my $ip = $HOSTNAMES{$switch};
		    push(@strings, "$ip\t$switch");
		}
		DoneIfEdited($HOSTS);
		AppendToFileFatal($HOSTS, @strings);
	    };
	}

	#
	# Add in the extra stuff which is all hard coded sql.
	#
	Phase "sql", "Adding addtional stuff to the database", sub {
	    PhaseSkip("No addtional SQL")
		if (! -e $SQLSTUFF);
	    
	    ExecQuietFatal("$MYSQL $DBNAME < $SQLSTUFF");
	};

	#
	# Mike says 200000000 is good for fixed nodes.
	#
	Phase "frisbeerate", "Setting frisbeed max rate", sub {
	    ExecQuietFatal("$PREFIX/sbin/setsitevar ".
			   "images/frisbee/maxrate_std 200000000");
	    ExecQuietFatal("$PREFIX/sbin/setsitevar ".
			   "images/frisbee/maxrate_usr 200000000");
	};

	#
	# Enable these features.
	#
	my %features = (
	    "GeniOsSetup"     => "Use libossetup for StartSliver",
	    "NewOsload"       => "New version of osload library",
	    "ImageProvenance" => "Image Provenance and versioning",
	    );

	foreach my $name (keys(%features)) {
	    my $description = $features{$name};
    
	    my $feature = EmulabFeatures->Lookup($name);
	    Phase "feature", "Adding $name feature", sub {
		PhaseSkip("already exists")
		    if (defined($feature));
		$feature = EmulabFeatures->Create($name, $description);
		PhaseFail("Failed to create feature")
		    if (!defined($feature));
	    };
	    Phase "feature", "Enabling $name feature", sub {
		if ($name eq "ImageProvenance") {
		    if ($TARGETSYS_TARGET eq "POWDER-BUS") {		    
			ExecQuietFatal("$SUDO -u $PROTOUSER ".
				       "$WAP $GRANTFEATURE ".
				       "-p " . TBOPSPID() . " ImageProvenance");
		    }
		    else {
			PhaseSkip("Not a Bus")
		    }
		}
		else {
		    $feature->SetGlobalEnable(1) == 0
			or PhaseFail("Could not enable feature");
		    $feature->SetGlobalDisable(0) == 0
			or PhaseFail("Could not clear disable flag on feature");
		}
	    };
	}

	#
	# Need to do import the ANDROID image specially, and do it before
	# we bring in the nexus type.
	#
	Phase "ANDROID444", "Fetching ANDROID444 image. Patience!", sub {
	    my $url   = $ANDROID444;
	    my $image = OSImage->Lookup(TBOPSPID(), "ANDROID444-STD");
	    PhaseSkip("already fetched")
		if (defined($image));

	    # Import with novalidate option.
	    ExecQuietFatal("$SUDO -u $PROTOUSER ".
			   "         $WAP $IMAGEIMPORT -V -g '$url'");
	    # Then update the only thing we can (and must have).
	    ExecQuietFatal("$SUDO -u $PROTOUSER ".
			   "         $WAP $IMAGEVALIDATE -u -V size ".
			   TBOPSPID() . ",ANDROID444-STD");
	};

	#
	# Add the node types to the DB.
	#
	foreach my $type (keys(%TYPEFILES)) {
	    my $file = $TYPEFILES{$type};

	    Phase $type, "Adding node type $type to the database", sub {
		PhaseSkip("already added")
		    if (NodeType->Lookup($type));
	    
		ExecQuietFatal("$SUDO -u $PROTOUSER $WAP ".
			       "$ADDNODETYPE $file");
	    };
	}
	#
	# We are a member of the image tracking federation.
	#
	Phase "tracker", "Turning on image tracking", sub {
	    ExecQuietFatal("$PREFIX/sbin/setsitevar ".
			   "protogeni/use_imagetracker 1");
	};
	# And admission control.
	Phase "admission", "Turning on admission control", sub {
	    ExecQuietFatal("$PREFIX/sbin/setsitevar ".
			   "general/admission_control 1");
	};
	# Default image type.
	Phase "typelist", "Setting default typelist", sub {
	    ExecQuietFatal("$PREFIX/sbin/setsitevar ".
			   "images/default_typelist $DEFAULTTYPE");
	};
	if ($TARGETSYS_TARGET eq "POWDER-BUS") {
	    Phase "idlepower", "Enabling idlepower", sub {
		ExecQuietFatal("$PREFIX/sbin/setsitevar ".
			       "general/idlepower_enable 1");
	    };
	    Phase "idlepower", "Setting idletime", sub {
		ExecQuietFatal("$PREFIX/sbin/setsitevar ".
			       "general/idlepower_idletime 900");
	    };
	    Phase "crontab", "Adding idlepower to crontab", sub {
		DoneIfEdited($CRONTAB);
		AppendToFileFatal($CRONTAB,
		      "0/5\t*\t*\t*\t*\troot\t$PREFIX/sbin/idlepower -r");
	    };
	}
#	Phase "deadman", "Enabling deadman watchdog", sub {
#	    ExecQuietFatal("$PREFIX/sbin/setsitevar ".
#			   "powder/deadman_enable 1");
#	};

	# We need tiplines and tipserver entries.
	Phase "tip", "Adding tiplines and tipservers to DB", sub {
	    DBQueryWarn("replace into tipservers ".
			" values ('$BOSSNODE')") or
		PhaseFail("inserting tipserver");

	    DBQueryWarn("replace into `tiplines` set ".
			" tipname='powduino',node_id='powduino',".
			" server='$BOSSNODE',disabled=0") or 
		PhaseFail("inserting tipline");

	    # IPMI for the bus experimental node.
	    if ($TARGETSYS_TARGET eq "POWDER-BUS") {
		DBQueryWarn("replace into `tiplines` set ".
			    " tipname='ed1',node_id='ed1',".
			    " server='$BOSSNODE',disabled=0") or 
		    PhaseFail("inserting tipline");
	    }
	};
	Phase "tiplogs", "Creating tiplogs directory", sub {
	    DoneIfExists("$PREFIX/log/tiplogs");
	    mkdir "$PREFIX/log/tiplogs", 0755 or
		PhaseFail("Unable to create tiplogs: $!");
	};

	#
	# Add the nodes to the DB.
	#
	Phase "nodes", "Adding nodes to the database", sub {
	    PhaseFail("No node file")
		if (! -e $NODEFILE);
	    
	    open(NODE, $NODEFILE)
		or PhaseFail("Could not open $NODEFILE: $!");
	    
	    while (<NODE>) {
		chomp($_);
		next
		    if ($_ =~ /^#/);
		
		my ($nodeid,$type,$MAC,$IP,$MNGMAC,$MNGIP) = split(",", $_);
		if ($nodeid) {
		    my $nodetype = NodeType->Lookup($type);
		    PhaseFail("No such type $type")
			if (!defined($nodetype));
		    my $ctrliface = $nodetype->control_interface();

		    Phase $nodeid, "Adding $nodeid", sub {
			PhaseSkip("already done")
			    if (Node->Lookup($nodeid));
			ExecQuietFatal("$SUDO -u $PROTOUSER $WAP ".
				       "  $ADDNODE -t $type $nodeid");
		    };
		    my $node = Node->Lookup($nodeid);
		    PhaseFail("lookup failure")
			if (!defined($node));
		    
		    Phase "${nodeid}_iface", "Adding control iface", sub {
			PhaseSkip("already done")
			    if (Interface->LookupControl($node));
			ExecQuietFatal("$SUDO -u $PROTOUSER $WAP ".
				       "  $ADDINTERFACE -b 1Gb -I $IP ".
				       "     -M 255.255.255.248 -e ctrl ".
				       "     -m $MAC $nodeid $ctrliface");
		    };
		    if ($MNGMAC) {
			Phase "${nodeid}_iface", "Adding mngmnt iface", sub {
			    PhaseSkip("already done")
				if (Interface->LookupManagement($node));

			    PhaseFail("Password file does not exist")
				if (! -e $IPMIPSWD);

			    my $ipmipswd = `/bin/cat $IPMIPSWD`;
			    PhaseFail("Cannot read password from file")
				if ($?);
			    chomp($ipmipswd);
			
			    ExecQuietFatal("$SUDO -u $PROTOUSER $WAP ".
					   "  $ADDMNGIFACE -t ipmi20 " .
					   "-a pswd -T $BOSSNODE $nodeid ".
					   "$MNGMAC $MNGIP ADMIN $ipmipswd");
			};
		    }
		    # The nodes are reservable.
		    Phase "reserve", "Marking node reservable", sub {
			DBQueryWarn("update nodes set reservable=1 ".
				    "where node_id='$nodeid'") or
			    PhaseFail("marking $nodeid");
		    };
		}
	    }
	    close(CN);
	    Phase "named", "Restarting named", sub {
		ExecQuietFatal($NAMED_SETUP);
	    };
	    Phase "dhcpd", "Regenerating dhcpd.conf", sub {
		ExecQuietFatal("$DHCPD_MAKECONF -i");
	    };
	    PhaseSucceed("Nodes Done");
	};

	# Add radios.
	Phase "radios", "Adding radios to the database", sub {
	    PhaseSkip("No radios to add")
		if (! -e $RADIOFILE);
	    
	    open(RADIO, $RADIOFILE)
		or PhaseFail("Could not open $RADIOFILE: $!");
	    
	    while (<RADIO>) {
		chomp($_);
		next
		    if ($_ =~ /^#/);
		
		my ($nodeid,$type) = split(",", $_);
		PhaseFail("Could not parse $RADIOFILE")
		    if (! (defined($nodeid) && defined($type)));
		
		Phase $nodeid, "Adding $nodeid", sub {
		    PhaseSkip("already done")
			if (Node->Lookup($nodeid));
		    ExecQuietFatal("$SUDO -u $PROTOUSER $WAP ".
				   "  $ADDNODE -t $type $nodeid");
		};
		my $node = Node->Lookup($nodeid);
		PhaseFail("lookup failure for $nodeid")
		    if (!defined($node));
	    }
	    close(RADIO);
	};

	# Add additional interfaces
	Phase "interfaces", "Adding interfaces to the database", sub {
	    PhaseSkip("No interfaces to add")
		if (! -e $IFACEFILE);
	    
	    open(IFACE, $IFACEFILE)
		or PhaseFail("Could not open $IFACEFILE: $!");
	    
	    while (<IFACE>) {
		chomp($_);
		next
		    if ($_ =~ /^#/);
		
		my ($nodeid,$iface,$MAC,$IP,$speed,$role) = split(",", $_);
		PhaseFail("Could not parse $IFACEFILE")
		    if (! (defined($nodeid) && defined($role)));

		my $node = Node->Lookup($nodeid);
		PhaseFail("lookup failure for $nodeid")
		    if (!defined($node));
		
		Phase $nodeid, "Adding ${nodeid}:${iface}", sub {
		    PhaseSkip("already done")
			if (Interface->LookupByIface($node, $iface));

		    my $ipopts = "";
		    if ($IP ne "") {
			$ipopts = "-I $IP -M 255.255.255.0";
		    }
		    ExecQuietFatal("$SUDO -u $PROTOUSER $WAP ".
				       "  $ADDINTERFACE -b $speed -e $role ".
				       "   $ipopts -m $MAC $nodeid $iface");
		};
		PhaseFail("Lookup failure")
		    if (!Interface->LookupByIface($node, $iface));
	    }
	    close(IFACE);
	};
	
	# Add additional wires
	Phase "wires", "Adding wires to the database", sub {
	    PhaseSkip("No wires to add")
		if (! -e $WIREFILE);
	    
	    open(WIRE, $WIREFILE)
		or PhaseFail("Could not open $WIREFILE: $!");
	    
	    while (<WIRE>) {
		chomp($_);
		next
		    if ($_ =~ /^#/);

		my ($nodeid1,$iface1,$card1,$port1,
		    $nodeid2,$iface2,$card2,$port2,$type) = split(",", $_);
		PhaseFail("Could not parse $WIREFILE")
		    if (! (defined($nodeid1) && defined($type)));

		Phase "wire", "Adding wire ${nodeid1}:${nodeid2}", sub {
		    PhaseSkip("already done")
			if (Interface::Wire->LookupByIface($nodeid1, $iface1));
		    ExecQuietFatal("$SUDO -u $PROTOUSER $WAP ".
				   "  $ADDWIRE -t $type ".
				   "    ${nodeid1}:${iface1} $card1,$port1 ".
				   "    ${nodeid2}:${iface2} $card2,$port2");
		};
	    }
	    close(WIRE);
	};
	
	# We do not know how this will be done on a bus, yet.
	Phase "capture", "Installing capture startup file", sub {
	    ExecQuietFatal("$GMAKE -C $TOP_OBJDIR/rc.d tipserv-install");
	};
	Phase "run_capture", "Installing capture run file", sub {
	    PhaseSkip("No capture file to install")
		if (! -e $RUNCAPTURE);
	    DoneIfExists("$PREFIX/sbin/run_capture");
	    ExecQuietFatal("/bin/cp -f $RUNCAPTURE $PREFIX/sbin");
	};

	#
	# Fix NAT rule for ops jail.
	#
	my $NATCONF = "/etc/pf.nat";
	
	Phase "nat", "Updating NAT configuration", sub {
	    my $bossip = $configvars{"TARGETSYS_BOSSIP"};
	    my $opsip  = $configvars{"TARGETSYS_OPSIP"};
	    my $mask   = $configvars{"TARGETSYS_NETMASK"};

	    # Yuck, pf does not like netmasks like /255.255.255.248
	    # Has to be /29.
	    $mask = "29";
	    
	    Phase "delete", "Deleting old configuration", sub {
		DeleteFileFatal($NATCONF);
	    };
	    Phase "create", "Creating new configuration", sub {
		CreateFileFatal($NATCONF,
			"# Packet normalization",
			"scrub in all",
			"",
			"# Exclude the local networks.",
			"no nat on xn0 from $opsip to ${opsip}/${mask}",
			"no nat on xn0 from $opsip to ${bossip}/${mask}",
			"",
			"# Allow outbound connections from the jail",
			"nat on xn0 from $opsip to any -> $bossip");
	    };
	    Phase "restart", "Restarting NAT", sub {
		ExecQuietFatal("service pf restart");
	    };
	    PhaseSucceed("NAT Done");
	};

	#
	# Create a local named forward fragment file with some extra stuff.
	#
	my $forwarddots;
	my @forward_strings = ();
	my @reverse_strings = ();
	my %local_dns = ("TARGETSYS_ROUTER" => "control");

	foreach my $name (keys(%local_dns)) {
	    next
		if (!exists($configvars{$name}));

	    my $hostname = $local_dns{$name};
	    my $ip = $configvars{$name};
	    my ($a,$b,$c,$num) = split(/\./, $ip);
	    $forwarddots = "${a}.${b}.${c}";
	    
	    push(@forward_strings, "$hostname\tIN\tA\t$ip");
	    push(@reverse_strings, "$num\tIN\tPTR\t${hostname}.${OURDOMAIN}.");
	}
	my $FORWARDFRAGMENT1 = "$NAMED_DIR/${OURDOMAIN}.internal.db.local";
	my $FORWARDFRAGMENT2 = "$NAMED_DIR/${OURDOMAIN}.db.local";
	my $REVERSEFRAGMENT  = "$NAMED_DIR/reverse/${forwarddots}.db.local";
	Phase "forward1", "Creating $FORWARDFRAGMENT1", sub {
	    DoneIfExists($FORWARDFRAGMENT1);
	    CreateFileFatal($FORWARDFRAGMENT1, @forward_strings);
	};
	Phase "forward2", "Creating $FORWARDFRAGMENT2", sub {
	    DoneIfExists($FORWARDFRAGMENT2);
	    CreateFileFatal($FORWARDFRAGMENT2, @forward_strings);
	};
	Phase "reverse", "Creating $REVERSEFRAGMENT", sub {
	    DoneIfExists($REVERSEFRAGMENT);
	    CreateFileFatal($REVERSEFRAGMENT, @reverse_strings);
	};
	#
	# The local fragment we just created above is not yet in the
	# zone file, which means that when boss boots, there is no
	# record for the local names. Just run named_setup ...
	#
	Phase "named_setup", "Running named_setup", sub {
	    ExecQuietFatal($NAMED_SETUP);
	};

	#
	# Munge /etc/rc.conf for real boot.
	#
	Phase "rcconf", "Updating rcconf for actual boot", sub {
	    my @strings   = ();
	    my @ifaces    = ();
	    my @patterns  = ();
	    my $outerctrl;

	    my ($status,@output) =
		ExecQuiet("egrep '^ifconfig_xn0=' $RCCONF");
	    PhaseFail("egrep failed")
		if ($status);
	    if ($output[0] =~ /^ifconfig_xn0=(.*)$/) {
		$outerctrl = $1;
	    }
	    else {
		PhaseFail("Bad ifconfig_xn0 in $RCCONF");
	    }

	    # Telegraf
	    push(@strings, 'telegraf_enable="YES"');
	    push(@strings, 'telegraf_user="root"');

	    # /etc/rc.conf entries for extra interfaces.
	    if (keys(%INTERFACES)) {
		foreach my $iface (keys(%INTERFACES)) {
		    my $line = $INTERFACES{$iface};
		    push(@strings, "ifconfig_${iface}=\"$line\"");
		    push(@ifaces, $iface);
		}
		push(@strings,
		     "network_interfaces=\"\$network_interfaces @ifaces\"");
	    }
	    push(@strings,
		 "ifconfig_xn0=\"inet ". $configvars{"TARGETSYS_BOSSIP"} . 
		 " netmask " . $configvars{"TARGETSYS_NETMASK"} . " -tso\"");
	    # Jail network.
	    push(@strings,
		 "ifconfig_xn0_alias0=\"inet 172.17.254.254 ".
		 "netmask 255.240.0.0\"");
	    # Jail network.
	    push(@strings,
		 "ifconfig_xn0_alias1=\"inet 10.10.10.2 ".
		 "netmask 255.255.255.248\"");
	    # Actual default router.
	    push(@strings,
		 "defaultrouter=\"" . $configvars{"TARGETSYS_ROUTER"} . "\"");
	    # Going to lose all static routes below, so add this back.
	    push(@strings,
		 "static_routes=\"\$static_routes frisbee vnodes\"");
	    # Nat config.
	    push(@strings, 
		 "pf_enable=\"YES\"", "pf_rules=\"/etc/pf.nat\"");

	    #
	    # This stuff is for development inside the Mothership.
	    #
	    if (0) {
		# Outer Emulab control network.
		push(@strings,
		 "ifconfig_xn0_alias2=$outerctrl");
		# Route to outer boss and outer control networks
		push(@strings,
		     "route_outeremulab=\"-net 155.98.36.0 ".
		     "-netmask 255.255.252.0 155.98.36.1\"");
		push(@strings,
		     "route_outerboss=\"155.98.32.70 155.98.36.1\"");
		push(@strings,
		     "static_routes=\"\$static_routes outerboss outerboss\"");
	    }

	    #
	    # Okay, we want to comment out a bunch of stuff.
	    #
	    @patterns = (qr(^natd),
			 qr(^firewall),
			 qr(^defaultrouter),
			 qr(^static_routes),
			 qr(^route_targetsys),
			 qr(^route_outerboss),
			 qr(^route_vnodes),
			 qr(^ifconfig_xn0),
			 qr(^ifconfig_xn0_alias),
	    );
	    DoneIfEdited($RCCONF);
	    UpdateFileFatal($RCCONF, \@patterns, @strings);
	};

	#
	# Reset the mailing lists. We do this late so that we do not
	# all see a bunch of email until we are really ready.
	#
	Phase "emaillists", "Changing target for email lists", sub {
	    PhaseSkip("Not the mailer node")
		if ($server ne $MAILERNODE);
	    
	    opendir(DIR, "/etc/mail/lists") or
		PhaseFail("Cannot opendir /etc/mail/lists: $!");
	    my @lists = grep { $_ ne "." && $_ ne ".." } readdir(DIR);
	    closedir(DIR);

	    my $ops  = "powder-ops\@flux.utah.edu";
	    my $logs = "powder-logs\@flux.utah.edu";
	    
	    foreach my $list (@lists) {
		my $where;
		my $fname = "/etc/mail/lists/$list";

		DoneIfEdited($fname)
		    if (-e $fname);
		DeleteFileFatal($fname)
		    if (-e $fname);
		CreateFileFatal($fname, "# $list")
		    if (! -e $fname);
	
		Phase "emaillist", "Changing target for $list", sub {
		  SWITCH: for ($list) {
		      /approval$/ && do {
			  $where = $ops;
			  last SWITCH;
		      };
		      /audit$/ && do {
			  $where = "powder-audit\@flux.utah.edu";
			  last SWITCH;
		      };
		      /automail$/ && do {
			  $where = $logs;
			  last SWITCH;
		      };
		      /errors$/ && do {
			  $where = "powder-errors\@flux.utah.edu";
			  last SWITCH;
		      };
		      /logs$/ && do {
			  $where = $logs;
			  last SWITCH;
		      };
		      /ops$/ && do {
			  $where = $ops;
			  last SWITCH;
		      };
		      /stated$/ && do {
			  $where = $ops;
			  last SWITCH;
		      };
		      /testsuite$/ && do {
			  $where = $logs;
			  last SWITCH;
		      };
		      /www$/ && do {
			  $where = "powder-www\@flux.utah.edu";;
			  last SWITCH;
		      };
		  }
		    AppendToFileFatal($fname, $where)
		      if (defined($where));
		};
	    }
	};
	
	Phase "newsyslog", "Updating $NEWSYSLOG_CONF", sub {
	    DoneIfEdited($NEWSYSLOG_CONF);

	    my @lines = (
		"$LOGDIR/wbstoremonitor.log     644  7   10000  *     Z ".
		"/var/run/wbstoremonitor.pid",
		"$LOGDIR/endpoint-monitor.log   644  7   10000  *     Z ".
		"/var/run/endpoint-monitor.pid"
		);
	    AppendToFileFatal($NEWSYSLOG_CONF, @lines);
	};
	
	PhaseSucceed("Powder Fixed Setup Done");
    };
    return 0;
}

# Local Variables:
# mode:perl
# End:
