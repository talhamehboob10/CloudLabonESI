#!/usr/bin/perl -wT
#
# Copyright (c) 2000-2021 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use strict;
use Getopt::Std;
use XML::Simple;
use Data::Dumper;
use Cwd qw(realpath);

#
# Create a new user from a XML description. 
#
sub usage()
{
    print("Usage: newproj <xmlfile>\n");
    print("       newproj -l -m <pid_idx>\n");
    exit(-1);
}
my $optlist = "dm:lns";
my $debug   = 0;
my $nonlocal= 0;
my $impotent= 0;
my $silent  = 0;
my $portal;
my $resend;
my %licenses = ();
my %nsf_awards = ();

#
# Configure variables
#
my $TB		= "/test";
my $TBOPS       = "testbed-ops\@ops.cloudlab.umass.edu";
my $TBAUDIT	= "testbed-audit\@ops.cloudlab.umass.edu";
my $TBBASE      = "https://www.cloudlab.umass.edu";
my $TBWWW       = "<https://www.cloudlab.umass.edu/>";
my $LICENSES    = "$TB/sbin/manage_licenses";

#
# This script is setuid, so please do not run it as root. Hard to track
# what has happened.
#
if ($EUID == 0) {
    die("*** $0:\n".
	"    Please do not run this as root!\n");
}

#
# Untaint the path
#
$ENV{'PATH'} = "$TB/bin:$TB/sbin:/bin:/usr/bin:/usr/bin:/usr/sbin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Load the Testbed support stuff.
#
use lib "/test/lib";
use libdb;
use libtestbed;
use Project;
use User;
use Brand;

# Protos
sub fatal($);
sub UserError($);

# Locals
my $SAVEUID	= $UID;
my $xmlfile;

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"n"})) {
    $impotent = 1;
}
if (defined($options{"s"})) {
    $silent = 1;
}
if (defined($options{"l"})) {
    $nonlocal = 1;
}
if (defined($options{"m"})) {
    $resend = $options{"m"};

    if ($resend =~ /^(\d*)$/) {
	$resend = $1;
    }
    else {
	fatal("Bad characters in -m option: $resend");
    }
}
else {
    usage()
	if (@ARGV != 1);

    $xmlfile  = shift(@ARGV);
}

#
# Map invoking user to object. 
# If invoked as "nobody" we are coming from the web interface and there
# is no current user context.
#
my $this_user;

if (getpwuid($UID) ne "nobody") {
    $this_user = User->ThisUser();

    if (! defined($this_user)) {
	fatal("You ($UID) do not exist!");
    }
    fatal("You must have admin privledges to create new projects!")
	if (!TBAdmin());
}

#
# Resend email message and exit.
#
if (defined($resend)) {
    my $project = Project->Lookup($resend);
    fatal("Could not map project $resend to object!")
	if (!defined($project));

    exit($project->SendNewProjectEmail());
}

#
# Check the filename when invoked from the web interface; must be a
# file in /tmp.
#
if (! defined($this_user)) {
    if ($xmlfile =~ /^([-\w\.\/]+)$/) {
	$xmlfile = $1;
    }
    else {
	fatal("Bad data in pathname: $xmlfile");
    }

    # Use realpath to resolve any symlinks.
    my $translated = realpath($xmlfile);
    if ($translated =~ /^(\/tmp\/[-\w\.\/]+)$/) {
	$xmlfile = $1;
    }
    else {
	fatal("Bad data in translated pathname: $xmlfile");
    }
}

#
# These are the fields that we allow to come in from the XMLfile.
#
my %required = ("name"		    => "pid",
		"short description" => "name");

if ($nonlocal) {
    %required =
	(%required, ("nonlocal_id"      => "nonlocal_id",
		     "nonlocal_type"    => "nonlocal_type"));
}
else {
    %required =
	(%required, ("URL"		=> "URL",
		     "funders"	        => "funders",
		     "long description" => "why",
		     "public"	        => "public",
		     "num_pcs"		=> "num_pcs",
		     "linkedtous"	=> "linked_to_us"));
}
		
my %optional = ("newuser_xml"    => "newuser_xml",
		"leader"	 => "head_uid",	# May be chosen by newuser.
		"members"	 => "num_members",
		"ron"            => "num_ron",
		"plab"           => "num_pcplab",
		"class"          => "forClass",
		"whynotpublic"	 => "public_whynot",
		"user_interface" => "default_user_interface",
		"nsf_funded"	 => "nsf_funded",
		"nsf_awards"	 => "nsf_awards",
		"nsf_supplement" => "nsf_supplement",
    );

#
# This script is not audited cause we want the output to be sent back
# to the web interface. Thats okay since we send email from the script
# anyway.
#

#
# Must wrap the parser in eval since it exits on error.
#
my $xmlparse = eval { XMLin($xmlfile,
			    VarAttr => 'name',
			    ContentKey => '-content',
			    SuppressEmpty => undef); };
fatal($@)
    if ($@);

# APT flag. Notice and delete.
if (exists($xmlparse->{'attribute'}->{"portal"})) {
    $portal = $xmlparse->{'attribute'}->{"portal"}->{'value'};
    delete($xmlparse->{'attribute'}->{"portal"});
    my $brand = Brand->Create($portal);
    if (!defined($brand)) {
	fatal("Bad portal: $portal");
    }
}
# Licenses. Save for later, but need to delete.
foreach my $key (keys(%{ $xmlparse->{'attribute'} })) {
    if ($key =~ /^license_([-\w]+)$/) {
	my $value = $xmlparse->{'attribute'}->{"$key"}->{'value'};
	my $name  = $1;
	
	if (lc($value) eq "yes") {
	    system("$LICENSES show $name");
	    if ($?) {
		fatal("Invalid license name: $name");
	    }
	    $licenses{$name} = $name;
	    print "requested license $name\n";
	}
	delete($xmlparse->{'attribute'}->{"$key"});
    }
}

#
# Make sure all the required arguments were provided.
#
foreach my $key (keys(%required)) {
    fatal("Missing required attribute '$key'")
	if (! exists($xmlparse->{'attribute'}->{"$key"}));
}

#
# We build up an array of arguments to pass to Project->Create() as we check
# the attributes.
#
my %newproj_args = ();

foreach my $key (keys(%{ $xmlparse->{'attribute'} })) {
    my $value = $xmlparse->{'attribute'}->{"$key"}->{'value'};
    if (!defined($value)) {	# Empty string comes from XML as an undef value.
	$xmlparse->{'attribute'}->{"$key"}->{'value'} = $value = "";
    }

    if ($debug) {
	my $prval = (defined($value) ? $value : "NULL");
		     
	print STDERR "Project attribute: '$key' -> '$prval'\n";
    }

    my $dbslot;

    # Must be in the allowed lists above, with exceptions handled below
    if (exists($required{$key})) {
	$dbslot = $required{$key};
	next
	    if (!defined($dbslot));
	fatal("Null value for required field $key")
	    if (!defined($value));
    }
    elsif (exists($optional{$key})) {
	$dbslot = $optional{$key};
	next
	    if (!defined($dbslot) || !defined($value));
    }
    else {
	fatal("Invalid attribute in XML: '$key' -> '$value'\n");
    }

    # Now check that the value is legal.
    if (! TBcheck_dbslot($value, "projects", $dbslot,
			 TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
	UserError("Illegal data: $key - $value");
    }

    #
    # Do a taint check to avoid warnings, since the values are abviously okay.
    #
    if ($value =~ /^(.*)$/) {
	$value = $1;
    }
    $newproj_args{$dbslot} = $value;
}

#
# Create the user if an XML file for newuser was supplied.
#
my $newuser_xml;
if (exists($newproj_args{'newuser_xml'})) {
    $newuser_xml = $newproj_args{'newuser_xml'};
    delete($newproj_args{'newuser_xml'});

    #
    # Check the filename when invoked from the web interface; must be a
    # file in /tmp.
    #
    if (! defined($this_user)) {
	if ($newuser_xml =~ /^([-\w\.\/]+)$/) {
	    $newuser_xml = $1;
	}
	else {
	    fatal("Bad data in pathname: $newuser_xml");
	}

	# Use realpath to resolve any symlinks.
	my $translated = realpath($newuser_xml);
	if ($translated =~ /^(\/tmp\/[-\w\.\/]+)$/) {
	    $newuser_xml = $1;
	}
	else {
	    fatal("Bad data in translated pathname: $newuser_xml");
	}
    }

    #
    # We can't pass the user type to the newuser script in xml, because it
    # determines which args are required or optional in the xml data!  The
    # user type is always "project leader" for new users under newproj.
    #
    my $opt = ($impotent ? "-n" : "");
    $opt .= " -d"
	if ($debug);
    
    my $cmd = "newuser $opt -t leader $newuser_xml";
    print $cmd . "\n"
	if ($debug);
    my $cmd_out = `$cmd`;
    if ($?) {
	if (($? >> 8) > 0) {
	    UserError($cmd_out);
	}
	fatal("Error creating new user: (3, $?, $cmd) $cmd_out");
    }

    #
    # Parse the last line of output. Ick.
    #
    my @out_lines = split(/^/, $cmd_out);
    if (!( $out_lines[@out_lines-1] =~ /^User\s+(\w+)\/(\d+)\s+/)) {
	UserError("Transient error: (4, $cmd) $cmd_out");
    }
    $newproj_args{'head_uid'} = $2;
}

# NSF award. Only one allowed. Change later.
if (exists($newproj_args{'nsf_funded'})) {
    my $funded = $newproj_args{'nsf_funded'};
    if ($funded == 1) {
	my $award = $newproj_args{'nsf_awards'};
	my $sup   = $newproj_args{'nsf_supplement'};
	$nsf_awards{$award} = $sup;
    }
    delete($newproj_args{'nsf_funded'});
    delete($newproj_args{'nsf_awards'});
    delete($newproj_args{'nsf_supplement'});
}

#
# Now do special checks.
#
my $leader = User->Lookup($newproj_args{'head_uid'});
UserError("Project leader does not exist!")
    if (!defined($leader));

#
# Need a big lock to avoid double click errors, too much stuff going on in
# Project->Create() to lock tables. This lock is automatically dropped.
#
my $lock_result = DBQueryWarn("select GET_LOCK('NewProjectLock', 60)");
if (!$lock_result ||
    !$lock_result->numrows) {
    fatal("Could not get the new project lock for a long time");
}
UserError("Project already exists; pick another name!")
    if (Project->Lookup($newproj_args{'pid'}));

exit(0)
    if ($impotent);
   
#
# Now safe to create the project. Move the pid out of the argument array
# since its actually an argument to the Create() routine. Ditto for the
# project leader.
#
my $new_pid = $newproj_args{'pid'};
delete($newproj_args{'pid'});
delete($newproj_args{'head_uid'});
# Portal (Emulab, APT, CloudLab, or PhantomNet)
$newproj_args{'portal'} = $portal
    if (defined($portal));

my $newproj = Project->Create($new_pid, $leader, \%newproj_args);
if (!defined($newproj)) {
    fatal("Could not create new project!");
}
my $new_idx = $newproj->pid_idx();
DBQueryWarn("select RELEASE_LOCK('NewProjectLock')");

#
# Add any licenses.
#
if (keys(%licenses)) {
    foreach my $name (keys(%licenses)) {
	system("$LICENSES require $name $new_pid");
	if ($?) {
	    fatal("Invalid license name: $name");
	}
    }
}
# And NSF awards
if (keys(%nsf_awards)) {
    foreach my $award (keys(%nsf_awards)) {
	my $sup = $nsf_awards{$award};
	$newproj->AddNSFAward($award, $sup);
    }
}

#
# See if we are in an initial Emulab setup. If so, no email sent.
#
my $firstinitstate;
TBGetSiteVar("general/firstinit/state", \$firstinitstate);

#
# Send the email notification.
#
$newproj->SendNewProjectEmail($firstinitstate eq "createproject")
    if (! ($nonlocal || $silent));

# Unlink this here, so that the newuser file is left behind in case of error.
# We can then create the user by hand from the xmlfile, if desired.
unlink($newuser_xml)
    if (defined($newuser_xml));

# The web interface requires this line to be printed!
print "Project $new_pid/$new_idx has been created\n";
exit(0);

sub fatal($) {
    my($mesg) = $_[0];

    print STDERR "*** $0:\n".
	         "    $mesg\n";
    exit(-1);
}
sub UserError($) {
    my($mesg) = $_[0];

    print $mesg;
    exit(1);
}

sub escapeshellarg($)
{
    my ($str) = @_;

    $str =~ s/(')/'\\''/g;
    return $str;
}
	   

	       
