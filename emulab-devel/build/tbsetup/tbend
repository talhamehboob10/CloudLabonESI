#!/usr/bin/perl -w
#
# Copyright (c) 2000-2010, 2017 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;

#
# This is the fourth and final program in the
# tbprerun/tbswapin/tbswapout/.../tbend sequences.  It's purpose is to
# reverse what tbprerun did.  I.e. clear the virt_nodes and virt_lans
# tables.
#
sub usage()
{
    print STDERR "Usage: $0 [-f] -e eid\n";
    exit(-1);
}
my $optlist = "fe:";
my $pideid;
my $force   = 0;

#
# Configure variables
#
my $TBROOT       = "/test";
my $OPSDBSUPPORT = 0;
my $dbcontrol    = "$TBROOT/sbin/opsdb_control";
my $PGENISUPPORT = 1;

# Untaint the path
$ENV{'PATH'} = "/usr/bin:$TBROOT/libexec:$TBROOT/libexec/ns2ir" . 
    ":$TBROOT/libexec/vis:$TBROOT/sbin:$TBROOT/bin";

#
# Turn off line buffering on output
#
$| = 1;

#
# Testbed Support libraries
#
use lib "/test/lib";
use libdb;
use libtestbed;
use libtblog;
use Experiment;

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"f"})) {
    $force = 1;
}
if (defined($options{"e"})) {
    $pideid = $options{"e"};
}
if (!defined($pideid) || @ARGV) {
    usage();
}

# Slowly convert to using Experiment module.
my $experiment = Experiment->Lookup($pideid);
if (!defined($experiment)) {
    tbdie("Could not lookup experiment object for $pideid!")
}
# Need these below.
my $pid      = $experiment->pid();
my $eid      = $experiment->eid();
my $state    = $experiment->state();
my $errors   = 0;

print "Beginning cleanup for $pid/$eid. " . TBTimeStamp() . "\n";

# Sanity check the state.
if (!$force && $state ne EXPTSTATE_TERMINATING) {
    tbdie("Experiment is in the wrong state: $state.\n");
}

print "Clearing out virtual state.\n";
$experiment->RemoveVirtualState() == 0 or $errors++;

# This will kill a running prerender.
print "Removing visualization data...\n";
system("prerender -r $pid $eid");

system("$dbcontrol delexpdb $pid $eid")
    if ($OPSDBSUPPORT);

print "Cleanup finished! " . TBTimeStamp() . "\n";

exit $errors;

