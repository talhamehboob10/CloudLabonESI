#!/usr/bin/perl -wT
#
# Copyright (c) 2000-2020 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;

#
# Spew the current log file for an experiment or template to stdout.
# This is for use by the web interface, so it can send the logfile to
# the user in a web page.
#
# The wrinkle is that the logfile only exists while the experiment is
# in transition, and we have to quit when the experiment is no longer in
# transition so that the web page can finish.
#
sub usage()
{
    print("Usage: spewlogfile -i logid\n".
	  "Spew a logfile to stdout, as for the web interface\n");
    exit(-1);
}
my $optlist = "wi:an";
my $fromweb = 0;
my $anon    = 0;
my $nowait  = 0;
  
#
# Configure variables
#
my $TB		= "/test";
my $TBOPS       = "testbed-ops\@ops.cloudlab.umass.edu";
my $TBLOGS      = "testbed-logs\@ops.cloudlab.umass.edu";
my $GUNZIP	= "/usr/bin/gunzip";

my $logname;
my $isopen;
my $logfile;
my $this_user;

#
# Load the Testbed support stuff. 
#
use lib "/test/lib";
use emdb;
use libtestbed;
use User;
use Logfile;

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Turn off line buffering on output
$| = 1; 

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"w"})) {
    $fromweb = 1;
}
if (defined($options{"a"})) {
    $anon = 1;
}
if (defined($options{"n"})) {
    $nowait = 1;
}
if (defined($options{"i"})) {
    $logfile = Logfile->Lookup($options{"i"});
    if (! $logfile) {
	die("*** $0:\n".
	    "    No such logfile in the Emulab Database.\n");
    }
}
usage()
    if (@ARGV || !$logfile);

#
# This script is setuid, so please do not run it as root. Hard to track
# what has happened.
# 
if ($UID == 0) {
    die("*** $0:\n".
	"    Please do not run this as root! Its already setuid!\n");
}


#
# Allow for anonymous users to request a public file.
# Verify user and get his DB uid and other info for later.
#
if (!$anon) {
    $this_user = User->ThisUser();
    if (! defined($this_user)) {
	die("*** $0:\n".
	    "    You ($UID) do not exist!");
    }
    #
    # Verify that this person is allowed to do this. 
    #
    if (!$logfile->AccessCheck($this_user)) {
	die("*** $0:\n".
	    "    You do not have permission to view logfile!\n");
    }
}
elsif (!$logfile->public()) {
    die("*** $0:\n".
	"    You do not have permission to view logfile!\n");
}
$logname = $logfile->filename();
$isopen  = $logfile->isopen();

use Fcntl;
use IO::Handle;
STDOUT->autoflush(1);

#
# if the file is closed do it the quick way. No locking, so this could
# mess up sometimes.
#
if (!$isopen || $nowait) {
    printf("%-15s %s\n", "Created:", $logfile->date_created());
    if ($logfile->MetadataList()) {
	foreach my $ref (@{ $logfile->MetadataList() }) {
	    my ($key,$val) = @{$ref};
	    printf("%-15s %s\n", "$key:", $val);
	}
    }
    print "\n";
    print "----------------------------------\n";
    if (!defined($logname)) {
	print STDOUT "Log file has no content; this is not an error.\n";
    }
    else {
	my $FP;
	
	if ($logfile->compressed()) {
	    if (!open(ZIP, "$GUNZIP -c $logname |")) {
		print "Could unzip file for output\n";
		exit(0);
	    }
	    $FP = *ZIP;
	}
	else {
	    if (!open(LOG, $logname)) {
		print "Could not open file for output\n";
		exit(0);
	    }
	    $FP = *LOG;
	}
	if (defined($this_user) && $this_user->IsAdmin()) {
	    my $buf;
    
	    while (sysread($FP, $buf, 8192)) {
		print $buf;
	    }
	}
	else {
	    my $inkey = 0;
	    
	    while (<$FP>) {
		if ($_ =~ /-----BEGIN RSA PRIVATE KEY-----/) {
		    $inkey = 1;
		}
		elsif ($_ =~ /-----END RSA PRIVATE KEY-----/) {
		    $inkey = 0;
		}
		elsif ($inkey) {
		    next;
		}
		print $_;
	    }
	}
	close($FP);
    }
    exit(0);
}

#
# Open the file up while still root. We verified permission above, and the
# added check using the filesystems permissions if more of a pain then it
# buys us. Well, might revisit this.
#
sysopen(LOG, $logname, O_RDONLY | O_NONBLOCK) or
    die("*** $0:\n".
	"    Could not open $logname: $!\n");

# Now flip back to user.
$EUID = $UID;

my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
    $atime,$mtime,$ctime,$blksize,$blocks) = stat(LOG);

#
# Icky. If the file is open and less then 1024 bytes, send out some
# stuff at the beginning to make the browser do something. This is terrible,
# but not sure what else to do.
#
if ($fromweb && $isopen && $size < 1024) {
    for (my $i = $size; $i <= 1024; $i++) {
	print " ";
    }
    print "\n";
}

if ($logfile->MetadataList()) {
    foreach my $ref (@{ $logfile->MetadataList() }) {
	my ($key,$val) = @{$ref};
	printf("%-15s %s\n", "$key:", $val);
    }
    print "\n";
    print "---------------------\n";
}

#
# Loop reading the file in nonblocking mode. Sleep between loops, and
# check for a change in status.
#
my $inkey = 0;
while (1) {
    if (defined($this_user) && $this_user->IsAdmin()) {
	my $buf;
    
	while (sysread(LOG, $buf, 8192)) {
	    print $buf;
	}
    }
    else {
	while (<LOG>) {
	    if ($_ =~ /-----BEGIN RSA PRIVATE KEY-----/) {
		$inkey = 1;
	    }
	    elsif ($_ =~ /-----END RSA PRIVATE KEY-----/) {
		$inkey = 0;
	    }
	    elsif ($inkey) {
		next;
	    }
	    print $_;
	}
    }
    # Stop if the logfile object becomes invalid (deleted by someone).
    last
	if ($logfile->Refresh() != 0 || !$logfile->isopen());

    sleep(2);
}
close(LOG);
exit(0);

