#!/usr/bin/perl -w
#
# Copyright (c) 2010-2020 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use Data::Dumper;

#
# Install Emulab.
#
sub usage()
{
    print STDERR "Usage: emulab-install [-c | -l] [-i script] boss|ops|fs\n";
    print STDERR
	"-c        - Syntax check install scripts by loading them only\n" .
	"-l        - Generate a complete log file in /tmp. Defaults on\n" .
	"-i <name> - Run (or check) just the one install script\n" .
	"-b        - Batch mode, do not ask for confirmation\n" .
	"-u        - Update mode, run script(s) for update\n" .
	"-s        - Turn on makes. Huh?\n" .
	"-P|-F     - Set the name of the boss/ops and fs port\n" .
	"-w <pswd> - Provide password instead of being asked for it\n" .
	"-p <dir>  - Set the package directory\n";
    exit(-1);
}
my $optlist	= "dsi:p:qcbP:F:w:nul";
my $debug	= 0;
my $single	= 0;
my $quiet	= 0;
my $check	= 0;
my $impotent    = 0;
my $updatemode  = 0;
my $logit       = 1;
my $batchmode	= 0;
my $phasepath	= "../../install/phases";
my $phase;

#
# Configure variables
#
my $TB	      = "/test";
my $TBOPS     = "testbed-ops\@ops.cloudlab.umass.edu";

my $logfile   = "/var/tmp/emulab-install.log";
my $logfp;

# Protos
sub Fatal($);

# un-taint path
$ENV{'PATH'} = '/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# We want to use modules late in the install process. 
#
BEGIN
{
    if (-e "../Makeconf") {
	my $srcdir = "../..";
	my $objdir = `/bin/pwd`;
	chomp($objdir);
	unshift(@INC, "$objdir");
	unshift(@INC, "$objdir/../db");
	if ($srcdir =~ /^\//) {
	    unshift(@INC, "$srcdir/install");
	    unshift(@INC, "$srcdir/tbsetup");
	} else {
	    unshift(@INC, "$objdir/$srcdir/install");
	    unshift(@INC, "$objdir/$srcdir/tbsetup");
	}
	unshift(@INC, "$objdir/../tbsetup");
    }
}
use libinstall;
use installvars;

#
# Parse command arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"b"})) {
    $batchmode = 1;
}
if (defined($options{"l"})) {
    $logit = 1;
}
if (defined($options{"c"})) {
    $check = 1;
}
if (defined($options{"n"})) {
    $impotent = 1;
}
if (defined($options{"q"})) {
    $quiet = 1;
}
if (defined($options{"u"})) {
    $updatemode = 1;
}
if (defined($options{w})) {
    $password = $options{w};
}
if (defined($options{"p"})) {
    $packagedir = $options{"p"};
}
if (defined($options{"i"})) {
    $single = 1;
    $phase  = $options{"i"};
}
if (defined($options{"s"})) {
    $domakes = 1;
}
if (defined($options{"F"})) {
    $FS_PORT = $options{"F"};
}
if (@ARGV != 1) {
    usage();
}
# Don't just charge into making ports from source by default.
if (!($check || $single || $impotent || $updatemode) &&
    $packagedir eq "" && $domakes eq 0) {
    print "At least one of -p and -s must be given.\n";
    usage();
}
if (!($check || $single || $impotent || $updatemode) &&
    $packagedir ne "" && $domakes eq 1) {
    print "Only one of -p and -s can be given.\n";
    usage();
}
my $server = $ARGV[0];
usage()
    if (! ($server eq $BOSS_SERVERNAME ||
	   $server eq $OPS_SERVERNAME ||
	   $server eq $FS_SERVERNAME));

# Do this after we know the server name.
if (defined($options{"P"})) {
    if ($server eq "boss") {
	$BOSS_PORT = $options{"P"};
    }
    else {
	$OPS_PORT = $options{"P"};
    }
}

#
# Must be root if actually doing this.
#
if ($UID && !($check || $impotent)) {
    Fatal("This script must be run as root! Maybe use sudo?")
}

#
# Make sure they know what they're getting into...
#
if (! ($batchmode || $check || $impotent)) {
    if ($updatemode) {
	print STDERR 
	    "WARNING: This script is ONLY intended to be run your $server node";
	if ($single) {
	    print STDERR ".\n" . "Continue? [y/N] ";
	}
	else {
	    print STDERR
		",\n".
		"and only if you are updating the IP addresses/subnet and/or\n".
		"domain name of your installation. Continue? [y/N] ";
	}
    }
    else {
	print STDERR 
	    "WARNING: This script is ONLY intended to be run on a machine\n".
	    "that is being set up as a dedicated $server node. Continue? [y/N] ";
    }
    my $response = <STDIN>;
    die "Aborted!\n" unless ($response =~ /^y/i);
}

if (($impotent || $logit) && !$check) {
    if (-e $logfile) {
	system("/bin/mv -f $logfile ${logfile}.$$") == 0
	    or Fatal("Could not back up $logfile");
    }
    
    open(LOGFP, "> $logfile")
	or Fatal("Could not open $logfile");
    $logfp = *LOGFP;

    if ($impotent) {
	SET_IMPOTENT_MODE($logfp);
    }
    else {
	SET_LOG_OUTPUT($logfp);
    }
    print "A more detailed log file is being written to $logfile\n";
    sleep(2);
}

#
# Very simple list of files. Be fancy later.
#
my @files = ();
if ($single) {
    # Just the one file.
    @files = ($phase);
}
elsif ($server eq "boss") {
    @files = ('perl', 'usersgroups', 'dirs', 'tftp',
	      'boss/ports', 'boss/portfix', 'boss/patches', 'cracklib',
	      'apache', 'boss/rcfiles', 'ntpd', 'boss/rcconf', 'boss/syslog',
	      'sendmail', 'boss/database', 'etchosts', 'resolvetest',
	      'exports', 'automount', 'nfsmounts',
	      'boss/mibs', 'boss/crontab', 'sudoers',
	      'samba', 'boss/ssh', 'boss/hostkeys',
	      'boss/rndc', 'boss/loaderconf', 'boss/sysctlconf',
	      'boss/sslcerts', 'boss/pubsub', 'boss/software', 
              #
	      # The next few items must be after the software install since 
	      # they use testbed libraries and such.
	      #
	      'boss/dhcpd', 'boss/named', 'boss/flyspray',
	      'boss/firstuser', 'boss/checkupuser', 'boss/wikidocs',
	      'boss/updatesitevars', 'boss/logdirs',
	      'boss/mfs', 'boss/images', 'boss/xen',
	      'boss/experiments',
	      'boss/protogeni', 'boss/firewall', 'boss/servers',
	      'boss/shellinabox', 'boss/portal', 'boss/linuxmfs',
	     );
}
elsif ($server eq "fs") {
    @files = ('perl', 'usersgroups', 'dirs',
	      'fs/ports', 'fs/portfix', 'ntpd', 'ops/rcconf',
	      'etchosts', 'resolvetest', 'ops/syslog', 'exports', 'quotas',
	      'sudoers', 'samba', 'ops/ssh');
}
elsif ($server eq "ops") {
    @files = ('perl', 'usersgroups', 'dirs', 'etchosts', 'resolvetest',
	      'ops/ports', 'ops/portfix', 'ops/patches', 'ntpd', 'ops/rcconf',
	      'sendmail', 'ops/syslog',
	      'exports', 'automount', 'nfsmounts',
	      'ops/crontab', 'sudoers', 'samba', 'ops/ssh', 'capture',
	      'ops/rcfiles', 'apache', 'ops/database',
	      'ops/cvsd', 'ops/flyspray', 'ops/twiki', 'ops/firewall',
	      'ops/shellinabox'
	     );
}

#
# In update mode, we want to run etchosts at the very end.
# Also allow running a single script in update mode. 
#
if ($updatemode && !$single) {
    push(@files, "boss/update-ipdomain")
	if ($server eq $BOSS_SERVERNAME);
    
    @files = grep(!/^etchosts$/, @files);
    push(@files, "etchosts");

    # We need other libraries for updating.
    unshift(@INC, "/test/lib");
}

#
# Now process each file starting at the start version.
#
sub RunInstall()
{
    foreach my $file (@files) {
	my $fullpath = "$phasepath/$file";
	
	Fatal("No such file: $fullpath")
	    if (! -e "$fullpath");

	if ($check) {
	    print "Syntax checking update $fullpath\n";
	}

	# Undefine this to make sure we get a new version each file.
	undef &Install;

	# This just loads the file.
	my $return = do $fullpath;
	if (!defined($return)) {
	    Fatal("  could not parse $fullpath: $@") if $@;
	    Fatal("  could not do $fullpath: $!")    if $!;
	}
	next
	    if ($check);
	
	# Then we run it. Turn off update and impotent flags.
	my $result;
	eval { $result = Install($server, $updatemode, $impotent); };
	if ($result || $@) {
	    print STDERR "*** script failure: $fullpath\n";
	    Fatal("aborting install ...\n");
	}
    }
}

if ($check) {
    print "Syntax checking install scripts ...\n";
    RunInstall();
    exit(0);
}
if ($impotent) {
    print "Running (impotent mode) install scripts ...\n";
    print "More detailed info saved to $logfile\n";
    RunInstall();
    exit(0);
}
RunInstall();

#
# This stuff might go elsewhere ...
#
if ($updatemode) {
    print "-----------------------------------------------------------------\n";
    print "Update completed succesfully!\n\n";
    
    if (!PhaseWasSkipped("sslcerts") && !$single) {
	print
	    "Since your SSL certificates were regenerated, you will need to\n".
	    "regenerate the user SSL certificates as well.\n";
	
	if ($PGENISUPPORT) {
	    print
		"\n".
		"You also have ProtoGENI enabled, so those certificates were\n".
		"regenerated as well. Please be sure to send the new version\n".
		"of your root CA ($PREFIX/etc/emulab.pem) to $PROTOGENI_EMAIL\n".
		"Then you can reregister with the clearinghouse.\n";
	}
    }
    exit(0);
}

exit(0)
    if ($single);

#
# Stuff to do at the end.
#
if ($server eq $OPS_SERVERNAME) {
    exit(0)
	if ($ELABINELAB);

    print "-----------------------------------------------------------------\n";
    print "Installation completed succesfully!\n";
    print "Please reboot this machine before proceeding with boss setup\n";
    print "Local mailing lists have been created, with no members, in\n";
    print "$LIST_DIR . Please add members to the following lists:\n";
    print map "$_\n", @LOCAL_MAILING_LISTS;
}
elsif ($server eq $FS_SERVERNAME) {
    print "-----------------------------------------------------------------\n";
    print "Installation completed succesfully!\n";
    print "Please reboot this machine before proceeding with ops and boss setup\n";
}
elsif ($server eq $BOSS_SERVERNAME) {
    print "-----------------------------------------------------------------\n";
    print "Installation completed succesfully!\n";
    print "Please reboot this machine before proceeding with boss setup\n";
}
exit(0);

sub Fatal($)
{
    my ($msg) = @_;

    die("*** $0:\n".
	"    $msg\n");
}
