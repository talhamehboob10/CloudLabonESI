#!/usr/bin/perl -wT
#
# Copyright (c) 2000-2017 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use strict;
use Getopt::Std;
use XML::Simple;
use Data::Dumper;
use Cwd qw(realpath);

#
# Back-end script to change experiment info from an XML description.
#
sub usage()
{
    print("Usage: editexp [-v] <xmlfile>\n");
    exit(-1);
}
my $optlist = "dv";
my $debug   = 0;
my $verify  = 0;	# Check data and return status only. 

#
# Configure variables
#
my $TB		   = "/test";
my $TBOPS          = "testbed-ops\@ops.cloudlab.umass.edu";
my $TBAUDIT	   = "testbed-audit\@ops.cloudlab.umass.edu";
my $MANAGESETTINGS = "$TB/sbin/manage_expsettings";

#
# Untaint the path
#
$ENV{'PATH'} = "$TB/bin:$TB/sbin:/bin:/usr/bin:/usr/bin:/usr/sbin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Load the Testbed support stuff.
#
use lib "/test/lib";
use libdb;
use emutil;
use libtestbed;
use User;
use Project;
use Experiment;

# Protos
sub fatal($);
sub UserError(;$);
sub escapeshellarg($);

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"v"})) {
    $verify = 1;
}
if (@ARGV != 1) {
    usage();
}
my $xmlfile  = shift(@ARGV);

#
# Map invoking user to object. 
# If invoked as "nobody" we are coming from the web interface and the
# current user context is "implied" (see tbauth.php3).
#
my $this_user;

if (getpwuid($UID) ne "nobody") {
    $this_user = User->ThisUser();

    if (! defined($this_user)) {
	fatal("You ($UID) do not exist!");
    }
    # You don't need admin privileges to change experiment info.
}
else {
    #
    # Check the filename when invoked from the web interface; must be a
    # file in /tmp.
    #
    if ($xmlfile =~ /^([-\w\.\/]+)$/) {
	$xmlfile = $1;
    }
    else {
	fatal("Bad data in pathname: $xmlfile");
    }

    # Use realpath to resolve any symlinks.
    my $translated = realpath($xmlfile);
    if ($translated =~ /^(\/tmp\/[-\w\.\/]+)$/) {
	$xmlfile = $1;
    }
    else {
	fatal("Bad data in translated pathname: $xmlfile");
    }

    # The web interface (and in the future the xmlrpc interface) sets this.
    $this_user = User->ImpliedUser();

    if (! defined($this_user)) {
	fatal("Cannot determine implied user!");
    }
}

#
# These are the fields that we allow to come in from the XMLfile.
#
my $SLOT_OPTIONAL	= 0x1;	# The field is not required.
my $SLOT_REQUIRED	= 0x2;  # The field is required and must be non-null.
my $SLOT_ADMINONLY	= 0x4;  # Only admins can set this field.
#
# XXX We should encode all of this in the DB so that we can generate the
# forms on the fly, as well as this checking code.
#
my %xmlfields =
    # XML Field Name        DB slot name         Flags             Default
    ("experiment"	=> ["eid_idx",		$SLOT_REQUIRED],

     # The rest are optional, so we can skip passing ones that are not changing
     "description"	=> ["description",	$SLOT_OPTIONAL],
     "idle_ignore"	=> ["idle_ignore",	$SLOT_OPTIONAL],
     "lockdown"	        => ["lockdown",		$SLOT_OPTIONAL],
     "swappable"	=> ["swappable",	$SLOT_OPTIONAL],
     "noswap_reason"	=> ["noswap_reason",	$SLOT_OPTIONAL],
     "idleswap"		=> ["idleswap",		$SLOT_OPTIONAL],
     "idleswap_timeout"	=> ["idleswap_timeout",	$SLOT_OPTIONAL],
     "noidleswap_reason"=> ["noidleswap_reason",$SLOT_OPTIONAL],
     "autoswap"		=> ["autoswap",		$SLOT_OPTIONAL],
     "autoswap_timeout"	=> ["autoswap_timeout",	$SLOT_OPTIONAL],
     "savedisk"		=> ["savedisk",		$SLOT_OPTIONAL],
     "cpu_usage"	=> ["cpu_usage",	$SLOT_OPTIONAL],
     "mem_usage"	=> ["mem_usage",	$SLOT_OPTIONAL],
     "batchmode"	=> ["batchmode",	$SLOT_OPTIONAL],
     "linktest_level"	=> ["linktest_level",	$SLOT_OPTIONAL]);

#
# Must wrap the parser in eval since it exits on error.
#
my $xmlparse = eval { XMLin($xmlfile,
			    VarAttr => 'name',
			    ContentKey => '-content',
			    SuppressEmpty => undef); };
fatal($@)
    if ($@);

#
# Process and dump the errors (formatted for the web interface).
# We should probably XML format the errors instead but not sure I want
# to go there yet.
#
my %errors = ();

#
# Make sure all the required arguments were provided.
#
my $key;
foreach $key (keys(%xmlfields)) {
    my (undef, $required, undef) = @{$xmlfields{$key}};

    $errors{$key} = "Required value not provided"
	if ($required & $SLOT_REQUIRED  &&
	    ! exists($xmlparse->{'attribute'}->{"$key"}));
}
UserError()
    if (keys(%errors));

#
# We build up an array of arguments to pass to Experiment->Editexp() as we check
# the attributes.
#
my %editexp_args = ();

#
# Wildcard keys have one or more *'s in them like simple glob patterns.
# This allows multiple key instances for categories of attributes, and
# putting a "type signature" in the key for arg checking, as well.
#
# Wildcards are made into regex's by anchoring the ends and changing each * to
# a "word" (group of alphahumeric.)  A tail * means "the rest", allowing
# multiple words separated by underscores or dashes.
#
my $wordpat = '[a-zA-Z0-9]+';
my $tailpat = '[-\w]+';
my %wildcards;
foreach $key (keys(%xmlfields)) {
    if (index($key, "*") >= 0) {
	my $regex = '^' . $key . '$';
	$regex =~ s/\*\$$/$tailpat/;
	$regex =~ s/\*/$wordpat/g;
	$wildcards{$key} = $regex;
    }
}
# Key ordering is lost in a hash.
# Put longer matching wildcard keys before their prefix.
my @wildkeys = reverse(sort(keys(%wildcards)));

foreach $key (keys(%{ $xmlparse->{'attribute'} })) {
    my $value = $xmlparse->{'attribute'}->{"$key"}->{'value'};
    if (!defined($value)) {	# Empty string comes from XML as an undef value.
	$xmlparse->{'attribute'}->{"$key"}->{'value'} = $value = "";
    }

    print STDERR "User attribute: '$key' -> '$value'\n"
	if ($debug);

    my $field = $key;
    my $wild;
    if (!exists($xmlfields{$key})) {

	# Not a regular key; look for a wildcard regex match.
        foreach my $wildkey (@wildkeys) {
	    my $regex = $wildcards{$wildkey};
	    if ($wild = $key =~ /$regex/) {
		$field = $wildkey;
		print STDERR "Wildcard: '$key' matches '$wildkey'\n"
		    if ($debug);
		last; # foreach $wildkey
	    }
	}
	if (!$wild) {
	    $errors{$key} = "Unknown attribute";
	    next; # foreach $key
	}
    }

    my ($dbslot, $required, $default) = @{$xmlfields{$field}};

    if ($required & $SLOT_REQUIRED) {
	# A slot that must be provided, so do not allow a null value.
	if (!defined($value)) {
	    $errors{$key} = "Must provide a non-null value";
	    next;
	}
    }
    if ($required & $SLOT_OPTIONAL) {
	# Optional slot. If value is null skip it. Might not be the correct
	# thing to do all the time?
	if (!defined($value)) {
	    next
		if (!defined($default));
	    $value = $default;
	}
    }
    if ($required & $SLOT_ADMINONLY) {
	# Admin implies optional, but thats probably not correct approach.
	$errors{$key} = "Administrators only"
	    if (! $this_user->IsAdmin());
    }
	
    # Now check that the value is legal.
    if (! TBcheck_dbslot($value, "experiments", 
			 $dbslot, TBDB_CHECKDBSLOT_ERROR)) {
	$errors{$key} = TBFieldErrorString();
	next;
    }

    $editexp_args{$key} = $value;
}
UserError()
    if (keys(%errors));

#
# Now do special checks.
#
my $doemail = 0;

my $experiment = Experiment->Lookup($editexp_args{"experiment"});
if (!defined($experiment)) {
    UserError("Experiment: No such experiment");
}
if (!$experiment->AccessCheck($this_user, TB_EXPT_MODIFY())) {
    UserError("Experiment: Not enough permission");
}
my $pid = $experiment->pid();
my $eid = $experiment->eid();

#
# Description must not be blank.
#
if ((exists($editexp_args{"description"}) ?
     $editexp_args{"description"} eq "" :
     $experiment->description() eq "")) {
    UserError("Description: Missing Field");
}
if (exists($editexp_args{"description"})) {
    $editexp_args{"description"} = 
	escapeshellarg($editexp_args{"description"});
}

#
# Swappable/Idle Ignore
# Any of these which are not "1" become "0".
#
# Idle Ignore
#
if (exists($editexp_args{"idle_ignore"})) {
    if ($editexp_args{"idle_ignore"} ne "1") {
	$editexp_args{"idle_ignore"} = 0;
    }
}

#
# Lockdown
#
if (exists($editexp_args{"lockdown"})) {
    my $requested = ($editexp_args{"lockdown"} eq "1" ? 1 : 0);
    
    if ($requested != $experiment->lockdown()) {
	if ($editexp_args{"lockdown"} eq "1" && !$this_user->IsAdmin()) {
	    UserError("lockdown: Only Administrators can lockdown experiments");
	}
	#
	# New path; have to deal with this via the reservation system.
	#
	my $which  = ($requested ? "set" : "clear");
	my $output = emutil::ExecQuiet("$MANAGESETTINGS ".
				       "lockdown $pid,$eid $which");
	if ($?) {
	    my $rval = $? >> 8;
	    if ($rval == 1) {
		UserError("lockdown: locking down this experiment would ".
			  "cause a reservation system overbook situation");
	    }
	    else {
		print STDERR $output;
		fatal($output);
	    }
	}
    }
    delete($editexp_args{"lockdown"});
}

#
# Swappable
#
if (exists($editexp_args{"swappable"})) {
    my $requested = ($editexp_args{"swappable"} eq "0" ? 0 : 1);
    
    if ($requested != $experiment->swappable()) {
	if ($requested == 0 && !$this_user->IsAdmin()) {
	    UserError("swappable: Only Administrators can turn off swappable");
	}
	#
	# New path; have to deal with this via the reservation system.
	#
	my $which  = ($requested ? "set" : "clear");
	my $output = emutil::ExecQuiet("$MANAGESETTINGS ".
				       "swappable $pid,$eid $which");
	if ($?) {
	    my $rval = $? >> 8;
	    if ($rval == 1) {
		UserError("swappable: disabling swappable would ".
			  "cause a reservation system overbook situation");
	    }
	    else {
		print STDERR $output;
		fatal($output);
	    }
	}
    }
    delete($editexp_args{"swappable"});
}

#
# AutoSwap
#
my $autoswap_max = TBGetSiteVar("general/autoswap_max");
if (exists($editexp_args{"autoswap"}) ||
    exists($editexp_args{"autoswap_timeout"})) {
    my $hours;
    my $which;

    if (exists($editexp_args{"autoswap"})) {
	my $requested = ($editexp_args{"autoswap"} eq "1" ? 1 : 0);
    
	if ($requested != $experiment->autoswap()) {
	    if ($requested == 0 && !$this_user->IsAdmin()) {
		UserError("Max Duration: ".
			  "Only Administrators can turn off Max Duration");
	    }
	    $which = ($requested ? "set" : "clear");
	}
    }
    if (exists($editexp_args{"autoswap_timeout"})) {
	my $requested = $editexp_args{"autoswap_timeout"};
	
	if ($requested != $experiment->autoswap_timeout()) {
	    if ($requested <= 0) {
		UserError("Max Duration: Invalid time provided");
	    }
	    if ($requested > $autoswap_max && !$this_user->IsAdmin()) {
		UserError("Max Duration: $autoswap_max hours maximum - ".
			  "you must ask testbed operations for more");
	    }
	    $hours = $editexp_args{"autoswap_timeout"};
	}
    }
    if (defined($hours) || defined($which)) {
	# If only changing the timeout, we still need a set/clear argument.
	$which = ($experiment->autoswap() ? "set" : "clear")
	    if (!defined($which));
	$hours = "" if (!defined($hours));
	
	my $output = emutil::ExecQuiet("$MANAGESETTINGS ".
				       "autoswap $pid,$eid $which $hours");
	if ($?) {
	    my $rval = $? >> 8;
	    if ($rval == 1) {
		UserError("autoswap: modifying autoswap would ".
			  "cause a reservation system overbook situation");
	    }
	    else {
		print STDERR $output;
		fatal($output);
	    }
	}
    }
    delete($editexp_args{"autoswap"});
    delete($editexp_args{"autoswap_timeout"});
}

#
# IdleSwap
#
my $idleswaptimeout = TBGetSiteVar("idle/threshold");
if (exists($editexp_args{"idleswap_timeout"})) {
    if ($editexp_args{"idleswap_timeout"} <= 0 ||
	($editexp_args{"idleswap_timeout"} > $idleswaptimeout &&
	 !$this_user->IsAdmin())) {
	UserError("Idleswap: Invalid time provided" .
		  " (0 < X <= $idleswaptimeout)");
    }
}
if (exists($editexp_args{"idleswap"})) {
    if ($editexp_args{"idleswap"} ne "1") {
	$editexp_args{"idleswap"} = 0;

	# Turning off idleswap, must provide justification.
	if ((exists($editexp_args{"noidleswap_reason"}) ?
	     $editexp_args{"noidleswap_reason"} eq "" :
	     $experiment->noidleswap_reason() eq "")) {
	    if (! $this_user->IsAdmin()) {
		UserError("IdleSwap: No justification provided");
	    }
	    else {
		$editexp_args{"noidleswap_reason"} = "ADMIN";
	    }
	}
	if ($experiment->idleswap()) {
	    $doemail = 1;
	}
	#XXX $editexp_args{"idleswap_timeout"} = 0;
    }
}
if (exists($editexp_args{"noidleswap_reason"})) {
    $editexp_args{"noidleswap_reason"} =
	escapeshellarg($editexp_args{"noidleswap_reason"});
}

#
# Swapout disk state saving
#
if (exists($editexp_args{"savedisk"})) {
    if ($editexp_args{"savedisk"} ne "1") {
	$editexp_args{"savedisk"} = 0;
    }
}

#
# CPU Usage
#
if (exists($editexp_args{"cpu_usage"}) &&
    $editexp_args{"cpu_usage"} ne "") {

    if ($editexp_args{"cpu_usage"} < 0 ||
	$editexp_args{"cpu_usage"} > 5) {
	UserError("CPU Usage: Invalid (0 <= X <= 5)");
    }
}

#
# Mem Usage
#
if (exists($editexp_args{"mem_usage"}) &&
    $editexp_args{"mem_usage"} ne "") {

    if ($editexp_args{"mem_usage"} < 0 ||
	$editexp_args{"mem_usage"} > 5) {
	UserError("Mem Usage: Invalid (0 <= X <= 5)");
    }
}

#
# Linktest level
#
if (exists($editexp_args{"linktest_level"}) &&
    $editexp_args{"linktest_level"} ne "") {

    if ($editexp_args{"linktest_level"} < 0 ||
	$editexp_args{"linktest_level"} > 4) {
	UserError("Linktest Level: Invalid (0 <= X <= 4)");
    }
}

exit(0)
    if ($verify);

#
# Now safe to change experiment info.
#
# We pass the Experiment along as an argument to EditExp(), so remove it from
# the argument array.
#
delete($editexp_args{"experiment"});

my $usrerr;
my $editexp_val = Experiment->EditExp($experiment, $this_user, $doemail,
				      \%editexp_args, \$usrerr);
UserError($usrerr)
    if (defined($usrerr));
fatal("Could not modify Experiment!")
    if (!defined($editexp_val));

exit(0);

sub fatal($)
{
    my ($mesg) = @_;

    print STDERR "*** $0:\n".
	         "    $mesg\n";
    # Exit with negative status so web interface treats it as system error.
    exit(-1);
}

sub UserError(;$)
{
    my ($mesg) = @_;

    if (keys(%errors)) {
	foreach my $key (keys(%errors)) {
	    my $val = $errors{$key};
	    print "${key}: $val\n";
	}
    }
    print "$mesg\n"
	if (defined($mesg));

    # Exit with positive status so web interface treats it as user error.
    exit(1);
}

sub escapeshellarg($)
{
    my ($str) = @_;

    $str =~ s/[^[:alnum:]]/\\$&/g;
    return $str;
}
