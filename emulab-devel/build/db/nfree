#!/usr/bin/perl -w
#
# Copyright (c) 2000-2017, 2019, 2020 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;

#
# nfree - Takes pysical node names, and frees them from the experiment they
# are allocated to. If nodes are omitted, frees up all nodes in the given
# experiment. Looks in the scheduled_reloads and next_reserve tables to see
# if this node should be re-reserved into another experiment and/or reloaded,
# rather than being put back into the pool of free nodes
#
sub usage ()
{
    die("Usage: nfree [-x] [-o] <pid> <eid> (-a | <node> <node> <...>)\n".
	"Releases all nodes in the specified experiment if -a is given.\n".
	"If nodes are listed, nfree releases only those nodes.\n".
	" '-x' frees all virtual nodes on any physical node that is freed.\n".
	" '-o' Moves nodes into a oldreserved holding experiment.\n"
	);
}
my $optlist = "xoaq";
my $freeDependantVirtuals = 0;
my $moveToOldReserved     = 0;
my $freeAllNodes          = 0;
my $quiet                 = 0;

# Configure variables
my $TB       = "/test";
my $TESTMODE = 0;
my $NFSMFS   = "";

# Turn off line buffering on output
$| = 1;

# Untaint the path
$ENV{'PATH'} = "/bin:/usr/bin:/sbin:/usr/sbin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Testbed Support libraries
use lib "/test/lib";
use libdb;
use libtestbed;
use User;
use Experiment;
use Node;
use OSImage;
use Lan;
use EmulabFeatures;
use EmulabConstants;

# Local stuff
my $consetup	    = "$TB/libexec/console_setup";
my $osselect        = "$TB/bin/os_select";
my $nodereboot      = "$TB/bin/node_reboot";
my $makeconf        = "$TB/sbin/dhcpd_makeconf";
my $snmpit          = "$TB/bin/snmpit";
my $dynmfssetup     = "$TB/sbin/nfsmfs_setup";
my $tbadb           = "$TB/bin/tbadb";
my $power           = "$TB/bin/power";
my $reloadpid	    = "emulab-ops";
my $pendingeid      = "reloadpending";
my $rppendingeid    = "repositionpending";
my $oldreserved_pid = OLDRESERVED_PID;
my $oldreserved_eid = OLDRESERVED_EID;
my $lockedpid       = NFREELOCKED_PID();
my $lockedeid       = NFREELOCKED_EID();
my @nodes;
my @freed_nodes     = ();
my @dynanodes       = ();
my @dynmfsnodes     = ();
my $error           = 0;
my %mustzero        = ();
my $mustmakeconf    = 0;

my @reloading_clear_attributes = (
    "cnetwatch_disable",
    "stated_noreboot"
);

#
# Parse command arguments. Once we return from getopts, all that should
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"x"})) {
    $freeDependantVirtuals = 1;
}
if (defined($options{"q"})) {
    $quiet = 1;
}
if (defined($options{"o"})) {
    $moveToOldReserved = 1;
}
if (defined($options{"a"})) {
    $freeAllNodes = 1;
}
if (@ARGV < 2 || @ARGV == 2 && !$freeAllNodes) {
    usage();
}
my $pid = shift;
my $eid = shift;

if (@ARGV > 0 && $ARGV[0] eq '-a') {
    $freeAllNodes = 1;
    shift;
}
if ($freeAllNodes && @ARGV > 0) {
    usage();
}

# Make sure that the experiment actually exists
my $experiment = Experiment->Lookup($pid, $eid);
if (!defined($experiment)) {
    die("*** $0:\n".
        "    There is no experiment '$eid' in project '$pid'.\n");
}
# Need these below.
my $pid_idx = $experiment->pid_idx();
my $exptidx = $experiment->idx();

# Map a bunch of experiments we might need to reserve nodes to.
my $oldreserved_experiment = Experiment->Lookup($oldreserved_pid,
						$oldreserved_eid);
if (!defined($oldreserved_experiment)) {
    die("*** $0:\n".
        "    There is no experiment $oldreserved_pid/$oldreserved_eid!\n");
}
my $locker_experiment = Experiment->Lookup($lockedpid, $lockedeid);
if (!defined($locker_experiment)) {
    die("*** $0:\n".
        "    There is no experiment $lockedpid/$lockedeid!\n");
}
my $reloading_experiment = Experiment->Lookup($reloadpid, $pendingeid);
if (!defined($reloading_experiment)) {
    die("*** $0:\n".
        "    There is no experiment $reloadpid/$pendingeid!\n");
}
# Only in Utah, see below
my $repositioning_experiment;

#
# Verify user and get his DB uid for later. 
#
my $this_user = User->ThisUser();
if (! defined($this_user)) {
    die("*** $0:\n".
	"    You ($UID) do not exist!\n");
}
my $user_uid = $this_user->uid();

# Make sure the user has the ability to modify this experiment
if (!$experiment->AccessCheck($this_user, TB_EXPT_MODIFY)) {
    die("*** $0:\n".
	"    You do not have permission to modify $experiment.\n");
}

# Make a list of nodes given on the command line, or get the whole list from
# the DB if none provided.
if (@ARGV) {
    foreach my $n (@ARGV) {
	my $node = Node->Lookup($n);
	if (!defined($node)) {
	    die("*** $0:\n".
		"    No such node $n!\n");
	}
	push(@nodes, $node);

	# if -x was specified, remove any 
	# mapping to a node which has a phys_nodeid of $n.
	if ($freeDependantVirtuals) {
	    my @virtuals = ();
	    if ($node->VirtualNodes(\@virtuals) != 0) {
		die("*** $0:\n".
		    "    Could not get virtual node list for $node\n");
	    }
	    # Watch for virtuals that were also on the command line, do not
	    # want a node in this list twice.
	    #
	    foreach my $vnode (@virtuals) {
		push(@nodes, $vnode)
		    if (! grep {$_->node_id() eq $vnode->node_id()} @nodes);
	    }
	}
    }
}
else {
    print "Releasing all nodes from experiment $experiment.\n"
	if (!$quiet);
    @nodes = $experiment->NodeList(0, 1);
    if (! $moveToOldReserved) {
	my @oldnodes = ();
	if ($experiment->OldReservedNodeList(\@oldnodes) != 0) {
	    die("*** $0:\n".
		"    Could not get oldreserved node list for $experiment\n");
	}
	push(@nodes, @oldnodes);
    }
}

#
# Trigger a remake of the dhcpd.conf file for any experiment marked
# with the ExternalNodeManagement feature.
#
$EmulabFeatures::verbose = 0;
if (EmulabFeatures->FeatureEnabled("ExternalNodeManagement",
				   undef, undef,
				   $experiment)) {
    $mustmakeconf = 1;
}

#
# Sanity check. Do not want to release nodes if they have ports that
# are trunked or disabled. Means something went wrong elsewhere and
# we should clean up the mess first. 
#
if (! $moveToOldReserved) {
    my @untag = ();

    foreach my $node (@nodes) {
	my @interfaces;

	next
	    if ($node->isvirtnode() || $node->isremotenode());

	if (0 && VLan->IsNodeInAVlan($node)) {
	    print STDERR "$node is still in a vlan!\n";
	    $error++;
	}

	if ($node->AllInterfaces(\@interfaces) != 0) {
	    die("*** $0:\n".
		"    Could not get get interfaces for $node\n");
	}
	
	foreach my $interface (@interfaces) {
	    if ($interface->tagged()) {
		print STDERR
		    "$interface is still tagged! But we will fix that.\n";
		push(@untag, $interface);
	    }
	    if (!$interface->enabled()) {
		print STDERR "$interface is not enabled!\n";
		$error++;
	    }
	}
    }
    if ($error) {
	die("*** $0:\n".
	    "    Please cleanup the previous errors.\n");
    }
    # Else if no errors, untag the interfaces left in tagged mode.
    if (@untag) {
	my @ports = map($_->node_id() . ":" . $_->iface(), @untag);

	print "*** Turning off tagging for: @ports\n";
	system("$snmpit -U @ports");
	if ($?) {
	    die("*** $0:\n".
		"    Some ports would not untag!\n");
	}
    }
}

######################################################################
# Step 1
#
# See what nodes need to be freed, and then lock them down my moving
# them to a holding reservation.
#
# We lock just the reserved table. The prevents races between multiple
# invocations of nfree trying to free the same node. Rather than lock
# a zillion tables, move the reservation into a holding pattern. This
# effectively prevents someone else from freeing the same nodes, and from
# someone else allocating the nodes until we are done cleaning things up.
#
# NOTE: My reason for not wanting to lock all those tables (9 in the
# original version) is that library calls will fail since mysql locking
# requires that every table used within the locked area, be locked.
# Of course, who knows what tables the library uses, so thats a silly
# way to go.
#
######################################################################

DBQueryFatal("lock tables reserved write, nodes read");

# Force reload after table lock.
foreach my $node (@nodes) {
    $node->FlushReserved();
}

#
# This sanity check for shared nodes; do not want to free a shared
# physical node that still has virtual nodes on it. Bail early.
#
# It has to be done with tables locked to avoid a race with the mapper
# trying to add a new virtnode to it. See the pool daemon too.
#
if (! $moveToOldReserved) {
    foreach my $node (@nodes) {
	next
	    if ($node->isvirtnode() || $node->isremotenode());

	if (defined($node->sharing_mode()) && $node->sharing_mode() ne "" &&
	    $node->HasVirtualNodes()) {
	    print STDERR "$node is shared but has virtual nodes on it.\n";
	    $error++;
	}
    }
    if ($error) {
	die("*** $0:\n".
	    "    Please cleanup the previous errors.\n");
    }
}

foreach my $node (@nodes) {
    my $node_id = $node->node_id();

    #
    # Check to make sure they have actually reserved the nodes, now that
    # the reserved table is locked.
    #
    my $rowref = $node->ReservedTableEntry();
    unless (defined($rowref) &&
	    $rowref->{'pid'} eq $pid && $rowref->{'eid'} eq $eid) {
	print STDERR "$node is not reserved by your experiment.\n";
	$error++;
	next;
    }

    #
    # Remember if the node's disk must be zeroed
    #
    if ($rowref->{'mustwipe'}) {
	$mustzero{$node_id} = $rowref->{'mustwipe'};
    }
    else {
	$mustzero{$node_id} = 0;
    }

    if ($moveToOldReserved) {
	# Move to holding reservation. Node is not free, but is no longer
	# owned by the pid/eid, so cannot be mucked with.
	if ($node->MoveReservation($oldreserved_experiment) != 0) {
	    print "*** WARNING: Error moving $node to holding experiment!\n";
	    next;
	}
    }
    else {
	# Move to locked reservation. Node is not free, but is no longer
	# owned by the pid/eid, so cannot be mucked with.
	if ($node->MoveReservation($locker_experiment) != 0) {
	    print "*** WARNING: Error locking down $node!\n";
	    next;
	}

	# Any node that was part of an elabinelab or plabinelab experiment
	# that is freed requires that we remake the dhcpd.conf file.
	if ($rowref->{'inner_elab_boot'} || $rowref->{'plab_boot'}) {
	    if ($node->ModifyReservation({"inner_elab_boot" => 0,
					  "plab_boot"       => 0}) != 0) {
		print "*** WARNING: Error clearing elab/plab boot for $node\n";
	    }
	    $mustmakeconf = 1;
	}
	push(@freed_nodes, $node);
    }

}
DBQueryFatal("unlock tables");

# We are done if called with a -o
if ($moveToOldReserved) {
    exit($error);
}

######################################################################
# Step 1b
#
# Ugh.  If we are resetting the PXE boot program for any of the nodes
# we need to clear them and regenerate the dhcpd.conf file now, before
# we start freeing up nodes in Step 2.  If we delayed HUP'ing til after
# Step 2, then nodes might have already been rebooted by the reload
# daemon.
#
# NOTE: this does not happen very often. elabinelab, plabinelab?
#
foreach my $node (@freed_nodes) {
    if ($node->pxe_boot_path() || $node->next_pxe_boot_path()) {
	$node->Update({"pxe_boot_path" => "NULL",
		       "next_pxe_boot_path" => "NULL"}) == 0 or
	    die("*** $0:\n".
		"    Could not update pxe_boot_path for $node\n");
	$mustmakeconf = 1;
    }
}
if ($mustmakeconf) {
    system("$makeconf -i -r") == 0 ||
	print STDERR "*** WARNING: $makeconf failed!\n";
}

######################################################################
# Step 2
#
# Go through the list of nodes we successfully locked down, and clean
# up the node state (nodes, delays, interfaces, etc). Once that is done,
# move them to whatever new reservations are pending, or free the node.
#
######################################################################

foreach my $node (@freed_nodes) {
    my $node_id       = $node->node_id();
    my $mustclean     = 1;
    my $estate        = $node->eventstate();
    my $isvirt        = $node->isvirtnode();
    my $isgeni        = $node->isfednode();
    my $isdynamic     = $node->isdynamic();
    my $def_boot_osid = $node->def_boot_osid();
    my $def_boot_vers = $node->def_boot_osid_vers();
    my $imageable     = $node->imageable();

    # Clean out all delays
    DBQueryWarn("delete from delays where node_id='$node_id'") || $error++;

    #
    # See if the OS it was running was marked as mustclean or not. Basically,
    # this is an OSKit hack to avoid reloading disks that have not been
    # touched by the kernel. If a def_boot_path was set, there is nothing
    # we can figure out, so just reload it. This needs to be more general
    # purpose.
    #
    my $clean;
    if (defined($def_boot_osid)) {
	#
	# OSImage lookup could fail if the OSID was removed at a bad time,
	# so treat a failure as non-fatal and force a clean.
	#
	my $osimage = OSImage->Lookup($def_boot_osid, $def_boot_vers);
	if (defined($osimage)) {
	    $clean = $osimage->mustclean();
	} else {
	    $clean = 1;
	}
    }
    if ($isvirt || !$imageable) {
	# VIRTNODE HACK: Virtual nodes are special. Do not clean or reload.
	$mustclean = 0;
	$mustzero{$node_id} = 0;
    }
    elsif (defined($clean)) {
	# If def_boot_osid set, then $clean is defined. Otherwise not set
	# so default to cleaning node. 
	$mustclean = $clean;
    }

    #
    # Remember if node has a dynamic (aka, NFS) MFS
    #
    if ($NFSMFS && OSImage->Lookup($node->adminmfs_osid())->IsNfsMfs()) {
	push(@dynmfsnodes, $node_id);
    }

    #
    # If the node is virtual, release the shared resources it had
    # reserved on the physical node.
    #
    if ($isvirt) {
	if ($node->ReleaseSharedBandwidth() == 0) {
	    # Clean the vinterfaces table for this virtual node.
	    DBQueryWarn("delete from vinterfaces where vnode_id='$node_id'")
		or $error++;
	}
	$node->ReleaseBlockStore() == 0
	    or $error++;
    }

    #
    # If the node is a dynamic virtual node, just save it for later.
    # We will call into the Node library to delete it. 
    #
    if ($isvirt && $isdynamic) {
	$node->SetNodeHistory(TB_NODEHISTORY_OP_DESTROY, $this_user,
			      $experiment);
	push(@dynanodes, $node);
	next;
    }

    if (! $isvirt) {
        # On real nodes, clean out all interfaces except the control net.
	$node->ClearInterfaces() == 0
	    or $error++;
	
	# And log phys nodes freed from hwdown
	if ($pid eq NODEDEAD_PID() && $eid eq NODEDEAD_EID() && $user_uid) {
	    $node->InsertNodeLogEntry($this_user, "misc",
				      "Moved from hwdown; nfree");
	}
    }
    $node->ClearBootAttributes() == 0
	or $error++;

    $node->ClrTipAclUrl() == 0
	or $error++;

    #
    # If the node is a virtnode, force its state to SHUTDOWN. This is mostly
    # to avoid silly stated warnings for nodes that do not have a physical
    # representation most of the time! Ditto for geninodes which are really
    # just proxies for a remote physical nodes.
    #
    $node->SetEventState(TBDB_NODESTATE_SHUTDOWN)
	if (($isvirt || $isgeni) && $estate ne TBDB_NODESTATE_SHUTDOWN());

    # Clean out the SFS hostid. What about the other keys?
    DBQueryWarn("update node_hostkeys set ".
		"  sfshostid=NULL ".
		"where node_id='$node_id'")
	or $error++;

    # Clean out the current_reloads table (a just in case measure).
    DBQueryWarn("delete from current_reloads where node_id='$node_id'")
	or $error++;

    # Reset its port allocation stuff.
    DBQueryWarn("delete from nodeipportnum where node_id='$node_id'")
	or $error++;

    # Clean the vinterfaces table for this node.
    DBQueryWarn("delete from vinterfaces where node_id='$node_id'")
	or $error++;

    # Clean the interface_settings table for this node.
    DBQueryWarn("delete from interface_settings where node_id='$node_id'")
	or $error++;

    # Clean the RF limit/reporting tables.
    DBQueryWarn("delete from interfaces_rf_limit where node_id='$node_id'")
	or $error++;
    DBQueryWarn("delete from node_rf_reports where node_id='$node_id'")
	or $error++;

    # If it's a robot, we need to reset its physical location.
    my $result =
	DBQueryFatal("select building,floor,loc_x,loc_y,orientation ".
		     "from node_startloc where node_id='$node_id'");
    if ($result->num_rows()) {
	while (my ($bldg,$floor,$x,$y,$o) = $result->fetchrow_array()) {
	    my $subresult = 
		DBQueryFatal("select pixels_per_meter from floorimages ".
			     "where building='$bldg'");
	    if ($subresult->num_rows()) {
		my ($pixels_per_meter) = $subresult->fetchrow_array();

		$x = int($x * $pixels_per_meter);
		$y = int($y * $pixels_per_meter);
		DBQueryWarn("update location_info set ".
			    "loc_x=$x,loc_y=$y,orientation=$o ".
			    "where node_id='$node_id' and building='$bldg' ".
			    "and floor=$floor") || $error++;
	    }
	    else {
		warn "No building named $bldg in floorimages";
	    }
	}
    }

    # If it's a UE, clear any existing ADB port forwarding setup.
    if ($node->class() eq "ue") {
	system("$tbadb -n $node_id unforward") == 0
	    or warn "Could not clear ADB forwarding on $node_id!";
    }

    ###
    # Now its safe to change the reservation.
    ###

    # If the node has a next_reserve entry, change the reservation.
    my $next_reservation = $node->NextReservation();
    if (defined($next_reservation)) {
	print "Moving $node to $next_reservation\n"
	    if (!$quiet);

	if ($node->MoveReservation($next_reservation) == 0) {
	    $node->SetNodeHistory(TB_NODEHISTORY_OP_MOVE, $this_user,
				  $next_reservation);
	    
	    DBQueryWarn("delete from next_reserve where node_id='$node_id'")
		or $error++;

	    # This little sillyness is for disk reloading.
	    # Kill the last reservation since this path is special.
	    DBQueryWarn("delete from last_reservation ".
			"where node_id='$node_id'")
		or $error++;
	}
	else {
	    $error++;
	}
	next;
    }

    # If the node has a reloads entry, change the reservation so that the
    # reload_daemon will pick it up.
    $result =
	DBQueryFatal("select image_id from scheduled_reloads " .
		     "where node_id='$node_id'");
    my $inreloads = $result->numrows();

    # XXX
    if ($inreloads && !$imageable) {
	print "WARNING: non-imageable node $node in scheduled_reloads\n";
	$inreloads = 0;
    }

    #
    # XXX Robots.
    #
    if ($node->type() eq "garcia") {
	if (!defined($repositioning_experiment)) {
	    $repositioning_experiment = Experiment->Lookup($reloadpid,
							   $rppendingeid);
	    if (!defined($repositioning_experiment)) {
		print STDERR "*** WARNING: No repositioning experiment!\n";
		$error++;
		next;
	    }
	}
	print "Moving $node to $repositioning_experiment\n"
	    if (!$quiet);

	if ($node->MoveReservation($repositioning_experiment) == 0) {
	    $node->SetNodeHistory(TB_NODEHISTORY_OP_MOVE, $this_user,
				  $repositioning_experiment);
	    
	    DBQueryWarn("replace into scheduled_reloads ".
			"set node_id='$node_id'")
		or $error++;

	    # This little sillyness is for disk reloading.
	    # Kill the last reservation since this path is special.
	    DBQueryWarn("delete from last_reservation ".
			"where node_id='$node_id'")
		or $error++;
	}
	else {
	    $error++;
	}
	next;
    }
    elsif (!$TESTMODE && !exists($ENV{'NORELOAD'}) &&
	   !$node->delayreloadtillalloc() && 
	   ((!$isvirt && $imageable) || # XXX force reload hack!
	    $inreloads || $mustzero{$node_id})) { # XXX Garcia hack
	print "Moving $node to $reloading_experiment\n"
	    if (!$quiet);

	if ($node->MoveReservation($reloading_experiment) == 0) {
	    $node->SetNodeHistory(TB_NODEHISTORY_OP_MOVE, $this_user,
				  $reloading_experiment);

	    # Clear experiment-lifetime node attributes
	    foreach my $na (@reloading_clear_attributes) {
		$node->ClearNodeAttribute($na) == 0
		    or $error++;
	    }

	    # This little sillyness is for disk reloading.
	    # Kill the last reservation since this path is special.
	    DBQueryWarn("delete from last_reservation ".
			"where node_id='$node_id'")
		or $error++;

	    # Handle pre-reserve.
	    my $rpid = $node->CheckPreReserve(1, $quiet);
	}
	next;
    }

    #
    # No reloads or reservation changes, so really free the node
    #
    # This little sillyness is for disk reloading. Remember the last
    # project a node was reserved into. At present, there might already
    # be an entry. Eventually, os_setup will look for this and force
    # a reload.
    if ($mustclean) {
	DBQueryWarn("replace into last_reservation (pid_idx,node_id,pid)".
		    "values ($pid_idx, '$node_id', '$pid')");
    }

    # Handle pre-reserve.
    my $rpid = $node->CheckPreReserve(1, $quiet);

    #
    # Delay reload till next allocation. We want to clear the partition
    # table in the DB so it cannot boot from disk again by mistake.
    # Then power off the node until next allocation. We also "taint"
    # node since the user should not have access in the next experiment
    # until it is reloaded.
    #
    if ($node->delayreloadtillalloc()) {
	$node->ClearPartitions();
	$node->SetTaintStates(TB_TAINTSTATE_MUSTRELOAD());
	
	# Clear experiment-lifetime node attributes
	foreach my $na (@reloading_clear_attributes) {
	    $node->ClearNodeAttribute($na) == 0
		or $error++;
	}

	#
	# The project still has the node, so this will be allowed. 
	#
	print "Powering off '$node_id' instead of reloading\n";
	system("$power -a off $node_id");
	#
	# If this fails, fall back to immediate reload. 
	#
	if ($?) {
	    if ($node->MoveReservation($reloading_experiment) == 0) {
		$node->SetNodeHistory(TB_NODEHISTORY_OP_MOVE, $this_user,
				      $reloading_experiment);
	    }
	    else {
		$error++;
	    }
	    next;
	}
    }
    print "Releasing node '$node_id' ...\n"
	if (!$quiet);
    if (DBQueryWarn("delete from reserved where node_id='$node_id'")) {
	$node->SetNodeHistory(TB_NODEHISTORY_OP_FREE, $this_user,
			      $experiment);
    }
    else {
	print STDERR "*** Failed to release node '$node_id'!\n";
	$error++;
    }
}

# Release dynamic nodes.
if (@dynanodes) {
    my @nodeids = map($_->node_id(), @dynanodes);

    Node::DeleteVnodes(@nodeids);
}

#
# XXX make sure that the nodes have destroyed their dynamic
# (aka NFS-based) MFSes.
#
if ($NFSMFS && @dynmfsnodes) {
    system("$dynmfssetup -Df @dynmfsnodes") == 0 ||
	print STDERR "*** WARNING: could not remove MFSes for @dynmfsnodes!\n";
}

######################################################################
# Step 3 - Set up console for freed nodes.
#
# Using a list of freed nodes build eariler, run consetup to reset
# their serial consoles.
#
# NOTE: While it may seem like a race to do this after releasing the
# reservation, it really is not. Even if the node is allocated again
# console_setup looks at the current reservation and does the right
# thing, and since nalloc locks the reserved table, ordering will be
# preserved.
#
######################################################################

if (@freed_nodes) {
    my @nodeids = map($_->node_id(), @freed_nodes);
    
    system("$consetup @nodeids") == 0 ||
	print STDERR "WARNING: $consetup @nodeids failed!\n";
}

exit($error);

