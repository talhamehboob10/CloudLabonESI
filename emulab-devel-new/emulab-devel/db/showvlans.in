#!/usr/bin/perl -w
#
# Copyright (c) 2001-2014 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;

#
# This does one thing; dumps the set of current vlans (in use),
# plus all of the vlans reserved for stitching, since technically
# they aer in use too at most sites.
#
sub usage()
{
    print(STDERR "Usage: showvlans [-s]\n");
    exit(-1);
}
my $optlist = "ds";
my $debug   = 0;

#
# Configure variables
#
my $TB		= "@prefix@";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use emdb;
use Lan;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/sbin:/usr/bin:/usr/sbin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}

if (defined($options{"s"})) {
    #
    # Stitching vlans, which might not be in use but are still
    # considered reserved.
    #
    my %vlantags = ();
    my @networks;
    if (ExternalNetwork->LookupAll(\@networks) < 0) {
	die("Could not get external network\n");
    }
    foreach my $network (@networks) {
	my @tags;

	if ($network->VlanTagList(\@tags) < 0) {
	    die("Could not get tag list for $network\n");
	}
	foreach my $tag (@tags) {
	    $vlantags{"$tag"} = $tag;
	}
    }
    foreach my $tag (sort(keys(%vlantags))) {
	print "$tag\n";
    }
}
else {
    my $query_result =
	DBQueryFatal("select tag from reserved_vlantags order by tag");
    while (my ($tag) = $query_result->fetchrow_array()) {
	print "$tag\n";
    }
}

exit(0);
