#!/usr/bin/perl -wT
#
# Copyright (c) 2000-2016 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;
use Fcntl ':flock';


my $RSYNC = 'rsync';

my $RSYNC_OPTS = "-W -u -av --delete --force";

my @excludes=qw#cisco-config/ cisco-config. hp-config/ OLD/ tmp/ proj/ switch-backup#;
my @includes=qw##;

#
# dhcpd_makeconf - helper script to create dhcpd.conf files from the database.
# The template file should look like an ordinary dhcpd.conf file, but have
# the string %%nodetype=<type> where you want entries for a set of nodes
# filled out. See the template file in the dhcp directory for an example.
#
sub usage {
    print "Usage: $0 [-h]\n";
    print "-c	Use checksums rather than time stamps in rsync\n";
    print "-h	Show this message\n";
    print "-n	All talk, no action\n";
    exit(1);
}
my $optlist = "chn";
my $install = 0;
my $vnames  = 0;
my $restart = 0;
my $impotent = 0;
my $cksum = 0;

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/sbin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Turn off line buffering on output
$| = 1;

use lib "@prefix@/lib";
use libdb;
use libtestbed;

#
# Parse command arguments. Once we return from getopts, all that should
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"c"})) {
    $cksum = 1;
}
if (defined($options{"h"})) {
    usage();
}
if (defined($options{"n"})) {
    $impotent = 1;
}

my $cmdline = $RSYNC . ' ' . $RSYNC_OPTS;

if ($cksum) {
	$cmdline .= " -c";
}
if ($impotent) {
	$cmdline .= " -n -i";
}

for (@excludes) {
	$cmdline .= " --exclude=$_";
}

for (@includes) {
	$cmdline .= " --include=$_";
}

$cmdline .= " -e ssh /tftpboot/";

# Slurp in all of the subboss data to know if we should serve the DHCP
# lease to a given node, or if the next-server field should be something
# other than the IP for boss.
$query_result =
    DBQueryWarn("select distinct subboss_id from subbosses ".
		"where service='tftp'");
if (!$query_result) {
    fatal("Could not subboss data from DB!");
}
while (my %row = $query_result->fetchhash()) {
    my $subboss_id = $row{"subboss_id"};
    print $cmdline . " $subboss_id:/tftpboot/\n";
    system($cmdline . " $subboss_id:/tftpboot/");
}
exit(0);

