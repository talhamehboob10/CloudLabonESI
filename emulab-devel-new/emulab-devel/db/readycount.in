#!/usr/bin/perl -wT

#
# Copyright (c) 2000-2004 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

#
# readycount - Command-line tool to get at the ready bits in the database
#


#
# Configure variables
#
use lib '@prefix@/lib';

use libdb;

use English;
use Getopt::Long;
use strict;

sub usage {
    print << "END";
Usage: $0 [-h] [-c | -s] [-l] <pid> <eid> [node ...]
-h    This message
-s    Set ready bits
-c    Clear ready bits
-p    Use physical node IDs with -c or -s, rather than virtual ones. In
      this case, no pid and eid should be given.
-l    List ready status for each node in the experiment

If no nodes are given, gives a summary of the nodes that have reported ready.
If nodes are given, reports just status for the listed nodes. If -s or -c is
given, sets or clears ready bits for the listed nodes, or all
them as being ready (or clears their ready bits
if -c is given)
END

    return 1;
}

#
# Process command-line arguments
#
my %opt = ();
GetOptions(\%opt,'l','h','c','s','p');
if (($opt{p} && (@ARGV < 1)) || (!$opt{p} && (@ARGV < 2))) {
    exit &usage;
}

my ($pid, $eid);
if (!$opt{p}) {
    ($pid, $eid) = (shift @ARGV, shift @ARGV);

    #
    # Untaint args.
    #
    if ($pid =~ /^([-\w]+)$/) {
        $pid = $1;
    }
    else {
        die("*** Bad data in pid: $pid.\n");
    }
    if ($eid =~ /^([-\w]+)$/) {
        $eid = $1;
    }
    else {
        die("*** Bad data in eid: $eid.\n");
    }
}

#
# Scan the rest of the arguments, doing a generic taint check. More
# specific patterns are below.
# 
my @nodes = ();

foreach my $arg (@ARGV) {
    if ($arg =~ /^([-\w\.]+)$/) {
        $arg = $1;
    }
    else {
        die("*** Bad data in arg: $arg.\n");
    }
    push(@nodes, $arg);
}

if ($opt{h}) {
    exit &usage;
}

if ($opt{l} && ($opt{c} || $opt{s})) {
    exit &usage;
}

if ($opt{s} && $opt{c}) {
    die "-s and -c are mutually exclusive\n";
}

# Make sure that the user has permission to modify the experiment, if using
# virtual mode, or modify the nodes, if using physical names.
if ($opt{p}) {
    if (!TBNodeAccessCheck($UID,TB_NODEACCESS_MODIFYINFO,@nodes)) {
	die "You do not have permission to modify one or more nodes\n";
    }
} else {
    if (!ExpState($pid,$eid)) {
	die("There is no experiment '$eid' in project '$pid'.\n");
    }

    # Make sure the user has the ability to modify this experiment
    if (!TBExptAccessCheck($UID, $pid, $eid, TB_EXPT_MODIFY)) {
	die("You do not have permission to modify '$eid' in project '$pid'.\n");
    }
}

my @pnodes;
if ($opt{p}) {
    @pnodes = @nodes;
} else {
    if (!@nodes) {
	@pnodes = ExpNodes($pid,$eid);
    } else {
	foreach my $vnode (@nodes) {
	    my $pnode;
	    if (VnameToNodeid($pid, $eid, $vnode, \$pnode)) {
		push @pnodes, $pnode;
	    } else {
		die "No such node $vnode in $pid/$eid!\n";
	    }
	}
    }
}

if ($opt{c} || $opt{s}) {
    my $newbit = 1;
    if ($opt{c}) {
	$newbit = 0;
    }
    foreach my $pnode (@pnodes) {
	DBQueryFatal("update nodes set ready=$newbit where node_id='$pnode'");
    }
} else {
    my $ready = 0;
    my $total = 0;
    foreach my $pnode (@pnodes) {
	my $result = DBQueryFatal("select ready, vname, nodes.node_id " .
	    "from nodes left join reserved on nodes.node_id=reserved.node_id ".
	    "where nodes.node_id='$pnode'");
	my ($isready, $vname, $pname) = $result->fetchrow();
	my $name = $opt{p}? $pname : $vname;
	if ($opt{l}) {
	    print "$name\t$isready\n";
	}
	if ($isready) {
	    $ready++;
	}
	$total++;
    }
    print "READY=$ready TOTAL=$total\n";
}

exit(0);
