#!/usr/bin/perl -w

#
# Copyright (c) 2000-2013 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

if ($#ARGV >= 1 || $#ARGV < 0) {
    #Help mode
    print "Usage: schemagraph [output]\n";
    print "\n";
    print "This shows a graph of the relations in the Testbed Database.\n";
    print "Fields or columns are shown as ellipses, and entities or tables\n";
    print "are shown as boxes. Direction of arrows is insignificant.\n";
    print "\n";
    print "Fields that connect to only one table are only found in that\n";
    print "table. Fields that connect to two or more tables can be used\n";
    print "to use information from both tables. By making a chain from one\n";
    print "field to a field in another table, you can relate the two\n";
    print "fields together.\n";
    print "\n";
    print "This graph is generated from the current table and column setup\n";
    print "in the actual database, and is always current.\n";
    print "\n";
    print "If you get an 'Unable to open display' message, give a display \n";
    print "parameter (like 'myhost:0') on the command line, and it will \n";
    print "attempt to open it.\n";
    die("\n");
}
use lib '@prefix@/lib';
use libtestbed;
use emdb;

my $display = shift;

my $v = 0; # Verbose

my @tbls = map { $_ =~ s/.*\.//; $_ } emdb::DBHandle()->tables();

my $date = &localtime();

$date =~ s/[ \t]+/ /;
$date =~ s/\n//;

my $filename="/tmp/showgraph$$";
my $filename2="/tmp/showgraphneato$$";
open(TMP,">$filename");
open(TMPN,">$filename2");

print TMP "graph: {\n  orientation: left_to_right\n".
    "  title: \"Testbed Database Relational Graph - ".$date."\"\n";
print TMP "  height: 1000\n  width: 500\n";
print TMP "  priority_phase: yes\n  straight_phase: yes\n";
print TMP "  arrowmode: fixed\n";

# Adjust the scale here...
print TMP "  display_edge_labels: yes\n  scaling: 0.37\n";

# Use one of the following to control layout... whichever works better...
print TMP "  crossingweight: medianbary\n  splines: yes\n";
#print TMP "  crossingweight: barymedian\n  splines: yes\n";

print TMPN "graph G {\n";

my $sth ="";
my $cmd ="";
my @data=();
my $tbl ="";
my $dest="";
my $col ="";
my @tables=();
my %tablecols=();
my @tablelist =();
my %forkeys=();

foreach $tbl ( @tbls ) {
    push(@tablelist,$tbl);
    print "Found $tbl:\n" if $v;
    if ($sth = DBQueryFatal("describe $tbl") ) {
	while ( @data = $sth->fetchrow()) {
	    $col = $data[0];
	    $col =~ s/[0-9\-]+$//;
	    if (!defined($tablecols{$col})) {
		$tablecols{$col}=$tbl;
		#print TMP "  node: { title: \"$col\" shape: ellipse }\n";
		#print TMPN "{node [label=\"$col\", color=skyblue, shape=ellipse] $col}\n";
		print "  Found $col\n" if $v;
	    } else {
		if (!($tablecols{$col} =~ /^$tbl\b|\.$tbl\.|\.$tbl$/) ) {
		    $tablecols{$col}.=".".$tbl;
		    if (!defined($forkeys{$col})) {
			print TMP "  node: { title: \"$col\" shape: ellipse }\n";
			print TMPN "{node [label=\"$col\", color=skyblue, shape=ellipse] $col}\n";
		    }
		    $forkeys{$col}=1;
		    print "  Linked $col\n" if $v;
		} #else { print STDERR "It was in there"; }
	    }
	}
    }
}

foreach $tbl ( sort @tablelist) {
    print TMP "  node: { title: \"table_$tbl\" }\n";
    print TMPN "{node [label=\"table_$tbl\", color=green, shape=box] table_$tbl}\n";
}

foreach $col ( sort keys %tablecols) {
    @tables= sort split('\.',$tablecols{$col});
    foreach $tbl (sort @tables) {
	if (defined($forkeys{$col}) && $forkeys{$col}==1) {
	    print TMPN "$col -- table_$tbl [label=\"\"];\n";
	
	    if (@tables < 2 || 
		$tbl=~/^delta_|proj_|dela|rel|nodes|log|exper|res|part|int/i ) {
		print TMP "  edge: { sourcename: \"$col\" ".
		  "targetname: \"table_$tbl\" }\n";
	    } else {
		print TMP "  edge: { sourcename: \"table_$tbl\" ".
		  "targetname: \"$col\" }\n";
	    }
	}
    }
}

print TMP "}\n";
close TMP;
print TMPN "}\n";
close TMPN;

if ($display ne "") {
  system("/usr/X11R6/bin/xvcg -silent -display $display $filename");
} else {
  system("/usr/X11R6/bin/xvcg -silent $filename");
}
#exec "/bin/rm $filename";
