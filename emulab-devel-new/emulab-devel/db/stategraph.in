#!/usr/bin/perl -w

#
# Copyright (c) 2000-2013 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

use lib '@prefix@/lib';
use libdb;

# Turn off line buffering
$| = 1;

sub doformats($$);

my $datetag = `date +%Y%m%d%H%M%S`;
chomp($datetag);
my $date = &localtime();
$date =~ s/[ \t]+/ /;
$date =~ s/\n//;
my $defprefix = "stategraph";
my $prefix = $defprefix;
my $v = 0; # Verbose
my $help=0;
my $allmodes=1;
my $x=0;
my $g=0;
my $t=0;
my %modes=();
my $dot=0;
my $vcg=0;
my $ps=0;
my $gif=0;
my $png=0;

while ($_ = shift) {
    print "arg: '$_'\n" if ($v);
    # Ordering: Make sure longer options are first where the first char is
    # ambiguous.
    /^-h/ && do { $help=1; next; };
    /^-dot/ && do { $dot=1; next; };
    /^-vcg/ && do { $vcg=1; next; };
    /^-ps/ && do { $ps=1; next; };
    /^-gif/ && do { $gif=1; next; };
    /^-png/ && do { $png=1; next; };
    /^-[dv]/ && do { $v++; next; };
    /^-x/ && do { $x=1; next; };
    /^-g/ && do { $g=1; next; };
    /^-t/ && do { $t=1; next; };
    /^-o/ && do { $prefix=shift || $defprefix; next; };
    # if it is all lowercase, caps it, otherwise leave it alone
    if ("\L$_" eq "$_") { $_ = "\U$_"; }
    $modes{$_}=1;
    $allmodes=0;
    print "mode '$_' added.\n" if ($v);
}

if ($allmodes && $x) { $x=0; }

if ($help) {
    #Help mode
    print <<EOF;
Usage: stategraph [-h] [-v] [-d] [-dot] [-vcg] [-x] [-g] [-t]
                  [-ps] [-gif] [-png] [-o <out>] [op_mode1] ...
  -h       This help message
  -v       Verbose mode. Multiple -v options cause more verbosity.
  -d       Debug mode. Alias for -v.
  -dot     Generate output using 'dot' graph layout tool.
  -vcg     Generate output using 'vcg' graph layout tool.
  -x       Exclude all op_modes not explicitly included
  -g       Use global layout instead of clustered
  -t       Supress transition labels
  -ps      Generate PostScript format output.
  -gif     Generate GIF format output.
  -png     Generate PNG format output.
  -o <out> Prefix for output filenames.

This program generates a graph of the state machines as defined in the
state_transitions and mode_transitions tables in the database. This
graph is generated from the current in the actual database, and is
always current. The -dot and -vcg options determine the layout tool(s)
used for generating the graphs. The -ps, -gif, and -png options 
determine the format of the output images. If no layout options are 
given, dot will be used. If no format options are given, ps will be used.
Output will be saved into <out>.{ps|gif|png}, depending on the format(s)
requested. When both -dot and -vcg are specified, output will be in 
<out>-{dot,vcg}.{ps|gif|png}. When -o is not given, <out> defaults to 
'$defprefix'. If an output file exists, it will be overwritten.
stategraph will show state machine diagrams for all operational modes
by default, or for a subset by specifying the desired modes on the
command line.
EOF

    die("\n");
}

my $vcgtag="-vcg";
my $dottag="-dot";
my $cleanup=!$v;
my $nocluster=$g;
if (!$dot && !$vcg) { $dot=1; }
if (!$ps && !$gif && !$png) { $ps=1; }
if (!($dot && $vcg)) { $vcgtag=""; $dottag=""; }
my $filename="/tmp/stategraph-vcg-$$";
my $filename2="/tmp/stategraph-dot-$$";

if ($vcg) {
    open(TMP,">$filename");
    print TMP "graph: {\n  orientation: top_to_bottom\n".
      "  title: \"Testbed State Machines Graph - ".$date."\"\n";
    print TMP "  height: 500\n  width: 1000\n";
    print TMP "  priority_phase: yes\n  straight_phase: yes\n";
    print TMP "  arrowmode: fixed\n  node. shape:ellipse\n";
    print TMP "  layoutalgorithm: maxdegree\n  port_sharing: no\n";
    print TMP "  display_edge_labels: yes\n  splines: yes\n";
    # Use one of the following to control layout... whichever works better...
    print TMP "  crossingweight: medianbary\n";
    #print TMP "  crossingweight: barymedian\n";
}

if ($dot) {
    open(TMPN,">$filename2");
    if (!$nocluster) {
	print TMPN "digraph StateGraph {\n  node [shape=ellipse]\n  edge [fontsize=8]\n";
    } else {
	print TMPN "digraph StateGraph {\n  node [shape=ellipse]\n  edge [fontsize=8]\n  graph [clusterrank=global]\n";
    }
    #print TMPN "digraph StateGraph {\n  node [shape=ellipse]\n";
}

my %states=();

my $cmd1 = "select * from state_transitions order by op_mode,state1,state2;";
my $cmd2 = "select * from mode_transitions order by op_mode1,state1,".
  "op_mode2,state2;";
my $lastmode="";
my $delim="_";

my $result = DBQueryFatal($cmd1);
while(@r=$result->fetchrow()) {
    $m=$r[0];
    print "mode='$m' lastmode='$lastmode'\n" if ($v>1);
    if (!($allmodes || (defined($modes{$m}) && $modes{$m}))) { next; }
    print "mode $m is on the list\n" if ($v && !$allmodes);
    if ($m ne $lastmode) {
	if ($lastmode ne "") { print TMPN "  }\n"if $dot; }
	print TMPN "  subgraph cluster_$m {\n    label = \"$m\";\n" if $dot;
	#print TMPN "  subgraph cluster_$m {\n    rank=max\n    label = \"$m\";\n" if $dot;
	#print "Starting subgraph $m\n";
    }
    $lastmode = $m;
    $s1=$r[1];
    $s2=$r[2];
    $l =$r[3];
    mkstates([$m,$s1],[$m,$s2]);
    $n1 = $m.$delim.$s1;
    $n2 = $m.$delim.$s2;
    #if ($n1 ne $n2) {
	#print TMPN "    $n1 -> $n2;\n" if $dot;
	#print TMPN "    $n1 -> $n2 [sametail=\"tail$n2\",samehead=\"head$n1\"];\n" if $dot;
	#print TMPN "    $n1 -> $n2 [sametail=\"tail$n1\",samehead=\"head$n2\"];\n" if $dot;
	#print TMPN "    $n1 -> $n2 [sametail=\"$n2\"];\n" if $dot;
	#print TMPN "    $n1 -> $n2 [sametail=\"$n1\"];\n" if $dot;
	#print TMPN "    $n1 -> $n2 [samehead=\"$n1\"];\n" if $dot;
	#print TMPN "    $n1 -> $n2 [samehead=\"$n2\"];\n" if $dot;
    #} else {
        if ($t) {
	    print TMPN "    $n1 -> $n2;\n" if $dot;
	} else {
	    print TMPN "    $n1 -> $n2 [label=\"$l\"];\n" if $dot;
	}
    #}
    print TMP "  edge: { sourcename: \"$n1\" targetname: \"$n2\" }\n" if $vcg;
}

print TMPN "  }\n" if $dot; # end the last subgraph
my $modetrans=1;

%modelist=();
$result = DBQueryFatal($cmd2);
while(@r=$result->fetchrow()) {
    $m1=$r[0];
    $s1=$r[1];
    $m2=$r[2];
    $s2=$r[3];
    print "Checking mode transition ($m1, $s1) -> ($m2, $s2)\n" if ($v);
    if ($x) {
	# $x and $allmodes are mutually exclusive
	if (!( (defined($modes{$m1}) && $modes{$m1}) &&
	       (defined($modes{$m2}) && $modes{$m2}))) { next; }
	print "mode $m1 and $m2 are both on the list\n" if ($v);
    } else {
	if (!( $allmodes || (defined($modes{$m1}) && $modes{$m1}) ||
	       (defined($modes{$m2}) && $modes{$m2}))) { next; }
	print "mode $m1 or $m2 is on the list\n" if ($v && !$allmodes);
    }
    mkstates([$m1,$s1],[$m2,$s2]);
    $n1=$m1.$delim.$s1;
    $n2=$m2.$delim.$s2;
    if (0) {
	if (!defined($modelist{"in$n1"})) {
	    print TMPN "  $n1 -> MODE_CHANGE;\n" if $dot;
	    $modelist{"in$n1"}=1;
	}
	if (!defined($modelist{"out$n2"})) {
	    print TMPN "  MODE_CHANGE -> $n2;\n" if $dot;
	    $modelist{"out$n2"}=1;
	}
    } else {
	print TMPN "  $n1 -> $n2;\n" if $dot;
    }
    #print TMPN "  $n1 -> $n2 [samehead=\"$n2\",sametail=\"$n1\"];\n" if $dot;
    #print TMPN "  $n1 -> $n2 [samehead=\"$n1\",sametail=\"$n2\"];\n" if $dot;
    #print TMPN "  $n1 -> $n2 [samehead=\"$n2\"];\n" if $dot;
    #print TMPN "  $n1 -> $n2 [samehead=\"$n1\"];\n" if $dot;
    #print TMPN "  $n1 -> $n2 [sametail=\"$n1\"];\n" if $dot;
    #print TMPN "  $n1 -> $n2 [sametail=\"$n2\"];\n" if $dot;
    print TMP "  edge: { sourcename: \"$n1\" targetname: \"$n2\" }\n" if $vcg;
}

if ($vcg) {
    print TMP "}\n";
    close TMP;
    print "Generating vcg graphs: ";
    if (-e "$filename.ps") { system("rm $filename.ps"); }
    system("/usr/X11R6/bin/xvcg -silent -psoutput $filename.ps $filename");
    doformats("$filename.ps","$prefix$vcgtag");
    print "\n";
}
if ($dot) {
    print TMPN "}\n";
    close TMPN;
    print "Generating dot graph: ";
    system("/usr/local/bin/dot -Tps -o $filename2.ps $filename2");
    doformats("$filename2.ps","$prefix$dottag");
    print "\n";
}
print "Done.\n";

if ($cleanup && $vcg) {
    system("/bin/rm $filename");
    system("/bin/rm $filename.ps");
}
if ($cleanup && $dot) {
    system("/bin/rm $filename2");
    system("/bin/rm $filename2.ps");
}

exit(0);

# * stategraph: add options for making png/gif output via pstopnm,
#   pnmtopng, and ppmtogif

sub doformats($$) {
    my ($in,$out) = @_;
    if ($ps) {
	print "ps ";
	system("cp $in $out.ps");
    }
    if (!($gif || $png)) { return; }
    my $opt = "-stdout -xborder 0 -yborder 0 ";
    my $box = `grep %%BoundingBox $in`;
    if ($box =~ /%%BoundingBox:\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)/) {
	my ($xmin,$ymin,$xmax,$ymax) = ($1, $2, $3, $4);
	my $xsize=$xmax-$xmin;
	my $ysize=$ymax-$ymin;
	$opt .="-xsize $xsize -ysize $ysize";
    }
    system("pstopnm $opt $in > $in.ppm 2> /dev/null") &&
      warn("\npstopnm failed: $!\n");
    if ($gif) {
	print "gif ";
	system("ppmtogif $in.ppm > $out.gif 2> /dev/null") &&
	  warn("\nppmtogif failed: $!\n");
    }
    if ($png) {
	print "png ";
	system("pnmtopng $in.ppm > $out.png 2> /dev/null") &&
	  warn("\npnmtopng failed: $!\n");
    }
    # The ppm is only a temp file, so clean it up
    # Later we could add a ppm output option if anyone cared...
    system("rm $in.ppm") if $cleanup;
}

sub mkstates {
    my $n;
    my $l;
    foreach $pair (@_) {
	my ($m, $s) = @$pair;
	$n = $m.$delim.$s;
	$l = $m."\n".$s;
	if (!defined($states{$n})) {
	    if ($modetrans) {
		# if we're doing modes and it isn't made yet, we don't
		# have a cluster for it, so label it better for TMPN
		$s=$m."\\n".$s;
	    }
	    print "Adding node '$n'\n" if ($v);
	    print TMP "  node: { title: \"$n\" label: \"$l\"}\n" if $vcg;
	    if (!$nocluster) {
		print TMPN "    $n [label=\"$s\"];\n" if $dot;
	    } else {
		print TMPN "    $n [label=\"$m\\n$s\"];\n" if $dot;
	    }
	    #print TMPN "    $n;\n" if $dot;
	    $states{$n}=1;
	}
    }
}
