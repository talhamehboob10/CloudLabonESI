#!/usr/bin/perl -w
#
# Copyright (c) 2003-2017 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use Data::Dumper;

#
# Add an interface to the DB. Typically, this is used to add the switch
# side of a wire, but it can be used to add the node side too.a
#
sub usage()
{
    print STDERR "Usage: convertifaces [-n] [-v level] switch switch ...\n";
    print STDERR " -n        - Impotent mode\n";
    print STDERR " -v level  - snmput verbosity level\n";
    exit(-1);
}
my $optlist   = "nv:";
my $impotent  = 1;
my $debug     = 0;

# Protos
sub fatal($);

#
# Configure variables
#
my $TB          = "@prefix@";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use emdb;
use EmulabConstants;
use emutil;
use Node;
use NodeType;
use Interface;
use lib "@prefix@/lib/snmpit";
use snmpit_lib;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/sbin:/usr/bin:";

#
# Parse command arguments. 
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{'n'})) {
    $impotent = 1;
}
if (defined($options{'v'})) {
    $debug = $options{'v'};
}
usage()
    if (!@ARGV);

foreach my $switchid (@ARGV) {
    my $switch = Node->Lookup($switchid);
    if (!defined($switch)) {
	fatal("No such switch in the database: $switchid");
    }
    if (!$switch->isswitch()) {
	fatal("Not a switch: $switchid");
    }
    #
    # Connect to the switch.
    #
    my $type = getDeviceType($switchid);
    my $device;
    SWITCH: for ($type) {
	/cisco/ && do {
	    require snmpit_cisco;
	    $device = new snmpit_cisco($switchid, $debug);
	    last;
	};
	/intel/ && do {
	    require snmpit_intel;
	    $device = new snmpit_intel($switchid, $debug);
	    last;
	};
	/foundry/ && do {
	    require snmpit_foundry;
	    $device = new snmpit_foundry($switchid, $debug);
	    last;
	};
	/nortel/ && do {
	    require snmpit_nortel;
	    $device = new snmpit_nortel($switchid, $debug);
	    last;
	};
	/hp/ && do {
	    require snmpit_hp;
	    $device = new snmpit_hp($switchid, $debug);
	    last;
	};
	/arista/ && do {
	    require snmpit_arista;
	    $device = new snmpit_arista($switchid, $debug);
	    last;
	};
	/mellanox/ && do {
	    require snmpit_mellanox;
	    $device = new snmpit_mellanox($switchid, $debug);
	    last;
	};
	/force10/ && do {
	    require snmpit_force10;
	    $device = new snmpit_force10($switchid, $debug);
 	    last;
	};
	/comware/ && do {
	    require snmpit_h3c;
	    $device = new snmpit_h3c($switchid, $debug);
	    last;
	};
	fatal("Unknown switch type ($type) for $switchid");
    }
    #
    # Grab all the interfaces we have in the DB for this switch.  At
    # this point, there should be an interface associated with both
    # sides of every wire, and a wire associated with every trunk.
    #
    my $query_result =
	DBQueryFatal("select iface from interfaces ".
		     "where node_id='$switchid'");
    if (!$query_result->numrows) {
	print STDERR "No interfaces found in the DB for $switchid. ".
	    "Skipping ...\n";
	next;
    }
    while (my ($iface) = $query_result->fetchrow_array()) {
	my ($card,$port);
	
	my $interface = Interface->LookupByIface($switch, $iface);
	fatal("Could not lookup interface $switchid:$iface in the DB")
	    if (!defined($interface));
	# It is okay not to have a wire for an interface, but there
	# will always be an interface for both sides of a wire.
	my $wire = Interface::Wire->LookupAnyByIface($switch, $iface);
	if (defined($wire)) {
	    #
	    # Need to encapsulate this in the library!
	    #
	    if ($wire->node_id1() eq $switchid) {
		$card = $wire->card1();
		$port = $wire->port1();
	    }
	    else {
		$card = $wire->card2();
		$port = $wire->port2();
	    }
	}
	elsif ($interface->card_saved() && $interface->port_saved()) {
	    # We are keeping the old card,port around for a while.
	    $card = $interface->card_saved();
	    $port = $interface->port_saved();
	}
	else {
	    print "$switchid:$iface : no wire and no card/port. Skipping ...\n";
	    next;
	}
	my $modport = "$card.$port";
	my ($ifdesc) = $device->convertPortFormat($PORT_FORMAT_PORTINDEX,
						  ($modport));
	if (!defined($ifdesc)) {
	    print STDERR "Could not convert $switchid:$iface to an ifdescr. ".
		"Skipping.\n";
	    next;
	}
	next
	    if ($interface->iface() eq $ifdesc);

	print "$switchid:$iface does not match ifdescr: $ifdesc\n";
	if ($impotent) {
	    print "--> Would change $interface to $ifdesc\n";
	}
	else {
	    print "--> Changing $interface to $ifdesc\n";
	}
    }
}

exit(0);

sub fatal($)
{
    my ($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}

