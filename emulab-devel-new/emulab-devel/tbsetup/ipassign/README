Command Line Options
--------------------
This program reads from the standard input. Normally, only standard output is
written to. If there is an error, standard error is written to. Currently,
certain check results and progress messages are printed to standard error
as well. When the program is integrated with the rest of Emulab, these will
be removed.

For now, the command line should be
'ipassign -pc < <input_file> > <output_file>' for most uses.

Example: "bin/ipassign -c -p2 < graph/pastry44.graph"
         Use conservative bitspace allocation for 2 partitions with
         host-to-network routing on the pastry44 graph.

Example: "bin/ipassign -c -s < graph/smalltern.graph"
         Use conservative bitspace allocation for square root of the # of LANs
         partitions with host-host routing on the smalltern graph


'-p#'   When calculating assignment for ip addresses, # is used to set how
        many partitions to create. Example: '-p20' would create 20 partitions.

'-ps'   Search for the proper number of partitions by running METIS repeatedly
        and scoring the result.

'-pq'   Use the square root of the number of LANs as the number of partitions.
	(default)

'-pc'   Search for the proper number of partitions using METIS and scoring
        the result by ratio-cut.

'-pr'   Divide the graph in two with a ratio-cut


default Hierarchical bitspace allocation. Recursively partition the graph
        until the bitspace is used up.
'-c'    Use conservative bitspace allocation. Each level of the hierarchy
        is allocated a fixed number of bits.
#'-g'    Partition the graph using a greedy marriage algorithm instead of
#        METIS.
#        -- NOT IMPLEMENTED --

'-!'    Do not calculate routes or output them. Routes are no longer
        calculated here. Therefore this option does nothing.

Input
-----

The input consists of a series of specifications for LANs (a link is just a
LAN with only two nodes). Each LAN is specified by the number of bits used
to represent that LAN, number representing the weight (this must be integral), 
followed by a series of integers, each one representing a node which the LAN
is connected to. The LANs are automatically numbered in order of appearance
(starting at 0). Note that the number of bits is only used for dynamic IP
assignment, which is not yet implemented. Therefore the first number is
ignored for now.

<bits> <weight> <node> <node> [node [...]]

Example graph:

8 1 0 1
8 1 0 2
8 1 1 2

This graph would contain three LANs. The first has a weight of 1, and is
connected to nodes 0 and 1. The second is also of weight 1 and is
connected to nodes 0 and 2. The third is weight 1 and connects nodes 1 and 2.

Nodes should be numbered starting at 0 and every number up to (numNodes - 1)
should have an associated node.

Output
------

Output is divided into two sections. The first section associates each node-lan
connection pair with an IP address. The second section, delimited by '%%' on
a line by itself, shows the routing table associated with each node.

<ip-file> := <ip-line>*

<ip-line> := <LAN#> " " <node#> " " <IP-address> "\n"

An example of the output for the above graph would be:

0 0 10.0.0.1
0 1 10.0.0.2
1 0 10.0.1.1
1 2 10.0.1.2
2 1 10.0.2.1
2 2 10.0.2.2

If there was an error, this program returns 1, otherwise it returns 0.

Process
-------

Framework -- The framework processes the command line arguments and uses
             the results to figure out what kind of ip assignment and routing
             to do. Then it takes care of populating their inputs and acts
             as an intermediary for feeding the results of ip assignment
             into the router.

SquareRootPartition -- the square root of the number of LANs is calculated
    and this number is used to determine how many partitions METIS should
    create.

SearchPartition -- METIS is called repeatedly with different numbers of
    partitions and the result is scored. The best scored partitioning is then
    used. The scoring function optimizes for quickest routing speed by
    cubing the number of border LANs and adding the result to the sum of
    the cubes of each partition size.

FixedPartition -- METIS is used to create a specific number of partitions

ConservativeAssigner -- The largest LAN size is used to determine the number
    of bits used to represent hosts in a LAN. The largest partition size is
    used to determine the number of bits to represent LANs in a partition,
    and the remaining bits are used to represent partition number. This
    causes waste in bitspace usage, but the bitspace is large enough that this
    should only cause problems when tens or hundreds of thousands of nodes
    are in a network. If the largest LAN, the largest partition, and the number
    of partitions can each fit within their own 8-bitspace, then 8-bit
    boundaries are used because of human readability. Note that in addition
    to IP assignment, disconnected partitions are seperated here.

Exceptions
----------

Non-numeric and non-whitespace characters in the input are invalid.
Each LAN must have at least two nodes connected to it.
Input graphs should be connected.
Some graph configurations could cause the bitspace to be used up.
One of the input arguments may be invalid.
Various impossible conditions should never happen.

Room for Improvement
--------------------

Take the adaptive ip-assignment algorithm and turn it into an ip assignment
    module which works with the framework.
Change output format to be more compact. Possible change it to some form of
    binary representation.
Improve logging/testing automation.

Bugs
----
