#!/usr/bin/perl -wT
#
# Copyright (c) 2000-2014 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use strict;

#
# usage: console_setup node [node node ...]
#
sub usage()
{
    print STDOUT "Usage: console_setup node [node ...]\n";
    exit(-1);
}

#
# Configure variables
#
my $TB		= "@prefix@";
my $TESTMODE	= @TESTMODE@;
my $TBPID	= "@TBADMINGROUP@";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;

# Turn off line buffering on output
$| = 1; 

#
# We put a timeout on the SSH commands. If they fail, it probably means
# the tipserver is screwed up or dead. This is bad, but the experiment
# can continue without it so don't hang. We include the Protocol=2 spec
# so we don't try twice which would double the effective timeout wait.
#
my $SSH		= "$TB/bin/sshtb -o ConnectTimeout=5 -o Protocol=2 -n ";

my $PROG	= "/usr/testbed/sbin/console_setup.proxy";
my %cmdargs     = ();
my @row;

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Parse command arguments. Once we return from getopts, all that should
# left are the required arguments.
#
if (@ARGV == 0) {
    usage();
}
my @nodes = @ARGV;

#
# Script must be setuid root. We don't worry about who called us or what
# nodes are specified since this script always does the right thing.
#
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be root! Maybe its a development version?\n");
}

#
# Build of a list of nodes/pid pairs and then send the command over to
# plastic.
# 
foreach my $node (@nodes) {
    my($db_result);
    my $pid;
    
    #
    # Untaint the argument. 
    #
    if ($node =~ /^([-\@\w.]+)$/) {
	$node = $1;
    }
    else {
	die("Tainted node name: $node");
    }

    #
    # We need to know all of the tiplines associated with this node,
    # and where they live. There might not be any at all, in which
    # case we are done. This query could probably be rolled into the
    # next query, but that would be confusing.
    #
    my $tiplines_result =
	DBQueryFatal("select t.tipname,t.server,t.disabled from tiplines as t ".
		     "left join nodes as n on n.node_id=t.node_id ".
		     "left join node_types as nt on nt.type=n.type ".
		     "where t.node_id='$node' and nt.isvirtnode=0 and ".
		     "      t.server!='' and t.keydata is not null");

    if (! $tiplines_result->numrows) {
	next;
    }

    #
    # Determine the unix group for the node. 
    #
    $db_result =
	DBQueryFatal("select g.unix_name from reserved as r ".
		     "left join experiments as e on ".
		     " r.pid=e.pid and r.eid=e.eid ".
		     "left join groups as g on ".
		     " g.pid=e.pid and g.gid=e.gid ".
		     "where r.node_id='$node'");

    if ($db_result->numrows > 0) {
	@row = $db_result->fetchrow_array();
	$pid = $row[0];
    }
    else {
	$pid = $TBPID;
    }

    #
    # For each tipline associated with the node (might be more than one),
    # we want to issue the proxy command. However, we want to group all
    # commands for each server together to avoid a zillion ssh calls. So,
    # use an array of command arguments, indexed by the tip server.
    #
    while (@row = $tiplines_result->fetchrow_array()) {
	my $tipname = $row[0];
	my $server  = $row[1];
	my $disabled= $row[2];

	#
	# Let people know that a console line is disabled cause
	# otherwise we will all forgot about it.
	#
	if ($disabled) {
	    print "Skipping disabled tipline: $tipname on $server ...\n";
	    next;
	}

	if (defined($cmdargs{$server})) {
	    $cmdargs{$server} = $cmdargs{$server} . " $tipname $pid";
	}
	else {
	    $cmdargs{$server} = "$tipname $pid ";
	}
    }
}

if ($TESTMODE) {
    exit 0;
}

#
# Run the console setup program on the tip server nodes.
# 
$UID = 0;
foreach my $server (keys(%cmdargs)) {
    my $args = $cmdargs{$server};

    if (system("$SSH -host $server $PROG $args")) {
	print STDERR "*** Failed: $SSH -host $server $PROG $args: $?\n";
	exit 1;
    }
}

exit 0;
