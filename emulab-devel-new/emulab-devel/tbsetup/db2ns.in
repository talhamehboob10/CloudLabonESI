#!/usr/bin/perl -w

#
# Copyright (c) 2000-2002 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

use English;

# This is a very simple program that convers the virt_* tables in the DB
# into a NS file.  Not the original NS file, but a NS file that, if parsed
# will create identical virt_* entries.  Well, almost identical.  The virtual
# ports get changed.

use lib "@prefix@/lib";
use exitonwarn;
use libdb;

if ($#ARGV != 1) {
    print STDERR "Syntax: $0 pid eid\n";
    exit(1);
}
($pid,$eid) = @ARGV;

#
# Make sure the experiment exists
#
if (!ExpState($pid,$eid)) {
    die "There is no experiment $eid in project $pid\n";
}

#
# Make sure they have access to the experiment
#
if (!TBAdmin($UID) &&
    !TBExptAccessCheck($UID, $pid, $eid, TB_EXPT_READINFO)) {
    die("*** You do not have permission to access this experiment!\n");
}

print "source tb_compat.tcl\n";
print "set ns [new Simulator]\n";

my $result = DBQueryFatal("select ips,osid,cmd_line,rpms,deltas,startupcmd," .
		     "tarfiles,vname,type,failureaction " .
		     "from virt_nodes where pid=\"$pid\" and eid=\"$eid\"");

while (($ips,$osid,$cmdline,$rpms,$deltas,$startupcmd,
	$tarfiles,$vname,$type,$failureaction) = $result->fetchrow_array) {
    print "set $vname [\$ns node]\n";
    foreach $ippair (split(" ",$ips)) {
	($port,$ip) = split(":",$ippair);
	$ips{"$vname:$port"} = $ip;
    }
    print "tb-set-node-os $vname $osid\n";
    print "tb-set-hardware $vname $type\n";
    print "tb-set-node-cmdline $vname \"$cmdline\"\n";
    if ($rpms ne "") {
	print "tb-set-node-rpms $vname $rpms\n";
    }
    if ($deltas ne "") {
	print "tb-set-node-deltas $vname $deltas\n";
    }
    print "tb-set-node-startup $vname \"$startupcmd\"\n";
    if ($tarfiles ne "") {
	print "tb-set-node-tarfiles $vname $tarfiles\n";
    }
    print "tb-set-node-failure-action $vname $failureaction\n";
}
$result->finish;

$result = DBQueryFatal("select vname,delay,bandwidth,lossrate,member" .
		     " from virt_lans where pid=\"$pid\" and eid=\"$eid\"");
%lans = ();
while (($vname,$delay,$bw,$loss,$member) = $result->fetchrow_array) {
    if (!defined($lans{$vname})) {
	$lans{$vname} = [];
    } 
    push(@{$lans{$vname}},[$member,$delay,$bw,$loss]);
}
$result->finish;
foreach $lan (keys(%lans)) {
    $raw = "";
    foreach $member (@{$lans{$lan}}) {
	@info = @$member;
	$nodeport = $info[0];
	$node = (split(":",$nodeport))[0];
	$raw .= "$node ";
    }
    print "set $lan [\$ns make-lan \"$raw\" 100Mb 0ms]\n";
    foreach $member (@{$lans{$lan}}) {
	($nodeport,$delay,$bw,$loss) = @$member;
	($node,$port) = split(":",$nodeport);
	print "tb-set-ip-lan $node $lan " . $ips{$nodeport} . "\n";
	print "tb-set-node-lan-params $node $lan $delay $bw $loss\n";
    }
}

print "\$ns run\n";
exit(0);
