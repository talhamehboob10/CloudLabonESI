#!/usr/bin/perl -w
#
# Copyright (c) 2009-2021 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;

#
# Attempt to determine if nodes are really messed up.
#
sub usage()
{
    print "Usage: checknodes_daemon [-d]\n";
    exit(1);
}
my $optlist   = "dn";
my $debug     = 0;
my $impotent  = 0;

#
# Configure variables
#
my $TB		  = "@prefix@";
my $TBOPS         = "@TBOPSEMAIL@";
my $TBLOGS        = "@TBLOGSEMAIL@";
my $LOGFILE       = "$TB/log/checknodes.log";
my $PIDFILE       = "/var/run/checknodes.pid";
my $SUDO          = "/usr/local/bin/sudo";
my $PROTOUSER     = "elabman";
my $WAP           = "$TB/sbin/withadminprivs";
my $BATCHEXP      = "$TB/bin/batchexp";
my $NAMED_SETUP   = "$TB/sbin/named_setup";
my $EXPORTS_SETUP = "$TB/sbin/exports_setup";
my $GENTOPOFILE   = "$TB/libexec/gentopofile";
my $NFREE         = "$TB/bin/nfree";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Protos
sub fatal($);
sub logit($$);
sub NodeIsDead($);
sub NodeIsOkay($);
	  
#
# Turn off line buffering on output
#
$| = 1; 

if ($UID != 0) {
    die("Must be root to run this script\n");
}

#
# Check args early so we get the right DB.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug++;
}
if (defined($options{"n"})) {
    $impotent = 1;
}

# Set this to turn off tblog in libraries.
$ENV{'TBLOG_OFF'} = "yep";

# Load the Testbed support stuff.
use lib "@prefix@/lib";
use libdb;
use libosload_new;
use libtestbed;
use Experiment;
use Node;
use User;

my $NODEILL_PID = NODEILL_PID();
my $NODEILL_EID = NODEILL_EID();

#
# Only one please.
#
if (CheckDaemonRunning("checknodes_daemon")) {
    fatal("Not starting another checknodes daemon!");
}

#
# We need this user for running below.
#
my $elabman = User->Lookup($PROTOUSER);
if (!defined($elabman)) {
    fatal("Could not lookup $PROTOUSER user. Exiting ...");
}

#
# Grab the expeiment we use,
#
my $experiment = Experiment->Lookup($NODEILL_PID, $NODEILL_EID);
if (!defined($experiment)) {
    #
    # Create if it does not exist.
    #
    system("$SUDO -u $PROTOUSER $WAP $BATCHEXP ".
	   " -q -i -k -j -w -f -n -S 'System Experiment' ".
	   " -L 'System Experiment' ".
	   " -E 'Check failed nodes before moving to hwdown - DO NOT DELETE' ".
	   " -p $NODEILL_PID -e $NODEILL_EID");
    if ($?) {
 	fatal("Could not create experiment for $NODEILL_PID/$NODEILL_EID\n");
    }
    $experiment = Experiment->Lookup($NODEILL_PID, $NODEILL_EID);
}
if ($experiment->state() eq EXPTSTATE_SWAPPED()) {
    $experiment->SetState(EXPTSTATE_ACTIVE());
}
my $pid = $experiment->pid();
my $eid = $experiment->eid();

#
# We need the hwdown experiment below.
#
my $hwdown_experiment = Experiment->Lookup(NODEDEAD_PID(), NODEDEAD_EID());
if (!defined($hwdown_experiment)) {
    fatal("Cannot find the hwdown experiment.");
}

#
# New library resturns an object.
#
my $loadobj = libosload_new->New();

# Go to ground.
if (! $debug) {
    if (TBBackGround($LOGFILE)) {
	exit(0);
    }
}
if (MarkDaemonRunning("checknodes_daemon")) {
    fatal("Could not mark daemon as running!");
}
logit("Check Nodes Daemon starting ... pid $$", 0);

if ($elabman->FlipTo($experiment->unix_gid())) {
    fatal("Could not flipto $elabman ($experiment)");
}

#
# Setup a signal handler for newsyslog.
#
sub handler()
{
    my $SAVEEUID = $EUID;
    
    $EUID = 0;
    ReOpenLog($LOGFILE);
    $EUID = $SAVEEUID;
}
$SIG{HUP} = \&handler
    if (!$debug);

#
# Delay a bit so we do not throw things into reloading immediately.
#
if (!$debug) {
    print "Delaying a few minutes before doing anything\n";
    sleep(120);
}

while (1) {
    my @informtbopsfatal = ();
    my @informtbopswarn  = ();
    my @tmp = ();
    my $disabled;

    if (! TBGetSiteVar("web/nologins", \$disabled) || $disabled) {
	logit("Skipping this loop because of nologins", 0);
	goto loop;
    }
    logit("Running", 0);

    #
    # Look for nodes in a wierd state. Lets test them.
    #
    my $query_result = 
	DBQueryWarn("select n.node_id,n.eventstate, ".
	    "   FROM_UNIXTIME(n.state_timestamp) from nodes as n ".
	    "left join reserved as r on r.node_id=n.node_id ".
	    "left join node_types as t on t.type=n.type ".
	    "where (n.eventstate!='". TBDB_NODESTATE_ISUP ."' and ".
	    "       n.eventstate!='". TBDB_NODESTATE_PXEWAIT ."' and ".
	    "       n.eventstate!='". TBDB_NODESTATE_PXELIMBO ."' and ".
	    "       n.eventstate!='". TBDB_NODESTATE_ALWAYSUP ."' and ".
	    "       n.eventstate!='". TBDB_NODESTATE_POWEROFF ."') and ".
            "       r.pid is null and n.role='testnode' and ".
            "       t.class!='switch' and ".
	    "       t.isvirtnode=0 and ".
            "       (UNIX_TIMESTAMP(now()) - n.state_timestamp) > 600");
    goto loop
	if (!$query_result);

    while (my ($nodeid,$eventstate,$stamp) = $query_result->fetchrow_array()) {
	my $node = Node->Lookup($nodeid);
	if (!defined($node)) {
	    logit("Cannot find object for $nodeid", 1);
	    next;
	}
	#
	# Skip nodes that are not imageable; we cannot load them
	# to test them.
	#
	next
	    if (!$node->imageable() ||
		!defined($node->default_imageid()));

	logit("Node in unknown state: $nodeid,$eventstate,$stamp", 0);

	next
	    if ($impotent);
	
	#
	# The node is not in any experiment, so we have to explicitly
	# push it into the hwcheckup experiment.
	#
	if ($node->MoveReservation($experiment)) {
	    logit("Could not move $node to $experiment", 1);
	    next;
	}
	$node->InsertNodeLogEntry($elabman, TB_DEFAULT_NODELOGTYPE(),
				  "'Moved to hwcheckup by checknodes daemon; ".
				  "stuck in $eventstate since $stamp'");
    }

    $experiment->Flush();
    Node->FlushAll();

    my @nodelist = $experiment->NodeList();
    goto loop
	if (!@nodelist);

    if ($impotent) {
	logit("Would check @nodelist", 0);
	goto loop;
    }

    foreach my $node (@nodelist) {
	if ($node->ClearBootAttributes()) {
	    logit("$node: Could not clear boot attributes.", 1);
	    next;
	}
	if (! $node->imageable()) {
	    logit("$node is not imageable.", 1);
	    NodeIsDead($node);
	    push(@informtbopsfatal, $node->node_id());
	    next;
	}
	push(@tmp, $node);
    }
    @nodelist = @tmp;

    logit("Checking nodes @nodelist", 0);

    if (@nodelist) {
	logit("Running $GENTOPOFILE ...", 0);
	if (system("$GENTOPOFILE $pid $eid")) {
	    logit("$GENTOPOFILE failed", 1);
	    next;
	}
	logit("Running $EXPORTS_SETUP ...", 0);
	if (system("$EXPORTS_SETUP")) {
	    logit("$EXPORTS_SETUP failed", 1);
	    next;
	}
	# The nodes will not boot locally unless there is a DNS
	# record.
	logit("Running $NAMED_SETUP ...", 0);
	if (system("$NAMED_SETUP")) {
	    logit("$NAMED_SETUP failed", 1);
	    next;
	}
	my @nodenames       = map { $_->node_id() } @nodelist;
	my %reload_args     = ();
	my %reload_results  = ();

	$reload_args{'debug'}     = $debug;
	$reload_args{'waitmode'}  = 2; # XXX Wait till reboot after reload.
	$reload_args{'prepare'}   = 1; # XXX Clear out old disk metadata.
	$reload_args{'nodelist'}  = [ @nodenames ];
	logit("Running osload on @nodenames", 0);
	my $failures = $loadobj->osload(\%reload_args, \%reload_results);
	if ($failures) {
	    logit("osload returned $failures failures", 1);
	}

	foreach my $node (@nodelist) {
	    if ($reload_results{$node->node_id()}) {
		push(@informtbopsfatal, $node->node_id());
		NodeIsDead($node);
	    }
	    else {
		push(@informtbopswarn, $node->node_id());
		NodeIsOkay($node);
	    }
	}
    }
    if (@informtbopsfatal) {
	my $count = scalar(@informtbopsfatal);
	SENDMAIL($TBOPS, "$count nodes are down",
		 "Nodes:\n".
		 "  " . join(" ", @informtbopsfatal) . "\n".
		 "appear to be dead.\n\n".
		 "The nodes have been taken out of the pool.\n");
    }
    if (@informtbopswarn) {
	my $count = scalar(@informtbopswarn);

	system("$NFREE $pid $eid @informtbopswarn");
	if ($?) {
	    fatal("Could not free nodes: @informtbopswarn");
	}
	else {
	    SENDMAIL($TBOPS, "$count nodes appear to be okay",
		     "Nodes:\n".
		     "  " . join(" ", @informtbopswarn) . "\n".
		     "have reloaded and rebooted okay.\n\n".
		     "The nodes have been freed.\n");
	}
    }

    logit("Running $GENTOPOFILE ...", 0);
    if (system("$GENTOPOFILE $pid $eid")) {
	logit("$GENTOPOFILE failed", 1);
	next;
    }
    logit("Running $EXPORTS_SETUP ...", 0);
    if (system("$EXPORTS_SETUP")) {
	logit("$EXPORTS_SETUP failed", 1);
	next;
    }
    # The nodes will not boot locally unless there is a DNS record.
    logit("Running $NAMED_SETUP ...", 0);
    if (system("$NAMED_SETUP")) {
	logit("$NAMED_SETUP failed", 1);
	next;
    }
  loop:
    sleep(($debug ? 10 : 60));
}
MarkDaemonStopped("checknodes_daemon");
exit(0);

sub NodeIsDead($)
{
    my ($node) = @_;
    
    if ($node->MoveReservation($hwdown_experiment)) {
	logit("Could not move $node to $hwdown_experiment", 1);
	return;
    }
    logit("$node is fatally ill; moving to hwdown.", 1);
    $node->InsertNodeLogEntry($elabman, TB_DEFAULT_NODELOGTYPE(),
			      "Moved to hwdown by checknodes daemon");
}

sub NodeIsOkay($)
{
    my ($node) = @_;

    logit("$node appears to be okay; releasing.", 1);
    $node->InsertNodeLogEntry($elabman, TB_DEFAULT_NODELOGTYPE(),
			      "Released by checknodes daemon");
}

sub fatal($)
{
    my ($msg) = @_;

    #
    # Send a message to the testbed list. 
    #
    SENDMAIL($TBOPS,
	     "Check Nodes Daemon died",
	     $msg,
	     $TBOPS);

    MarkDaemonStopped("checknodes_daemon");

    die("*** $0:\n".
	"    $msg\n");
}

sub logit($$)
{
    my ($msg,$stderr) = @_;
    my $stamp = POSIX::strftime("20%y-%m-%d %H:%M:%S", localtime());

    if ($stderr) {
	print STDERR "$stamp: $msg\n";
    } else {
	print "$stamp: $msg\n";
    }
}
