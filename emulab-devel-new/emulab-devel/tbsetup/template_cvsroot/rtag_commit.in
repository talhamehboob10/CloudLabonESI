#!/usr/bin/perl -w
#
# Copyright (c) 2006, 2007 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use strict;
use Getopt::Std;
use File::Basename;
use POSIX ":sys_wait_h";

#
# Configure variables
#
my $TBROOT          = "@prefix@";
my $template_commit = "$TBROOT/bin/template_commit";
my $RLOG	    = "/usr/bin/rlog";
my $CO		    = "/usr/bin/co";
my $CI		    = "/usr/bin/ci";
my $RCS		    = "/usr/bin/rcs";
my $logfile         = "/tmp/rtag_commit.$$";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# CVS sets this.
my $CVSROOT = $ENV{'CVSROOT'};

# locals
my $module;
my $tag;
my $baserev;
my $guid;
my %revisions;
my $cookiefile;

# Protos
sub compare_revisions($$);
sub ParseRevisions($);

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libtestbed;

if (@ARGV == 2) {
    $module = $ARGV[0];
    $tag    = $ARGV[1];
}
elsif (!@ARGV) {
    # See logtag ...
    my $id = getpgrp();
    my $docommit = "/tmp/#cvs.docommit.${id}";

    # See if logtag said that a commit was needed
    exit(0)
	if (! -e $docommit);

    my $foo = `cat $docommit`;
    if ($foo =~ /^(.+),\s*(.+)$/) {
	$module = $1;
	$tag    = $2;
	unlink($docommit);
    }
    else {
	die("Improper usage!\n")
    }
}
else {
    die("Improper usage!\n")
}
$cookiefile = "$CVSROOT/$module/.template,v";

# See if the new tag is a branch tag. To do that, run rlog over the RCS
# file and look at the revision number. We count the dots. There is also
# a special case of x.y.0.z to look for.
my $revision = `$RLOG -h $cookiefile |grep '$tag:'`;
if ($?) {
    die("rlog on $cookiefile failed!\n");
}
if ($revision =~ /^\s*$tag:\s*([\d.]+)$/) {
    $revision = $1;
}
else {
    die("Could not parse output of rlog: '$revision'\n");
}

#
# Need to figure out what template is being revised to create the new one.
# We use the .template file for that, reading the tag log to figure what
# revision number was branched when the branch was created.
#
open(TAGLOG, "$CVSROOT/CVSROOT/tags") or
    die("Could not open $CVSROOT/CVSROOT/tags for reading\n");
while (<TAGLOG>) {
    if ($_ =~ /^$tag,\s*([\w]+),\s*([\d\.]+)$/) {
	#print "$tag $1 at revision $2\n";
	if ($1 eq "add" || $1 eq "mov") {
	    $baserev = $2;
	}
	else {
	    $baserev = undef;
	}
    }
}
close(TAGLOG);
if (!defined($baserev)) {
    die("Could not find base revision for $tag\n");
}

#
# Count dots, and then look for magic branch. If its a branch then we need
# to do a commit on the cookie file so that we get an actual revision on
# the branch. Need to do this for the server side.
#
my @tokens = split(/\./, $revision);
if ((scalar(@tokens) & 1) || ($revision =~ /\d*\.0\.\d*$/)) {
    # Form a revision number on the new branch.
    $tokens[scalar(@tokens)-2] = $tokens[scalar(@tokens)-1];
    $tokens[scalar(@tokens)-1] = 1;
    my $branch = join(".", @tokens[0 .. scalar(@tokens)-2]);

    system("$CO -r${baserev} $cookiefile") == 0
	or die("Could not co -r${baserev} $cookiefile!\n");

    system("$RCS -b${branch} $cookiefile") == 0
	or die("Could not rcs -b${branch} $cookiefile!\n");
    
    system("$CI -f -r${branch} -m'Force checkin on new branch' ".
	   " $cookiefile .template") == 0
	or die("Could not ci -r${branch} $cookiefile!\n");

    system("$RCS -b $cookiefile") == 0
	or die("Could not rcs -b $cookiefile");

    print "$tag/$revision is a branch revision.\n";
    print "Next tag operation on this branch invokes template modify\n";
    exit(0);
}

#
# Make sure that the tag is applied to last revision on the branch (or trunk). 
#
ParseRevisions("$cookiefile");
my $branch;
		
if (scalar(@tokens) == 2) {
    $branch = "TRUNK";
}
else {
    pop(@tokens);
    $branch = join(".", @tokens);
}
if (!exists($revisions{$branch}) ||
    compare_revisions($revision, $revisions{$branch}) != 0) {
    print "*** You must cvs update setup/.template to get the latest ".
	"version!\n";
    print "*** Then reissue the tag operation using the -F option.\n";
    exit(1);
}

#
# Checkout the .template file at the base revision, and get the guid from it.
# This is the template we are going to modify.
#
open(CO, "$CO -q -p${baserev} $cookiefile |")
    or die("Could not run '$CO -p${baserev} $cookiefile\n");
while (<CO>) {
    if ($_ =~ /^GUID:\s*(\d+\/\d+)$/) {
	$guid = $1;
    }
}
close(CO);
if (!defined($guid)) {
    die("Could not find guid!\n");
}

if (0) {
    print "Would run: template_commit -r $tag $guid\n";
    exit(0);
}

#
# Fork a child to start the modify operation. Because of CVS locking,
# we cannot actually wait till completion, but we can wait for a
# little while just in case it fails early on.
#
if (my $childpid = TBBackGround($logfile)) {
    #
    # Delay a moment, and they look for an exit status. This is intended
    # to catch startup problems.
    #
    print "Starting template modify operation ... Be patient!\n";
    select(undef, undef, undef, 5.0);
    my $foo = waitpid($childpid, &WNOHANG);
    if ($foo) {
	system("cat $logfile")
	    if (-s $logfile);
	exit(-1);
    }
    print "Please wait for email about the status before continuing.\n";
    exit(0);
}
exec("$template_commit -r $tag -t $tag $guid");
die("Failed to exec $template_commit!\n");

#
# Compare two revision numbers, returning negative, zero, or positive
# in the manner of strcmp. 
#
sub compare_revisions($$)
{
    my ($rev1, $rev2) = @_;

    my @rev1_tokens = split(/\./, $rev1);
    my @rev2_tokens = split(/\./, $rev2);

    while (@rev1_tokens) {
	my $tok1 = shift(@rev1_tokens);
	my $tok2 = shift(@rev2_tokens);

	next
	    if ($tok1 == $tok2);

	return ($tok1 > $tok2 ? 1 : -1);
    }
    return 0;
}

#
# Parse the tags for a file.
#
sub ParseRevisions($)
{
    my ($filename) = @_;

    open(RLOG, "$RLOG $filename |")
	or die("Could not run rlog on $filename\n");

    while (<RLOG>) {
	if ($_ =~ /^----/) {
	    # Next line is supposed to be a revision line.
	    my $revline = <RLOG>;
	    if ($revline =~ /^revision ([\d.]+)$/) {
		my $revision = $1;

		my @tokens = split(/\./, $revision);
		my $branch;
		
		if (scalar(@tokens) == 2) {
		    $branch = "TRUNK";
		}
		else {
		    pop(@tokens);
		    $branch = join(".", @tokens);
		}
		if (!exists($revisions{$branch}) ||
		    compare_revisions($revision, $revisions{$branch}) > 0){
		    $revisions{$branch} = $revision;
		}
	    }
	}
    }
    close(RLOG);
}

