#!/usr/bin/perl -w

#
# Copyright (c) 2000-2011 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

use English;
use Getopt::Std;
use Socket;
use IO::Handle;     # thousands of lines just for autoflush :-(

#
# usage: staticroutes <pid> <eid>
#
sub usage()
{
    print("Usage: staticroutes [-n [-s|-l|-b]] [-d] [-m] [-f] [-t] <pid> <eid>".
	  "\n".
	  "       Use -n to print routes, but leave the DB alone.\n".
	  "       Use -s (with -n) to print routes in NS format.\n".
	  "       Use -b (with -n) to print routes in Freebsd format.\n".
	  "       Use -l (with -n) to print routes in Linux format.\n".
	  "       Use -d to turn on debugging output.\n".
	  "       Use -m to turn on memory debugging output with top.\n".
	  "       Use -t to optimize network routes.\n".
	  "       Use -f to force route calculation; ignore 'static' flag.\n");
    exit(-1);
}
my  $optlist = "dnftslbmj";

#
# Configure variables
#
my $TB		= "@prefix@";
my $NETMASK	= "255.255.255.0";
my $EXPTNETMASK = "255.255.0.0";

my $debug       = 0;
my $memdebug    = 0;
my $routecalc   = "$TB/libexec/routecalc";
my $impotent    = 0;
my $force	= 0;
my $optimize    = 1;
my $edgeoptimize= 0; # Turned off till netmask problem can be fixed
my $format      = "";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;
use libtblog;

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1; 

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (@ARGV != 2) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"m"})) {
    $memdebug = 1;
}
if (defined($options{"n"})) {
    $impotent = 1;
}
if (defined($options{"f"})) {
    $force = 1;
}
if (defined($options{"t"})) {
    $optimize = 0;
}
if (defined($options{"s"})) {
    $format = "ns";
}
if (defined($options{"b"})) {
    $format = "bsd";
}
if (defined($options{"l"})) {
    $format = "suxs";
}
if ($format && !$impotent) {
    usage();
}

my $pid = $ARGV[0];
my $eid = $ARGV[1];

#
# Untaint args.
#
if ($pid =~ /^([-\@\w]+)$/) {
    $pid = $1;
}
else {
    die("Bad data in pid: $pid.");
}
if ($eid =~ /^([-\@\w]+)$/) {
    $eid = $1;
}
else {
    die("Bad data in eid: $eid.");
}

#
# Get the list of nodes.
# 
my $query_result =
    DBQueryFatal("select vname,ips,routertype,role from virt_nodes ".
		 "where pid='$pid' and eid='$eid'");

if (!$query_result->numrows) {
    tbwarn("No nodes in experiment $pid/$eid!");
    exit(0);
}
# Need to do this when we want to seek around inside the results.
$query_result = $query_result->WrapForSeek();

my $exptidx;
if (!TBExptIDX($pid, $eid, \$exptidx)) {
    die("*** $0:\n".
	"    No such experiment $pid/$eid!");
}

# A map of ips for each node, indexed by vname:port. 
my %ips      = ();

# A map (and reverse map) of node (vname) to unique index.
my %map      = ();
my %rmap     = ();
my $index    = 0;

# A map of lans, where each is a list of the members, indexed by lan.
my %lans     = ();

# A reverse map (sorta). Map a pair of links back to the lan they belong to.
my %rlans    = ();

# The costs, indexed by lan. This is kinda bogus, but since the cost
# is the same for each member of a lan, no big deal.
my %costs    = ();

# Ditto for masks. Need to combine all this to save space.
my %masks    = ();

# Number of links per node, indexed by node (vname). This is strictly
# for generating NS style output. When there is more than one link on
# a node, we *must* generate net routes instead of host routes, or the
# parser will be unhappy.
my %linkcount= ();

# list of ports that a node is connected on. Indexed by node.
my %nodeportlist = ();
# Map vname:port (member) to the lan its in. 
my %nodeport2lan = ();

#
# Look to see if any nodes want static routing. We create static routes
# if any node specifies static-old, or if any node specifies static and
# the number of nodes is less then 250. More then 250 nodes, the user has
# to be using a current image that supports ddijk, and so do not want to
# clog the DB with a zillion routes. 
#
my $staticO = 0;
my $staticN = 0;

if (!$force) {
    while (my (undef,undef,$routertype,$role) =
	   $query_result->fetchrow_array()) {
	if ($routertype eq "static-old") {
	    $staticO++;
	}
	elsif ($routertype eq "static") {
	    $staticN++;
	}
	if ($role eq "bridge") {
	    # Need to figure this out.
	    exit(0);
	}
    }

    # No static routing of any kind.
    exit(0)
	if (! ($staticO || $staticN));

    if ($staticN > 250) {
	warn("*** $0:\n".
	     "    WARNING: More than 250 nodes; ".
	     "refusing to use centralized static routes!\n".
	     "    You must use an image that supports distributed static ".
	     "route calculation.\n");
	exit(0);
    }
    $query_result->dataseek(0);
}

#
# Convert list of nodes into a map of $vname:$port to IP. We will need the
# IPs later when filling in the virt_routes table.
# 
while (my ($vname,$ips,undef) = $query_result->fetchrow_array) {
    $linkcount{$vname} = 0;
    
    if (! defined($nodeportlist{$vname}) ) {
      $nodeportlist{$vname} = [];
    }
    
    if (! defined($map{$vname})) {
	$map{$vname}  = $index;
	$rmap{$index} = $vname;
	$index++;
    }
    foreach my $ipinfo (split(" ", $ips)) {
	my ($port,$ip) = split(":", $ipinfo);
	$ips{"$vname:$port"} = $ip;
	push( @{$nodeportlist{$vname}}, $port );
	$linkcount{$vname} += 1;
    }
}

#
# Now get the lans. 
#
$query_result =
    DBQueryFatal("select vname,member,cost,mask " .
		 "from virt_lans where pid='$pid' and eid='$eid'");
if (!$query_result->numrows) {
    tbwarn("No links or lans in experiment $pid/$eid!");
    exit(0);
}

while (my ($vname,$member,$cost,$mask) = $query_result->fetchrow_array) {
    if (! defined($lans{$vname})) {
	$lans{$vname} = [];
    }
    push(@{$lans{$vname}},$member);
    $nodeport2lan{$member} = $vname;
    $costs{$vname} = $cost;
    $masks{$vname} = $mask;
}

#
# We use perl IPC goo to create a child we can both write to and read from
# (normal perl I/O provides just unidirectional I/O to a process).
# 
if (! socketpair(CHILD, PARENT, AF_UNIX, SOCK_STREAM, PF_UNSPEC)) {
    tbdie("socketpair failed: $!");
}

CHILD->autoflush(1);
PARENT->autoflush(1);

my $childpid = fork();
if (! $childpid) {
    close CHILD;

    #
    # Dup our descriptors to the parent, and exec the program.
    # The parent then talks to it read/write.
    #
    open(STDIN,  "<&PARENT") || die "Can't redirect stdin";
    open(STDOUT, ">&PARENT") || die "Can't redirect stdout";
    open(STDERR, ">&PARENT") || die "Can't redirect stderr";

    exec($routecalc);
    die("*** $0:\n".
	"    exec $routecalc failed: $!\n");
}
close PARENT;

#
# Okay, now send adjacency info for all the nodes on each lan to the child.
#
foreach my $lan (keys(%lans)) {
    my @members = @{$lans{$lan}};

    foreach my $member1 (@members) {
	foreach my $member2 (@members) {
	    if ($member1 ne $member2) {
		my ($node1,$port1) = split(":", $member1);
		my ($node2,$port2) = split(":", $member2);
		my $id1 = $map{$node1};
		my $id2 = $map{$node2};

		# Reverse mapping for later. 
		$rlans{"$node1:$node2"} = $lan;

		if ($debug) {
		    print STDERR "$member1($id1) $member2($id2)\n";
		}

		print CHILD "i $id1 $id2 $costs{$lan}\n";
	    }
	}
    }
}

#
# Parse the routes. Need to map the indices back to nodes, and then form a
# matrix. Why, well you will see in a bit ...
#
my @routes	= ();
my %netroutes   = ();

#
# Stores routes that will make it to the DB. Hash is per source node and
# contains an array of routes for each node. This allows for some
# optimizations in a final pass
#
my @dbroutes = ();

#
# Host route ips for interfaces of a dst node besides the nearest one
# This is indexed by a node (i.e. a "src:srcip-dst:dstip" node) and gives
# of hop:hopips. 
my @hostroutes = ();

if ( $memdebug ) {
    my $top =`top -n`;
    print STDERR "top output before reading routes\n$top\n";
}

# Tell the child to print the routes.
print CHILD "C\n";

#
# Read back the results from the child.
#
while (<CHILD>) {
    if ($debug) {
	print "$_";
    }
    
    my ($src, $dst, $hop);
    
    if ( /route (\d+) to (\d+) via (\d+)/ ) {
	$src = $rmap{$1};
	$dst = $rmap{$2};
	$hop = $rmap{$3};
	if ($debug) {
	    print "src:$src dst:$dst hop:$hop\n";
	}
	$routes[($1 * $index) + $2] = int($3);
    }
    else {
	die("*** $0:\n".
	    "    $routecalc returned a bad line: '$_'\n");
    }
}

# Tell the child to quit. Then wait for it.
print CHILD "q\n";
waitpid($childpid, 0);
if ($?) {
    die("*** $0:\n".
	"    $routecalc failed with status: $?\n");
}

close(CHILD);

#
# Clean the routes.
#
if (! $impotent) {
    DBQueryFatal("delete from virt_routes where ".
		 "pid='$pid' and eid='$eid'");
}

if( $memdebug ) {
    $top =`top -n`;
    print STDERR "top output after reading routes\n$top\n";
}

sub type2bin($) {
    my ($type) = @_;
    if ($type eq "net") {
	return 0;
    } elsif ($type eq "host") {
	return 1;
    }
    die("*** $0:\n".
	"    type2bin passed invalid type: $type\n");
}

sub bin2type($) {
    my ($bin) = @_;
    if ($bin == 0) {
	return "net";
    } elsif ($bin == 1) {
	return "host";
    }
    die("*** $0:\n".
	"    bin2type passed invalid bintype: $bin\n");
}

#
# Now it gets fun. We have to go through each src:dst pair in the route
# list. The problem is that the dst could be multihomed and multiple hops
# away, and so we have no idea what interface (IP) we are actually routing
# to. We have to know the IP, or else we won't be able to insert the route!
# So, we use the matrix to recurse through and find our way to the
# destination. When we get to the last hop, we can use the src:dst of that
# last hop to index into rlans, which gives the full lanlink list. Then we
# search that to find the IP.
#
for( my $srcid = 0 ; $srcid < $index ; $srcid++ ) {
    for( my $dstid = 0 ; $dstid < $index ; $dstid++ ) {
	my $i = ($srcid * $index) + $dstid;
	if ( ! defined($routes[$i]) ) {
	    next;
	}

	my $src = $rmap{$srcid};
	my $dst = $rmap{$dstid};
	my $hopid = $routes[$i];
	my $hop = $rmap{$hopid};
	my $type = 'host';
	my $directlyconn = 0;
	my $netroutedefined = 0;
	my ($srcip,$dstip,$hopip);
	my ($srcipbin,$dstipbin,$hopipbin);
	
	# remember the port for which we have dstip
	my $dstport;


	#
	# In the case of printing NS format, we don't need to print routes
	# for different interfaces since NS supports only a single node
	# address. Also routes for directly connected neighbors in NS
	# is necessary.
	#
	if ($impotent && $format eq "ns") {
	    print "\$$src add-route \$$dst \$$hop\n";
	}
	
	#
	# This is the lan that contains the src and hop. (the link). 
	#
	my $srclan  = $rlans{"$src:$hop"};
	my $srcmask = $masks{$srclan};
	
	#
	# This is the lan that contains the node one hop before dst and dst
	# 
	my $dstlan;
	my $dstmask;
	
	#
	# Members in the srclan and dstlan respectively
	#
	my @srcmembers;
	my @dstmembers;
	
	#
	# If directly connected, skip adding the route into the DB
	# However, we still need to add a route for other interfaces
	# of the directly connected node
	if ($dst eq $hop) {
	    $directlyconn = 1;
	    $dstlan  = $rlans{"$src:$dst"};
	    $dstmask = $masks{$dstlan};
	    @dstmembers = @{$lans{$dstlan}};
	    @srcmembers = @{$lans{$srclan}};
	    #
	    # Scan dstmembers till we find the dst. This is the IP we want.
	    #
	    foreach my $member (@dstmembers) {
		my ($node,$port) = split(":", $member);
		
		if ($node eq $dst) {
		    $dstport = $port;
		    last;
		}
	    }
	    
	    #
	    # goto HOSTROUTES;
	    # Removed the above goto since using it with the for loop
	    # tickles a perl bug. Look at 
	    # http://archive.develooper.com/perl5-porters@perl.org/msg97631.html
	    # for details
	    #
	} else {

	    #
	    # Now we need to find the destination lan (link) by
	    # stepping through each hop till we get to it.
	    #
	    my $nhop = $hop;
	    while (1) {
		# Next hop to destination.
		my $j = ($map{$nhop} * $index) + $map{$dst};
		if (!defined($routes[$j])) {
		    die("*** $0:\n".
			"    Failed to find route: $nhop:$dst!\n");
		}
		my $nnhop = $rmap{$routes[$j]};
		
		# Last hop to destination.
		if ($nnhop eq $dst) {
		    last;
		}
		$nhop = $nnhop;
	    }
	    $dstlan  = $rlans{"$nhop:$dst"};
	    $dstmask = $masks{$dstlan};
	    
	    if ($debug) {
		print "$src --> $dst : $nhop:$dst\n";
	    }
	    
	    #
	    # The members of the lan are used to map back to the IPs of the
	    # interfaces (since we need IPs to insert route entries).
	    #
	    @srcmembers = @{$lans{$srclan}};
	    @dstmembers = @{$lans{$dstlan}};
	    
	    #
	    # Scan dstmembers till we find the dst. This is the IP we want.
	    #
	    foreach my $member (@dstmembers) {
		my ($node,$port) = split(":", $member);
		
		if ($node eq $dst) {
		    $dstip = $ips{$member};
		    $dstipbin = inet_aton($dstip);
		    $dstport = $port;
		    last;
		}
	    }
	    
	    #
	    # If optimzing create a net route and avoid a per-host
	    # entry for each pair. Convert the route, but remember we
	    # did it so we can skip similar routes in the future.
	    #
	    if ($optimize) {
		my $newip = inet_ntoa(inet_aton($dstip) & inet_aton($dstmask));
		
		if (defined($netroutes{"$src:$newip"})) {
		    if ($netroutes{"$src:$newip"} ne $hop) {
			die("*** $0:\n".
			    "    network route mismatch: $src:$dst:$hop!\n");
		    }
		    $netroutedefined = 1;
		} else {
		    $netroutes{"$src:$newip"} = $hop;
		    $type  = "net";
		    $dstip = $newip;
		    $dstipbin = inet_aton($dstip);
		}
	    }
	}
	
	#
	# Scan srcmembers to find the IPs for the src and hop.
	#
	foreach my $member (@srcmembers) {
	    my ($node,$port) = split(":", $member);
	    
	    if ($node eq $src) {
		$srcip   = $ips{$member};
		$srcipbin = inet_aton($srcip);
		next;
	    }
	    if ($node eq $hop) {
		$hopip = $ips{$member};
		$hopipbin = inet_aton($hopip);
		next;
	    }
	}
	
	# Construct host routes for the other interfaces of dst
	foreach my $port (@{$nodeportlist{$dst}}) {
	    
	    # We already have a route for the ip on dstport
	    if ( $port eq $dstport ) {
		next;
	    }
	    
	    my $newip   = $ips{"$dst:$port"};
	    my $newmask = $masks{$nodeport2lan{"$dst:$port"}};
	    
	    my $newipsubnet = inet_ntoa(inet_aton($newip) &
					inet_aton($newmask));
	    
	    # If we already have a route to newipsubnet via the same hop,
	    # we don't need the host route
	    if ( defined($netroutes{"$src:$newipsubnet"}) &&
		 $netroutes{"$src:$newipsubnet"} eq $hop ) {
		next;
	    } else {
		if ( ! defined($hostroutes[$srcid]) ) {
		    $hostroutes[$srcid] = [];
		}
		my $newipbin = inet_aton($newip);
		
		push( @{$hostroutes[$srcid]}, 
		      pack( "a4Ia4a4Ia4", $srcipbin, $dstid,
			    inet_aton($newmask),
			    $newipbin, $hopid, $hopipbin) );
		      
	    }
	}
	
	# We had to run till here to store hostroutes
	# that may have to be added later. However,
	# we can skip for directly connected neighbors
	# or if net route was already defined
	if ($directlyconn || $netroutedefined) {
	    next;
	}
	
	if ( !defined($dbroutes[$srcid]) ) {
	    $dbroutes[$srcid] = [];
	}
	push( @{$dbroutes[$srcid]}, 
	      pack( "a4Ia4a4Ia4s", $srcipbin, $dstid,
		    inet_aton($dstmask), $dstipbin, $hopid,
		    $hopipbin, type2bin($type)) );
    }
}

# release memory used by the routes hash
@routes = ();
undef @routes;

if( $memdebug ) {
    $top =`top -n`;
    print STDERR "top output after finding net routes\n$top\n";
}

# This part adds host routes for subnets that don't have a route.
# However, the first route will be added as a net route
# and if subsequent host routes are different from the first
# route we added, only then will the host routes get added.
for( my $srcid = 0 ; $srcid < $index ; $srcid++ ) {
    if (! defined($hostroutes[$srcid]) ) {
	next;
    }
    my $src = $rmap{$srcid};
    foreach my $hostroute (@{$hostroutes[$srcid]}) {
	my ($srcipbin, $dstid, $dstmaskbin, $dstipbin, $hopid, $hopipbin) =
	    unpack( "a4Ia4a4Ia4", $hostroute );
	my $dstip;
	my $dst = $rmap{$dstid};
	my $hop = $rmap{$hopid};
	my $type = 'host';
	
	my $dstipsubnet = inet_ntoa($dstipbin & $dstmaskbin);
	
	# If we already have a net route to dstipsubnet via the same hop,
	# we don't need the host route
	if ( defined($netroutes{"$src:$dstipsubnet"}) ) {
	    if ($netroutes{"$src:$dstipsubnet"} eq $hop ) {
		next;
	    }
	} else {
	    
	    # We do the following optimization only for
	    # hosts that are _not_ directly connected
	    # neighbors. Otherwise, adding interface 
	    # subnet routes fail. Even with this, certain
	    # redundant links might be unused since the
	    # route calculator will choose one of
	    # the redundant routes over the other(s)
	    if ($optimize && ($dst ne $hop)) {
		$netroutes{"$src:$dstipsubnet"} = $hop;
		$type = "net";
		$dstip = $dstipsubnet;
		$dstipbin = inet_aton($dstip);
	    }
	}
	
	if ( !defined($dbroutes[$srcid]) ) {
	    $dbroutes[$srcid] = [];
	}
	push( @{$dbroutes[$srcid]}, 
	      pack( "a4Ia4a4Ia4s", $srcipbin, $dstid, $dstmaskbin,
		    $dstipbin, $hopid, $hopipbin, type2bin($type)) );
    }
}

# release memory used by all these hashes.
# Not much use doing this at this stage though
%netroutes = ();
undef %netroutes;
@hostroutes = ();
undef @hostroutes;
%lans = ();
undef %lans;
%rlans = ();
undef %rlans;
%nodeport2lan = ();
undef %nodeport2lan;

if( $memdebug ) {
    $top =`top -n`;
    print STDERR "top output before final pass\n$top\n";
}

# In the final pass, for some source nodes that are "edge" 
# nodes (i.e. with degree 1), we can replace all routes with
# one route with a smaller IP prefix since the nexthop is
# the same for all routes
for( my $srcid = 0 ; $srcid < $index ; $srcid++ ) {
    if ( ! defined($dbroutes[$srcid]) ) {	
	next;
    }
    my $src = $rmap{$srcid};
    my ($dst, $hop);
    my ($srcip, $dstip, $hopip, $type, $prevhopip, $prevdstip);
    my ($srcipbin, $dstid, $dstipbin, $hopid, $hopipbin, $typebin);
    my ($prevdstipprefix, $dstipprefix);
    my $oneroute = 0;
    $prevhopip = $prevdstip = 0;
    $prevdstipprefix = $dstipprefix = 0;
    if ( $optimize && $edgeoptimize ) {
	$oneroute = 1;
	foreach my $route (@{$dbroutes[$srcid]}) {
	    ($srcipbin, $dstid, $dstmaskbin, $dstipbin, $hopid, $hopipbin,
	     $typebin) =
		 unpack( "a4Ia4a4Ia4s", $route);
	    $srcip = inet_ntoa($srcipbin);
	    $dst = $rmap{$dstid};
	    $dstip = inet_ntoa($dstipbin);
	    $hop = $rmap{$hopid};
	    $hopip = inet_ntoa($hopipbin);
	    $type = bin2type($typebin);
	    if (! $prevhopip || ! $prevdstip) {
		$prevhopip = $hopip;
		$prevdstip = $dstip;
	    } else {
		# This can happen when a node has a degree > 1
		if ($prevhopip ne $hopip) {
		    $oneroute = 0;
		    last;
		}
		
		# This can happen if we have both widearea nodes
		# and local nodes in an experiment. In that case,
		# the widearea nodes all have 10.* addresses while
		# the local ones have 192.168.* 
		$prevdstipprefix = 
		    inet_ntoa(inet_aton($prevdstip) & inet_aton($EXPTNETMASK));
		$dstipprefix = 
		    inet_ntoa(inet_aton($dstip) & inet_aton($EXPTNETMASK));
		if ($dstipprefix ne $prevdstipprefix) {
		    $oneroute = 0;
		    last;
		}
		$prevhopip = $hopip;
		$prevdstip = $dstip;
	    }
	}
    }
    if( $optimize && $edgeoptimize && $oneroute ) {
	if ($impotent) {
	    if ($debug) {
		printf(STDERR "%s: %-23s --> %-23s - %s\n",
		       ($type eq "net" ? "n" : "h"),
		       "$src:$srcip", "ANY:$dstipprefix", "$hop:$hopip");
	    }
	    if ($format eq "bsd") {
		print "route add -net $dstipprefix $hopip $EXPTNETMASK\n";
	    }
	    elsif ($format eq "suxs") {
		print "route add -net $dstipprefix netmask $EXPTNETMASK gw $hopip\n";
	    }
	} else {
	    DBQueryFatal("insert into virt_routes ".
			 " (exptidx,pid,eid,vname,src,dst,nexthop,dst_type, ".
			 "  dst_mask) ".
			 " values ('$exptidx', '$pid', '$eid', '$src', ".
			 "         '$srcip', '$dstipprefix', ".
			 "         '$hopip', 'net', '$EXPTNETMASK')");		
	}
    } else {
	foreach my $route (@{$dbroutes[$srcid]}) {
	    ($srcipbin, $dstid, $dstmaskbin, $dstipbin, $hopid, $hopipbin,
	     $typebin) =
		unpack( "a4Ia4a4Ia4s", $route);
	    $srcip = inet_ntoa($srcipbin);
	    $dst = $rmap{$dstid};
	    $dstip = inet_ntoa($dstipbin);
	    $hop = $rmap{$hopid};
	    $hopip = inet_ntoa($hopipbin);
	    $type = bin2type($typebin);
	    $mask = inet_ntoa($dstmaskbin);

	    if ($impotent) {
		if ($debug) {
		    printf(STDERR "%s: %-23s --> %-23s - %s\n",
			   ($type eq "net" ? "n" : "h"),
			   "$src:$srcip", "$dst:$dstip", "$hop:$hopip");
		}
		if ($format eq "bsd") {
		    if ($type eq "host") {
			print "route add -host $dstip $hopip\n";
		    }
		    else {
			print "route add -net $dstip $hopip $mask\n";
		    }
		}
		elsif ($format eq "suxs") {
		    if ($type eq "host") {
			print "route add -host $dstip gw $hopip\n";
		    }
		    else {
			print "route add -net $dstip netmask ".
			    "$mask gw $hopip\n";
		    }
		}
	    } else {
		DBQueryFatal("insert into virt_routes ".
			     " (exptidx,pid,eid,vname,src,dst,nexthop,".
			     "  dst_type,dst_mask) ".
			     " values ('$exptidx', ".
			     "         '$pid', '$eid', '$src', '$srcip', ".
			     "         '$dstip', '$hopip', '$type', '$mask')");
	    }
	}
    }
}

if( $memdebug ) {
    $top =`top -n`;
    print STDERR "top output just before exit\n$top\n";
}

exit 0;
