#!/usr/bin/perl -w
#
# Copyright (c) 2000-2019 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
package libimageops_ec2;
use strict;
use libimageops;
use base qw(libimageops_ndz);

use libdb;
use libtestbed;
use libimageops;
use libtblog_simple;
use Node;
use English;
use Data::Dumper;

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use EmulabConstants;
use libtestbed;
use libadminmfs;
use Experiment;
use Node;
use User;
use OSImage;
use Image;  # Cause of datasets.
use Logfile;
use WebTask;
use Project;
use EmulabFeatures;

my $EC2SNAP     = "$TB/sbin/ec2import.proxy";

sub CreateImageValidateTarget($$$$) {
    my ($self,$image,$target,$args) = @_;

    # Only warn if they explicitly specified an option
    if ((defined($args->{'delta'}) && $args->{'delta'} == 1)
	|| (defined($args->{'signature'}) && $args->{'signature'} == 1)) {
	tbwarn("*** WARNING: don't support delta imaging of EC2 images, ".
	       "ignoring delta/signature options.\n");
	$args->{'delta'} = $args->{'signature'} = 0;
    }

    $args->{'pid'} = $image->pid();

    return $target;
}

#
# EC2 nodes.
# Run on ops.
#
sub DoCapture($$$$) {
    my ($self,$image,$target,$args) = @_;
    my $rc = -1;
    my $msg;

    my $this_user = $args->{'user'};
    my $user_uid = $this_user->uid();
    my $ofilename = $args->{'ofilename'};
    my $webtask = $args->{'webtask'};

    my $safe_target = User::escapeshellarg($target);
    my $pid = $image->pid();
    my $imageid = $image->imageid();

    my $cmd = "$TB/bin/sshtb -host $CONTROL $EC2SNAP -u $user_uid ".
	"$safe_target $pid $user_uid $imageid $ofilename";
    print STDERR "About to: '$cmd'\n"
	if (1 || $debug);

    my $SAVEUID	= $UID;
    $EUID = $UID = 0;

    system($cmd);
    $rc = $?;
    if ($rc) {
	$msg = "Command '$cmd' failed with $?";
    }

    $EUID = $UID = $SAVEUID;

    if (defined($webtask)) {
	if ($rc) {
	    $webtask->status("failed");
	}
	else {
	    $webtask->status("finishing");
	}
    }

    tbwarn("$self DoCapture: $msg\n")
	if ($rc);
    if (wantarray) {
	return ($rc,$msg);
    }
    else {
	return $rc;
    }
}

1;
