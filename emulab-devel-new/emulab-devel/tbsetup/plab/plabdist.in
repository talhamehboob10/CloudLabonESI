#!/usr/bin/perl -w

#
# Copyright (c) 2003-2007 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

#
# Script for sync-ing out the netbed_files directory to planetlab nodes
#
# NOTE: This script currently requires YOUR keys, because it logs in as utah1
# on the planetlab nodes
#

use lib '@prefix@/lib';
use libdb;

my $INSTALL_ETCDIR = '@prefix@/etc';
my $ROOTBALL       = '@PLAB_ROOTBALL@';

#
# Username that we'll use to ssh into planetlab nodes
#
my $PLAB_USER = "utah_svc_slice";

#
# Directory to sync with the plab nodes
#
my $LOCAL_SYNC_DIR  = "$INSTALL_ETCDIR/plab/netbed_files";
my $REMOTE_SYNC_DIR = "netbed_files";

#
# Maximum number of children to run at once - we'll keep this low, since it
# consumes bandwidth on boss
#
my $max_children = 10;

#
# Die unless the rootball exists - this serves two purposes:
# 1) It reminds you to install the rootball
# 2) It prevents you from accidentally running this in a devel tree
#
# We try opening it, so that a symlink pointing to a non-existant file will
# fail.
#
if (!open(ROOTBALL,"<$LOCAL_SYNC_DIR/www/$ROOTBALL")) {
    die "Unable to open $LOCAL_SYNC_DIR/www/$ROOTBALL: $!";
}
close ROOTBALL;

#
# Set up rsync to use ssh - we don't use sshtb, because we need to be able to
# control the username, and it would automatically pick emulabman. Also, we
# have to do the ssh argument differently from normal, because of the way rsync
# 'helpfully' parses them for us - spaces and quotes are a no-no.
#
$ENV{'RSYNC_RSH'} = "ssh -q -oBatchMode=yes -oStrictHostKeyChecking=no " .
		    "-l $PLAB_USER";

my $RSYNC = "/usr/local/bin/rsync";

if (!(($> == 0) || TBAdmin())) {
    die "Sorry, only admins can use this script!\n";
}

my @nodes = ();

if (@ARGV) {
    @nodes = @ARGV;
}

if (!scalar(@nodes)) {
    #
    # Get a list of planetlab nodes that are up
    #
    my $query_result = 
	DBQueryFatal("SELECT n.node_id FROM nodes as n " .
		     "LEFT JOIN node_status AS s ON n.node_id=s.node_id " .
		     "LEFT JOIN reserved AS r ON n.node_id = r.node_id " .
		     "WHERE n.type=\"pcplabphys\" AND s.status=\"up\" AND " .
		     "!(r.pid=\"" . NODEDEAD_PID .
		     "\" AND r.eid=\"" . NODEDEAD_EID .  "\") " . 
		     "order by n.node_id");
    @nodes = ();
    while (my ($node) = $query_result->fetchrow()) {
	push @nodes, $node;
    }
}

#
# Run up to $max_children rsyncs at a time
#
my $current_children = 0;
my @failed = ();
while (@nodes || $current_children) {
    if (($current_children < $max_children) && @nodes) {
	#
	# If we have room for another child, start one up
	#
        my $node = pop @nodes;
        if (my $pid = fork()) {
            $current_children++;
            $children{$pid} = $node;
        } else {
            print "rsync-ing with $node ...\n";
            exec "$RSYNC -aLz $LOCAL_SYNC_DIR/ ${node}:$REMOTE_SYNC_DIR/";
        }
    } else {
	#
	# Wait for a child to die, and see if it failed
	#
        my $childpid = wait();
        if ($childpid < 0) {
            die "Bad return value from wait(): $childpid\n";
        }
        if ($children{$childpid}) {
            $current_children--;
            if ($?) {
                push @failed, $children{$childpid};
            }
        }
    }
}

if (@failed) {
    print "Some nodes failed: \n";
    print map {"$_\n"} @failed;
}

exit scalar @failed;
