#!/usr/bin/perl -w
#
# Copyright (c) 2007 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;

sub usage()
{
    print STDOUT
	"Usage: plabnodehistmetrics [-n] <plcname>\n";
    exit(-1);
}

my $optlist = "n";
my $impotent= 0;

#
# Only real root can call this.
# 
if ($UID != 0) {
    print STDERR "You must be root to run this script!\n";
    exit(-1);
}

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";

#
# Untaint the path
# 
$ENV{'PATH'} = '/bin:/usr/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use libplabnodehist qw(getNodeHistSequences rankNodesByUnavail sequenceToStr);

my $OUTFILE = "/share/planetlab/reliable_nodes";

# Be careful not to exit on transient error
$libdb::DBQUERY_MAXTRIES = 30;

#
# Parse command arguments. Once we return from getopts, all that should
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (scalar(@ARGV) < 1) {
    usage();
}
if (defined($options{"n"})) {
    $impotent = 1;
}

# Grab the plab_nodehist sequence stats.
#
my $seqref = getNodeHistSequences($ARGV[0]);
my $rankref = rankNodesByUnavail($ARGV[0],$seqref,1,1);
my @ranklist = @$rankref;

#
# Dump out to the reliable nodes file for local people.
#
my $OF;
if ($impotent) {
    $OF = STDOUT;
}
else {
    open($OF,">$OUTFILE") 
	or die "could not open reliable nodes file $OUTFILE!";
}

my $i = 0;
for ($i = 0; $i < scalar(@ranklist); ++$i) {
    print $OF "" . $ranklist[$i]{'nodeid'} .
        "\t" . sprintf("%.4f",$ranklist[$i]{'rank'}) .
	"\t" . sprintf("%.4f",$ranklist[$i]{'jitter_deduction'}) .
	"\t" . $ranklist[$i]{'totseqlen_success'} .
	"\t" . $ranklist[$i]{'totseqnum_success'} .
	"\t" . $ranklist[$i]{'jitseqnum_success'} .
	"\t" . $ranklist[$i]{'totseqlen_failure'} .
	"\t" . $ranklist[$i]{'totseqnum_failure'} .
	"\t" . $ranklist[$i]{'jitseqnum_failure'} .
	"\n";

    # insert into stats table for use in web display, or other computation
    my $kstr = "node_id,unavail,jitdeduct,succtime,succnum,succjitnum," . 
	"failtime,failnum,failjitnum";
    my $vstr = "'" . $ranklist[$i]{'nodeid'} . "'," . 
	$ranklist[$i]{'rank'} . "," . 
	$ranklist[$i]{'jitter_deduction'} . "," . 
	$ranklist[$i]{'totseqlen_success'} . "," . 
	$ranklist[$i]{'totseqnum_success'} . "," . 
	$ranklist[$i]{'jitseqnum_success'} . "," . 
	$ranklist[$i]{'totseqlen_failure'} . "," . 
	$ranklist[$i]{'totseqnum_failure'} . "," . 
	$ranklist[$i]{'jitseqnum_failure'};

    DBQueryWarn("replace into plab_nodehiststats ($kstr) values ($vstr)");
}

close($OF);

#
# Now dump stats into the db as a feature of "unavailability".
# Note that we cap the feature weight at 0.99 so it's valid and proper for 
# assign.
# Also note that we use the unavailability rank augmented with a jitter
# increase (i.e., if the node is jittery, we increase its unavailability 
# score).
#
if (!$impotent) {
    my ($nodeid,$weight) = (0,0);
    for ($i = 0; $i < scalar(@ranklist); ++$i) {
	$nodeid = $ranklist[$i]{'nodeid'};
	$weight = $ranklist[$i]{'rank'};
	if ($weight > 0.99) {
	    $weight = 0.99;
	}

	DBQueryWarn("replace into node_features ".
		    " (node_id, feature, weight) ".
		    " values ('$nodeid', 'unavail', $weight)");
    }
}

exit(0);
