#!/usr/bin/perl -wT
#
# Copyright (c) 2000-2017 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;

#
# Create an NFS-based root filesystem for a node to act as the admin MFS.
# We only do this for nodes with the magic admin MFS OSID set unless force
# is specified.
#
sub usage()
{
    print(STDERR
	  "Usage: nfsmfs_setup [-D] [-Ndfnq] node ...\n".
	  "switches and arguments:\n".
	  "-D       - destroy rather than setup the MFS\n".
	  "-N       - don't check DB to see if node uses an NFS MFS, just do it\n".
	  "-d       - debug; enabled additional debugging\n".
	  "-f       - force (re)creation of MFS even if it exists\n".
	  "-q       - be quiet\n".
	  "-n       - don't do anything, just say what would happen\n".
	  "node ... - list of nodes for which to create/destroy MFSes\n");
    exit(-1);
}
my $optlist    = "Ddfnq";
my $impotent   = 0;
my $debug      = 0;
my $destroy    = 0;
my $nocheck    = 0;
my $force      = 0;
my $quiet      = 0;

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";
my $TESTMODE    = @TESTMODE@;
my $FSNODE      = "@FSNODE@";
my $WITHZFS     = @WITHZFS@;
my $ZFSNOEXPORT	= "@ZFS_NOEXPORT@";
my $SSH		= "$TB/bin/sshtb -n -l root -host $FSNODE";
my $PROG	= "$TB/sbin/nfsmfs_setup.proxy";
my $EXPORTSSETUP= "$TB/sbin/exports_setup";
my $NFSROOT	= "@NFSMFS_ROOT@";

#
# We don't want to run this script unless its the real version.
#
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be root! Maybe its a development version?\n");
}

#
# Only implemented with ZFS cloning.
#
if ($WITHZFS == 0) {
    die("*** $0:\n".
	"    Only implemented with ZFS FS node right now.\n");
}

if ($NFSROOT eq "") {
    die("*** $0:\n".
	"    Must set NFSMFS_ROOT in defs file.");
}

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/sbin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Testbed Support libraries
# 
use lib "@prefix@/lib";
use libdb;
use libtestbed;
use Data::Dumper;
use Node;
use OSImage;

#
# Check args.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"n"})) {
    $impotent = 1;
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"f"})) {
    $force = 1;
}
if (defined($options{"N"})) {
    $nocheck = 1;
}
if (defined($options{"q"})) {
    $quiet = 1;
}
if (defined($options{"D"})) {
    $destroy = 1;
}
usage()
    if (@ARGV == 0);

#
# We need to serialize this script.
#
if (!$TESTMODE) {
    if ((my $locked = TBScriptLock("nfsmfs")) != TBSCRIPTLOCK_OKAY()) {
	fatal("Could not get the lock after a long time!\n");
    }
}

my @nodes;
foreach my $nodeid (@ARGV) {
    if ($nodeid =~ /^([-\w]+)$/) {
	$nodeid = $1;
    } else {
	print STDERR "Skipping bogus node id '$nodeid'\n"
	    if (!$quiet);
	next;
    }

    my $nodeobj = Node->Lookup($nodeid);
    if (!$nodeobj) {
	print STDERR "Skipping bogus node '$nodeid'\n"
	    if (!$quiet);
	next;
    }

    if (!$nocheck) {
	if (OSImage->Lookup($nodeobj->adminmfs_osid())->IsNfsMfs() &&
	    $nodeobj->NeedsAdminMFS()) {
	    push @nodes, $nodeid;
	}
    } else {
	push @nodes, $nodeid;
    }
}

if (@nodes == 0) {
    print STDERR "Found no nodes that require NFS MFS.\n"
	if (!$quiet);
    exit(0);
}

#
# Let's do it!
#
if (!$TESTMODE) {
  $UID = 0;

  my $opts = $destroy ? "-D" : "";

  $opts .= " -d" if ($debug);
  $opts .= " -f" if ($force);
  $opts .= " -n" if ($impotent);

  if ($impotent) {
      print STDERR "Would do: $SSH $PROG $opts @nodes\n";
  }
  system("$SSH $PROG $opts @nodes") == 0 or
      fatal("Failed: $SSH $PROG $opts @nodes: $?");

  # XXX do exports_setup
  if ($ZFSNOEXPORT) {
      system($EXPORTSSETUP) == 0 or
	  fatal("$EXPORTSSETUP failed");
  }

  #
  # Release the lock!
  #
  TBScriptUnlock();
}

exit(0);

sub fatal {
    local($msg) = $_[0];

    TBScriptUnlock()
	if (!$TESTMODE);
    
    SENDMAIL($TBOPS, "NFS MFS setup: ", $msg)
	if (!$debug);
    die($msg);
}
