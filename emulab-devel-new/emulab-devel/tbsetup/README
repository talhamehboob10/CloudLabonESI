tbsetup README

----------------------------------------------------------------------
tbprerun

Syntax:
	tbprerun <pid> <eid> <ns-file>

tbprerun takes a brand new experiment, checks the syntax of the
ns-file, and then converts the ns-file into a virtual topology stored
in the database. 

----------------------------------------------------------------------
tbswap

'tbswap in'

Syntax:
	tbswap in <pid> <eid>

tbswap, when passed 'in' as its operation,
swaps an experiment in.  Specifically, it finds and allocates
a set of resources and configures these resources to emulate the
desired experiment.  As a part of this it configures the physical
state in the DB.


Exit Codes:

'tbswap in' exits with a variety of codes to represent different error
conditions.  Almost all of these codes are actually generated by
assign_wrapper and just passed through by 'tbswap in'.

Exit 0 : All good
2: Insufficient resources.
X: other errors
1+
        4 - Bandwidth violation
        8 - Linkusers violation  
        16 - Desires violation.  

I.e.

1 - Unspecified error
5 - Bandwidth error 
9 - Linkusers error
17 - Desires error. 
13 - Bandwidth and linkusers error.
21 - Bandwidth and desires error.
25 - Linkusers and desires error.
29 - Bandwidth, linkusers, and desires.

----------------------------------------------------------------------

'tbswap out'

Syntax:
	tbswap out [-force] <pid> <eid>

tbswap, when passed 'out' as its operation, 
is the inverse of 'tbswap in'. It tears down the physical
state on the testbed, freeing the resources for other use.  It clears
the physical state from the DB but leaves the virtual state intact.
I.e., it reverses 'tbswap in' but not tbprerun.

-force - Does not check current experiment state.

----------------------------------------------------------------------

tbend

Syntax:
	tbend [-force] <pid> <eid>

tbend is the inverse of tbprerun.  It clears the virtual state from
the DB and marks the experiment as ended.

-force - Does not check current experiment state.

----------------------------------------------------------------------

tbreport

Syntax:
	tbreport [-v] <pid> <eid>

tbreport displays the current state of an experiment.  It displays
both the virtual topology, and, if the experiment is currently
running, the physical mapping.

-v - Display extra information.

----------------------------------------------------------------------

Basic Operation

The basic operation of the tbsetup tools is:

1. tbprerun
2. tbswap in
3. do experiment
4. tbswap out
5. Repeat steps 2-4 as necessary.
6. tbend

It is assumed that an experiment is already entered in the DB before
tbprerun is called.  Likewise, tbend does not remove the entry.

----------------------------------------------------------------------

Experimental States

The experiment goes through the following states:

new - Before tbprerun. tbprerun requires the experiment to be in this
state before running.

prerunning - During tbprerun.

swapped - After tbprerun or 'tbswap out'.  'tbswap in' requires the
experiment to be in this state before running.  tbend requires this
state unless -force is used.

activating - During 'tbswap in'.

active - After 'tbswap in'.  
         'tbswap out' requires this state unless -force is used.

swapping - During 'tbswap out'.

terminating - During tbend.

ended - After tbend.

tested - After 'tbswap in' is run in testing mode.

----------------------------------------------------------------------

Non-symmetries

In general tbprerun and tbend are inverse operations and 
'tbswap in' and 'tbswap out' are inverse operations.
This is not completely true, however. 
'tbswap out' does not completely reverse 'tbswap in',
and tbend clears some state that is set in 'tbswap in',
rather than tbprerun.

Node state: For performance reasons 'tbswap out' does not touch node
state.  The idea being that node state only matters for active
experiments and these experiments will reconfigure the node state when
they are swapped in.

Portmap: The portmap table in the DB is not cleared by 'tbswap out'.
This is because the portmap table will be used the next time 'tbswap in'
is called to try to match the portmapping of the previous swap.  The
purpose behind this is to preserve the same port mapping across swaps.
The portmap table is cleared in tbend instead.


