#!/usr/bin/perl -wT
#
# Copyright (c) 2006, 2007 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use strict;
use Getopt::Std;
use POSIX qw(isatty setsid);
use POSIX qw(strftime);
use Errno qw(EDQUOT);
use Data::Dumper;

#
# Setup analysis of a template record.
#
# Exit codes are important; they tell the web page what has happened so
# it can say something useful to the user. Fatal errors are mostly done
# with die(), but expected errors use this routine. At some point we will
# use the DB to communicate the actual error.
#
# $status < 0 - Fatal error. Something went wrong we did not expect.
# $status = 0 - Everything okay.
# $status > 0 - Expected error. User not allowed for some reason. 
# 
sub usage()
{
    print(STDERR
	  "Usage: template_analyze [-q] [-s] [-r runidx] -i <exptidx> <guid/vers>\n".
	  "switches and arguments:\n".
	  "-q           - be less chatty\n".
	  "-i <exptidx> - Experiment index to work on\n".
	  "<guid/vers>  - GUID and version\n");
    exit(-1);
}
my $optlist	 = "qi:dr:";
my %options      = ();
my $quiet        = 0;
my $debug        = 0;
my $eid;
my $exptidx;
my $runidx;
my $guid;
my $version;

#
# Configure variables
#
my $TB		= "@prefix@";
my $EVENTSYS	= @EVENTSYS@;
my $TBOPS	= "@TBOPSEMAIL@";
my $TBLOGS	= "@TBLOGSEMAIL@";
my $TBDOCBASE	= "@TBDOCBASE@";
my $TBBASE	= "@TBBASE@";
my $CONTROL     = "@USERNODE@";
my $checkquota  = "$TB/sbin/checkquota";
my $dbcontrol   = "$TB/sbin/opsdb_control";

# Locals
my $template;
my $instance;
my $archive_tag;

# Protos
sub ParseArgs();
sub fatal($$);
sub cleanup();

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;
use libtblog;
use libaudit;
use Template;
use User;

# In libdb
my $projroot = PROJROOT();

#
# Turn off line buffering on output
#
$| = 1;

#
# Set umask for start/swap. We want other members in the project to be
# able to swap/end experiments, so the log and intermediate files need
# to be 664 since some are opened for append.
#
umask(0002);

#
# Untaint the path
#
# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Verify user and get his DB uid.
#
#
# Verify user and get his DB uid and other info for later.
#
my $this_user = User->ThisUser();
if (! defined($this_user)) {
    tbdie("You ($UID) do not exist!");
}
my $user_uid   = $this_user->uid();

# Now parse arguments.
ParseArgs();

# Temporary
libArchive::setdebug($debug);

#
# Grab template info and do access check.
#
$template = Template->Lookup($guid, $version);

if (!defined($template)) {
    tbdie("Experiment template $guid/$version does not exist!");
}

my $project = $template->GetProject();
if (! $project->AccessCheck($this_user, TB_PROJECT_READINFO)) {
    tberror("You do not have permission to export template $guid/$version");
    exit(1);
}
my $pid = $template->pid();
my $gid = $template->gid();

$instance = Template::Instance->LookupByExptidx($exptidx);
if (!defined($instance)) {
    fatal(-1, "Could not get instance record for experiment $exptidx!");
}

if ($instance->ArchiveTag(\$archive_tag) < 0) {
    fatal(-1, "Could not get current archive tag for instance $exptidx!");
}

if (system("$checkquota $user_uid") != 0) {
    tberror("You are over your disk quota on $CONTROL; ".
	    "please login there and cleanup!");
    exit(1);
}

# Get the the runs.
my %runlist;
$instance->RunList(\%runlist) == 0
    or fatal(-1, "Could not get runlist for $instance");

#
# It is an error to analyze an instance with no runs; it sorta implies
# the the initial run is still active.
#
if (! keys(%runlist)) {
    tberror("There are no experiment runs in instance $instance!");
    exit(1);
}

#
# Checkout to the project tree.
#
my $checkout = "$projroot/$pid/export/$guid/$version/$exptidx";

# Cleanup existing goo.
if (-e $checkout) {
    system("/bin/rm -rf $checkout");
}
system("mkdir -p $checkout") == 0
    or fatal(-1, "Could not mkdir $checkout");

# Use the logonly option to audit so that we get a record mailed.
LogStart(0);

#
# Now dump a checkout of the dbdata directory for each run, in its own
# directory. 
#
foreach my $name (keys(%runlist)) {
    my $rowref = $runlist{$name};
    my $idx    = $rowref->{"idx"};
    my $dir    = "$checkout/run${idx}";
    my $subdir = "dbdata/";
    my $tag    = $rowref->{"ending_archive_tag"};
    my $dbdump = "$dir/$subdir/dbdump.gz";

    # This could happen if template is still instantiated (last run).
    next
	if (!defined($tag) || $tag eq "");

    # A specific run?
    next
	if (defined($runidx) && $runidx != $idx);
	
    system("mkdir -p $dir") == 0
	or fatal(-1, "Could not mkdir $dir");

    print "Checking out files from archive using tag $tag ...\n";
    
    libArchive::TBCheckoutExperimentArchivebyExptIDX($exptidx, $dir,
						     $tag, $subdir) == 0 or
        fatal(-1, "Could not checkout $tag to $dir");

    if (! -e "$dbdump") {
	$subdir = "exp/dbdata/";
	$dbdump = "$dir/$subdir/dbdump.gz";
	
	libArchive::TBCheckoutExperimentArchivebyExptIDX($exptidx, $dir,
							 $tag, $subdir) == 0 or
            fatal(-1, "Could not checkout $tag to $dir");
    }
    if (! -e "$dbdump") {
	fatal(-1, "Could not find the dbdump file in the archive!");
    }

    #
    # Now we need to create a DB on ops to hold the DB dump.
    #
    my $dbname = "${guid},${version}," . $instance->idx() . ",$idx";

    if (system("$dbcontrol deltempdb $dbname")) {
	fatal(-1, "$dbcontrol deltempdb failed!");
    }
    if (system("$dbcontrol addtempdb $pid $gid $dbname")) {
	fatal(-1, "$dbcontrol addtempdb failed!");
    }

    #
    # Load it up.
    #
    if (system("$dbcontrol loadtempdb $dbname $dbdump")) {
	fatal(-1, "$dbcontrol loadtempdb failed!");
    }
}
LogEnd();
exit(0);

#
# Parse command arguments. Once we return from getopts, all that are
# left are the required arguments.
#
sub ParseArgs()
{
    if (! getopts($optlist, \%options)) {
	usage();
    }

    if (@ARGV != 1) {
	usage();
    }
    
    #
    # Pick up guid/version first and untaint.
    #
    my $tmp = shift(@ARGV);

    if ($tmp =~ /^([\w]*)\/([\d]*)$/) {
	$guid = $1;
	$version = $2;
    }
    else {
	tbdie("Bad data in argument: $tmp");
    }

    if (defined($options{"i"})) {
	$exptidx = $options{"i"};
    
	if (! TBcheck_dbslot($exptidx, "default", "int",
			     TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
	    tbdie("Improper experiment index!");
	}
	# real check.
	if ($exptidx =~ /^([\w]*)$/) {
	    $exptidx = $1;
	}
	else {
	    tbdie("Bad data in argument: $exptidx");
	}
    }
    else {
	tbdie("You must supply the -i option!");
    }

    if (defined($options{"r"})) {
	$runidx = $options{"r"};
    
	if (! TBcheck_dbslot($exptidx, "default", "int",
			     TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
	    tbdie("Improper run index!");
	}
	# real check.
	if ($runidx =~ /^([\w]*)$/) {
	    $runidx = $1;
	}
	else {
	    tbdie("Bad data in argument: $runidx");
	}
    }
    
    if (defined($options{"q"})) {
	$quiet = 1;
    }
    if (defined($options{"d"})) {
	$debug = 2;
    }
}

#
# Cleanup the mess.
#
sub cleanup()
{
    if (defined($checkout) && -e $checkout) {
	system("/bin/rm -rf $checkout");
    }
}

sub fatal($$)
{
    my ($errorstat, $msg) = @_;
    
    tberror $msg;
    tbinfo "Cleaning up and exiting with status $errorstat ...";

    exit($errorstat);
}

