#!/usr/bin/perl -w
#
# Copyright (c) 2016-2017 University of Utah and the Flux Group.
# 
# {{{EMULAB-LGPL
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
# License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

#
# rflinks - Set up or tear down RF (attenuator) links for an experiment
#

#
# Configure variables
#
my $TB = '@prefix@';
my $ATTEN = '@prefix@/sbin/atten';

use lib '@prefix@/lib';
use libdb;
use libtblog;
use Experiment;
use Interface;
use Lan;
use English;
use Getopt::Std;
use strict;

sub usage {
    print << "END";
Usage: $0 [-r] [-n] <pid> <eid>
Options:
  -n            Describe what would be done without changing any state
  -r            Remove RF links
END

    exit( 1 );
}

my $optlist   = "hnr";
my $impotent  = 0;
my $remove    = 0;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/sbin:/usr/bin:";

#
# Parse command arguments. 
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{'h'})) {
    usage();
}
if (defined($options{'n'})) {
    $impotent = 1;
}
if (defined($options{'r'})) {
    $remove = 1;
}
usage() unless( @ARGV == 2 );

my $pid = $ARGV[ 0 ];
my $eid = $ARGV[ 1 ];

my $experiment;

$experiment = Experiment->Lookup($pid,$eid);
if (!defined($experiment)) {
    die "There is no experiment $eid in project $pid\n";
}

my @lans;

Lan->ExperimentLans( $experiment, \@lans );

if (!@lans) {
    tbinfo( "rflinks: $pid/$eid has no LANs, skipping\n" );
    exit( 0 );
}

foreach my $lan (@lans) {
    my @members;
    $lan->MemberList( \@members );

    next unless( @members );

    my $member = $members[ 0 ];

    my $node_id;
    my $iface;
    $member->GetAttribute( "node_id", \$node_id );
    $member->GetAttribute( "iface", \$iface );

    my $interface;
    $interface = Interface->LookupByIface( $node_id, $iface );

    next unless( defined( $interface ) );
    
    my $type = $interface->type();

    next unless( $type eq "P2PLTE" );
    
    if( @members != 2 ) {
	my $vname = $lan->vname();
	tbwarn( "rflinks: $pid/$eid lan $vname doesn't have two " .
		"members, skipping!" );

	next;
    }

    my $wire = Interface::Wire->LookupAnyByIface( $node_id, $iface );

    if( !defined( $wire ) ) {
	tbwarn( "rflinks: couldn't find RF wire for $pid/$eid " .
		"$node_id:$iface" );
	next;
    }

    my $path = $wire->field( 'external_wire' );

    if( !defined( $path ) ) {
	tbwarn( "rflinks: RF wire for $pid/$eid $node_id:$iface has " .
		"no attenuator path" );
	next;
    }
    
    tbinfo( "rflinks: $pid/$eid using attenuator path $path for " .
	    "$node_id:$iface" );

    my $val = $remove ? 95 : 0;
    
    if( !$impotent ) {
	foreach my $p ( split( ",", $path ) ) {
	    if( system( "$ATTEN $p $val" ) ) {
		tbwarn( "rflinks: failed to modify attenuator $path" );
	    }
	}
    }
}

exit( 0 );
