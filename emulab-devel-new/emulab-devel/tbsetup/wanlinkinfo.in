#!/usr/bin/perl -w

#
# Copyright (c) 2000-2003 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

use English;
use Getopt::Std;

#
# Need to join with nodes/reserved to make sure node is not dead or
# in the hwdown group.
# 

sub usage()
{
    print STDOUT
	"Usage: wanlinkinfo [-d] [-m [-c <count>]] [-b] [-l] [-p] [-r]\n".
	"       Use -m to output virtual node counts per phys node.\n".
        "       Use -b to output bandwidth matrix.\n".
        "       Use -p to output plr matrix.\n".
        "       Use -r to remove boss from matrix.\n".
        "       Use -l to use the latest data instead of aged data.\n";
    exit(-1);
}
my  $optlist = "dmc:blrp";

#
# Configure variables
#
my $TB = "@prefix@";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;

# Locals
my $debug	= 0;
my $dobw	= 0;
my $doplr	= 0;
my $dovirt	= 0;
my $collocate   = 10000;
my $dolatest	= 0;
my $noboss	= 0;

#
# Turn off line buffering on output
#
$| = 1;

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (@ARGV) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"m"})) {
    $dovirt = 1;
    if (defined($options{"c"})) {
	$collocate = $options{"c"};
    }
}
if (defined($options{"b"})) {
    $dobw= 1;
}
if (defined($options{"l"})) {
    $dolatest= 1;
}
if (defined($options{"r"})) {
    $noboss = 1;
}
if (defined($options{"p"})) {
    $doplr = 1;
}

my %nodename = ();
my %speeds   = ();
my %bws      = ();
my %plrs     = ();
my %freenodes= ();

#
# First get the widearea data.
# 
my $result =
    DBQueryFatal("SELECT node_id1,iface1,node_id2,iface2,time, " .
		 "       bandwidth,lossrate FROM " .
		 ($dolatest ? "widearea_recent " : "widearea_delays ") .
		 ($noboss ? "where node_id1!='boss' and ".
		  "                node_id2!='boss'" : ""));

while (my ($node_id1, $iface1, $node_id2, $iface2, $time, $bw, $plr) =
       $result->fetchrow) {

    my $msectime = $time * 1000;
    my $glom1    = $node_id1;
    my $glom2    = $node_id2;

    # print "Got $glom1 to $glom2 in $msectime ms\n";
    $nodename{ $glom1 } = "1";
    $nodename{ $glom2 } = "1";

    $speeds{ $glom1 . "+" . $glom2 } = $msectime;
    $bws{ $glom1 . "+" . $glom2 } = $bw;
    $plrs{ $glom1 . "+" . $glom2 } = $plr;
}

#
# Need to figure out which nodes are free! This query not only looks
# for free nodes, but also for the virtual nodes that are assigned to
# them so that we can provide the multiplex count to the solver.
# It is essentially the same query as ptopgen.
#
my $DEADPID = NODEDEAD_PID();
my $DEADEID = NODEDEAD_EID();

$result =
    DBQueryFatal("select a.node_id,a.phys_nodeid,count(*) from nodes as a ".
		 "left join reserved as b on a.node_id=b.node_id ".
		 "left join reserved as m on a.phys_nodeid=m.node_id ".
		 "left join node_status as ns on a.phys_nodeid=ns.node_id ".
		 "left join node_types as nt on a.type=nt.type ".
		 "where b.node_id is null and ".
		 "      (nt.isremotenode=1 and ns.status='up' and ".
		 "       (m.node_id is null or ".
		 "        m.pid!='$DEADPID' or m.eid!='$DEADEID')) ".
		 "group by a.phys_nodeid");

while (my ($node_id, $phys_nodeid, $count) = $result->fetchrow) {
    if ($dovirt) {
	#
	# In dovirt mode, we care about how many free vnodes per real node,
	# limited by the requested collocate factor. 
	#
	$count = $collocate
	    if ($count > $collocate);
	
	if ($node_id ne $phys_nodeid) {
	    $freenodes{$phys_nodeid} = $count;
	}
    }
    else {
	#
	# In normal mode, we care about free phys nodes only.
	#
	if ($node_id eq $phys_nodeid) {
	    $freenodes{$phys_nodeid} = 1;
	}
    }
}

# The boss node is fake, and so gets a count of one when its included.
if (!$noboss) {
    my $boss = TBDB_WIDEAREA_LOCALNODE;
    
    $freenodes{$boss} = 1;
}

# Only free nodes are considered.
print scalar( keys %freenodes ) . "\n";

#
# XXX The boss node ends up first strictly by accident. 
# 
foreach my $i (sort (keys %freenodes)) {
    print "$i\n";
}

#
# Print the multiplex count.
# 
if ($dovirt) {
    foreach my $i (sort (keys %freenodes)) {
	my $vcount = $freenodes{$i};
	
	print "$vcount\n";
    }
}

foreach my $i (sort (keys %freenodes)) {
    foreach my $j (sort (keys %freenodes)) {
	my $s = (($i eq $j) ? 0 : -1);

	if (exists $speeds{ $i."+".$j } ) {
	    $s = $speeds{ $i . "+" . $j };
	} 
	print sprintf( "%-5i ", $s );
    }
    print "\n";
}

if ($dobw) {
    foreach my $i (sort (keys %freenodes)) {
	foreach my $j (sort (keys %freenodes)) {
	    # the following is conceptually
	    # the bandwidth of a machine to itself.
	    # using ttcp, a typical value was found to be 180 MB/sec
	    my $s = (($i eq $j) ? 180000 : -1);
	    
	    if (exists $bws{ $i."+".$j } ) {
		$s = $bws{ $i . "+" . $j };
	    } 
	    print sprintf( "%-6i ", $s );
	}
	print "\n";
    }
}

if ($doplr) {
    foreach my $i (sort (keys %freenodes)) {
	foreach my $j (sort (keys %freenodes)) {
	    my $s = 0;

	    if (exists $plrs{ $i."+".$j } ) {
		$s = $plrs{ $i . "+" . $j };
	    } 
	    print sprintf( "%.3f ", $s );
	}
	print "\n";
    }
}
