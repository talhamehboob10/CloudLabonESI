#!/usr/bin/perl -wT

#
# Copyright (c) 2000-2014 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

use English;
use Getopt::Std;
use Cwd qw(realpath);

#
# Syntax check an NS file.
#
# usage: nscheck <nsfile>
#
# Exit value is important; 
# $status < 0 - Fatal error. Something went wrong we did not expect.
# $status = 0 - Parsed okay.
# $status > 0 - Parse error. 
#
sub usage()
{
    print STDOUT "Usage: nscheck <nsfile>\n";
    exit(-1);
}
my  $optlist = "";

#
# Function phototype(s)
#
sub fatal($;$);

#
# Configure variables
#
my $TB       = "@prefix@";
my $parser   = "$TB/libexec/parse-ns";
my $status   = 0;
my $dirname;
my $ISFS     = ("@BOSSNODE_IP@" eq "@FSNODE_IP@") ? 1 : 0;

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libtestbed;
use libtblog;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/usr/bin:/sbin:/usr/sbin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Parse command arguments. Once we return from getopts, all that should
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (@ARGV != 1) {
    usage();
}
my ($tempfile) = @ARGV;

#
# Untaint the arguments.
#
# Note different taint check (allow /).
if ($tempfile =~ /^([-\w\.\/]+)$/) {
    $tempfile = $1;
}
else {
    fatal("Tainted argument $tempfile");
}

#
# Called from ops interactively. Make sure NS file in /proj or /users.
#
# Use realpath to resolve any symlinks.
#
my $translated = realpath($tempfile);
if (!defined($translated)) {
    fatal("No such file: $tempfile\n");
}
if ($translated =~ /^([-\w\.\/]+)$/) {
    $tempfile = $1;
}
else {
    fatal("Tainted nsfile returned by realpath: $translated\n");
}

#
# The file must reside in an acceptible location. Since this script
# runs as the caller, regular file permission checks ensure it is a
# file the user is allowed to use.  So we don't have to be too tight
# with the RE matching /tmp and /var/tmp files.  Note that
# /tmp/$pid-$eid.nsfile.XXXXX is also allowed since this script is
# invoked directly from web interface.
#
if (! ($tempfile =~ /^\/tmp\/[-\w]+-\d+\.nsfile/) &&
    ! ($tempfile =~ /^\/var\/tmp\/php\w+/) &&
    ! ($tempfile =~ /^\/tmp\/php\w+/) &&
    ! TBValidUserDir($tempfile, $ISFS)) {
    fatal("$tempfile does not resolve to an appropriate directory!\n");
}

$nsfile    = "foo.ns";

# Check for existence of NS file and exit with error such that web
# interface tells the user (positive exit value).
if (! -f $tempfile || ! -r $tempfile || -z $tempfile) {
    print STDERR "*** $0:\n".
	         "    $tempfile does not exist or is not a readable file!\n";
    exit(1);
}

#
# Make a temp dir and copy the NS file into it. We run the scripts
# from that directory cause it writes temp files.
# 
$dirname = "/tmp/parse-$$";

mkdir($dirname, 0775) or
    fatal("Could not mkdir $dirname");

if (system("/bin/cp", "$tempfile", "$dirname/$nsfile")) {
    fatal("Could not copy $tempfile to $dirname");
}

chdir($dirname) or
    fatal("Could not chdir to $dirname");

#
# Run parse in impotent mode on the NS file.  This has no effect but
# will display any errors.
#
# Be sure to exit with >0 staus
#

if (system("$parser -n -a $nsfile") != 0) {
    tberror({type => 'secondary', severity => SEV_SECONDARY,
	     error => ['ns_parse_failed']},
	    "NS Parse failed!");
    $status = 1;
}

system("/bin/rm", "-rf", "$dirname");
exit $status;

sub fatal($;$)
{
    my $parms = {};
    $parms = shift if ref $_[0] eq 'HASH';
    my($mesg) = $_[0];

    system("/bin/rm", "-rf", "$dirname")
	if (defined($dirname));

    tbdie($parms, $mesg);
}
