#!/usr/bin/perl -w
#
# Copyright (c) 2000-2021 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use strict;
use Getopt::Std;
use Data::Dumper;
use Date::Parse;

#
# SAS operations via the command line.
#
sub usage()
{
    print STDERR "Usage: sasops [options --] register ...\n";
    print STDERR "       sasops [options --] deregister ...\n";
    print STDERR "       sasops [options --] spectrum ...\n";
    print STDERR "       sasops [options --] grant ...\n";
    print STDERR "       sasops [options --] heartbeat ...\n";
    print STDERR "       sasops [options --] relinquish ...\n";
    exit(-1);
}
my $optlist     = "dnt:l";
my $debug       = 0;
my $impotent    = 0;
my $webtask_id;
my $webtask;

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";

#
# Untaint the path
#
$ENV{'PATH'} = "$TB/bin:$TB/sbin:/bin:/usr/bin:/usr/bin:/usr/sbin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Load the Testbed support stuff.
#
use lib "@prefix@/lib";
use lib ".";
use emutil;
use WebTask;
use sas;
use sasutil;

# Protos
sub fatal($);
sub DoRegister();
sub DoDeregister();
sub DoSpectrumInquiry();
sub DoGrant();
sub DoHeartbeat();
sub DoRelinquish();

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"n"})) {
    $impotent = 1;
}
if (defined($options{"l"})) {
    sas::SetSAS("localhost", "https://localhost:8049/v1.2");
}
if (defined($options{"t"})) {
    $webtask_id = $options{"t"};
    $webtask = WebTask->Lookup($webtask_id);
    if (!defined($webtask)) {
	fatal("Could not lookup webtask $webtask_id");
    }
    # Convenient.
    $webtask->AutoStore(1);
}
if (@ARGV < 1) {
    usage();
}
my $action = shift(@ARGV);

if ($action eq "register") {
    DoRegister();
}
elsif ($action eq "deregister") {
    DoDeregister();
}
elsif ($action eq "spectrum") {
    DoSpectrumInquiry();
}
elsif ($action eq "grant") {
    DoGrant();
}
elsif ($action eq "heartbeat") {
    DoHeartbeat();
}
elsif ($action eq "relinquish") {
    DoRelinquish();
}
else {
    usage();
}
exit(0);

#
# Register.
#
# Registration is simple; keep trying until is succeeds. 
#
sub DoRegister()
{
    my $usage = sub {
	print STDERR "Usage: sasops [options] register jsonfile\n";
	exit(-1);
    };
    &$usage()
	if (@ARGV != 1);

    my $file = $ARGV[0];
    if (! -e $file) {
	fatal("$file does not exist");
    }
    my $device = sasutil::LoadJson($file);
    if (!$device) {
	fatal("Cannot load json from $file");
    }
    print Dumper($device) if ($debug);

    my $request = sas::Request::Registration->new($device);
    $request->Dump() if ($debug);
	
    my $response = $request->Send();
    if (!$response) {
	fatal("No response to Registration for ". $request->cbsdSerialNumber());
    }
    $response->Dump() if ($debug);

    if ($response->responseCode()) {
	fatal("Registration error for " . $request->cbsdSerialNumber() .
	      " " . $response->ErrorMessage());
    }
    print $response->cbsdId() . "\n";

    if (defined($webtask)) {
	$webtask->cbsdId($response->cbsdId());
	$webtask->Exited(0);
    }
}

#
# Deregister.
#
sub DoDeregister()
{
    my $usage = sub {
	print STDERR "Usage: sasops [options] deregister cbsdid\n";
	exit(-1);
    };
    &$usage()
	if (@ARGV != 1);

    my $cbsdid = $ARGV[0];

    my $request = sas::Request::Deregistration->new($cbsdid);
    $request->Dump();
	
    my $response = $request->Send();
    if (!$response) {
	fatal("No response to Deregistration for $cbsdid");
    }
    $response->Dump() if ($debug);
    if ($response->responseCode()) {
	fatal("Deregistration error for $cbsdid " . $response->ErrorMessage());
    }
    print "Deregistration success\n";

    if (defined($webtask)) {
	$webtask->Exited(0);
    }
}

#
# Spectrum inquiry
#
sub DoSpectrumInquiry()
{
    my $usage = sub {
	print STDERR "Usage: sasops [options] spectrum cbsdid low high\n";
	exit(-1);
    };
    &$usage()
	if (@ARGV != 3);

    my ($cbsdid, $low, $high) = @ARGV;

    my $request = sas::Request::SpectrumInquiry->new($cbsdid, $low, $high);
    $request->Dump() if ($debug);

    my $response = $request->Send();
    if (!$response) {
	fatal("No response to SpectrumInquiry for $cbsdid");
    }
    $response->Dump() if ($debug);
    if ($response->responseCode()) {
	fatal("SpectrumInquiry error for $cbsdid " . $response->ErrorMessage());
    }
    my $channels = $response->availableChannels();
    my @channels = ();
    my $i = 0;
    foreach my $channel (@$channels) {
	my $low  = $channel->lowFrequency();
	my $high = $channel->highFrequency();
	
	print "Range $i: $low,$high\n";
	if (defined($webtask)) {
	    push(@channels, {"low" => $low, "high" => $high});
	}
	$i++;
    }
    if (defined($webtask)) {
	$webtask->channels(\@channels);
	$webtask->Exited(0);
    }
}

#
# Grant request
#
sub DoGrant()
{
    my $usage = sub {
	print STDERR "Usage: sasops [options] grant cbsdid low high\n";
	exit(-1);
    };
    &$usage()
	if (@ARGV != 3);

    my ($cbsdid, $low, $high) = @ARGV;

    my $request = sas::Request::Grant->new($cbsdid, $low, $high);
    $request->Dump() if ($debug);

    my $response = $request->Send();
    if (!$response) {
	fatal("No response to Grant for $cbsdid");
    }
    $response->Dump() if ($debug);
    if ($response->responseCode()) {
	print STDERR "Grant error for $cbsdid " .
	    $response->ErrorMessage() . "\n";
	
	if (defined($webtask)) {
	    $webtask->ErrorMessage($response->ErrorMessage());
	    $webtask->Exited($response->responseCode());
	}
	exit(-1);
    }
    my $grantid  = $response->grantId();
    my $interval = $response->heartbeatInterval();
    my $expires  = TBDateStringLocal(str2time($response->grantExpireTime()));
    
    print "Grantid:$grantid, Interval:$interval, Expires:$expires\n";

    if (defined($webtask)) {
	$webtask->grantId($grantid);
	$webtask->heartbeatInterval($interval);
	$webtask->grantExpireTime($response->grantExpireTime());
	$webtask->Exited(0);
    }
}

#
# Heartbeat request
#
sub DoHeartbeat()
{
    my $usage = sub {
	print STDERR "Usage: sasops [options] heartbeat [-a] cbsdid grantid\n";
	print STDERR "Use -a to set operationState to AUTHORIZED\n";
	exit(-1);
    };
    my $optlist = "a";
    my %options = ();
    if (! getopts($optlist, \%options)) {
	&$usage();
    }
    &$usage()
	if (@ARGV != 2);

    my ($cbsdid, $grantid) = @ARGV;

    my $request = sas::Request::Heartbeat->new($cbsdid, $grantid);
    if (defined($options{"a"})) {
	$request->operationState("AUTHORIZED");
    }
    $request->Dump() if ($debug);

    my $response = $request->Send();
    if (!$response) {
	fatal("No response to Heartbeat for $cbsdid,$grantid");
    }
    $response->Dump() if ($debug);
    if ($response->responseCode()) {
	print STDERR "Heartbeat error for $cbsdid,$grantid " .
	    $response->ErrorMessage() . "\n";
	
	if (defined($webtask)) {
	    $webtask->ErrorMessage($response->ErrorMessage());
	    $webtask->Exited($response->responseCode());
	}
	exit(-1);
    }
    my $expires = TBDateStringLocal(str2time($response->transmitExpireTime()));
    
    print "Grantid:$grantid, TransmitExpires:$expires\n";
    if ($response->grantExpireTime()) {
	print "New grantExpireTime: " .
	    TBDateStringLocal(str2time($response->grantExpireTime())) . "\n";
    }
    if ($response->heartbeatInterval()) {
	print "New interval: " . $response->heartbeatInterval() . "\n";
    }
    
    if (defined($webtask)) {
	$webtask->transmitExpireTime($response->transmitExpireTime());
	$webtask->grantExpireTime($response->transmitExpireTime())
	    if ($response->transmitExpireTime());
	$webtask->heartbeatInterval($response->heartbeatInterval())
	    if ($response->heartbeatInterval());
	$webtask->Exited(0);
    }
}

#
# Relinquish request
#
sub DoRelinquish()
{
    my $usage = sub {
	print STDERR "Usage: sasops [options] relinquish cbsdid grantid\n";
	exit(-1);
    };
    my $optlist = "";
    my %options = ();
    if (! getopts($optlist, \%options)) {
	&$usage();
    }
    &$usage()
	if (@ARGV != 2);

    my ($cbsdid, $grantid) = @ARGV;

    my $request = sas::Request::Relinquishment->new($cbsdid, $grantid);
    $request->Dump() if ($debug);

    my $response = $request->Send();
    if (!$response) {
	fatal("No response to Relinquishment for $cbsdid,$grantid");
    }
    $response->Dump() if ($debug);
    if ($response->responseCode()) {
	fatal("Relinquishment error for $cbsdid,$grantid " .
	      $response->ErrorMessage());
    }
    print "Grant has been relinquished\n";
    
    if (defined($webtask)) {
	$webtask->Exited(0);
    }
}

sub fatal($)
{
    my ($msg) = @_;

    if (defined($webtask)) {
	$webtask->output($msg);
	$webtask->Exited(-1);
    }
    die("*** $0:\n".
	"    $msg\n");
}
