#!/usr/bin/perl -w
#
# Copyright (c) 2005-2021 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use strict;
use Getopt::Std;
use Data::Dumper;
use Date::Parse;

#
# Test case 13: https://support.google.com/sas/answer/10019296
# Test case 14: https://support.google.com/sas/answer/10018315
#

sub usage()
{
    print "Usage: test [-b]\n";
    exit(1);
}
my $optlist   = "db";
my $debug     = 0;
my $test14    = 0;

#
# Configure variables
#
my $TB		     = "@prefix@";
my $SRCDIR           = "@srcdir@";

my $LOW		     = 3550000000;
my $HIGH             = 3700000000;
my $CBSDID_MEB       = "powder_test_fccid_b/".
                       "b50b7541a4ee99830eae6c7791b9072e8dc04677";
my $CBSDID_BROWNING  = "powder_test_fccid_a/".
                       "211b8b86c4ed2c192aa9fa105e656d1facba10ab";

# Load the Testbed support stuff.
use lib "@prefix@/lib";
use lib ".";
use emdb;
use emutil;
use sas;
use sasutil;

#
# Turn off line buffering on output
#
$| = 1;

my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"b"})) {
    $test14 = 1;
}
# This is a proxy test.
sas::SetSAS("localhost", "https://localhost:8049/v1.2");

sub RelinquishList($)
{
    my ($grants) = @_;
    my @list = ();

    foreach my $grant (@$grants) {
	my $relinquishment =
	    sas::Request::Relinquishment->new($grant->cbsdId(),
					      $grant->grantId());
	push(@list, $relinquishment);
    }
    my $responseList = sas::Relinquishment(\@list);
    if (!defined($responseList)) {
	die("Grant failure\n");
    }
}

#
# Batch spectrum inquiry request.
#
my $inquiryList = [
    sas::Request::SpectrumInquiry->new($CBSDID_MEB, $LOW, $HIGH),
    sas::Request::SpectrumInquiry->new($CBSDID_BROWNING, $LOW, $HIGH),
];
my $responseList = sas::SpectrumInquiry($inquiryList);
if (!defined($responseList)) {
    die("Grant failure\n");
}
if (0) {
    exit(0);
}

#
# Create a list of grant requests.
#
my @grantList = ();
for (my $i = 0; $i < ($test14 ? 12 : 2); $i++) {
    my $low    = $LOW + ($i * 10000000);
    my $high   = $low + 10000000;
    my $grant1 = sas::Request::Grant->new($CBSDID_MEB, $low, $high);
    my $grant2 = sas::Request::Grant->new($CBSDID_BROWNING, $low, $high);

    push(@grantList, $grant1, $grant2);
}
$responseList = sas::Grant(\@grantList);
if (!defined($responseList)) {
    die("Grant failure\n");
}

#
# All of these should be success. If any fail, need to relinquish
# everything and bail.
#
my @grants = ();
my $bail = 0;
foreach my $response (@$responseList) {
    if ($response->responseCode()) {
	print $response->ErrorMessage() . "\n";
	$bail++;
	next;
    }
    print "perl sasops relinquish " . $response->cbsdId() . " " .
	$response->grantId() . "\n";
    
    push(@grants, $response);
}
if (0 || $bail) {
    sleep(5);
    RelinquishList(\@grants);
    exit(1);
}

#
# First heartbeat
#
sleep(10);
my @heartbeats = ();

foreach my $grant (@grants) {
    my $heartbeat = 
	sas::Request::Heartbeat->new($grant->cbsdId(), $grant->grantId());
    
    push(@heartbeats, $heartbeat);
}
$responseList = sas::Heartbeat(\@heartbeats);
if (!defined($responseList)) {
    RelinquishList(\@grants);
    die("Hearbeat 1 failure\n");
}
if (0 || $bail) {
    sleep(2);
    RelinquishList(\@grants);
    exit(1);
}

#
# Second heartbeat
#
sleep(10);
foreach my $heartbeat (@heartbeats) {
    $heartbeat->operationState("AUTHORIZED");
}
$responseList = sas::Heartbeat(\@heartbeats);
if (!defined($responseList)) {
    sleep(2);
    RelinquishList(\@grants);
    die("Hearbeat 2 failure\n");
}

#
# Third heartbeat
#
sleep(10);
$responseList = sas::Heartbeat(\@heartbeats);
if (!defined($responseList)) {
    sleep(2);
    RelinquishList(\@grants);
    die("Hearbeat 3 failure\n");
}
sleep(5);
RelinquishList(\@grants);
