#!/usr/bin/perl -wT
#
# Copyright (c) 2007-2021 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
package APT_SAS;

use strict;
use English;
use Data::Dumper;
use Exporter;
use Carp;
use vars qw(@ISA @EXPORT $AUTOLOAD);

@ISA    = "Exporter";
@EXPORT = qw ( );

# Must come after package declaration!
use emdb;
use emutil;

# Configure variables
my $TB		  = "@prefix@";
my $TBOPS         = "@TBOPSEMAIL@";
my $OURDOMAIN     = "@OURDOMAIN@";
my $MYURN	  = "urn:publicid:IDN+${OURDOMAIN}+authority+cm";

#
# Nothing in the main package at the moment.
#

###################################################################
# CBSD package
#
package APT_SAS::cbsd;
use emdb;
use emutil;
use English;
use Carp;
use vars qw($AUTOLOAD);
use overload ('""' => 'Stringify');

#
# Lookup by urn,node_id
#
sub Lookup($$$)
{
    my ($class, $urn, $node_id) = @_;
    my $safe_urn = DBQuoteSpecial($urn);
    my $safe_id  = DBQuoteSpecial($node_id);
    
    my $query_result =
	DBQueryWarn("select * from apt_sas_radio_state ".
		    "where aggregate_urn=$safe_urn and node_id=$safe_id");

    return undef
	if (!$query_result || !$query_result->numrows);

    my $self        = {};
    $self->{'DBROW'} = $query_result->fetchrow_hashref();
    bless($self, $class);
    return $self;
}
sub Refresh($)
{
    my ($self) = @_;
    my $urn      = $self->aggregate_urn();
    my $node_id  = $self->node_id();

    my $query_result =
	DBQueryWarn("select * from apt_sas_radio_state ".
		    "where aggregate_urn='$urn' and node_id='$node_id'");

    return -1
	if (!$query_result || !$query_result->numrows);

    $self->{'DBROW'} = $query_result->fetchrow_hashref();
    return 0;
}

#
# Lookup all CBSDs
#
sub LookupAll($$)
{
    my ($class, $pref) = @_;
    my @cbsds = ();

    my $query_result =
	DBQueryWarn("select aggregate_urn,node_id from apt_sas_radio_state");

    return -1
	if (!$query_result);

    while (my ($urn,$node_id) = $query_result->fetchrow_array()) {
	my $cbsd = Lookup($class, $urn, $node_id);
	push(@cbsds, $cbsd)
	    if (defined($cbsd));
    }
    $$pref = \@cbsds;
    return 0;
}

AUTOLOAD {
    my $self  = $_[0];
    my $type  = ref($self) or croak "$self is not an object";
    my $name  = $AUTOLOAD;
    $name =~ s/.*://;   # strip fully-qualified portion

    # A DB row proxy method call.
    if (exists($self->{'DBROW'}->{$name})) {
	return $self->{'DBROW'}->{$name};
    }
    carp("No such slot '$name' field in class $type");
    return undef;
}

# Break circular reference someplace to avoid exit errors.
sub DESTROY {
    my $self = shift;

    $self->{'DBROW'} = undef;
}

sub Stringify($)
{
    my $self = shift;
    my $node_id = $self->node_id();

    return "[cbsd:$node_id]";
}
sub Idle($)		{ return $_[0]->state() eq "idle"; }
sub Registered($)	{ return $_[0]->state() eq "registered"; }
sub UnRegistered($)	{ return $_[0]->state() eq "unregistered"; }
sub IsLocal($)		{ return $_[0]->aggregate_urn() eq $MYURN; }

#
# Perform some updates ...
#
sub Update($$)
{
    my ($self, $argref) = @_;
    my $urn      = $self->aggregate_urn();
    my $node_id  = $self->node_id();
    my @sets     = ();

    foreach my $key (keys(%{$argref})) {
	my $val = $argref->{$key};

	if ($val ne "NULL" && $val ne "now()") {
	    $val = DBQuoteSpecial($val);
	}
	push (@sets, "${key}=${val}");
    }

    my $query = "update apt_sas_radio_state set " . join(",", @sets) .
	"where aggregate_urn='$urn' and node_id='$node_id'";

    return -1
	if (! DBQueryWarn($query));

    return Refresh($self);
}

#
# Lock and Unlock
#
sub Lock($)
{
    my ($self) = @_;
    my $urn      = $self->aggregate_urn();
    my $node_id  = $self->node_id();
    
    return -1
	if (!DBQueryWarn("lock tables apt_sas_radio_state write"));

    my $query_result =
	DBQueryWarn("update apt_sas_radio_state set ".
		    "  locked=now(),locker_pid='$PID' " .
		    "where aggregate_urn='$urn' and ".
		    "      node_id='$node_id' and ".
		    "      locked is null");

    if (! $query_result ||
	$query_result->numrows == 0) {
	DBQueryWarn("unlock tables");
	return -1;
    }
    DBQueryWarn("unlock tables");
    $self->{'DBROW'}->{'locked'}     = time();
    $self->{'DBROW'}->{'locker_pid'} = $PID;
    return 0;
}

sub Unlock($)
{
    my ($self) = @_;
    my $urn      = $self->aggregate_urn();
    my $node_id  = $self->node_id();

    return -1
	if (! DBQueryWarn("update apt_sas_radio_state set ".
			  "   locked=null,locker_pid=0 ".
			  "where aggregate_urn='$urn' and ".
			  "      node_id='$node_id'"));
    
    $self->{'DBROW'}->{'locked'}     = 0;
    $self->{'DBROW'}->{'locker_pid'} = 0;
    return 0;
}

sub TakeLock($)
{
    my ($self) = @_;
    my $urn      = $self->aggregate_urn();
    my $node_id  = $self->node_id();

    return -1
	if (!DBQueryWarn("lock tables apt_sas_radio_state write"));

    my $query_result =
	DBQueryWarn("update apt_sas_radio_state set ".
		    "  locked=now(),locker_pid='$PID' " .
		    "where aggregate_urn='$urn' and ".
		    "      node_id='$node_id'");

    if (! $query_result) {
	DBQueryWarn("unlock tables");
	return -1;
    }
    DBQueryWarn("unlock tables");
    $self->{'DBROW'}->{'locked'}     = time();
    $self->{'DBROW'}->{'locker_pid'} = $PID;
    return 0;
}

#
# List of all grants for the CBSD.
#
sub GrantList($$)
{
    my ($self, $pref) = @_;
    my $safe_cbsdid = DBQuoteSpecial($self->cbsdid());
    my @grants = ();

    my $query_result =
	DBQueryWarn("select grantid from apt_sas_grant_state ".
		    "where cbsdid=$safe_cbsdid");
    return -1
	if (!$query_result);

    while (my ($grantid) = $query_result->fetchrow_array()) {
	my $grant = APT_SAS::grant->Lookup($self, $grantid);
	push(@grants, $grant)
	    if (defined($grant));
    }
    $$pref = \@grants;
    return 0;
}

###################################################################
# Grant package
#
package APT_SAS::grant;
use emdb;
use emutil;
use sas;
use Date::Parse;
use Carp;
use vars qw($AUTOLOAD);
use overload ('""' => 'Stringify');

#
# Lookup by grantid or by index
#
sub Lookup($$$)
{
    my ($class, $cbsd, $token) = @_;
    my $safe_cbsdid = DBQuoteSpecial($cbsd->cbsdid());
    my $safe_token  = DBQuoteSpecial($token);

    my $query_result =
	DBQueryWarn("select g.*,r.node_id,r.fccid,r.serial ".
		    "  from apt_sas_grant_state as g ".
		    "left join apt_sas_radio_state as r on ".
		    "     r.cbsdid=g.cbsdid ".
		    "where g.cbsdid=$safe_cbsdid and ".
		    "      (g.grantid=$safe_token or ".
		    "       g.idx=$safe_token)");

    return undef
	if (!$query_result || !$query_result->numrows);

    my $self        = {};
    $self->{'GRANT'} = $query_result->fetchrow_hashref();
    $self->{'CBSD'}  = $cbsd;
    bless($self, $class);
    return $self;
}
sub Refresh($)
{
    my ($self) = @_;
    my $safe_cbsdid  = DBQuoteSpecial($self->cbsdid());
    my $safe_grantid = DBQuoteSpecial($self->grantid());

    my $query_result =
	DBQueryWarn("select g.*,r.node_id,r.fccid,r.serial ".
		    "  from apt_sas_grant_state as g ".
		    "left join apt_sas_radio_state as r on ".
		    "     r.cbsdid=g.cbsdid ".
		    "where g.cbsdid=$safe_cbsdid and ".
		    "      g.grantid=$safe_grantid");

    return -1
	if (!$query_result || !$query_result->numrows);

    $self->{'GRANT'} = $query_result->fetchrow_hashref();
    return 0;
}

#
# Lookup all grants,
#
sub LookupAll($$)
{
    my ($class, $pref) = @_;
    my $cbsds;
    my @grants = ();

    if (APT_SAS::cbsd->LookupAll(\$cbsds)) {
	print STDERR "Could not get the cbsd list\n";
	return -1;
    }
    foreach my $cbsd (@$cbsds) {
	my $tmp;

	if ($cbsd->GrantList(\$tmp)) {
	    print STDERR "Could not get the grant list for $cbsd\n";
	    return -1;
	}
	push(@grants, @$tmp);
	
    }
    $$pref = \@grants;
    return 0;
}

AUTOLOAD {
    my $self  = $_[0];
    my $type  = ref($self) or croak "$self ($AUTOLOAD) is not an object";
    my $name  = $AUTOLOAD;
    $name =~ s/.*://;   # strip fully-qualified portion

    # A DB row proxy method call.
    if (exists($self->{'GRANT'}->{$name})) {
	return $self->{'GRANT'}->{$name};
    }
    carp("No such slot '$name' field in class $type");
    return undef;
}
sub cbsd($)		{ return $_[0]->{'CBSD'}; }
sub cbsdid($)		{ return $_[0]->cbsd()->cbsdid(); }
sub IsLocal($)		{ return $_[0]->cbsd()->IsLocal(); }
sub granted($)		{ return $_[0]->state() eq "granted"; }
sub authorized($)	{ return $_[0]->state() eq "authorized"; }
sub terminated($)	{ return $_[0]->state() eq "terminated"; }
sub suspended($)	{ return $_[0]->state() eq "suspended"; }

# Break circular reference someplace to avoid exit errors.
sub DESTROY {
    my $self = shift;

    $self->{'GRANT'} = undef;
    $self->{'CBSD'}  = undef;
}

sub Stringify($)
{
    my $self = shift;
    my $node_id = $self->node_id();
    my $index   = $self->idx();

    return "[grant:$node_id,$index]";
}

#
# Enter a new grant for a cbsd
#
sub Create($$$$$)
{
    my ($class, $cbsd, $grantid, $low, $high,
	$interval, $expires, $transmitExpires) = @_;
    my $safe_cbsdid  = DBQuoteSpecial($cbsd->cbsdid());
    my $safe_grantid = DBQuoteSpecial($grantid);

    DBQueryWarn("insert into apt_sas_grant_state set ".
		" cbsdid=$safe_cbsdid, grantid=$safe_grantid,idx=NULL, ".
		" state='authorized',freq_low='$low',freq_high='$high', ".
		" `interval`='$interval',expires='$expires', ".
		" transmitExpires='$transmitExpires'")
	or return undef;

    return Lookup($class, $cbsd, $grantid);
}

#
# Delete from the DB
#
sub Delete($)
{
    my ($self) = @_;
    my $safe_cbsdid  = DBQuoteSpecial($self->cbsdid());
    my $safe_grantid = DBQuoteSpecial($self->grantid());

    DBQueryWarn("delete from apt_sas_grant_state ".
		"where cbsdid=$safe_cbsdid and grantid=$safe_grantid")
	or return -1;

    return 0;
}

#
# Perform some updates ...
#
sub Update($$)
{
    my ($self, $argref) = @_;
    my $safe_cbsdid  = DBQuoteSpecial($self->cbsdid());
    my $safe_grantid = DBQuoteSpecial($self->grantid());
    my @sets     = ();

    foreach my $key (keys(%{$argref})) {
	my $val = $argref->{$key};

	if ($val ne "NULL" && $val ne "now()") {
	    $val = DBQuoteSpecial($val);
	}
	push (@sets, "${key}=${val}");
    }

    my $query = "update apt_sas_grant_state set " . join(",", @sets) .
	"where cbsdid=$safe_cbsdid and grantid=$safe_grantid";

    return -1
	if (! DBQueryWarn($query));

    return Refresh($self);
}

#
# Take a heartbeat response and update the database accordingly.
#
sub HeartbeatUpdate($$$)
{
    my ($self, $response, $pmsg) = @_;
    my $node_id = $self->node_id();
    my $index   = $self->idx();

    my $code = $response->responseCode();
    if ($code) {
	my $newstate;
	if ($code == SASERROR_TERMINATED_GRANT() ||
	    $code == SASERROR_UNSYNC_OP_PARAM()) {
	    $newstate = "terminated";
	}
	elsif ($code == SASERROR_SUSPENDED_GRANT()) {
	    $newstate = "suspended";
	}
	else {
	    # Not sure what to do yet.
	    $newstate = "terminated";
	}
	if ($newstate ne $self->state()) {
	    if ($self->Update({"state"   => $newstate,
			       "updated" => "now()"})) {
		$$pmsg = "DB error updating state";
		return -1;
	    }
	    $$pmsg = "Grant state has been changed to $newstate";
	}
	return 0;
    }
    my $transmitExpires =
	TBDateStringLocal(str2time($response->transmitExpireTime()));
    my $updates = {
	"updated" => "now()",
	"transmitExpires" => $transmitExpires,
    };
    $$pmsg = "Grant ($node_id,$index) transmitExpireTime updated ".
	"to $transmitExpires";
	    
    if ($response->heartbeatInterval() &&
	$response->heartbeatInterval() != $self->interval()) {
	$updates->{"`" . "interval" . "`"} = $response->heartbeatInterval();
	$$pmsg .= "\n" . "Interval updated: " . $response->heartbeatInterval();
    }
    if ($response->grantExpireTime()) {
	my $expires = TBDateStringLocal(str2time($response->grantExpireTime()));
	$updates->{"expires"} = $expires;
	$$pmsg .= "\n" . "Expire updated: $expires";
    }
    if ($self->state() ne "authorized") {
	$updates->{"state"} = "authorized";
	$$pmsg .= "\n" . "Grant state has been changed to authorized";
    }
    if ($self->Update($updates)) {
	$$pmsg = "DB error updating state";
	return -1;
    }
    return 0;
}

# _Always_ make sure that this 1 is at the end of the file...
1;
