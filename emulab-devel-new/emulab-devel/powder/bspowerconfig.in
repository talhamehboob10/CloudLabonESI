#!/usr/bin/perl -w
#
# Copyright (c) 2008-2020 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use Data::Dumper;
use Date::Parse;

#
# Generate config files for the local power control setup on the
# base station cnucs.
#
# From Mike's notes
#
# /usr/testbed/etc/power-ctrlinfo
#
#  powder-pdu-meb  Raritan 10.11.12.217
#
# /usr/testbed/etc/power-outletmap
#
#  meb_roof_switch powder-pdu-meb  1
#  meb_roof_n310_2 powder-pdu-meb  4
#  meb_roof_n310_1 powder-pdu-meb  5
#  fiveghzsdr1-meb powder-pdu-meb  6
#  bbsdr1-meb      powder-pdu-meb  7
#  meb_roof_nuc    powder-pdu-meb  8
#
sub usage()
{
    print "Usage: bspowerconfig [bsname]\n";
    exit(1);
}
my $optlist   = "d";
my $debug     = 0;
my %pduinfo   = ();

#
# Configure variables
#
my $TB		     = "@prefix@";
my $TBOPS            = "@TBOPSEMAIL@";
my $MAINSITE         = @TBMAINSITE@;

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Protos
sub fatal($);
	  
#
# Turn off line buffering on output
#
$| = 1; 

# Load the Testbed support stuff.
use lib "@prefix@/lib";
use emdb;
use libtestbed;
use emutil;
use libEmulab;
use Node;

my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}

#
# Get the list of base stations and their power id from the radioinfo table.
#
my $query_result =
    DBQueryFatal("select distinct location,power_id,i.IP,n.type ".
		 "  from apt_aggregate_radioinfo as a ".
		 "left join interfaces as i on ".
		 "  i.node_id=a.power_id and i.role='expt' ".
		 "left join nodes as n on n.node_id=a.power_id ".
		 "where installation_type='BS'");
if (!$query_result->numrows) {
    print "No Base Stations with a power controller\n";
    exit(0);
}
while (my ($location,$power_id,$IP,$type) = $query_result->fetchrow_array()) {
    $pduinfo{$location} = {
	"power_id"   => $power_id,
	"power_type" => $type,
	"power_ip"   => $IP,
	"outlets"    => {},
    };
    # Grab all the outlets, the duplicates are fine.
    my $outlets_result =
	DBQueryFatal("select node_id,outlet from outlets ".
		     "where power_id='$power_id'");
    if (!$outlets_result->numrows) {
	print STDERR "No outlets on $power_id\n";
	next;
    }
    while (my ($node_id,$outlet) = $outlets_result->fetchrow_array()) {
	$pduinfo{$location}->{"outlets"}->{$node_id} = $outlet;
    }
}
foreach my $location (sort(keys(%pduinfo))) {
    my $info       = $pduinfo{$location};
    my $power_id   = $info->{'power_id'};
    my $power_ip   = $info->{'power_ip'};
    my $power_type = $info->{'power_type'};
    my $outlets    = $info->{'outlets'};

    print "Creating $power_id directory\n";
    if (!-e $power_id) {
	mkdir($power_id) or
	    fatal("Could not craete $power_id directory");
    }
    if (open(FILE, "> $power_id/power-ctrlinfo")) {
	print FILE "$power_id,$power_type,$power_ip\n";
	close(FILE);
    }
    else {
	fatal("Could not open $power_id/power-ctrlinfo");
    }
    if (open(FILE, "> $power_id/power-outletmap")) {
	foreach my $node_id (keys(%{$outlets})) {
	    my $outlet = $outlets->{$node_id};
	    print FILE "$node_id,$power_id,$outlet\n";
	}
	close(FILE);
    }
    else {
	fatal("Could not open $power_id/power-outletmap");
    }
}
exit(0);

sub fatal($)
{
    my ($msg) = @_;

    die("*** $0:\n".
	"    $msg\n");
}

