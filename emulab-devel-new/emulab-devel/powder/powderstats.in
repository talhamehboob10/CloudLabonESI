#!/usr/bin/perl -w
#
# Copyright (c) 2008-2021 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use File::Basename;
use Date::Parse;

sub usage()
{
    print STDERR "Usage: powderstats [-s YYYY-MM-DD] -e YYYY-MM-DD\n";
    exit(-1);
}
my $optlist   = "e:s:";
my $STARTTIME;
my $ENDTIME;

#
# Configure variables
#
my $TB		= "@prefix@";
my $WAP		= "$TB/sbin/withadminprivs";
my $NHIST       = "$TB/bin/node_history";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Protos
sub fatal($);
	  
#
# Turn off line buffering on output
#
$| = 1; 

# Load the Testbed support stuff.
use lib "@prefix@/lib";
use emdb;
use libtestbed;
use Project;
use User;
use APT_Instance;

my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"s"})) {
    $STARTTIME = $options{"s"};
    if (!str2time($STARTTIME)) {
	print STDERR "Cannot parse -s argument\n";
	exit(-1);
    }
}
if (defined($options{"e"})) {
    $ENDTIME = $options{"e"};
    if (!str2time($ENDTIME)) {
	print STDERR "Cannot parse -e argument\n";
	exit(-1);
    }
}
else {
    usage();
}
my $query_result;

#
# Number of projects.
#
$query_result =
    DBQueryFatal("select pid from projects as p ".
		 "left join users as u on u.uid_idx=p.head_idx ".
		 "where p.portal='powder' and p.approved=1 and ".
		 (defined($STARTTIME) ?
		  "     p.created > '$STARTTIME' and " : "") .
		 "      p.created < '$ENDTIME' and ".
		 "      u.usr_email not like '%utah.edu' and ".
		 "      u.usr_email not like '%rice.edu'");
print "Powder Portal projects: " . $query_result->numrows . "\n";

$query_result =
    DBQueryFatal("select uid_idx from users as u ".
		 "where u.portal='powder' and ".
		 "      (u.status='active' or u.status='inactive') and ".
		 (defined($STARTTIME) ?
		  "     u.usr_created > '$STARTTIME' and " : "") .
		 "      u.usr_created < '$ENDTIME' and ".
		 "      u.usr_email not like '%utah.edu' and ".
		 "      u.usr_email not like '%rice.edu'");
print "Powder Portal users: " . $query_result->numrows . "\n";

$query_result =
    DBQueryFatal("select uuid from apt_instance_history as h ".
		 "left join users as u on u.uid_idx=h.creator_idx ".
		 "where h.portal='powder' and ".
		 "     h.pid!='PMonitor' and ".
		 "     h.pid!='emulab-ops' and ".
		 "     h.pid!='testbed' and ".
		 (defined($STARTTIME) ?
		  "    h.created > '$STARTTIME' and " : "") .
		 "     h.created < '$ENDTIME' and ".
		 "     u.usr_email not like '%utah.edu' and ".
		 "     u.usr_email not like '%rice.edu'");
print "Powder Portal experiments: " . $query_result->numrows . "\n";

#
# Run node history on the mothership to get the usage for x310 nodes.
# Process the lines. Kinda painful, but I do not want to dip inside
# node_histry today. 
#
sub History($)
{
    my ($type) = @_;
    my $total  = 0;
    my $dopt   = str2time($ENDTIME);
    my $topt   = 5 * 360 * 24 * 3600;

    if (defined($STARTTIME)) {
	my $tmp = str2time($STARTTIME);
	$topt = $ENDTIME - $STARTTIME;
    }

    if (!open(HIST, "$WAP $NHIST -l -a -r -T $type -d $dopt -t $topt |")) {
	die("Could not start $NHIST");
    }
    while (<HIST>) {
	#print $_;
	chomp($_);
	my (undef, undef,undef, $seconds, $uid, $pid) = split(" ", $_);

	#
	# We prune projects as above.
	#
	my $project = Project->Lookup($pid);
	if (!defined($project)) {
	    print STDERR "No such project $pid\n";
	    next;
	}
	my $creator = $project->GetLeader();
	if (!defined($project)) {
	    print STDERR "No leader for project $pid\n";
	    next;
	}
	if ($creator->email() =~ /utah\.edu$/ ||
	    $creator->email() =~ /rice\.edu$/) {
	    next;
	}
	# print "$seconds $uid $pid\n";
	$total += $seconds;
    }
    close(HIST);
    return $total;
}
my $x310time = History("x310");
printf("X310 allocation time: %.2f hours\n", $x310time / 3600.0);
my $farostime = History("faros_sfp");
printf("MIMO allocation time: %.2f hours\n", $farostime / 3600.0);

#
# FE allocation stats
#
my %FEtime = ();

$query_result =
    DBQueryFatal("select h.uuid,aa.nickname,h.started,h.destroyed, ".
                 "    ia.physnode_count * ".
                 "      (UNIX_TIMESTAMP(h.destroyed) - ".
                 "        UNIX_TIMESTAMP(h.started)) as seconds ".
		 "  from apt_instance_history as h ".
		 "left join apt_instance_failures as f on ".
		 "     f.uuid=h.uuid ".
                 "left join apt_instance_aggregate_history as ia on ".
                 "     ia.uuid=h.uuid ".
                 "left join apt_aggregates as aa on aa.urn=ia.aggregate_urn ".
		 "left join users as u on u.uid_idx=h.creator_idx ".
		 "where h.started is not null and ".
		 (defined($STARTTIME) ?
		  "     h.started > '$STARTTIME' and " : "") .
		 "      h.started < '$ENDTIME' and ".
		 "      f.uuid is null and ".
		 "      u.usr_email not like '%utah.edu' and ".
		 "      u.usr_email not like '%rice.edu' and ".
		 "      h.pid!='PMonitor' and ".
		 "      h.pid!='emulab-ops' and ".
		 "      h.pid!='testbed' and ".
		 "      aa.isFE=1");

while (my $row = $query_result->fetchrow_hashref()) {
    my $nickname = $row->{'nickname'};
    my $seconds  = $row->{'seconds'};
    if (!exists($FEtime{$nickname})) {
	$FEtime{$nickname} = 0;
    }
    $FEtime{$nickname} += $seconds;
}
foreach my $nickname (keys(%FEtime)) {
    my $seconds = $FEtime{$nickname};
    printf("$nickname allocation time: %.2f hours\n", $seconds / 3600.0);
}
