#!/usr/bin/perl -w
#
# Copyright (c) 2003-2019 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
#
# A simple library for use in the installation scripts, to make them
# seem a little more legitimate, instead of the quick hacks they are.
#
use POSIX qw(strftime);
use Exporter;
use vars qw(@EXPORT $TOP_SRCDIR $TOP_OBJDIR 
	    $SQL_UPDATE_MAJOR_REVISION $INSTALL_UPDATE_MAJOR_REVISION 
	    $MAGIC_TESTBED_VERSION $MAGIC_TESTBED_START $MAGIC_TESTBED_END);

@EXPORT = qw($TOP_SRCDIR $TOP_OBJDIR
	     $SQL_UPDATE_MAJOR_REVISION $INSTALL_UPDATE_MAJOR_REVISION
	     $MAGIC_TESTBED_VERSION $MAGIC_TESTBED_START $MAGIC_TESTBED_END);

# Change these if the major numbers in sql/updates or install/updates
# are changed.
$SQL_UPDATE_MAJOR_REVISION	= 4;
$INSTALL_UPDATE_MAJOR_REVISION	= 5;

# Configure vars
$TOP_SRCDIR	= "@top_srcdir@";

#
# Make sure that output gets printed right away
#
$| = 1;

#
# Magic string that shows up in files already edited 
#
$MAGIC_TESTBED_VERSION = $INSTALL_UPDATE_MAJOR_REVISION + ".0";
$MAGIC_TESTBED_START   = "Added by Emulab - Version: ";
$MAGIC_TESTBED_END     = "End of Emulab added section";

sub MAGIC_TESTBED_START { $MAGIC_TESTBED_START . $MAGIC_TESTBED_VERSION; }
sub MAGIC_TESTBED_END   { $MAGIC_TESTBED_END; }

# Used by update-install to bump the version number.
sub SET_TESTBED_VERSION($)  { $MAGIC_TESTBED_VERSION = $_[0]; }

# Set by update-install.
my $impotent   = 0;
my $logfp;
sub SET_IMPOTENT_MODE($)	    { $impotent = 1; $logfp = $_[0]; };
sub IMPOTENT_MODE()		    { return $impotent; }
sub SET_LOG_OUTPUT($)		    { $logfp = $_[0]; };

#
# Some programs we may call
#
my $FETCH = "/usr/bin/fetch";

#
# Figure out which directory we live in, so that some stages can do thing
# relative to it.
#
$TOP_OBJDIR = `/usr/bin/dirname $0`;
chomp $TOP_OBJDIR;
$TOP_OBJDIR = "$TOP_OBJDIR/..";

# Real path to the source dir.
$TOP_SRCDIR = `realpath $TOP_SRCDIR`;
chomp $TOP_SRCDIR;

#
# Let's pretend perl's exception mechanism has a sane name for the function
# that raises an exception
#
sub throw(@) {
    die @_,"\n";
}

#
# Start a new installation phase
#
sub Phase($$$) {
    my ($name, $descr, $coderef) = @_;

    push @libinstall::phasestack, $name;
    push @libinstall::descrstack, $descr;
    
    #
    # Okay, this will probably earn me my own special circle in Perl Hell. Use
    # dynamic scoping to allow data to be passed inbetween indirectly recursive
    # calls of Phase(). hasSubPhase is used to determine if we were called
    # recursively in the eval(). skipped and nonSkipped let us figure out if
    # all child calls were skipped. But, we have to give this information to
    # our parent _after_ we declare our own. So, we use references. Damn!
    #
 
    $hasSubPhase++;
    my $firstSubPhase = ($hasSubPhase == 1);
    local $hasSubPhase = 0;
    
    my $parentNonSkipped = \$nonSkipped;
    my $parentSkipped = \$skipped;
    local $nonSkipped = 0;
    local $skipped = 0;
    
    local $depth = ($depth? $depth +1 : 1);
    my $isSubPhase = ($depth > 1);

    my $descrstring = "| " x ($depth -1) . $descr;
    if ($firstSubPhase) {
	print "\n";
	printf $logfp "\n"
	    if (defined($logfp));
    }
    printf "%-50s", $descrstring;
    printf $logfp "%-50s", $descrstring
	if (defined($logfp));

    #
    # Clear these, as we don't want to see the outputs of previous phases
    #
    @libinstall::lastExecOutput = ();
    $libinstall::lastCommand = undef;
    @libinstall::loglines = ();

    #
    # Cool! TWO levels of Perl Hell just for me!
    # We pretend we have real exceptions, here. The way this works, we _expect_
    # something to call die(), which is how you throw exceptions in perl. Neat,
    # huh? The three calls below (Phase?*()) are the ones that do this.
    #
    eval { &$coderef(); };

    #
    # Prepare for printing!
    #
    my $message = "";
    my $die = 0;
    my $stop = 0;
    if ($hasSubPhase) {
	print  "| " x ($depth -1) . "+-" . "--" x (24 - $depth) . "> ";
	print $logfp  "| " x ($depth -1) . "+-" . "--" x (24 - $depth) . "> "
	    if (defined($logfp));
    }

    #
    # Check the exception thrown by the eval()
    #
    SWITCH: for ($@) {
	(/^skip$/) && do {
	    print "[ Skipped ($libinstall::reason) ]\n";
	    print $logfp "[ Skipped ($libinstall::reason) ]\n"
		if (defined($logfp));
	    $$parentSkipped++;
	    $libinstall::phaseResults{$name} = $_;
	    last SWITCH;
	};

	(/^fail$/) && do {
	    print "[ Failed    ]\n";
	    $$parentNonSkipped++;
	    $libinstall::phaseResults{$name} = $_;
	    $die = 1;
	    $message = "$libinstall::reason";
	    if ($isSubPhase) {
		#
		# Propagate failure up the tree
		#
		PhaseFail($libinstall::reason);
	    }
	    last SWITCH;
	};

	(/^stop$/) && do {
	    print "[ Stopped    ]\n";
	    print $logfp "[ Stopped ($libinstall::reason) ]\n"
		if (defined($logfp));
	    $$parentNonSkipped++;
	    $message = "$libinstall::reason";
	    if ($impotent) {
		$libinstall::phaseResults{$name} = "succeed";
	    }
	    else {
		$libinstall::phaseResults{$name} = $_;
		$stop = 1;
		if ($isSubPhase) {
		    #
		    # Propagate failure up the tree
		    #
		    PhaseStop($libinstall::reason);
		}
	    }
	    last SWITCH;
	};

	(undef || /^$/ || /^succeed$/) && do {
	    #
	    # If we're a parent, and all sub-phases got skipped, we did too
	    #
	    my $stamp = POSIX::strftime("%H:%M:%S", localtime());
	    
	    if ($hasSubPhase && $skipped && ($nonSkipped == 0)) {
		print "[ Skipped   ] ($stamp)\n";
		print $logfp "[ Skipped   ]\n"
		    if (defined($logfp));
		$libinstall::phaseResults{$name} = "skip";
		$$parentSkipped++;
	    } else {
		if (defined($logfp)) {
		    print $logfp "[ Succeeded ]\n";
		    
		    print $logfp 
			"> " . join("\n> ", @libinstall::loglines) . "\n"
			if (@libinstall::loglines);
		}
		if ($impotent) {
		    print "[ $libinstall::reason ]\n";
		}
		else {
		    print "[ Succeeded ] ($stamp)\n";
		}
		$$parentNonSkipped++;
		$libinstall::phaseResults{$name} = "succeed";
	    }
	    last SWITCH;
	};

	#
	# Default case - shouldn't get here, unless something called die with
	# the wrong value
	#
	print "[ ERROR     ]\n";
	print $logfp "[ ERROR     ]\n"
	    if (defined($logfp));
	$$parentNonSkipped++;
	$message = "Internal error - Bad exception:\n$_";
	$libinstall::phaseResults{$name} = "fail";
        $die = 1;
	if ($isSubPhase) {
	    #
	    # Propagate failure up the tree
	    #
	    PhaseFail($message);
	}
    }

    #
    # If we decided that we need to stop, do that now
    #
    if ($stop) {
	my $message =
	    "\n" .
	    "############################################################\n" .
	    "Installation stopped in phase $name. The reason is:\n" .
	    "$message\n" .
	    "############################################################\n";
	print $message;
	print $logfp $message
	    if (defined($logfp));
	exit -1;
    }

    #
    # If we decided that we need to die, do that now
    #
    if ($die) {
	my $message = 
	    "\n##### Installation failed in phase $name:\n" . "$message\n";
	print $message;
	print $logfp $message
	    if (defined($logfp));
	PrintPhaseTrace();
	PrintLastOutput();
	print "Please send the above output to testbed-ops\@emulab.net\n";
	exit -1;
    }

    #
    # Pop ourselves off the phase stack!
    #
    pop @libinstall::phasestack;
    pop @libinstall::descrstack;

}

#
# Signal that the current phase has suceeded
#
sub PhaseSucceed(;$) {
    ($libinstall::reason) = (@_);
    if (!$libinstall::reason) {
	$libinstall::reason = "succeeded";
    }
    throw "succeed";
}

#
# Signal that the current phase has failed
#
sub PhaseFail($) {
    ($libinstall::reason) = (@_);
    throw "fail";
}

#
# Signal that the current phase needs to stop so the user can do something.
#
sub PhaseStop($) {
    ($libinstall::reason) = (@_);
    throw "stop";
}

#
# Signal that the current phase is being skipped
#
sub PhaseSkip($) {
    ($libinstall::reason) = (@_);
    throw "skip";
}

#
# Check to see if a previous phase was skipped. Returns 1 if it was, 0 if not
#
sub PhaseWasSkipped($) {
    my ($phase) = (@_);
    return ($libinstall::phaseResults{$phase} &&
    	($libinstall::phaseResults{$phase} =~ /^skip$/));
}

#
# For impotent mode.
#
sub PhaseWouldHave($) {
    ($libinstall::reason) = (@_);
    throw "succeed";
}

#
# Also for impotent mode; detailed logging.
#
sub PhaseLog(@) {
    (@libinstall::loglines) = (@_);
}

#
# Also for impotent mode; log differences to a file.
#
sub DiffFiles($$) {
    my ($src,$dst) = @_;

    return
	if (!$impotent);

    if (! -e $dst) {
	my $stuff = `cat $src`;
	PhaseLog(split('\n', $stuff));
    }
    my $diff = `diff $src $dst`;
    PhaseLog(split('\n', $diff));
}
    
#
# Check to see if the phase is already done, as evidenced by the existance of
# a file
#
sub DoneIfExists($) {
    my ($filename) = @_;
    if (!$filename) { PhaseFail("Bad filename passed to DoneIfExists"); }
    if (-e $filename) {
	PhaseSkip("File already exists");
    }
}

#
# Same as above, but done if it doesn't exist
#
sub DoneIfDoesntExist($) {
    my ($filename) = @_;
    if (!$filename) { PhaseFail("Bad filename passed to DoneIfExists"); }
    if (!-e $filename) {
	PhaseSkip("File does not exist");
    }
}

#
# Check to see if the phase is already done, as evidenced by the existance
# and executability of a file.
#
sub DoneIfExecutable($) {
    my ($filename) = @_;
    if (!$filename) { PhaseFail("Bad filename passed to DoneIfExecutable"); }
    if (-x "$filename") {
	PhaseSkip("File already exists and is executable");
    }
}

#
# Check to see if the phase is already done, as evidenced by the existance of
# comments within a file
#
sub DoneIfEdited($) {
    my ($filename) = @_;
    if (!$filename) { PhaseFail("Bad filename passed to DoneIfEdited"); }
    my $magic_string = MAGIC_TESTBED_START();
    open(FH,$filename) or return;
    if (grep /$magic_string/, <FH>) {
        close(FH);
	PhaseSkip("File has already been edited");
    }
    close(FH);
}

#
# Similar to DoneIfEdited, but look for the existance of a user specified
# string in the file.
#
sub DoneIfContains($$) {
    my ($filename,$magic_string) = @_;
    if (!$filename) { PhaseFail("Bad filename passed to DoneIfContains"); }
    open(FH,$filename) or return;
    if (grep /$magic_string/, <FH>) {
        close(FH);
	PhaseSkip("File already contains desired info");
    }
    close(FH);
}

#
# Check to see if the phase is already done, as evidenced by the fact that two
# files are identical
#
sub DoneIfIdentical($$) {
    my ($filename1,$filename2) = @_;
    if (!$filename1 || !$filename2) {
	PhaseFail("Bad filename passed to DoneIfIdentical");
    }
    if (!-e $filename1 || !-e $filename2) {
	return;
    }
    system("cmp -s $filename1 $filename2");
    if (! $?) {
	PhaseSkip("Files has not changed");
    }
}

#
# Done if package installed.
#
sub DoneIfPackageInstalled($;$) {
    my ($pname,$exact) = @_;

    $exact = 0
	if (!defined($exact));
    if (InstalledPackage($pname, $exact)) {
	PhaseSkip("already installed");
    }
}

#
# Backup a file or fail.
#
sub BackUpFileFatal($)
{
    my ($filename) = @_;
    my $suffix     = time();
    my $backup     = $filename . "-" . $suffix;

    PhaseFail("$filename does not exist")
	if (! -e $filename);

    if (-e $backup) {
	sleep(1);
	$backup = $filename . "-" . time();
	PhaseFail("$backup already exists")
	    if (-e $backup);
    }

    ExecQuietFatal("/bin/cp -p $filename $backup")
	if (!$impotent);

    # Update the comment.
    $libinstall::reason = "Backed up to $backup";
}

#
# Delete a file or fail.
#
sub DeleteFileFatal($)
{
    my ($filename) = @_;

    PhaseSucceed("Already deleted")
	if (! -e $filename);

    ExecQuietFatal("/bin/rm -f $filename")
	if (!$impotent);

    # Update the comment.
    $libinstall::reason = "Deleted $filename";
}

#
# Rename a directory or fail. 
#
sub BackupDirectoryFatal($)
{
    my ($path) = @_;
    my $suffix = time();
    my $backup = $path . "-" . $suffix;

    PhaseFail("$path does not exist")
	if (! -e $path);

    if (-e $backup) {
	sleep(1);
	$backup = $path . "-" . time();
	PhaseFail("$backup already exists")
	    if (-e $backup);
    }

    ExecQuietFatal("rsync -a $path/ $backup")
	if (!$impotent);
    
    # Update the comment.
    $libinstall::reason = "Backed up to $backup";
}

#
# Check to see if filesystem already mounted
#
sub DoneIfMounted($)
{
    my ($dir) = @_;

    #
    # Grab the output of the mount command and parse. 
    #
    if (! open(MOUNT, "/sbin/mount|")) {
	PhaseFail("Cannot run mount command");
    }
    while (<MOUNT>) {
	if ($_ =~ /^([-\w\.\/:\(\)]+) on ([-\w\.\/]+) \((.*)\)$/) {
	    # Search for nfs string in the option list.
	    foreach my $opt (split(',', $3)) {
		if ($opt eq "nfs") {
		    if ($dir eq $2) {
			close(MOUNT);
			PhaseSkip("NFS dir already mounted");
		    }
		}
	    }
	}
    }
    close(MOUNT);
    return;
}

#
# Append some text to a configuration file, with a special testbed tag that 
# will help inform the user of what's been done, and help future invocations
# tell that this has already been done. Returns undef if it succeeds, or
# an error string if it fails
# TODO - handle alternate comment characters
# TODO - handle files that it's OK to create
#
sub AppendToFile($@) {
    my ($filename, @lines) = @_;

    if (defined($logfp)) {
	print $logfp "Append to file: $filename\n";
	print $logfp "@lines\n";
    }
    if ($impotent) {
	PhaseWouldHave("append to $filename");
	return undef;
    }
    if (!-e $filename) {
	return "File $filename does not exist";
    }
    open(FH,">>$filename") or return "Unable to open $filename for ".
	"writing: $!";

    print FH "# " . MAGIC_TESTBED_START() . "\n";
    print FH map "$_\n", @lines;
    print FH "# " . MAGIC_TESTBED_END() . "\n";

    close(FH);

    return undef;
}

#
# Same as above, but call PhaseFail on failure
#
sub AppendToFileFatal($@) {
    my ($filename,@lines) = @_;
    my $error = AppendToFile($filename,@lines);
    if ($error) {
	PhaseFail($error);
    }
}

#
# Create a new file (must not already exist), and fill it with the given
# contents. Returns undef if successful, or an error message otherwise.
#
sub CreateFile($;@) {
    my ($filename,@lines) = @_;

    if (defined($logfp)) {
	print $logfp "Create file: $filename\n";
	print $logfp "@lines\n";
    }
    if ($impotent) {
	PhaseWouldHave("create $filename");
	return undef;
    }
    if (-e $filename) {
	return "File $filename already exists";
    }
    open(FH,">$filename") or return "Unable to open $filename for ".
	"writing: $!";

    if (@lines) {
	print FH map "$_\n", @lines;
    }

    close FH;
    return undef;    
}

#
# Same as above, but call PhaseFail on failure
#
sub CreateFileFatal($@) {
    my ($filename,@lines) = @_;
    my $error = CreateFile($filename,@lines);
    if ($error) {
	PhaseFail($error);
    }
}

#
# Execute a program, hiding its stdout and stderr from the user, but saving
# them for later use. Returns the exit value of the program if used in scalar
# context, or an array composed of the exit status and output if used in array
# context.
#
sub ExecQuiet(@) {
    #
    # Use a pipe read, so that we save away the output
    #
    my $commandstr = join(" ",@_);

    if ($impotent) {
	PhaseWouldHave("exec($commandstr)");
        return 0;
    }
    
    my @output = ();
    open(PIPE,"$commandstr 2>&1 |") or return -1;
    while (<PIPE>) {
	push @output, $_;
    }
    close(PIPE);

    my $exit_value  = $? >> 8;

    #
    # Detailed logging.
    #
    if (defined($logfp)) {
	print $logfp "\n";
	print $logfp "Exec('$commandstr')\n";
	if (@output) {
	    print $logfp "@output";
	    print $logfp "\n";
	}
    }

    @libinstall::lastExecOutput = @output;
    $libinstall::lastCommand = $commandstr;

    if (wantarray) {
	return ($exit_value, @output);
    } else {
	return $exit_value;
    }
}

#
# Same as the above, but the current phase fails if the program returns a non-0
# exit status.
#
sub ExecQuietFatal(@) {
    if (ExecQuiet(@_)) {
	my $msg = join(' ', @_);
	PhaseFail("Unable to execute: '$msg'");
    }
}

#
# Signal a daemon, if it's PID file exists. If we can't kill it, we assume that
# it's because it wasn't running, and skip the phase. Fails if it has trouble
# reading the pid file.
# Takes the name of the daemon as an argument, and assumes
# that the pid file is /var/run/$name.pid
#
sub SignalDaemon($$) {
    my ($name,$sig) = @_;
    my $pidfile = "/var/run/$name.pid";
    PhaseSkip("$name is not running") unless (-e $pidfile);
    open(PID,$pidfile) or PhaseFail("Unable to open pidfile $pidfile");
    my $pid = <PID>;
    chomp $pid;
    close PID;

    PhaseFail("Bad pid ($pid) in $pidfile\n") unless ($pid =~ /^\d+$/);

    if ($impotent) {
	PhaseWouldHave("signal($sig) $name");
	return;
    }
    if (!kill($sig, $pid)) {
	PhaseSkip("$name is not running");
    }
}

sub HUPDaemon($) {
    my ($name) = @_;

    SignalDaemon($name, 'HUP');
}

#
# Restart a daemon if running. Do not start if not running.
#
sub RestartDaemon($;$) {
    my ($name, $path) = @_;

    my $pidfile = "$VARRUN/${name}.pid";

    if (! -e "$VARRUN/stated.pid") {
	PhaseSkip("Testbed not running");
    }
    if (!-e $pidfile) {
	PhaseSkip("$name not running");
    }
    if ($impotent) {
	PhaseWouldHave("restart $name");
	return 1;
    }
    SignalDaemon($name, 'TERM');
    sleep(1);
    $path = "$TBROOT/sbin/$name"
	if (!defined($path));
    if (ExecQuiet($path) == 0) {
	PhaseSucceed("$name started");
    }
    PhaseFail("Could not start $name");
}

#
# Fetch a file from the network, using any protocol supported by fetch(1).
# Arguments are URL and a local filename. Retunrns 1 if succesful, 0 if not.
#
sub FetchFile($$) {
    my ($URL, $localname) = @_;

    if ($impotent) {
	PhaseLog("$URL --> $filename");
	PhaseWouldHave("fetch $URL");
	return 1;
    }
    if (ExecQuiet("$FETCH --retry --timeout=30 --retry-delay=15 ".
		  "  -o $localname $URL")) {
	return 0;
    } else {
	return 1;
    }
}

#
# Same as above, but failure is fatal
#
sub FetchFileFatal($$) {
    my ($URL, $localname) = @_;
    if (!FetchFile($URL,$localname)) {
	PhaseFail("Unable to fetch $URL");
    }
}

#
# Locate the proper version of a package to install by looking
# at the available package tarballs. Note that we do "ls -t"
# so that if there is more than one package, we will return the latest.
#
# Must be called "in phase" since we will PhaseFail on errors.
#
sub GetPackage($$) {
    my ($prefix, $packagedir) = @_;

    PhaseFail("Must provide -p (packagedir) argument!")
	if (!$packagedir);

    my @pname = `ls -t $packagedir/$prefix-*.txz 2>/dev/null`;
    if ($?) {
	@pname = `ls -t $packagedir/$prefix-*.tbz 2>/dev/null`;
	if ($?) {
	    @pname = `ls -t $packagedir/$prefix-*.tgz 2>/dev/null`;
	    PhaseFail("Cannot find $prefix package in $packagedir!")
		if ($?);
	}
    }
    chomp(@pname);

    if (@pname > 1) {
	# if it matched more than one package, find one with exactly one '-'
	foreach my $pn (@pname) {
	    if ($pn =~ /^$packagedir\/$prefix-[^-]+\.t[bgx]z$/) {
		return $pn;
	    }
	}
    }

    return $pname[0];
}

#
# Return the name of any installed package matching the given regex or exact
# name (if $exact != 0). If there are multiple matches, we warn and return
# the first. Return undef if no match.
#
sub InstalledPackage($$) {
    my ($pname, $exact) = @_;
    my (@foo, $args);

    if (-x "/usr/sbin/pkg_info") {
	# note: use extended REs to match new pkg tool
	$args = $exact ? "-I" : "-I -X";
	@foo = `pkg_info $args $pname 2>/dev/null`;
    } elsif (-x "/usr/sbin/pkg") {
	$args = $exact ? "-E" : "-E -x";
	@foo = `pkg info $args $pname 2>/dev/null`;
    } else {
	PhaseFail("No package tools found!?");
    }

    if ($? == 0 && @foo > 0) {
	if (@foo > 1) {
	    print STDERR "WARNING: '$pname' matches multiple packages, returning first\n";
	}
	if ($foo[0] =~ /^(\S+)/) {
	    return $1;
	}
    }
    return undef;
}

sub AddPackage($$) {
    my ($pname, $packagedir) = @_;

    if (-x "/usr/sbin/pkg_add") {
	ExecQuietFatal("env PKG_PATH=$packagedir pkg_add $pname");
    } elsif (-x "/usr/sbin/pkg") {
	# must have the prefix
	if ($pname !~ /^$packagedir\//) {
	    $pname = "$packagedir/$pname";
	}
	# and the suffix
	if ($pname !~ /\.txz$/) {
	    $pname .= ".txz";
	}
	ExecQuietFatal("pkg add $pname");
    } else {
	PhaseFail("No package tools found!?");
    }
}

sub DelPackage($$$) {
    my ($pname, $recursive, $fatal) = @_;
    my ($cmd, $args);

    $args = "-f";
    if (-x "/usr/sbin/pkg_delete") {
	$cmd = "pkg_delete";
	$args .= " -r"
	    if ($recursive);
    } elsif (-x "/usr/sbin/pkg") {
	$cmd = "pkg delete";
	$args .= " -y";
	$args .= " -R"
	    if ($recursive);
    } else {
	PhaseFail("No package tools found!?");
    }
    $args .= " -x $pname";

    if ($fatal) {
	ExecQuietFatal("$cmd $args");
    } else {
	ExecQuiet("$cmd $args");
    }
}

#
# Print out the phase stack that got us here
#
sub PrintPhaseTrace() {
    my $message =
	"-------------------- Phase Stack ----------------------------\n";
    my @tmpphase = @libinstall::phasestack;
    my @tmpdescr = @libinstall::descrstack;
    my ($phase, $descr);
    while (@tmpdescr) {
	($phase, $descr) = (pop @tmpphase, pop @tmpdescr);
	$message .= sprintf "%-10s %-50s\n", $phase, $descr;
    }
    $message .=
	"--------------------------------------------------------------\n";

    print $message;
    print $logfp $message
	if (defined($logfp));
}

#
# Print out the ouput of the last command that ran
#
sub PrintLastOutput() {
    if (!$libinstall::lastCommand) {
	return;
    }
    my $message =
	"------------------------------------------ Last Command Output\n" .
	"Command: $libinstall::lastCommand\n" .
	"@libinstall::lastExecOutput" .
	"--------------------------------------------------------------\n";
    print $message;
    print $logfp $message
	if (defined($logfp));
}

sub LastOutput() {
    if (!$libinstall::lastCommand) {
	return ();
    }
    return ("------------------------------------------ Last Command Output\n",
	    "Command: $libinstall::lastCommand\n",
	    @libinstall::lastExecOutput,
	    "--------------------------------------------------------------\n");
}

#
# Get me a secret
#
sub GenSecretKey()
{
    my $key=`/bin/dd if=/dev/urandom count=128 bs=1 2> /dev/null | /sbin/md5`;
    chomp($key);
    return $key;
}

sub EscapeShellArg($)
{
    my ($str) = @_;
    my @chars  = split('', $str);
    my $result = "";

    foreach my $ch (@chars) {
        if ($ch eq '\'') {
            $result = $result . "\'\\\'";
	}
	$result = $result . "$ch";
    }
    return "'$result'";
}

#
# Update a file. The idea here is to comment out particular lines, as
# described by the patterns, and then add the new lines.
#
# Returns undef if it succeeds, or an error string if it fails.
#
sub UpdateFileFatal($$@)
{
    my ($filename, $patterns, @lines) = @_;
    my $old = "";
    my $new = "";

    if (! -e $filename) {
	PhaseFail("Bad filename passed to UpdateFile");
    }
    open(FH,$filename) or
	PhaseFail("Cannot open $filename for reading");
    while (<FH>) {
	$old .= $_;

	foreach my $pat (@$patterns) {
	    if ($_ =~ $pat) {
		# XXX Deal with other file types (different comment char)
		$new .= '# ';
		last;
	    }
	}
	$new .= $_;
      pass:
    }
    close(FH);
    PhaseSkip("No changes made")
	if (@patterns && $old eq $new);

    # Stash old copy.
    BackUpFileFatal($filename);
    DeleteFileFatal($filename);
    # and create new version.
    CreateFileFatal($filename, $new . join("\n", @lines));
    return undef;
}

#
# Check to see if the phase is already done, as evidenced by the existence of
# the *exact* text block in the file.
#
sub DoneIfUpdated($@)
{
    my ($filename, @lines) = @_;
    my $block   = join("\n", @lines);

    if (! -e $filename) {
	PhaseFail("No such file $filename");
    }
    open(FH, $filename) or
	PhaseFail("Could not open $filename");
    local $/;
    my $content = <FH>;
    close(FH);

    PhaseSkip("Already updated")
	if ($content =~ /^($block)$/m);
}

#
# Update a file by doing the equivalent of query/replace.
#
# Returns undef if it succeeds, or an error string if it fails.
#
sub QueryReplaceFileFatal($$)
{
    my ($filename, $replacements) = @_;
    my $old = "";
    my $new = "";

    if (! -e $filename) {
	PhaseFail("Bad filename passed to UpdateFile");
    }
    open(FH,$filename) or
	PhaseFail("Cannot open $filename for reading");
    while (<FH>) {
	$old .= $_;

	foreach my $ref (@$replacements) {
	    my ($pat,$repl) = @$ref;
	    
	    if ($_ =~ $pat) {
		$_ =~ s/$pat/$repl/ee;
		last;
	    }
	}
	$new .= $_;
      pass:
    }
    close(FH);
    PhaseSkip("No changes made")
	if ($old eq $new);

    # Stash old copy.
    BackUpFileFatal($filename);
    DeleteFileFatal($filename);
    # and create new version.
    CreateFileFatal($filename, $new);
    return undef;
}

#
# Get the subject of a certificate, broken into the parts.
#
sub ParseCertificate($)
{
    my ($filename) = @_;
    my %results = ();

    if (! -e $filename) {
	return undef;
    }
    my $subject = `openssl x509 -subject -noout -in $filename`;
    return undef
	if ($?);
    chomp($subject);
    my @parts = split('/', $subject);
    foreach my $part (@parts) {
	my ($key,$val) = split('=', $part);
	$results{$key} = $val;
    }
    return \%results;
}

1;
