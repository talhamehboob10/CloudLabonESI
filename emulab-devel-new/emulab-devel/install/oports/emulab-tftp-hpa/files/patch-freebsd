diff -rcN tftp-hpa-5.2.orig/MCONFIG.in tftp-hpa-5.2/MCONFIG.in
*** tftp-hpa-5.2.orig/MCONFIG.in	Sun Dec 11 15:13:52 2011
--- tftp-hpa-5.2/MCONFIG.in	Mon Jun 29 14:29:56 2015
***************
*** 31,36 ****
--- 31,45 ----
  # System binaries
  SBINDIR = @sbindir@
  
+ # FreeBSD more system binaries
+ LIBEXECDIR = @libexecdir@
+ 
+ # Config info
+ ETCDIR = @sysconfdir@
+ 
+ # Facility for logging
+ LOGFACIL = LOG_LOCAL5
+ 
  # Data root directory
  datarootdir = @datarootdir@
  
***************
*** 48,57 ****
  INSTALL         = @INSTALL@
  INSTALL_PROGRAM = @INSTALL_PROGRAM@
  INSTALL_DATA    = @INSTALL_DATA@
  
  # Compiler and compiler flags
  CC      = @CC@
! CFLAGS  = @CFLAGS@ -I$(SRCROOT)
  
  # Link flags
  LDFLAGS = @LDFLAGS@
--- 57,67 ----
  INSTALL         = @INSTALL@
  INSTALL_PROGRAM = @INSTALL_PROGRAM@
  INSTALL_DATA    = @INSTALL_DATA@
+ INSTALL_SCRIPT  = @INSTALL_SCRIPT@
  
  # Compiler and compiler flags
  CC      = @CC@
! CFLAGS  = @CFLAGS@ -I$(SRCROOT) -DLOGFACIL=$(LOGFACIL)
  
  # Link flags
  LDFLAGS = @LDFLAGS@
diff -rcN tftp-hpa-5.2.orig/tftpd/Makefile tftp-hpa-5.2/tftpd/Makefile
*** tftp-hpa-5.2.orig/tftpd/Makefile	Sun Dec 11 15:13:52 2011
--- tftp-hpa-5.2/tftpd/Makefile	Mon Jun 29 14:34:11 2015
***************
*** 17,26 ****
  	sed -e 's/@@VERSION@@/$(VERSION)/g' < $< > $@
  
  install: all
! 	mkdir -p $(INSTALLROOT)$(SBINDIR) $(INSTALLROOT)$(MANDIR)/man8
! 	$(INSTALL_PROGRAM) tftpd$(X) $(INSTALLROOT)$(SBINDIR)/in.tftpd
! 	$(INSTALL_DATA)    tftpd.8 $(INSTALLROOT)$(MANDIR)/man8/in.tftpd.8
! 	cd $(INSTALLROOT)$(MANDIR)/man8 && $(LN_S) -f in.tftpd.8 tftpd.8
  
  clean:
  	rm -f *.o *.obj *.exe tftpd tftpsubs.c tftpsubs.h tftpd.8
--- 17,27 ----
  	sed -e 's/@@VERSION@@/$(VERSION)/g' < $< > $@
  
  install: all
! 	mkdir -p $(INSTALLROOT)$(LIBEXECDIR) $(INSTALLROOT)$(MANDIR)/man8
! 	$(INSTALL_PROGRAM) tftpd$(X) $(INSTALLROOT)$(LIBEXECDIR)/tftpd
! 	$(INSTALL_DATA)    tftpd.8 $(INSTALLROOT)$(MANDIR)/man8/tftpd.8
! 	$(INSTALL_SCRIPT) -m 555 tftpd-hpa.sh $(INSTALLROOT)$(ETCDIR)/rc.d/
! 	$(INSTALL_DATA)    tftpd.rules $(INSTALLROOT)$(ETCDIR)/
  
  clean:
  	rm -f *.o *.obj *.exe tftpd tftpsubs.c tftpsubs.h tftpd.8
diff -rcN tftp-hpa-5.2.orig/tftpd/remap.c tftp-hpa-5.2/tftpd/remap.c
*** tftp-hpa-5.2.orig/tftpd/remap.c	Sun Dec 11 15:13:52 2011
--- tftp-hpa-5.2/tftpd/remap.c	Mon Jun 29 14:36:56 2015
***************
*** 340,346 ****
      /* Default error */
      *errmsg = "Remap table failure";
  
!     if (verbosity >= 3) {
          syslog(LOG_INFO, "remap: input: %s", current);
      }
  
--- 340,346 ----
      /* Default error */
      *errmsg = "Remap table failure";
  
!     if (verbosity >= 5) {
          syslog(LOG_INFO, "remap: input: %s", current);
      }
  
***************
*** 370,376 ****
                  }
  
                  if (ruleptr->rule_flags & RULE_ABORT) {
!                     if (verbosity >= 3) {
                          syslog(LOG_INFO, "remap: rule %d: abort: %s",
                                 ruleptr->nrule, current);
                      }
--- 370,376 ----
                  }
  
                  if (ruleptr->rule_flags & RULE_ABORT) {
!                     if (verbosity >= 5) {
                          syslog(LOG_INFO, "remap: rule %d: abort: %s",
                                 ruleptr->nrule, current);
                      }
***************
*** 398,404 ****
                                     pmatch, macrosub);
                      free(current);
                      current = newstr;
!                     if (verbosity >= 3) {
                          syslog(LOG_INFO, "remap: rule %d: rewrite: %s",
                                 ruleptr->nrule, current);
                      }
--- 398,404 ----
                                     pmatch, macrosub);
                      free(current);
                      current = newstr;
!                     if (verbosity >= 5) {
                          syslog(LOG_INFO, "remap: rule %d: rewrite: %s",
                                 ruleptr->nrule, current);
                      }
***************
*** 413,426 ****
              was_match = 0;
  
              if (ruleptr->rule_flags & RULE_EXIT) {
!                 if (verbosity >= 3) {
                      syslog(LOG_INFO, "remap: rule %d: exit",
                             ruleptr->nrule);
                  }
                  return current; /* Exit here, we're done */
              } else if (ruleptr->rule_flags & RULE_RESTART) {
                  ruleptr = rules;        /* Start from the top */
!                 if (verbosity >= 3) {
                      syslog(LOG_INFO, "remap: rule %d: restart",
                             ruleptr->nrule);
                  }
--- 413,426 ----
              was_match = 0;
  
              if (ruleptr->rule_flags & RULE_EXIT) {
!                 if (verbosity >= 5) {
                      syslog(LOG_INFO, "remap: rule %d: exit",
                             ruleptr->nrule);
                  }
                  return current; /* Exit here, we're done */
              } else if (ruleptr->rule_flags & RULE_RESTART) {
                  ruleptr = rules;        /* Start from the top */
!                 if (verbosity >= 5) {
                      syslog(LOG_INFO, "remap: rule %d: restart",
                             ruleptr->nrule);
                  }
***************
*** 428,434 ****
          }
      }
  
!     if (verbosity >= 3) {
          syslog(LOG_INFO, "remap: done");
      }
      return current;
--- 428,434 ----
          }
      }
  
!     if (verbosity >= 5) {
          syslog(LOG_INFO, "remap: done");
      }
      return current;
diff -rcN tftp-hpa-5.2.orig/tftpd/tftpd-hpa.sh tftp-hpa-5.2/tftpd/tftpd-hpa.sh
*** tftp-hpa-5.2.orig/tftpd/tftpd-hpa.sh	Wed Dec 31 17:00:00 1969
--- tftp-hpa-5.2/tftpd/tftpd-hpa.sh	Mon Jun 29 14:37:48 2015
***************
*** 0 ****
--- 1,43 ----
+ #!/bin/sh
+ #
+ 
+ if ! PREFIX=$(expr $0 : "\(/.*\)/etc/rc\.d/$(basename $0)\$"); then
+     echo "$0: Cannot determine the PREFIX" >&2
+     exit 1
+ fi
+ 
+ tftpd_flags="-l"
+ 
+ if [ -z "${source_rc_confs_defined}" ]; then
+ 	if [ -r /etc/defaults/rc.conf ]; then
+ 		. /etc/defaults/rc.conf
+ 		source_rc_confs
+ 	elif [ -r /etc/rc.conf ]; then
+ 		. /etc/rc.conf
+ 	fi
+ fi
+ 
+ if [ -r ${PREFIX}/etc/tftpd.rules ]; then
+ 	tftpd_flags="-m ${PREFIX}/etc/tftpd.rules $tftpd_flags"
+ fi
+ 
+ case "$1" in
+ start)
+ 	if [ -x ${PREFIX}/libexec/tftpd ]; then
+ 		echo -n ' tftpd'
+ 		if [ `grep -c -E '^tftp' /etc/inetd.conf` -ne 0 ]; then
+ 			echo ": enabled in inetd.conf, not starting daemon"
+ 		else
+ 			${PREFIX}/libexec/tftpd $tftpd_flags
+ 		fi
+ 	fi
+ 	;;
+ stop)
+ 	killall tftpd && echo -n ' tftpd'
+ 	;;
+ *)
+ 	echo "Usage: `basename $0` {start|stop}" >&2
+ 	;;
+ esac
+ 
+ exit 0
diff -rcN tftp-hpa-5.2.orig/tftpd/tftpd.c tftp-hpa-5.2/tftpd/tftpd.c
*** tftp-hpa-5.2.orig/tftpd/tftpd.c	Sun Dec 11 15:13:52 2011
--- tftp-hpa-5.2/tftpd/tftpd.c	Fri Dec 11 11:08:31 2015
***************
*** 48,53 ****
--- 48,54 ----
  #include <pwd.h>
  #include <limits.h>
  #include <syslog.h>
+ #include <sys/wait.h>
  
  #include "common/tftpsubs.h"
  #include "recvfrom.h"
***************
*** 84,89 ****
--- 85,91 ----
  static int timeout_quit = 0;
  static sigjmp_buf timeoutbuf;
  static uint16_t rollover_val = 0;
+ static u_short block;
  
  #define	PKTSIZE	MAX_SEGSIZE+4
  static char buf[PKTSIZE];
***************
*** 106,111 ****
--- 108,115 ----
  int portrange = 0;
  unsigned int portrange_from, portrange_to;
  int verbosity = 0;
+ int maxchildren = 0;
+ volatile int numchildren;
  
  struct formats;
  #ifdef WITH_REGEX
***************
*** 157,164 ****
  {
      (void)sig;                  /* Suppress unused warning */
      timeout <<= 1;
!     if (timeout >= maxtimeout || timeout_quit)
          exit(0);
      siglongjmp(timeoutbuf, 1);
  }
  
--- 161,180 ----
  {
      (void)sig;                  /* Suppress unused warning */
      timeout <<= 1;
!     if (timeout >= maxtimeout || timeout_quit) {
! 	u_short sport;
! 	tmp_p = (char *)inet_ntop(from.sa.sa_family, SOCKADDR_P(&from),
! 				  tmpbuf, INET6_ADDRSTRLEN);
! 	if (!tmp_p) {
! 		tmp_p = tmpbuf;
! 		strcpy(tmpbuf, "???");
! 		sport = 0;
! 	} else
! 		sport = ntohs(SOCKPORT(&from));
! 	syslog(LOG_WARNING, "%s/%d: timeout on block %d\n",
! 	       tmp_p, sport, block);
          exit(0);
+     }
      siglongjmp(timeoutbuf, 1);
  }
  
***************
*** 287,292 ****
--- 303,326 ----
      }
  }
  
+ static void
+ reapchild(int sig)
+ {
+     pid_t pid;
+     int status;
+ 
+     sig = SIGCHLD;
+ 
+     while (1) {
+ 	pid = waitpid(-1, &status, WNOHANG);
+ 	if (pid <= 0)
+ 	    break;
+ 	numchildren--;
+ 	if (verbosity >= 4)
+ 	    syslog(LOG_INFO, "pid %d exits, numchildren=%d", pid, numchildren);
+     }
+ }
+ 
  static int split_port(char **ap, char **pp)
  {
      char *a, *p;
***************
*** 347,355 ****
      { "port-range",  1, NULL, 'R' },
      { "map-file",    1, NULL, 'm' },
      { "pidfile",     1, NULL, 'P' },
      { NULL, 0, NULL, 0 }
  };
! static const char short_options[] = "46cspvVlLa:B:u:U:r:t:T:R:m:P:";
  
  int main(int argc, char **argv)
  {
--- 381,390 ----
      { "port-range",  1, NULL, 'R' },
      { "map-file",    1, NULL, 'm' },
      { "pidfile",     1, NULL, 'P' },
+     { "children",    1, NULL, 'C' },
      { NULL, 0, NULL, 0 }
  };
! static const char short_options[] = "46cspvVlLa:B:u:U:r:t:T:R:m:P:C:";
  
  int main(int argc, char **argv)
  {
***************
*** 383,395 ****
  #endif
      const char *pidfile = NULL;
      u_short tp_opcode;
  
      /* basename() is way too much of a pain from a portability standpoint */
  
      p = strrchr(argv[0], '/');
      __progname = (p && p[1]) ? p + 1 : argv[0];
  
!     openlog(__progname, LOG_PID | LOG_NDELAY, LOG_DAEMON);
  
      srand(time(NULL) ^ getpid());
  
--- 418,431 ----
  #endif
      const char *pidfile = NULL;
      u_short tp_opcode;
+     sigset_t childmask, childunmask;
  
      /* basename() is way too much of a pain from a portability standpoint */
  
      p = strrchr(argv[0], '/');
      __progname = (p && p[1]) ? p + 1 : argv[0];
  
!     openlog(__progname, LOG_PID | LOG_NDELAY, LOGFACIL);
  
      srand(time(NULL) ^ getpid());
  
***************
*** 508,513 ****
--- 544,554 ----
          case 'P':
              pidfile = optarg;
              break;
+ 	case 'C':
+ 	    maxchildren = atoi(optarg);
+ 	    if (maxchildren < 0)
+ 		maxchildren = 0;
+ 	    break;
          default:
              syslog(LOG_ERR, "Unknown option: '%c'", optopt);
              break;
***************
*** 767,783 ****
  #ifndef __CYGWIN__
          set_socket_nonblock(fd, 1);
  #endif
      }
  
      /* Disable path MTU discovery */
      pmtu_discovery_off(fd);
  
!     /* This means we don't want to wait() for children */
  #ifdef SA_NOCLDWAIT
!     set_signal(SIGCHLD, SIG_IGN, SA_NOCLDSTOP | SA_NOCLDWAIT);
  #else
!     set_signal(SIGCHLD, SIG_IGN, SA_NOCLDSTOP);
  #endif
  
      /* Take SIGHUP and use it to set a variable.  This
         is polled synchronously to make sure we don't
--- 808,834 ----
  #ifndef __CYGWIN__
          set_socket_nonblock(fd, 1);
  #endif
+ 	/* child max only applies to standalone server */
+ 	maxchildren = 0;
      }
  
      /* Disable path MTU discovery */
      pmtu_discovery_off(fd);
  
!     if (maxchildren == 0) {
! 	/* This means we don't want to wait() for children */
  #ifdef SA_NOCLDWAIT
! 	set_signal(SIGCHLD, SIG_IGN, SA_NOCLDSTOP | SA_NOCLDWAIT);
  #else
! 	set_signal(SIGCHLD, SIG_IGN, SA_NOCLDSTOP);
  #endif
+     } else {
+ 	set_signal(SIGCHLD, reapchild, SA_NOCLDSTOP);
+ 	sigemptyset(&childmask);
+ 	sigaddset(&childmask, SIGCHLD);
+ 	sigprocmask(SIG_BLOCK, &childmask, &childunmask);
+     }
+     numchildren = 0;
  
      /* Take SIGHUP and use it to set a variable.  This
         is polled synchronously to make sure we don't
***************
*** 846,855 ****
--- 897,912 ----
          tv_waittime.tv_sec = waittime;
          tv_waittime.tv_usec = 0;
  
+ 	if (maxchildren )
+ 	    sigprocmask(SIG_UNBLOCK, &childmask, 0);
  
          /* Never time out if we're in standalone mode */
          rv = select(fdmax + 1, &readset, NULL, NULL,
                      standalone ? NULL : &tv_waittime);
+ 
+ 	if (maxchildren)
+ 	    sigprocmask(SIG_BLOCK, &childmask, 0);
+ 
          if (rv == -1 && errno == EINTR)
              continue;           /* Signal caught, reloop */
  
***************
*** 915,920 ****
--- 972,1051 ----
              }
          }
  
+ 	if (maxchildren) {
+ 	    if (numchildren == maxchildren) {
+ 		struct timeval t0, t1;
+ 		unsigned long dt;
+ 
+ 		gettimeofday(&t0, NULL);
+ 		if (verbosity >= 4)
+ 		    syslog(LOG_INFO, "no children, delaying request");
+ 		while (numchildren == maxchildren)
+ 		    sigsuspend(&childunmask);
+ 		gettimeofday(&t1, NULL);
+ 		dt = (t1.tv_sec - t0.tv_sec) * 1000000 +
+ 			(t1.tv_usec - t0.tv_usec);
+ 		if (verbosity >= 4) {
+ 		    u_short sport;
+ 		    tmp_p = (char *)inet_ntop(from.sa.sa_family,
+ 					      SOCKADDR_P(&from),
+ 					      tmpbuf, INET6_ADDRSTRLEN);
+ 		    if (!tmp_p) {
+ 			tmp_p = tmpbuf;
+ 			strcpy(tmpbuf, "???");
+ 			sport = 0;
+ 		    } else
+ 			sport = ntohs(SOCKPORT(&from));
+ 		    syslog(LOG_INFO,
+ 			   "%s/%d: request delayed for %lu.%03lu seconds",
+ 			   tmp_p, sport,
+ 			   dt / 1000000, (dt / 1000) % 1000);
+ 		}
+ 		/*
+ 		 * XXX if delayed too long, clients associated with many of
+ 		 * the requests in the queue have probably timed out and
+ 		 * moved on. We should not be firing up child processes to
+ 		 * deal with these requests, as they will just sit idle for
+ 		 * TIMEOUT_LIMIT * timeout seconds (63 seconds by default)
+ 		 * waiting for a request that will never come.  "too long"
+ 		 * here is basically the minimal timeout value of the client;
+ 		 * we don't know that, so just use ours. For now we just
+ 		 * drop *any* pending requests.
+ 		 */
+ 		if (dt >= rexmtval) {
+ 		    int tossed = 1;
+ 		    while (1) {
+ 			FD_ZERO(&readset);
+ 			if (fd4 >= 0)
+ 			    FD_SET(fd4, &readset);
+ 			if (fd6 >= 0)
+ 			    FD_SET(fd6, &readset);
+ 			tv_waittime.tv_sec = 0;
+ 			tv_waittime.tv_usec = 0;
+ 			rv = select(fdmax + 1, &readset, NULL, NULL,
+ 				    &tv_waittime);
+ 			if (rv <= 0)
+ 			    break;
+ 			if ((fd4 >= 0) && FD_ISSET(fd4, &readset))
+ 			    fd = fd4;
+ 			else if ((fd6 >= 0) && FD_ISSET(fd6, &readset))
+ 			    fd = fd6;
+ 			n = myrecvfrom(fd, buf, sizeof(buf), 0,
+ 				       (struct sockaddr *)&from, &fromlen,
+ 				       &myaddr);
+ 			if (n < 0)
+ 			    break;
+ 			tossed++;
+ 		    }
+ 		    if (verbosity >= 4)
+ 			syslog(LOG_INFO,
+ 			       "dropped %d requests due to excessive delay",
+ 			       tossed);
+ 		    continue;
+ 		}
+ 	    }
+ 	}
+ 
          /*
           * Now that we have read the request packet from the UDP
           * socket, we fork and go back to listening to the socket.
***************
*** 925,930 ****
--- 1056,1064 ----
              exit(EX_OSERR);     /* Return to inetd, just in case */
          } else if (pid == 0)
              break;              /* Child exit, parent loop */
+ 
+ 	if (maxchildren)
+ 	    numchildren++;
      }
  
      /* Child process: handle the actual request here */
***************
*** 938,944 ****
         syslog daemon gets restarted by the time we get here. */
      if (secure && standalone) {
          closelog();
!         openlog(__progname, LOG_PID | LOG_NDELAY, LOG_DAEMON);
      }
  
  #ifdef HAVE_TCPWRAPPERS
--- 1072,1078 ----
         syslog daemon gets restarted by the time we get here. */
      if (secure && standalone) {
          closelog();
!         openlog(__progname, LOG_PID | LOG_NDELAY, LOGFACIL);
      }
  
  #ifdef HAVE_TCPWRAPPERS
***************
*** 1119,1141 ****
                  exit(0);
              }
              if (verbosity >= 1) {
                  tmp_p = (char *)inet_ntop(from.sa.sa_family, SOCKADDR_P(&from),
                                            tmpbuf, INET6_ADDRSTRLEN);
                  if (!tmp_p) {
                      tmp_p = tmpbuf;
                      strcpy(tmpbuf, "???");
!                 }
                  if (filename == origfilename
                      || !strcmp(filename, origfilename))
!                     syslog(LOG_NOTICE, "%s from %s filename %s\n",
                             tp_opcode == WRQ ? "WRQ" : "RRQ",
!                            tmp_p, filename);
                  else
                      syslog(LOG_NOTICE,
!                            "%s from %s filename %s remapped to %s\n",
                             tp_opcode == WRQ ? "WRQ" : "RRQ",
!                            tmp_p, origfilename,
!                            filename);
              }
              ecode =
                  (*pf->f_validate) (filename, tp_opcode, pf, &errmsgptr);
--- 1253,1279 ----
                  exit(0);
              }
              if (verbosity >= 1) {
+ 		u_short sport;
                  tmp_p = (char *)inet_ntop(from.sa.sa_family, SOCKADDR_P(&from),
                                            tmpbuf, INET6_ADDRSTRLEN);
                  if (!tmp_p) {
                      tmp_p = tmpbuf;
                      strcpy(tmpbuf, "???");
! 		    sport = 0;
!                 } else
! 		    sport = ntohs(SOCKPORT(&from));
                  if (filename == origfilename
                      || !strcmp(filename, origfilename))
!                     syslog(LOG_NOTICE, "%s/%d: %s for %s\n",
! 			   tmp_p, sport,
                             tp_opcode == WRQ ? "WRQ" : "RRQ",
!                            filename);
                  else
                      syslog(LOG_NOTICE,
!                            "%s/%d: %s for %s (remapped to %s)\n",
! 			   tmp_p, sport,
                             tp_opcode == WRQ ? "WRQ" : "RRQ",
!                            origfilename, filename);
              }
              ecode =
                  (*pf->f_validate) (filename, tp_opcode, pf, &errmsgptr);
***************
*** 1168,1173 ****
--- 1306,1327 ----
          else
              (*pf->f_send) (pf, NULL, 0);
      }
+ 
+     if (verbosity >= 3) {
+ 	u_short sport;
+ 	tmp_p = (char *)inet_ntop(from.sa.sa_family, SOCKADDR_P(&from),
+ 				  tmpbuf, INET6_ADDRSTRLEN);
+ 	if (!tmp_p) {
+ 	    tmp_p = tmpbuf;
+ 	    strcpy(tmpbuf, "???");
+ 	    sport = 0;
+ 	} else
+ 	    sport = ntohs(SOCKPORT(&from));
+ 	syslog(LOG_NOTICE, "%s/%d: %s done\n",
+ 	       tmp_p, sport,
+ 	       tp_opcode == WRQ ? "WRQ" : "RRQ");
+     }
+ 
      exit(0);                    /* Request completed */
  }
  
***************
*** 1486,1491 ****
--- 1640,1647 ----
      fd = open(filename, mode == RRQ ? rmode : wmode, 0666);
      if (fd < 0) {
          switch (errno) {
+ 	case EACCES:
+ 	    return EACCESS;
          case ENOENT:
          case ENOTDIR:
              return ENOTFOUND;
***************
*** 1550,1560 ****
  {
      struct tftphdr *dp;
      struct tftphdr *ap;         /* ack packet */
-     static u_short block = 1;   /* Static to avoid longjmp funnies */
      u_short ap_opcode, ap_block;
      unsigned long r_timeout;
      int size, n;
  
      if (oap) {
          timeout = rexmtval;
          (void)sigsetjmp(timeoutbuf, 1);
--- 1706,1716 ----
  {
      struct tftphdr *dp;
      struct tftphdr *ap;         /* ack packet */
      u_short ap_opcode, ap_block;
      unsigned long r_timeout;
      int size, n;
  
+     block = 1;
      if (oap) {
          timeout = rexmtval;
          (void)sigsetjmp(timeoutbuf, 1);
***************
*** 1650,1661 ****
      int n, size;
      /* These are "static" to avoid longjmp funnies */
      static struct tftphdr *ap;  /* ack buffer */
-     static u_short block = 0;
      static int acksize;
      u_short dp_opcode, dp_block;
      unsigned long r_timeout;
  
      dp = w_init();
      do {
          timeout = rexmtval;
  
--- 1806,1817 ----
      int n, size;
      /* These are "static" to avoid longjmp funnies */
      static struct tftphdr *ap;  /* ack buffer */
      static int acksize;
      u_short dp_opcode, dp_block;
      unsigned long r_timeout;
  
      dp = w_init();
+     block = 0;
      do {
          timeout = rexmtval;
  
***************
*** 1780,1793 ****
      length += 4;                /* Add space for header */
  
      if (verbosity >= 2) {
          tmp_p = (char *)inet_ntop(from.sa.sa_family, SOCKADDR_P(&from),
                                    tmpbuf, INET6_ADDRSTRLEN);
          if (!tmp_p) {
              tmp_p = tmpbuf;
              strcpy(tmpbuf, "???");
!         }
!         syslog(LOG_INFO, "sending NAK (%d, %s) to %s",
!                error, tp->th_msg, tmp_p);
      }
  
      if (send(peer, buf, length, 0) != length)
--- 1936,1953 ----
      length += 4;                /* Add space for header */
  
      if (verbosity >= 2) {
+ 	u_short sport;
          tmp_p = (char *)inet_ntop(from.sa.sa_family, SOCKADDR_P(&from),
                                    tmpbuf, INET6_ADDRSTRLEN);
          if (!tmp_p) {
              tmp_p = tmpbuf;
              strcpy(tmpbuf, "???");
! 	    sport = 0;
!         } else
! 	    sport = ntohs(SOCKPORT(&from));
!         syslog(LOG_INFO, "%s/%d: NAK (%d, %s) sent",
! 	       tmp_p, sport,
! 	       error, tp->th_msg);
      }
  
      if (send(peer, buf, length, 0) != length)
diff -rcN tftp-hpa-5.2.orig/tftpd/tftpd.rules tftp-hpa-5.2/tftpd/tftpd.rules
*** tftp-hpa-5.2.orig/tftpd/tftpd.rules	Wed Dec 31 17:00:00 1969
--- tftp-hpa-5.2/tftpd/tftpd.rules	Mon Jun 29 16:15:41 2015
***************
*** 0 ****
--- 1,37 ----
+ #
+ # Rules for chroot /tftpboot setup.  Just strip off the /tftpboot.
+ #
+ # This file has three fields: operation, regex, remapping
+ #
+ # The operation is a combination of the following letters:
+ #
+ # r - rewrite the matched string with the remapping pattern
+ # i - case-insensitive matching
+ # g - repeat until no match (used with "r")
+ # e - exit (with success) if we match this pattern, do not process
+ #     subsequent rules
+ # s - start over from the first rule if we match this pattern
+ # a - abort (refuse the request) if we match this rule
+ # G - this rule applies to TFTP GET requests only
+ # P - this rule applies to TFTP PUT requests only
+ #
+ # The regex is a regular expression in the style of egrep(1).
+ #
+ # The remapping is a pattern, all characters are verbatim except \
+ # \0 copies the full string that matched the regex
+ # \1..\9 copies the 9 first (..) expressions in the regex
+ # \\ is an escaped \
+ #
+ # "#" begins a comment, unless \-escaped
+ #
+ r	^/tftpboot			# Remove prefix since we chroot
+ #
+ # Additional Emulab rules to deal with Freebsd loader-based pxeboot
+ # which wants to look for "kernel" in about a zillion different places
+ # (ok, its only two...) when loading the MFS.  Since the kernel is only
+ # in one place, and the only reason the lookup on it would ever fail is
+ # due to network load, lets just map the alternatives back to the primary
+ # location, effectively forcing retries.
+ #
+ r       ^/(.*/boot)/kernel/(.*)$        /\1/\2
+ r       ^/(.*/boot)/modules/(.*)$       /\1/\2
