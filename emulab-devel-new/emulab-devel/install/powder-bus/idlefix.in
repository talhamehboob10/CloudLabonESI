#!/usr/bin/perl -w
#
# Copyright (c) 2005-2020 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use strict;
use Getopt::Std;
use Data::Dumper;

#
# At boss boot. watch for ed1 and n300-1 being in an odd state that
# prevents idlepower from turning them off. Temporary until we have
# power boards, that will remember the power state from the previous
# day
#
sub usage()
{
    print "Usage: idlefix [-n]\n";
    exit(1);
}
my $optlist   = "dn";
my $debug     = 0;
my $impotent  = 0;

#
# Configure variables
#
my $TB         = "@prefix@";
my $TBOPS      = "@TBOPSEMAIL@";
my $PROTOUSER  = "elabman";
my $WAP        = "$TB/sbin/wap";
my $SUDO       = "/usr/local/bin/sudo";
my $NODEREBOOT = "$TB/bin/node_reboot";
my $POWER      = "$TB/bin/power";

use lib "@prefix@/lib";
use emdb;
use Node;
use libtestbed;

# Protos
sub fatal($);

#
# Turn off line buffering on output
#
$| = 1; 

my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"n"})) {
    $impotent = 1;
}

#
# Check ed1. If it is not allocated but in the ISUP state, then it
# most likely booted from the disk before boss came up; there is a
# delay before the control node starts the boss VM, to give the
# battery a few minutes to charge, and to ignore transient ignition
# starts.
#
my $node = Node->Lookup("ed1");
if (!defined($node)) {
    fatal("No such node ed1");
}
if (!$node->IsReserved()) {
    print "ed1 is in the free pool.\n";
    if (!$impotent) {
	print "Powering off/on ed1\n";
	system("$SUDO $POWER off ed1-real");
	sleep(10);
	system("$SUDO $POWER on ed1-real");
    }
}

#
# The n300 is an ALWAYSUP node, so if its free we can just power it off.
#
$node = Node->Lookup("n300-1");
if (!defined($node)) {
    fatal("No such node n300-1");
}
if (!$node->IsReserved()) {
    print "n300 is in the free pool.\n";
    if (!$impotent) {
	print "Powering off n300-1\n";
	system("$SUDO -u elabman $WAP $POWER off n300-1");
	if ($?) {
	    fatal("Could not power off n300-1");
	}
    }
}
exit(0);

sub fatal($)
{
    my ($msg) = @_;

    #
    # Send a message to the testbed list. 
    #
    SENDMAIL($TBOPS,
	     "Bus idle fix failed",
	     $msg,
	     $TBOPS);

    die("*** $0:\n".
	"    $msg\n");
}
