#!/usr/bin/perl -w
#
# Copyright (c) 2008-2020 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use File::Basename;
use Date::Parse;

sub usage()
{
    print STDERR "Usage: batterystats\n";
    exit(-1);
}
my $optlist   = "";

#
# Configure variables
#
my $TB		= "@prefix@";
my $WAP		= "$TB/sbin/withadminprivs";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Protos
sub fatal($);
	  
#
# Turn off line buffering on output
#
$| = 1; 

# Load the Testbed support stuff.
use lib "@prefix@/lib";
use emdb;
use emdbi;

my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}

my $DBNUM;
if (emdbi::DBExists("battery_monitor")) {
    $DBNUM = emdbi::NewTBDBHandle("battery_monitor");
}
else {
    fatal("No battery_monitor ddatabase!");
}

my $query_result =
    emdbi::DBQueryFatalN($DBNUM,
			 "select stamp,onbattery from battery_monitor ".
			 "order by stamp asc");

my $start;
while (my ($when, $onBattery) = $query_result->fetchrow_array()) {
    my $stamp = str2time($when);
    if (!$stamp) {
	print STDERR "Cannot parse datestamp $when\n";
	next;
    }
    if ($onBattery) {
	if (!defined($start)) {
	    $start = $stamp;
	}
    }
    else {
	if (defined($start)) {
	    my $diff = int(($stamp - $start) / 60);
	    if ($diff > 59) {
		$diff = int($diff / 60);
		print "$when: $diff hours\n";
	    }
	    else {
		print "$when: $diff minutes\n";
	    }
	}
	$start = undef;
    }
}
exit(0);

sub fatal($)
{
    my ($msg) = @_;

    die("*** $0:\n".
	"    $msg\n");
}
