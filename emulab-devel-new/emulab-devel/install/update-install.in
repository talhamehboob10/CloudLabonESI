#!/usr/bin/perl -w
#
# Copyright (c) 2010-2012 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use Data::Dumper;

#
# Update DB.
#
sub usage()
{
    print STDERR "Usage: update-install [-v | -n | -l] [-s] [-f] [<version>]\n";
    exit(-1);
}
my $optlist = "dsfvp:qa:cinl";
my $debug   = 0;
my $force   = 0;
my $single  = 0;
my $verify  = 0;
my $quiet   = 0;
my $check   = 0;
my $impotent= 0;
my $logit   = 0;
my $path    = ".";
my $phase;
my $version;
my $verify_count = 0;
my $logfp;

#
# Configure variables
#
my $TB	      = "@prefix@";
my $TBOPS     = "@TBOPSEMAIL@";
my $logfile   = "/var/tmp/update-install.log";

# Protos
sub Fatal($);

# un-taint path
$ENV{'PATH'} = '/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Do not modify the include path if it was specified when invoked.
# This allows update to run from the build tree.
#
BEGIN
{
    eval "require emdbi";
    if ($@) {
	if (-e "../Makeconf") {
	    # Prior to first install or running from object dir.
	    unshift(@INC, "../db");
	    unshift(@INC, "@top_srcdir@/install");
	    unshift(@INC, "@top_srcdir@/tbsetup");
	    unshift(@INC, "../tbsetup");
	}
	else {
	    unshift(@INC, "@prefix@/lib");
	}
    }
}
use emdb;
use libtestbed;
use libinstall;
use installvars;

#
# Parse command arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"a"})) {
    $phase = $options{"a"};
    Fatal("Phase (-a) must be either 'pre' or 'post'")
	if (! ($phase eq "pre" || $phase eq "post"));
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"c"})) {
    $check = 1;
}
if (defined($options{"i"}) || defined($options{"n"})) {
    $impotent = 1;
}
if (defined($options{"f"})) {
    $force = 1;
}
if (defined($options{"l"})) {
    $logit = 1;
}
if (defined($options{"v"})) {
    $verify = 1;
}
if (defined($options{"q"})) {
    $quiet = 1;
}
if (defined($options{"p"})) {
    $path = $options{"p"};
}
if (defined($options{"s"})) {
    $single = 1;
    if (@ARGV != 1) {
	Fatal("Must provide a version argument when using -s option");
    }
}
if (@ARGV > 1) {
    usage();
}
$version = shift()
    if (@ARGV);

#
# Must be root if actually doing this.
#
if ($UID && !($impotent || $check || $verify)) {
    Fatal("This script must be run as root! Maybe use sudo?")
}

#
# This is a utility routine that callee scripts can use to set a DB
# flag to indicate that a reboot is require.
#
sub MarkForReboot($)
{
    my ($version) = @_;

    print "*** $version says reboot is (will be) required!\n"
	if ($impotent);
    
    emdbi::DBQueryFatal("replace into version_info set ".
			"  value='1', name='needreboot'");
    return 0;
}

if ($impotent || $logit) {
    if (-e $logfile) {
	system("/bin/mv -f $logfile ${logfile}.$$") == 0
	    or Fatal("Could not back up $logfile");
    }
    
    open(LOGFP, "> $logfile")
	or Fatal("Could not open $logfile");
    $logfp = *LOGFP;

    if ($impotent) {
	SET_IMPOTENT_MODE($logfp);
    }
    else {
	SET_LOG_OUTPUT($logfp);
    }
    print "A more detailed log file is being written to $logfile\n";
    sleep(2);
}

#
# If no version number provided, then grab it from the DB.
#
if (!defined($version)) {
    my $query_result =
	DBQueryFatal("select value from version_info ".
		     "where name='install'");
    if (!$query_result || !$query_result->numrows) {
	$version = "5.0";

	DBQueryFatal("insert into version_info ".
		     "values ('install', '$version')");
	DBQueryFatal("insert into version_info ".
		     "values ('needreboot', '0')");
    }
    else {
	($version) = $query_result->fetchrow_array();
    }
}
if (! ($version =~ /^[\d\.]+$/)) {
    Fatal("'$version' does not look like a reasonable starting version.");
}
# Start off with reboots not needed. 
DBQueryFatal("replace into version_info ".
	     "values ('needreboot', '0')");

#
# Split apart the version number. Assumed to be in dotted notation.
#
my @dots  = split(/\./, "$version");
my $start = pop(@dots);

#
# If no dots, then assume the current directory. 
#
if (@dots) {
    my $dir = join("/", @dots);
    $path = "$path/$dir";
}
unshift(@INC, "$path");

my @files;

if ($single) {
    Fatal("Update file $start does not exist")
	if (! -e "$path/$start");
    # Just the one file.
    @files = ($start);
}
else {
    #
    # Open up the current directory. We want all numbered files.
    #
    opendir(DIR, $path) or
	Fatal("Could not opendir the current directory");
    @files  = grep { /^\d*$/ } readdir(DIR);
    closedir(DIR);
}

#
# Sort them since we we want to start at the right file, and proceed
# in order.
#
@files = sort {$a <=> $b} @files;

#
# Now process each file starting at the start version.
#
sub RunUpdates($)
{
    my ($phase) = @_;
    
    foreach my $file (@files) {
	next
	    if (!$force && !$single && $file <= $start);
	next
	    if ($single && $file != $start);

	my $fullpath = join("/", @dots) . "/$file";
	my $revision = join(".", @dots);
	$revision .= (@dots ? "." : "") . $file;

	if ($verify) {
	    print "Need install update $fullpath\n";
	    $verify_count++;
	    next;
	}

	if ($check) {
	    print "Syntax checking update $fullpath\n";
	}
	elsif ($impotent) {
	    print "*** Processing (impotent mode) update $fullpath\n";
	}
	else {
	    print "*** Processing update $fullpath\n";
	}

	# Undefine this to make sure we get a new version each file.
	undef &InstallUpdate;

	# This just loads the file.
	my $return = do $file;
	if (!defined($return)) {
	    Fatal("  could not parse $fullpath: $@") if $@;
	    Fatal("  could not do $fullpath: $!")    if $!;
	}
	next
	    if ($check);
	
	SET_TESTBED_VERSION($revision);
    
	# Then we run it.
	if (InstallUpdate($revision, $phase, $impotent) != 0) {
	    Fatal("  returned non-zero; aborting.\n");
	}
	# Mark that we have done it. 
	DBQueryFatal("update version_info set value='$revision' ".
		     "where name='install'")
	    if (!$single && !$force && !$impotent && $phase eq "post");
    }
}

if ($verify) {
    RunUpdates("pre");
    
    exit($verify_count)
	if (!$verify_count || $quiet);

    print "*** You have install update scripts that have not been run.\n";
    print "    As a safety measure, you will not be able to install until\n";
    print "    this is resolved.\n";
    exit($verify_count);
}
elsif ($check) {
    print "Syntax checking updates ...\n";
    RunUpdates("pre");
    exit(0);
}
elsif ($impotent) {
    print "Running (impotent mode) pre-install updates  ...\n";
    print "More detailed info saved to $logfile\n";
    RunUpdates("pre");
    print "Running (impotent mode) post-install updates  ...\n";
    RunUpdates("post");
    exit(0);
}

#
# When no phase is specifed, run both phases.
#
if (!defined($phase)) {
    print "Running pre-install updates ...\n";
    RunUpdates("pre");
    print "Running post-install updates ...\n";
    RunUpdates("post");
    exit(0);
}
RunUpdates($phase);
exit(0);

sub Fatal($)
{
    my ($msg) = @_;

    die("*** $0:\n".
	"    $msg\n");
}
