#!/usr/bin/perl -w
#
# Copyright (c) 2007-2012 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;
use strict;
use XML::Simple;
use Data::Dumper;

#
# Load in descriptors for images and osids. The input to this script is
# a file created with the dump-descriptors script in this directory,
#
sub usage()
{
    print STDOUT "Usage: load-descriptors [-f] [-a] filename\n";
    exit(-1);
}
my $optlist = "dfa";
my $force   = 0;
my $debug   = 0;
my $alltypes= 0;

#
# These are the OSIDs that are used to populate the osidtoimageid table
# using their nextosid entries.
#
my @standard_osnames  = ('RHL-STD', 'FBSD-STD');

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";
my $TBLOGS      = "@TBLOGSEMAIL@";
my $BOSSNODE	= "@BOSSNODE@";
my $NEWOSID     = "$TB/bin/newosid";
my $NEWIMAGE    = "$TB/bin/newimageid";
my $NEWIMAGE_EZ = "$TB/bin/newimageid_ez";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;
use User;
use Project;
use OSinfo;
use Image;

#$libdb::DBQUERY_DEBUG = 1;

# Local
my %osidtoimageid  = ();
my %local_osids    = ();
my %local_imageids = ();

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/sbin:/usr/bin:";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Protos
sub fatal($);
sub ParseIt($);

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"a"})) {
    $alltypes = 1;
}
if (defined($options{"f"})) {
    $force = 1;
}
usage()
    if (@ARGV != 1);
my $filename = $ARGV[0];

#
#
#
my $protouser = User->Lookup("elabman");
if (!defined($protouser)) {
    fatal("Could not look up object for protouser (elabman)");
}
my $PROTOPROJ = TBOPSPID();
my %mappings  = ();
my %images    = ();
my %osinfos   = ();

#
# Open tempfile.
#
open(OUTPUT, "$filename") or
    die("Could not open $filename for reading!\n");

my $which = "";
my $tmp   = "";

while (<OUTPUT>) {
    next
	if ($_ =~ /descriptors\>/);
	
    if ($_ =~ /\<mapping/) {
	$which = "mapping";
    }
    elsif ($_ =~ /\<osid\>/) {
	$which = "osid";
    }
    elsif ($_ =~ /\<image\>/) {
	$which = "image";
    }
    if ($_ =~ /\<\/mapping\>/) {
	my $mapping = ParseIt($tmp . $_);
	$mappings{$mapping->{'name'}} = $mapping->{'value'};
	$tmp = "";
	next;
    }
    elsif ($_ =~ /\<\/osid\>/) {
	my $osinfo = ParseIt($tmp . $_);
	$osinfos{$osinfo->{'attribute'}->{"osname"}->{'value'}} =
	    [$osinfo, $tmp . $_];
	$tmp = "";
	next;
    }
    elsif ($_ =~ /\<\/image\>/) {
	my $image = ParseIt($tmp . $_);
	$images{$image->{'attribute'}->{"imagename"}->{'value'}} =
	    [$image, $tmp . $_];
	$tmp = "";
	next;
    }
    $tmp .= $_;
}
close(OUTPUT);

#
# Must create the OSids first since the images reference them. But must
# do this in two passes since there are nextosid references. But, the EZ
# imageIDs also create OSids that can be referenced by nextosid, so must
# do those after the first OSid pass but before the second one.
#
foreach my $osname (keys(%osinfos)) {
    my ($xmlparse, $string) = @{ $osinfos{$osname} };
    my $nextosid  = exists($xmlparse->{'attribute'}->{"nextosid"});

    next
	if ($nextosid);

    my $osinfo = OSinfo->Lookup("$PROTOPROJ,$osname");
    if (defined($osinfo) && !$force) {
	print STDERR "OS $osname already exists. Skipping; use -f option\n";
	next;
    }
    open(NEW, "| $NEWOSID -")
	or fatal("Cannot start $NEWOSID");
    print NEW $string;
    if (!close(NEW)) {
	print STDERR "$string\n";
	fatal("$osname could not be created");
    }
}
#
# Do the EZ images
#
foreach my $imagename (keys(%images)) {
    my ($xmlparse, $string) = @{ $images{$imagename} };
    my $ezid  = exists($xmlparse->{'attribute'}->{"OS"});
    my $which = ($ezid ? "$NEWIMAGE_EZ -a " : $NEWIMAGE);

    next
	if (! $ezid);

    my $image = Image->Lookup("$PROTOPROJ,$imagename");
    if (defined($image) && !$force) {
	print STDERR
	    "Image $imagename already exists. Skipping; use -f option\n";
	next;
    }
    open(NEW, "| $which -f -")
	or fatal("Cannot start $which");
    print NEW $string;
    if (!close(NEW)) {
	print STDERR "$string\n";
	fatal("Image $imagename could not be created");
    }
}
#
# Now the rest of the OSids.
#
foreach my $osname (keys(%osinfos)) {
    my ($xmlparse, $string) = @{ $osinfos{$osname} };
    my $nextosid  = exists($xmlparse->{'attribute'}->{"nextosid"});

    next
	if (!$nextosid);

    my $osinfo = OSinfo->Lookup("$PROTOPROJ,$osname");
    if (defined($osinfo) && !$force) {
	print STDERR "OS $osname already exists. Skipping; use -f option\n";
	next;
    }
    open(NEW, "| $NEWOSID -")
	or fatal("Cannot start $NEWOSID");
    print NEW $string;
    if (!close(NEW)) {
	print STDERR "$string\n";
	fatal("$osname could not be created");
    }
}
#
# And the rest of the images.
#
foreach my $imagename (keys(%images)) {
    my ($xmlparse, $string) = @{ $images{$imagename} };
    my $ezid  = exists($xmlparse->{'attribute'}->{"OS"});
    my $which = ($ezid ? $NEWIMAGE_EZ : $NEWIMAGE);

    next
	if ($ezid);

    my $image = Image->Lookup("$PROTOPROJ,$imagename");
    if (defined($image) && !$force) {
	print STDERR
	    "Image $imagename already exists. Skipping; use -f option\n";
	next;
    }
    open(NEW, "| $which -f -")
	or fatal("Cannot start $which");
    print NEW $string;
    if (!close(NEW)) {
	print STDERR "$string\n";
	fatal("Image $imagename could not be created");
    }
}
#
# Now do the nextosid mappings.
#
foreach my $osid (keys(%mappings)) {
    my $nextosid   = $mappings{$osid};
    my $osinfo     = OSinfo->Lookup("$PROTOPROJ,$osid");
    my $nextosinfo = OSinfo->Lookup("$PROTOPROJ,$nextosid");

    if (!defined($osinfo)) {
	fatal("Could not find osid $osid");
    }
    if (!defined($nextosinfo)) {
	fatal("Could not find nextosid $nextosid");
    }
    if (defined($osinfo->nextosid()) &&
	$osinfo->nextosid() != $nextosinfo->osid()) {
	my $current;

	if ($osinfo->nextosid()) {
	    $current = OSinfo->Lookup($osinfo->nextosid());
	}
	else {
	    # So bogus.
	    $current = "osid_map";
	}
	print STDERR "nextosid for $osinfo wants to be $nextosinfo, ".
	    "but its already set to $current. Skipping ...\n";
	next;
    }
    print "Setting nextosid for $osinfo to $nextosinfo\n";
    if ($osinfo->SetNextOS($nextosinfo)) {
	fatal("Could not set nextosid for $osinfo to $nextosinfo");
    }
}

exit(0);

sub ParseIt($)
{
    my ($string) = @_;

    my $xmlparse = eval { XMLin($string,
				VarAttr => 'name',
				ContentKey => '-content',
				SuppressEmpty => undef); };
    fatal($@)
	if ($@);
    
    return $xmlparse;
}

sub fatal($)
{
    my ($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}


