Making boss/ops/fs/etc. packages. This is only for the latest FreeBSD
(as of this writing, 12.2). If you need help with older packages, check out
an older version of this document.

As of FreeBSD 10, I started using the quarterly ports release at the time
of the OS release and then update the packages quarterly. For the 12.2 release,
I am currently using 2021Q1.

################ TL;DR ################

This is a condensed version of the steps below.

0. Updating the Emulab package repo (12.2 specific).

   Occasionally you will want to make sure the ports are up to date.
   We track the "quarterly" branch of ports, so within a three month
   period, it should only be updated for security fixes and critical
   problems. I am sure that using "poudriere" is the way to do this,
   but here is what I am currently doing: I just build a new set of
   packages from scratch and replace the old ones! "pkg upgrade" on
   a client seems smart enough to avoid reinstalling everything just
   because the package times have changed. It still seems to do a
   couple of mysterious updates of things that didn't change, but I
   can live with that...

   a. Make sure the ports tree in /share/freebsd/12.2/ports on ops
      is up to date. [ Note that there is not actually an svn repo branch
      called "quarterly" so you have to make sure you are tracking the
      current quarter. ]

      cd /share/freebsd/12.2/ports
      sudo svn update

   b. Make sure the Emulab ports are up to date.

      cd /share/freebsd/12.2/ports/misc
      diff -r ~mike/testbed-clean/install/ports .
      <update anything that is out of sync>

   c. Swapin a FreeBSD 12.2 node (experiment emulab-ops/freebsd112-64).
      This will give you a d430 which is the best thing to use.

   d. Mount the ports and source trees.

      cd /usr
      sudo mount -o ro fs:/share/freebsd/12.2/ports /usr/ports
      sudo mount -o ro fs:/share/freebsd/12.2/src /usr/src
      
   e. Make sure /etc/make.conf is up to date. It should have:

DEFAULT_VERSIONS=perl5=5.32 python=3.8 python3=3.8 php=7.4 mysql=5.7 apache=2.4 tcltk=8.6
DEFAULT_VERSIONS+=ssl=base

      We also add a bunch of custom port configurations to avoid needing to
      do "make config" for a bunch of ports:

OPTIONS_UNSET=DOCS OPENGL DTRACE
www_apache24_SET+=SUEXEC
editors_emacs_UNSET+=DBUS GCONF GSETTINGS HARFBUZZ LCMS2 M17N OTF SCROLLBARS \
                     XFT XIM CAIRO GIF MAGICK PNG SVG TIFF XPM OSS GTK3
editors_emacs_SET+=XAW
devel_subversion_UNSET+=GPG_AGENT
devel_cmake_UNSET+=MANPAGES
devel_doxygen_UNSET+=LATEX
security_py-certbot_UNSET+=MANPAGES

      The DTRACE option seems to be new (as of 12/8/20) and broke a couple
      of ports:
      - perl5.32 (configure error)
      - tcl86 (build error)

   f. (NEW for 2020!) Create a /usr/obj filesystem. There is not enough
      space in the root filesystem to hold all the build trees. You need
      on the order of 25GB, so just use the rest of the root disk
      (YOU MUST DO THIS BEFORE REMOVING /usr/local!):

      sudo /usr/local/etc/emulab/mkextrafs.pl /usr/obj

      Okay, so you screwed up and didn't do this before you removed
      /usr/local. You can still do it manaully on the node with:

      sudo gpart add -i 4 -t freebsd ada0
      sudo newfs /dev/ada0s4
      sudo mount /dev/ada0s4 /usr/obj

   g. Cleanse the port environment:

      sudo tcsh
      setenv ASSUME_ALWAYS_YES true
      pkg delete -af
      rm -rf /usr/local/*
      rm -rf /var/db/ports/*
      rm -rf /usr/obj/ports/usr/ports/*

   h. Make sure the package tool is installed. Sometimes you can just:

      pkg info

      and it will reinstall the pkg tool. However, sometimes you will
      run up against certificate issues, the it won't reinstall it.
      In that case, I have found the easiest thing to do is:

      pushd /share/freebsd/12.2/packages
      pkg add pkg-*
      pkg add ca_root*
      popd

   i. Make sure port options are correctly set:

      This step is no longer needed given the /etc/make.conf options above.

   j. Build em all:

       setenv PACKAGES /usr/obj/ports/packages
       rm -f $PACKAGES/All/*
       setenv myFLAGS DISABLE_VULNERABILITIES=1
       foreach d (boss ops fs protogeni genilib tipserv extras)
           (cd /usr/ports/misc/emulab-$d ; make $myFLAGS clean all install)
	   (cd /usr/ports/misc/emulab-$d ; make $myFLAGS clean)
       end

   k. (Mothership only) Build the Mothership packages
       foreach d (msboss msops)
           (cd /usr/ports/misc/emulab-$d ; make $myFLAGS clean all install)
	   (cd /usr/ports/misc/emulab-$d ; make $myFLAGS clean)
       end

   l. Check for vulnerabilities. If any are revealed, you can either try
      to update /share/freebsd/12.2/ports with a newer version of the port
      (e.g., from /share/freebsd/current/ports) or just live with the
      vulnerability for now.

       pkg audit -F

   m. Create the packages:

       pkg create -an -o $PACKAGES/All/

   n. Create the alternate ipmitool package. The Moonshot chassis require
      an older ipmitool embodied in the emulab-ipmitool-old port. It conflicts
      with the regular packages so we have to remove that first.

       pkg delete -f ipmitool
       cd /usr/ports/misc/emulab-ipmitool-old
       make BATCH=1 clean all install ; make BATCH=1 package clean

   o. Save packages and update tarball and repo. On boss:

       set www=/usr/testbed/www
       cd /share/freebsd/12.2
       mkdir packages
       scp pcXXX:/usr/obj/ports/packages/All/\* packages/
       sudo chown -R root:wheel packages

      For testing purposes (see next step), start with the ports in
      "Emulab-devel" repo.

       sudo mv $www/FreeBSD/12.2-devel/{packages,Opackages}
       sudo cp -rp packages $www/FreeBSD/12.2-devel/
       sudo pkg repo $www/FreeBSD/12.2-devel/packages

      Do the following when you are sure everything is good.
      
       set tball="FreeBSD-12.2-packages-64-`date +%Y%m%d`.tar.gz"
       sudo tar czf $tball packages
       sudo cp $tball $www/downloads/
       sudo ln -sfn $tball $www/downloads/FreeBSD-12.2-packages-64.tar.gz
       sudo mv $www/FreeBSD/12.2/{packages,Opackages}
       sudo cp -rp packages $www/FreeBSD/12.2/
       sudo pkg repo $www/FreeBSD/12.2/packages

       # tar up the ports tree that corresponds to these packages
       set tball="FreeBSD-12.2-ports.tar.gz"
       sudo tar --exclude=ports/.svn --exclude=ports/.git -czf $tball ports
       sudo cp $tball $www/downloads/

   p. Assuming you have put out the new repo in Emulab-devel above, you
      can test it by creating a config file on your test node. Put this in
      /etc/pkg/Emulab-devel.conf:
      
Emulab-devel: {
  url: "https://www.emulab.net/FreeBSD/12.2-devel/packages",
  mirror_type: NONE,
  enabled: yes
}

      Make really, really sure you are logged into the node:

        sudo tcsh
        hostname -s | grep -Eq '^(boss|ops)$' && \
            (echo 'STOP! you are on boss or ops, ^C now!'; sleep 100000; exit)

      Define some handy aliases:

        setenv ASSUME_ALWAYS_YES true
        alias PA "pkg install -r Emulab-devel"
        alias PD "pkg delete -af"
        alias PC "pkg check -Bda"
        alias PL "pkg install bsdadminscripts2 ; /usr/local/sbin/pkg_libchk"

      avoid problems with pkg:

        pkg lock pkg ca_root_nss

      and cycle through likely install combos:

        # all possible boss-install packages
        PD
        PA emulab-boss
        PA emulab-protogeni
        PA emulab-fs
        PA emulab-tipserv
        PA emulab-extras
	# for the mothership
	PA emulab-msboss
        PC
	PL

        # all possible ops-install packages
        PD
        PA emulab-ops
        PA emulab-fs
        PA emulab-genilib
        PA emulab-tipserv
        PA emulab-extras
	# for the mothership
	PA emulab-msops
        PC
	PL

        # all possible fs-install packages
        PD
        PA emulab-fs
        PA emulab-extras
        PC
	PL

        # all (someday) possible tipserv-install packages
        PD
        PA emulab-tipserv
        PA emulab-extras
        PC
	PL

   q. Random useful commands to run on the package files.

      To see what was installed (or not) by the Emulab repository:

      pkg query "%n-%v %R" | grep Emulab
      pkg query "%n-%v %R" | grep -v Emulab

      For comparing with older package sets, it is sometimes useful to
      trim off the version number, etc. if you want to see the difference
      in which ports are installed in each, regardless of version. To
      make a list of package name only:

        cd packages
        echo *.txz | xargs -n 1 -J % pkg query -F % '%n' | sort > /tmp/list

      To see what other packages "foo" needs:

        pkg info -F foo.txz -d

      To see what other packages need "foo":

        pkg info -F foo.txz -r

################ End of TL;DR ################

0. Align your ducks.

a. Make sure the ports tree in /share/freebsd/X.Y/ports has the current
   Emulab ports. They are all in the "misc" subdir. If they are out of
   date, update them and remake the ports.tar.gz tarball.

b. Allocate a node on which to build everything and load the appropriate
   OS on it. Pick a d430 if possible, for the speed and for the SSD. If you
   don't have an SSD, pick a node with multiple disks. I have an experiment
   "emulab-ops/package-builder" that allocates a d820 with three local
   blockstores to take care of step 1 below. If you use that, skip to step 2.
   Or, if you use an SSD, skip step 1 as well and just keep everything on
   the root disk (which should be large enough) in /usr/{src,ports}.

   RANDOM USEFUL PACKAGE COMMAND: to tell what options a FreeBSD package was
   built with:

       pkg query -e "%n=apache22" "%n-%v %Ok %Ov"

   replacing "apache22" with the port of interest (e.g., "perl5.20").

1. Create a couple of extra filesystems for src/ports and the build tree.

   In my emulab-ops/package-builder experiment, I create local blockstores
   /local/{src,ports,obj}.

   I put these on different disks for better performance:

       <login to the node>

       # XXX skip this section if you have blockstores
       sudo mkextrafs /local
       sudo mkextrafs -r /dev/da1 -s 0 /usr/obj
       # make sure soft updates are enabled
       sudo umount /local
       tunefs -n enable /dev/da0s4e
       sudo mount /local
       sudo umount /usr/obj
       tunefs -n enable /dev/da1s1e
       sudo mount /usr/obj

       # XXX if you have a /local/obj blockstore
       sudo rmdir /usr/obj
       sudo ln -s ../local/obj /usr/obj

       # create links and tmpdir
       sudo rmdir /usr/src /usr/ports
       sudo ln -s ../local/src /usr/src
       sudo ln -s ../local/ports /usr/ports
       sudo mkdir /local/src /local/ports /local/tmp
       sudo chmod 1777 /local/tmp

2. Install the src and ports trees. From the node do:

       cd /usr
       sudo tar xzf /share/freebsd/10.2/src.tar.gz
       sudo tar xzf /share/freebsd/10.2/ports.tar.gz

   Note that the FreeBSD source tree (/usr/src) is really only needed
   to build the "lsof" package in emulab-extras.

3. Deinstall all existing ports. You will want to make sure you are root first,
   since this will get rid of "sudo":

       setenv ASSUME_ALWAYS_YES true
       pkg delete -af

4. Be paranoid, clear out old state.

   Remove everything in /var/db/ports. We used to have some non-standard
   settings (well, they were standard at the time!) like no threads for
   Perl. If these old options get propagated, you might not be able to
   mix these packages with official FreeBSD packages which use the default
   options. Clear out everything in /usr/local as well.

       rm -rf /usr/local/*
       rm -rf /var/db/ports/*
       rm -rf /usr/obj/ports/usr/ports/*

   Now you need to reinstall the package manager "pkg". This will happen
   when you do a pkg command, so just do:

       pkg info

   Edit /etc/make.conf and make sure that DEFAULT_VERSIONS exists and is
   correctly set:

   # for 10.2
   DEFAULT_VERSIONS=perl5=5.20 python=2.7 php=5.6 mysql=5.5 apache=2.2 tcltk=8.6

   # for 10.3
   DEFAULT_VERSIONS=perl5=5.24 python=2.7 php=5.6 mysql=5.7 apache=2.2 tcltk=8.6
   DEFAULT_VERSIONS+=ssl=base

   # for 11.1
   DEFAULT_VERSIONS=perl5=5.26 python=2.7 php=5.6 mysql=5.7 apache=2.4 tcltk=8.6
   DEFAULT_VERSIONS+=ssl=base

   # for 11.3
   DEFAULT_VERSIONS=perl5=5.30 python=2.7 php=7.2 mysql=5.7 apache=2.4 tcltk=8.6
   DEFAULT_VERSIONS+=ssl=base

   # for 12.1
   DEFAULT_VERSIONS=perl5=5.32 python=2.7 php=7.2 mysql=5.7 apache=2.4 tcltk=8.6
   DEFAULT_VERSIONS+=ssl=base

   # for 12.2
   DEFAULT_VERSIONS=perl5=5.32 python=3.7 python3=3.7 php=7.4 mysql=5.7 apache=2.4 tcltk=8.6
   DEFAULT_VERSIONS+=ssl=base

   To avoid 
5. Set non-standard options on some ports.

    * Perl. For perl 5.20 make sure that THREADS is defined. It should be,
      but it can cause a lot of grief if not. To be safe go into lang/perl5.24
      and do "make config" and make sure THREADS is checked.
    * Boost. We use the boost-all package which includes docs. I generally
      prefer not to drag around the docs, so I go into devel/boost-all, do
      a "make config" and deselect the DOCS box. Now when you do the make
      in emulab-boss, it should use that config when it gets to boost.
    * Git. Go into the devel/git directory, do a "make config" and deselect
      the GUI box. Otherwise it will drag in possibly conflicting versions of
      TCL and TK.
    * Pubsub. If the pubsub libraries are installed but were installed by hand
      and not through the port, then they will cause the port to not be
      installed as part of the emulab-boss port (since the dependency in the
      boss Makefile will be satisfied). This will cause an error when creating
      packages. If you have removed everything in /usr/local, you should be
      okay. Otherwise, the easiest fix is to just remove
      /usr/local/lib/libpubsub*, which is what the Makefile checks for.
    * Cairo. In graphics/cairo, turn off OPENGL. Let's see if that keeps it
      from dragging in llvm and clang.
    * Apache. The last couple of package sets I built did not have PROXY
      turned on. I have fixed this in the Makefile (I think) but you may
      also want to go into www/apache22 and set: SUEXEC, PROXY, PROXY_HTTP
      to be safe. The proxy code is needed on the mothership ops for the
      Wiki but should not hurt anywhere else.
    * Emacs. I used to build the -nox11 varient so we didn't drag in a ton
      of crap, but Leigh prefers the real deal and came up with a reasonable
      set of options. These are now baked into the emulab-extras Makefile.
      If you get an error from the Makefile about "m17n support requires Xft"
      then you probably have an old options file. You should remove
      /var/db/ports/emacs/options. NOTE! For FBSD10, the WITHOUT_foo options
      no longer do anything. Until further notice you will have to "make
      config" manually and uncheck:
        DBUS,
	GIF, MAGICK, PNG, SVG, TIFF, XPM,
        GCONF, GSETTINGS, M17N, OTF, SCROLLBARS, XFT, XIM,
	OSS,
	GTK2
      and check:
        XAW
    * Samba. This should be handled by the emulab-fs/Makefile, but to be
      safe, you can "make config" in net/samba36 and uncheck:
        AVAHI, CUPS, IPV6, LDAP, POPT, WINBIND

6. Now begin the tedious, iterative process. First, do:

       setenv PACKAGES /usr/obj/ports/packages
       # if SSD then...
       setenv TMPDIR /tmp
       # ...else if no SSD then...
       setenv TMPDIR /local/tmp

   The former ensures that packages wind up in a single directory. The latter
   will force the compiler (and other utilities) to use /local/tmp for
   temporary files if you don't have an SSD.

   Now for each emulab-* port you install, you will need to perform the ritual
   steps below:

       setenv myFLAGS ""
       foreach d (boss ops fs protogeni genilib tipserv extras)
           (cd /usr/ports/misc/emulab-$d ; make $myFLAGS clean all install)
	   (cd /usr/ports/misc/emulab-$d ; make $myFLAGS clean)
       end

   If a build fails due to an outstanding vulnerability, first try updating
   the ports with SVN to see if it has been addressed. If that doesn't work,
   you will have to build with the vulnerability check disabled. Set:

       setenv myFLAGS DISABLE_VULNERABILITIES=1

   and do the above loop again.

   Now save off the packages:

       mkdir -p $PACKAGES/All
       rm -f $PACKAGES/All/*
       pkg create -a -o $PACKAGES/All/

   Then from ops do:
       mkdir /share/freebsd/x.x/packages
       cd /share/freebsd/x.x/packages
       scp -p pcXXX:/usr/obj/ports/packages/All/\* .

6b. Painful post-port processing.
    * I don't always do it, but after all the ports are installed run
      pkg audit and see what security vulnerabilities there are. Manually
      update the ports and make notes in /share/freebsd/x.x/README.ports.
      This is fraught with peril however. Some ports versions are assumed in
      various other ports and things can degenerate rapidly when you try to
      do this! See one of the existing README.ports files for examples.
    * Install the bsdadmintools port (sysutils/bsdadmintools) and run
      "pkg_libchk" to ensure that all the library dependencies of the ports
      are correctly resolved.

7. Now you should have a fully functional set of packages. The last thing to
   do is make sure they install. ON YOUR BUILD NODE (NOT on boss or ops!) do
   the following and watch for any errors (there will be plenty of
   informational messages). See 9 below for an alternative testing method.

       sudo tcsh
       cd /share/freebsd/x.x/packages

       setenv ASSUME_ALWAYS_YES true
       alias PA "pkg add"
       alias PD "pkg delete -af ; pkg info"
       alias PC "pkg check -Bda"
       alias PL "pkg install bsdadminscripts2 ; /usr/local/sbin/pkg_libchk"

       # make sure you are not on boss or ops!
       hostname -s | grep -Eq '^(boss|ops)$' && \
           (echo 'STOP! you are on boss or ops, ^C now!'; sleep 100000; exit)

       # common boss-install
       PD
       PA emulab-boss*
       PA emulab-extras*
       PC
       PL
      
       # common ops-install
       PD
       PA emulab-ops*
       PA emulab-fs*
       PA emulab-extras*
       PC
       PL

       # all possible boss-install packages
       PD
       PA emulab-boss*
       PA emulab-protogeni*
       PA emulab-fs*
       PA emulab-tipserv*
       PA emulab-extras*
       PC
       PL

       # all possible ops-install packages
       PD
       PA emulab-ops*
       PA emulab-fs*
       PA emulab-genilib*
       PA emulab-tipserv*
       PA emulab-extras*
       PC
       PL

       # all possible fs-install packages
       PD
       PA emulab-fs*
       PA emulab-extras*
       PC
       PL

       # all (someday) possible tipserv-install packages
       PD
       PA emulab-tipserv*
       PA emulab-extras*
       PC
       PL

8. Managing the package repository.

a. Out on boss:/usr/testbed/www/FreeBSD, make a directory for the FreeBSD release
   (e.g., 10.2), and in that a directory called "packages". Copy all the .txz
   package files into that.

b. On boss, run:

   # XXX we need to add pubkey or other authentication
   sudo pkg repo /usr/testbed/www/FreeBSD/10.2/packages

   to create the metadata files needed.

c. As part of the boss/ops/etc. install, we will need to start creating a file
   /etc/pkg/Emulab.conf with:

Emulab: {
  url: "https://www.emulab.net/FreeBSD/12.2/packages",
  mirror_type: NONE,
  enabled: yes
}

   (We should add either fingerprint or pubkey authentication here. See, e.g.:
   http://www.glenbarber.us/2012/06/11/Maintaining-Your-Own-pkgng-Repository.html)

d. When packages are installed on boss/ops/etc., we need to make sure to use

   sudo pkg install -r Emulab ...

   to identify them as coming from the Emulab repository and then, when everything
   is installed:

   sudo pkg annotate -ay -A repository Emulab

   to annotate all the packages as coming from the Emulab repo. This ensures that
   our fixed versions of packages don't get upgraded to newer versions.

9. Alternative test method using Emulab repo.

  Another way to verify packages, assuming you have setup the repository
  mentioned in #8 above.

    sudo tcsh

    # make sure you are not on boss or ops!
    hostname -s | grep -Eq '^(boss|ops)$' && \
        (echo 'STOP! you are on boss or ops, ^C now!'; sleep 100000; exit)

    pkg delete -af
    rm -rf /usr/local/*

    setenv ASSUME_ALWAYS_YES true
    alias PA "pkg install -r Emulab"
    alias PD "pkg delete -af"
    alias PC "pkg check -Bda"
    alias PL "pkg install bsdadminscripts2 ; /usr/local/sbin/pkg_libchk"

  If you have an /etc/pkg/Emulab.conf, move it out of the way:
    mv /etc/pkg/Emulab.conf /tmp/

  And bootstrap with:
    pkg info
    pkg install ca_root_nss
    pkg lock pkg
    pkg lock ca_root_nss

  Now create /etc/pkg/Emulab.conf with:
    Emulab: {
      url: "https://www.emulab.net/FreeBSD/10.2/packages",
      mirror_type: NONE,
      enabled: yes
    }
  or move back you existing one:
   mv /tmp/Emulab.conf /etc/pkg/

  Now you can cycle through the installs:

       # all possible boss-install packages
       PD
       PA emulab-boss
       PA emulab-protogeni
       PA emulab-fs
       PA emulab-tipserv
       PA emulab-extras
       PC
       PL

       # all possible ops-install packages
       PD
       PA emulab-ops
       PA emulab-fs
       PA emulab-genilib
       PA emulab-tipserv
       PA emulab-extras
       PC
       PL

       # all possible fs-install packages
       PD
       PA emulab-fs
       PA emulab-extras
       PC
       PL

       # all (someday) possible tipserv-install packages
       PD
       PA emulab-tipserv
       PA emulab-extras
       PC
       PL

10. Client node packages.

   Someday we will want to make an emulab-client meta port and packages.
   Here are some notes from when I installed a fresh a set of packages on
   the FreeBSD 9.3 image.

   a. Put in /etc/make.conf:

      DEFAULT_VERSIONS=perl5=5.20 python=2.7 mysql=5.5

   b. Build/install pubsub from source.

   c. Ports installed:

      perl5
      p5-DBI
      p5-Socket
      p5-Storable
      p5-Time-HiRes
      p5-XML-Parser
      python2
      py27-libxml2
      autoconf
      automake
      bash
      bison
      boost-libs (would really, really like to get rid of this)
      compat8x-amd64
      curl
      e2fsprogs (don't really need this...)
      emacs-nox11
      flex
      git
      gmake
      isc-dhcp43-client
      jove
      libtool
      linux_base-c6
      lsof
      mysql51-client (5.1 since it might be talking to older ops node)
      net-snmp
      patch
      readline
      rpm4
      rsync
      smartmontools
      subversion
      sudo
      ttcp
      unzip
      vim-lite
      wget
      xterm
      zip

   d. Don't forget to make /usr/bin/perl symlink!

11. Diffing packages. Assuming old (current) packages are in packages
    and new packages in packages.tmp. Note that the file diff does not
    include the hashes as they seem to change just when a file is rebuilt.
    For options, we do not include the version so that we can detect changes
    in options even with different versions; e.g., we accidentally built the
    new version of something with the wrong options.

    cd packages
    rm *.txt
    /bin/ls > 1.Packages.txt
    foreach f (*.txz)
	pkg query -F $f "%n-%v %dn-%dv" | sort +1 >> 2.Deps.txt
	pkg query -F $f "%n-%v %Fp" | sort +1 >> 3.Files.txt
	pkg query -F $f "%n %Ok %Ov" | sort +1 >> 4.Options.txt
    end
    cd ..

    cd packages.tmp
    rm *.txt
    /bin/ls > 1.Packages.txt
    foreach f (*.txz)
	pkg query -F $f "%n-%v %dn-%dv" | sort +1 >> 2.Deps.txt
	pkg query -F $f "%n-%v %Fp" | sort +1 >> 3.Files.txt
	pkg query -F $f "%n %Ok %Ov" | sort +1 >> 4.Options.txt
    end
    cd ..

    By diffing 1.Packages.txt you can determine the new packages/versions
    that are needed.

    By diffing 2.Deps.txt you will find all the packages that depend on
    those new packages/versions or ones that have new/different dependencies.
