#
# The template
#
use strict;
use libinstall;
use installvars;

my $M2CRYPTO_PATCH	= "$TOP_SRCDIR/patches/m2crypto.patch";
my $MAILMAN_PATCH	= "$TOP_SRCDIR/patches/mailman.patch";
my $SELFLOAD_PATCH	= "$TOP_SRCDIR/patches/SelfLoader.patch";

sub Install($$$)
{
    my ($server, $isupdate, $impotent) = @_;

    # Replace if this script does an update for ip/domain.
    return 0
	if ($isupdate);

    Phase "patches", "Applying patches", sub {
	if ($FBSD_MAJOR < 7) {
	    Phase "m2cryptopatch", "Patching m2crypto", sub {
		my $patchfile = $M2CRYPTO_PATCH;

		my $pkg = InstalledPackage("m2crypto", 0);
		if ($pkg && $pkg =~ /0\.17/) {
		    $patchfile = "${patchfile}-0.17";
		}
		elsif ($pkg && $pkg =~ /0\.13/) {
		    $patchfile = "${patchfile}-0.13";
		}
		if (!ExecQuiet("$PATCH -C -f -l -R -p0 -i $patchfile")) {
		    PhaseSkip("Patch already applied");
		}
		ExecQuietFatal("$PATCH -f -l -p0 -i $patchfile");
	    };
	}
	Phase "perlselfloaderpatch", "Fixing perl self-loader", sub {
	    my $perldir;
	    # need for 5.10 or 5.12
	    foreach my $pdir ("5.12", "5.12.4", "5.10.1") {
		$perldir = "/usr/local/lib/perl5/$pdir";
		last if (-d $perldir);
	    }
	    DoneIfDoesntExist("$perldir/SelfLoader.pm");
	    my $ver = `fgrep 'our \$VERSION =' $perldir/SelfLoader.pm 2>/dev/null`;
	    if ($? == 0 && $ver =~ /1\.18/) {
		PhaseSkip("Patch already applied");
	    }
	    ExecQuietFatal("$PATCH -d $perldir -i $SELFLOAD_PATCH");
	};
	if ($MAILMANSUPPORT) {
	    Phase "mailmanpatch", "Patching mailman", sub {
		my $patchfile = $MAILMAN_PATCH;
	
		if (!ExecQuiet("$PATCH -C -f -l -R -p0 -i $patchfile")) {
		    PhaseSkip("Patch already applied");
		}
		ExecQuietFatal("$PATCH -f -l -p0 -i $patchfile");
	    };
	}
    }; 
    return 0;
}

# Local Variables:
# mode:perl
# End:
