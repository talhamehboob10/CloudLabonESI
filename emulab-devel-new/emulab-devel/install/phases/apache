#
# The template
#
use strict;
use libinstall;
use installvars;

sub Install($$$)
{
    my ($server, $isupdate, $impotent) = @_;

    Phase "web", "Setting up www stuff", sub {
	Phase "apache", "Installing apache config file", sub {
	    PhaseSkip("apache not supported on ops")
		if ($FBSD_MAJOR == 4);

	    my $install_target = "control-install";
	    my $build_target   = "control-build";
	    my $httpd_source   = "httpd-ops.conf";
	    
	    if (ISBOSSNODE($server)) {
		$install_target = "install";
		$build_target   = "all";
		$httpd_source   = "httpd.conf";
		
		# ICK!!! If we installed apache AFTER we unpacked the source
		# tarball, make will not properly install the new apache
		# config file! So, we use this shameful hack to force it to
		# do so!
		ExecQuietFatal("$TOUCH -t 01010000 $HTTPD_CONF");
	    }
	    ExecQuietFatal("$GMAKE -C $TOP_OBJDIR/apache $build_target");
	    DoneIfIdentical("$TOP_OBJDIR/apache/$httpd_source", "$HTTPD_CONF");
	    BackUpFileFatal($HTTPD_CONF);
	    DiffFiles("$TOP_OBJDIR/apache/$httpd_source", $HTTPD_CONF)
		if ($impotent);
	    ExecQuietFatal("$GMAKE -C $TOP_OBJDIR/apache $install_target");
	};
	PhaseSucceed("update complete")
	    if ($isupdate);

	# The certs are installed later in the sslcerts script.
	Phase "dirs", "Creating Apache SSL directories ", sub {
	    PhaseSucceed()
		if (-d "$APACHE_ETCDIR/ssl.crt" &&
		    -d "$APACHE_ETCDIR/ssl.key");
	    
	    if (! -d "$APACHE_ETCDIR/ssl.crt") {
		mkdir "$APACHE_ETCDIR/ssl.crt", 0700 or
		    PhaseFail("Unable to create $APACHE_ETCDIR/ssl.crt : $!");
	    }
	    if (! -d "$APACHE_ETCDIR/ssl.key") {
		mkdir "$APACHE_ETCDIR/ssl.key", 0700 or
		    PhaseFail("Unable to create $APACHE_ETCDIR/ssl.key : $!");
	    }
	};
	Phase "php.ini", "Installing php.ini file", sub {
	    DoneIfIdentical("$TOP_OBJDIR/apache/php.ini", "$PHP_INI")
		if (-e "$TOP_OBJDIR/apache/php.ini");
	    ExecQuietFatal("$GMAKE -C $TOP_OBJDIR/apache install-php-ini");
	};
	if ($FBSD_MAJOR > 10 || ($FBSD_MAJOR == 10 && $FBSD_MINOR >= 1)) {
	    # make sure we use the old mysql interface rather than mysqli
	    Phase "php.conf", "Fixing php.conf file", sub {
		DoneIfEdited($PHP_CONF);
		open(PC, "<$PHP_CONF") or
		    PhaseFail("Unable to open $PHP_CONF: $!");
		my @pc = <PC>;
		close(PC);
		my $opts = "";
		foreach my $line (@pc) {
		    if ($line =~ /^PHP_EXT_INC=\(.*\)/) {
			$opts = $1;
			last;
		    }
		}
		$opts =~ s/mysqli//;
		if ($opts !~ /mysql/) {
		    $opts .= " mysql";
		}
		AppendToFileFatal($PHP_CONF, "PHP_EXT_INC=$opts");
	    }
	}
	if (ISOPSNODE($server)) {
	    Phase "wikidocs", "Installing wikidocs redirect", sub {
		PhaseSkip("wikidocs not supported on ops")
		    if ($FBSD_MAJOR == 4);

		DoneIfExists("$OPSWWWDIR/wikidocs/.htaccess");

		if (! -e "$OPSWWWDIR") {
		    mkdir("$OPSWWWDIR", 0755) or
			PhaseFail("Unable to make $OPSWWWDIR: $!");
		}
		if (! -e "$OPSWWWDIR/wikidocs") {
		    mkdir("$OPSWWWDIR/wikidocs", 0755) or
			PhaseFail("Unable to make $OPSWWWDIR/wikidocs: $!");
		}
		CreateFileFatal("$OPSWWWDIR/wikidocs/.htaccess",
		    "Redirect /wikidocs http://users.emulab.net/trac/emulab");
	    }
	}
	if (ISBOSSNODE($server)) {
	    Phase "fcgid-fixup", "Fixing mod_fcgid permissions", sub {
		# We run apache as nobody.
		PhaseSkip("already fixed")
		    if (! -e "/var/run/fcgidsock");
		
		ExecQuietFatal("chown nobody:nobody /var/run/fcgidsock");
		ExecQuietFatal("chmod 770 /var/run/fcgidsock");
	    };
	}
    };
    return 0;
}

# Local Variables:
# mode:perl
# End:
