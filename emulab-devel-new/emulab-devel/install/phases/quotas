#
# The template
#
use strict;
use libinstall;
use installvars;

sub Install($$$)
{
    my ($server, $isupdate, $impotent) = @_;

    # Replace if this script does an update for ip/domain.
    return 0
	if ($isupdate);

    Phase "quotas", "Setting up quotas", sub {
	if ($QUOTA_FSLIST eq "") {
	    PhaseSkip("No filesystems with quotas");
	}
	Phase "fstab", "enabling quotas in $FSTAB", sub {
	    my @fs = split(' ', $QUOTA_FSLIST);
	    open(FT,"<$FSTAB") or
		PhaseFail("Unable to open $FSTAB : $!");
	    my @ft = <FT>;
	    close(FT);
	    my $changed = 0;
	    foreach my $fs (@fs) {
		my $found = 0;
		Phase $fs, $fs, sub {
		    foreach my $line (@ft) {
			if ($line =~ m((/dev/\S+\s+$fs\s+ufs\s+rw))) {
			    my $str = $1;
			    $found = 1;
			    PhaseSkip("already enabled")
				if ($line =~ /userquota/);
			    $line =~ s/$str/$str,userquota/;
			    $changed++;
			    last;
			}
		    }
		};
		print STDERR 
		    "WARNING: filesystem $fs not found, quotas not enabled\n"
		    if (!$found);
	    }
	    open(FT,">$FSTAB.new") or
		PhaseFail("Unable to open $FSTAB.new : $!");
	    print FT @ft;
	    close(FT);
	    chmod(0644, "$FSTAB.new") or
		PhaseFail("Could not set permission of new fstab");
	    rename($FSTAB, "$FSTAB.orig") or
		PhaseFail("Could not save original fstab");
	    if (!rename("$FSTAB.new", $FSTAB)) {
		rename("$FSTAB.orig", $FSTAB);
		PhaseFail("Could not install new fstab, old version restored");
	    }
	};
	Phase "quotaon", "Turning quotas on", sub {
	    ExecQuietFatal("$QUOTAON -a");
	};
	Phase "rquotad", "Enabling rquotad", sub {
	    PhaseSkip("no inetd.conf!?") unless (-e $INETD_CONF);
	    PhaseSkip("already enabled") unless `grep '^#rquotad' $INETD_CONF`;
	    ExecQuietFatal("sed -i .orig -e '/^#rquotad/s/^#//' $INETD_CONF");
	    HUPDaemon("inetd");
	};
    };
    return 0;
}

# Local Variables:
# mode:perl
# End:
