
#
# This is the powder-fixed specific parts of target system setup
#
use strict;
use English;
use libinstall;
use installvars;
use libtestbed;
use EmulabConstants;
use EmulabFeatures;
use emutil;
use libEmulab;
use emdb;
use NodeType;
use Node;
use Interface;
use Image;

my $CONFIGVARS   = "$PREFIX/configvars.txt";
my $TARGETSYSVARS= "$PREFIX/etc/targetsys/variables.txt";
my $ADDNODETYPE  = "$PREFIX/bin/editnodetype";
my $ADDNODE      = "$PREFIX/sbin/addnode";
my $ADDINTERFACE = "$PREFIX/sbin/addinterface";
my $TARGETSYS_DIR= lc($TARGETSYS_TARGET);

my $SQLSTUFF     = "$TOP_SRCDIR/install/$TARGETSYS_DIR/tbdb.sql";
my %TYPEFILES    = ("rs440" => "$TOP_SRCDIR/install/$TARGETSYS_DIR/rs440.xml");

# Placeholder. 
my %HOSTNAMES = (
);

sub Install($$$)
{
    my ($server, $isupdate, $impotent) = @_;
    my %configvars = ();

    # Replace if this script does an update for ip/domain.
    return 0
	if ($isupdate);

    SET_TESTBED_VERSION($TARGETSYS_TARGET);

    Phase "fixednode", "Doing additional fixed node tasks", sub {
	PhaseSkip("Not a target system")
	    if (!$CONFIG_TARGETSYS);

	Phase "config", "Reading in Emulab config variables", sub {
	    PhaseFail("No config file")
		if (! -e $CONFIGVARS);
	    
	    open(CN, $CONFIGVARS)
		 or PhaseFail("Could not open $CONFIGVARS: $!");
	    while (<CN>) {
		if ($_ =~ /^([-\w]*)\s*=\s*(.*)$/) {
		    my $key = $1;
		    my $val = $2;
		    if ($val =~ /^'(.*)'$/) {
			$val = $1;
		    }
		    $configvars{$key} = "$val";
		}
	    }
	    close(CN);
	};
	
	Phase "targetconfig", "Reading in targetsys config variables", sub {
	    PhaseFail("No config file")
		if (! -e $TARGETSYSVARS);
	    
	    open(CN, $TARGETSYSVARS)
		 or PhaseFail("Could not open $TARGETSYSVARS: $!");
	    while (<CN>) {
		if ($_ =~ /^([-\w]*)\s*=\s*(.*)$/) {
		    my $key = $1;
		    my $val = $2;
		    if ($val =~ /^'(.*)'$/) {
			$val = $1;
		    }
		    $configvars{$key} = "$val";
		}
	    }
	    close(CN);
	};

	# These are handy.
	Phase "fstab", "Adding extras to $FSTAB", sub {
	    DoneIfEdited($FSTAB);
	    AppendToFileFatal($FSTAB,
			      "proc\t\t/proc\tprocfs\trw\t0\t0",
			      "fdesc\t\t/dev/fd\tfdescfs\trw\t0\t0");
	};

	#
	# Add /etc/hosts entries for the switches. 
	#
	if (keys(%HOSTNAMES)) {
	    Phase "etchosts", "Adding hosts entries for switches", sub {
		my @strings = ();
	    
		foreach my $switch (keys(%HOSTNAMES)) {
		    my $ip = $HOSTNAMES{$switch};
		    push(@strings, "$ip\t$switch");
		}
		DoneIfEdited($HOSTS);
		AppendToFileFatal($HOSTS, @strings);
	    };
	}

	#
	# Add in the extra stuff which is all hard coded sql.
	#
	Phase "sql", "Adding addtional stuff to the database", sub {
	    PhaseSkip("No addtional SQL")
		if (! -e $SQLSTUFF);
	    
	    ExecQuietFatal("$MYSQL $DBNAME < $SQLSTUFF");
	};

	#
	# Mike says 200000000 is good for fixed nodes.
	#
	Phase "frisbeerate", "Setting frisbeed max rate", sub {
	    ExecQuietFatal("$PREFIX/sbin/setsitevar ".
			   "images/frisbee/maxrate_std 200000000");
	    ExecQuietFatal("$PREFIX/sbin/setsitevar ".
			   "images/frisbee/maxrate_usr 200000000");
	};

	#
	# Enable these features.
	#
	my %features = (
	    "GeniOsSetup" => "Use libossetup for StartSliver",
	    "NewOsload"   => "New version of osload library",
	    );

	foreach my $name (keys(%features)) {
	    my $description = $features{$name};
    
	    my $feature = EmulabFeatures->Lookup($name);
	    Phase "feature", "Adding $name feature", sub {
		PhaseSkip("already exists")
		    if (defined($feature));
		$feature = EmulabFeatures->Create($name, $description);
		PhaseFail("Failed to create feature")
		    if (!defined($feature));
	    };
	    Phase "feature", "Enabling $name feature", sub {
		$feature->SetGlobalEnable(1) == 0
		    or PhaseFail("Could not enable feature");
		$feature->SetGlobalDisable(0) == 0
		    or PhaseFail("Could not clear disable flag on feature");
	    };
	}

	#
	# Add the node types to the DB.
	#
	foreach my $type (keys(%TYPEFILES)) {
	    my $file = $TYPEFILES{$type};

	    Phase $type, "Adding node type $type to the database", sub {
		PhaseSkip("already added")
		    if (NodeType->Lookup($type));
	    
		ExecQuietFatal("$SUDO -u $PROTOUSER $WAP ".
			       "$ADDNODETYPE $file");
	    };
	}
	#
	# Need to go back and update all the images to the correct
	# architecture, since that was ignored when the images were
	# imported (cause no types defined that had an architecture).
	#
	Phase "images", "Setting architecture on all images", sub {
	    my @images = Image->ListAll(undef, TBOPSPID());
	    foreach my $imagename (@images) {
		Phase $imagename, $imagename, sub {
		    my $image = Image->Lookup($imagename);
		    PhaseFail("lookup failure")
			if (!defined($image));
		    
		    PhaseSucceed("$imagename Done");
		};
	    }
	    PhaseSucceed("Images Done");
	};

	#
	# We are a member of the image tracking federation.
	#
	Phase "tracker", "Turning on image tracking", sub {
	    ExecQuietFatal("$PREFIX/sbin/setsitevar ".
			   "protogeni/use_imagetracker 1");
	};
	# And admission control.
	Phase "admission", "Turning on admission control", sub {
	    ExecQuietFatal("$PREFIX/sbin/setsitevar ".
			   "general/admission_control 1");
	};
	# Default image type.
	Phase "typelist", "Setting default typelist", sub {
	    ExecQuietFatal("$PREFIX/sbin/setsitevar ".
			   "images/default_typelist rs440");
	};
	Phase "tiplogs", "Creating tiplogs directory", sub {
	    DoneIfExists("$PREFIX/log/tiplogs");
	    mkdir "$PREFIX/log/tiplogs", 0755 or
		PhaseFail("Unable to create tiplogs: $!");
	};

	#
	# Create a local named forward fragment file with some extra stuff.
	#
	my $forwarddots;
	my @forward_strings = ();
	my @reverse_strings = ();
	my %local_dns = ("TARGETSYS_ROUTER" => "control");

	foreach my $name (keys(%local_dns)) {
	    next
		if (!exists($configvars{$name}));

	    my $hostname = $local_dns{$name};
	    my $ip = $configvars{$name};
	    my ($a,$b,$c,$num) = split(/\./, $ip);
	    $forwarddots = "${a}.${b}.${c}";
	    
	    push(@forward_strings, "$hostname\tIN\tA\t$ip");
	    push(@reverse_strings, "$num\tIN\tPTR\t${hostname}.${OURDOMAIN}.");
	}
	my $FORWARDFRAGMENT1 = "$NAMED_DIR/${OURDOMAIN}.internal.db.local";
	my $FORWARDFRAGMENT2 = "$NAMED_DIR/${OURDOMAIN}.db.local";
	my $REVERSEFRAGMENT  = "$NAMED_DIR/reverse/${forwarddots}.db.local";
	Phase "forward1", "Creating $FORWARDFRAGMENT1", sub {
	    DoneIfExists($FORWARDFRAGMENT1);
	    CreateFileFatal($FORWARDFRAGMENT1, @forward_strings);
	};
	Phase "forward2", "Creating $FORWARDFRAGMENT2", sub {
	    DoneIfExists($FORWARDFRAGMENT2);
	    CreateFileFatal($FORWARDFRAGMENT2, @forward_strings);
	};
	Phase "reverse", "Creating $REVERSEFRAGMENT", sub {
	    DoneIfExists($REVERSEFRAGMENT);
	    CreateFileFatal($REVERSEFRAGMENT, @reverse_strings);
	};
	#
	# The local fragment we just created above is not yet in the
	# zone file, which means that when boss boots, there is no
	# record for the local names. Just run named_setup ...
	#
	Phase "named_setup", "Running named_setup", sub {
	    ExecQuietFatal($NAMED_SETUP);
	};

	#
	# Munge /etc/rc.conf for real boot.
	#
	Phase "rcconf", "Updating rcconf for actual boot", sub {
	    my @strings   = ();
	    my @ifaces    = ();
	    my @patterns  = ();
	    my $outerctrl;

	    my ($status,@output) =
		ExecQuiet("egrep '^ifconfig_xn0=' $RCCONF");
	    PhaseFail("egrep failed")
		if ($status);
	    if ($output[0] =~ /^ifconfig_xn0=(.*)$/) {
		$outerctrl = $1;
	    }
	    else {
		PhaseFail("Bad ifconfig_xn0 in $RCCONF");
	    }

	    #
	    # This stuff is for development inside the Mothership.
	    #
	    if (0) {
		# Outer Emulab control network.
		push(@strings,
		 "ifconfig_xn0_alias2=$outerctrl");
		# Route to outer boss and outer control networks
		push(@strings,
		     "route_outeremulab=\"-net 155.98.36.0 ".
		     "-netmask 255.255.252.0 155.98.36.1\"");
		push(@strings,
		     "route_outerboss=\"155.98.32.70 155.98.36.1\"");
		push(@strings,
		     "static_routes=\"\$static_routes outerboss outerboss\"");
	    }

	    #
	    # Okay, we want to comment out a bunch of stuff.
	    #
	    @patterns = (qr(^natd),
			 qr(^firewall),
			 qr(^defaultrouter),
			 qr(^static_routes),
			 qr(^route_targetsys),
			 qr(^route_outerboss),
			 qr(^route_vnodes),
			 qr(^ifconfig_xn0),
			 qr(^ifconfig_xn0_alias),
	    );
	    DoneIfEdited($RCCONF);
	    UpdateFileFatal($RCCONF, \@patterns, @strings);
	};
	PhaseSucceed("Powder Fixed Setup Done");
    };
    return 0;
}

# Local Variables:
# mode:perl
# End:
