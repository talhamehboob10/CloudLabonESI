#
# The template
#
use strict;
use libinstall;
use installvars;

my @LOGFILES = ("$LOGDIR/bootinfo.log", "$LOGDIR/tmcd.log",
    "$LOGDIR/capture.log", "$LOGDIR/dhcpd.log", "$LOGDIR/capserver.log",
    "$LOGDIR/exports_setup.log",
    "$LOGDIR/frisbeed.log", "$LOGDIR/frisuploadd.log", "$LOGDIR/mfrisbeed.log",
    "$LOGDIR/proxydhcpd.log", "$LOGDIR/stated.log", "$LOGDIR/stated-mail.log",
    "$LOGDIR/named.log",
    "$LOGDIR/osselect.log", "$LOGDIR/power.log", "$LOGDIR/tmcd-meta.log",
    "$LOGDIR/tftpd.log", "$LOGDIR/sdcollectd.log", "$LOGDIR/genlastlog.log",
    "$LOGDIR/xmlrpcbag.log", "$LOGDIR/sslxmlrpc.log", "$LOGDIR/pubsubd.log",
    "$LOGDIR/idlemail.log");

sub Install($$$)
{
    my ($server, $isupdate, $impotent) = @_;

    # Replace if this script does an update for ip/domain.
    return 0
	if ($isupdate);

    # Extras for Geni Racks, to handle foam stuff.
    if ($PROTOGENI_GENIRACK) {
	push(@LOGFILES, "$LOGDIR/foam.log");
	push(@LOGFILES, "$LOGDIR/flowvisor.log");
    }

    # Autofs logs
    if ($WITHZFS && !$WITHAMD) {
	push(@LOGFILES, "$LOGDIR/autofs.log");
    }

    Phase "syslog", "Setting up syslog", sub {
	Phase "sysconf", "Editing $SYSLOG_CONF", sub {
	    DoneIfEdited($SYSLOG_CONF);

	    #
	    # Modify the /dev/console and /var/log/messages lines to exclude
	    # testbed stuff
	    #
	    open(SC,"+<$SYSLOG_CONF") or
		PhaseFail("Unable to open $SYSLOG_CONF : $!");
	    my @sc = <SC>;
	    if (scalar(grep(/$LOGFACIL/, @sc)) != 0) {
		PhaseFail("Testbed chosen facility $LOGFACIL already in use in /etc/syslog.conf!");
	    }
	    #
	    # If there is already a pubsubd line, kill it since it
	    # is going to be added below. This happens on elabinelab
	    # cause we already have the entry, but in a different place.
	    #
	    my @tmp = ();
	    while (@sc) {
		my $line = shift(@sc);

		# Cut two lines out.
		if ($line =~ /pubsubd/) {
		    shift(@sc);
		    next;
		}
		push(@tmp, $line);
	    }
	    @sc = @tmp;

	    seek(SC,0,0);
	    truncate(SC,0);
	    foreach my $line (@sc) {
		my $cpat = q(\s+/dev/console);
		my $mpat = q(\s+/var/log/messages);
		if ($line =~ /^[^#].*$cpat/) {
		    $line =~ s/($cpat)/\;$LOGFACIL.none$1/;
		}
		elsif ($line =~ /^[^#].*$mpat/) {
		    $line =~ s/($mpat)/\;$LOGFACIL.none$1/;
		}
		#
		# XXX get rid of any old pubsubd line(s)
		# (should only happen on elabinelab nodes)
		#
		if ($line =~ /pubsubd/) {
		    $line =~ s/^/#/;
		}
		print SC $line;
	    }
	    close(SC);

	    my @syslog_lines = (
			"!bootinfo",  "*.*\t\t\t\t\t\t$LOGDIR/bootinfo.log",
			"!tmcd",      "*.*\t\t\t\t\t\t$LOGDIR/tmcd.log",
			"!tmcd-meta", "*.*\t\t\t\t\t\t$LOGDIR/tmcd-meta.log",
			"!capture",   "*.*\t\t\t\t\t\t$LOGDIR/capture.log",
			"!dhcpd",     "*.*\t\t\t\t\t\t$LOGDIR/dhcpd.log",
			"!named",     "*.*\t\t\t\t\t\t$LOGDIR/named.log",
			"!proxydhcpd","*.*\t\t\t\t\t\t$LOGDIR/proxydhcpd.log",
			"!tftpd",     "*.*\t\t\t\t\t\t$LOGDIR/tftpd.log",
			"!capserver", "*.*\t\t\t\t\t\t$LOGDIR/capserver.log",
			"!exports_setup", "*.*\t\t\t\t\t\t$LOGDIR/exports_setup.log",
			"!frisbeed",  "*.*\t\t\t\t\t\t$LOGDIR/frisbeed.log",
			"!frisuploadd","*.*\t\t\t\t\t\t$LOGDIR/frisuploadd.log",
			"!mfrisbeed", "*.*\t\t\t\t\t\t$LOGDIR/mfrisbeed.log",
			"!pubsubd",   "*.*\t\t\t\t\t\t$LOGDIR/pubsubd.log",
			"!osselect",  "*.*\t\t\t\t\t\t$LOGDIR/osselect.log",
			"!power",     "*.*\t\t\t\t\t\t$LOGDIR/power.log",
			"!genlastlog","*.*\t\t\t\t\t\t$LOGDIR/genlastlog.log",
			"!sdcollectd","*.*\t\t\t\t\t\t$LOGDIR/sdcollectd.log",
			"!xmlrpcbag", "*.*\t\t\t\t\t\t$LOGDIR/xmlrpcbag.log",
			"!sslxmlrpc", "*.*\t\t\t\t\t\t$LOGDIR/sslxmlrpc.log",
			"!idlemail", "*.*\t\t\t\t\t\t$LOGDIR/idlemail.log");

	    if ($PROTOGENI_GENIRACK) {
		@syslog_lines = (@syslog_lines,
			"!foam",      "*.*\t\t\t\t\t\t$LOGDIR/foam.log",
			"!flowvisor", "*.*\t\t\t\t\t\t$LOGDIR/flowvisor.log");
	    }

	    if ($WITHZFS && !$WITHAMD) {
		@syslog_lines = (@syslog_lines,
			"!automount",    "*.*\t\t\t\t\t\t$LOGDIR/autofs.log",
			"!automountd",   "*.*\t\t\t\t\t\t$LOGDIR/autofs.log",
			"!autounmountd", "*.*\t\t\t\t\t\t$LOGDIR/autofs.log");
	    }

	    AppendToFileFatal($SYSLOG_CONF, @syslog_lines);
	};

	Phase "logdir", "Creating log directory", sub {
	    DoneIfExists($LOGDIR);
	    mkdir $LOGDIR, 0775 or PhaseFail("Unable to create $LOGDIR : $!");
	    ExecQuietFatal("$CHGRP tbadmin $LOGDIR");
	    ExecQuietFatal("$CHMOD 775 $LOGDIR");
	};

	Phase "logdir", "Creating mysql log directory", sub {
	    DoneIfExists($MYSQL_LOGDIR);
	    mkdir $MYSQL_LOGDIR, 0775 or
		PhaseFail("Unable to create $MYSQL_LOGDIR : $!");
	    ExecQuietFatal("$CHOWN mysql:mysql $MYSQL_LOGDIR");
	    ExecQuietFatal("$CHMOD 775 $MYSQL_LOGDIR");
	};

	Phase "logfiles", "Creating log files", sub {
	    foreach my $logfile (@LOGFILES) {
		Phase $logfile, $logfile, sub {
		    DoneIfExists($logfile);
		    CreateFileFatal($logfile);
		    ExecQuietFatal("$CHGRP tbadmin $logfile");
		    ExecQuietFatal("$CHMOD 640 $logfile");
		};
	    }
	};

	Phase "newsyslog", "Setting up $NEWSYSLOG_CONF", sub {
	    DoneIfEdited($NEWSYSLOG_CONF);
	    my @nsyslog_lines = (
		"$LOGDIR/tmcd.log               640  9     1000 *     Z",
		"$LOGDIR/tmcd-meta.log          640  9     1000 *     Z",
		"$LOGDIR/stated.log             640  9     1000 *     Z ".
		"/var/run/stated.pid 31",
		"$LOGDIR/stated-mail.log        640  9     1000 *     Z ".
		"/var/run/stated.pid 31",
		"$LOGDIR/checknodes.log         640  14    300  *     Z ".
		"/var/run/checknodes_daemon.pid",
		"$LOGDIR/osselect.log           640  9     300  *     Z",
		"$LOGDIR/power.log              640  7     300  *     Z",
		"$LOGDIR/frisbeed.log           640  7     300  *     Z",
		"$LOGDIR/frisuploadd.log        640  7     300  *     Z",
		"$LOGDIR/mfrisbeed.log          640  7     1000 *     Z",
		"$LOGDIR/tftpd.log              640  7     200  *     Z",
		"$LOGDIR/named.log              640  7     200  *     Z",
		"$LOGDIR/dhcpd.log              640  7     200  *     Z",
		"$LOGDIR/bootinfo.log           640  7     200  *     Z",
		"$LOGDIR/capserver.log          640  5     200  *     Z",
		"$LOGDIR/exports_setup.log      640  5     1000 *     Z",
		"$LOGDIR/pubsubd.log            640  5     1000 *     Z",
		"$LOGDIR/suexec.log             640  3     200  *     Z",
		"$LOGDIR/genlastlog.log         640  3     200  *     Z",
		"$LOGDIR/genlastlog             640  3     200  *     Z ".
		"/var/run/lastlog_daemon.pid",
		"$LOGDIR/xmlrpcbag.log          640  7     300  *     Z",
		"$LOGDIR/sslxmlrpc.log          640  7     300  *     Z",
		"$LOGDIR/idlemail.log           640  14    1000 *     Z",
		"$LOGDIR/reloadlog              640  9     1000 *     Z ".
		"/var/run/reload_daemon.pid",
		"$LOGDIR/checkuplog             640  9     1000 *     Z ".
		"/var/run/checkup_daemon.pid",
		"$LOGDIR/poollog                640  9     1000 *     Z ".
		"/var/run/pool_daemon.pid",
		"$LOGDIR/expire_daemon.log      640  9     1000 *     Z ".
		"/var/run/expire_daemon.pid",
		"$LOGDIR/sa_daemon.log          640  9     1000 *     Z ".
		"/var/run/sa_daemon.pid",
		"$LOGDIR/poolmonitor.log        644  7    2000  *     Z ".
		"/var/run/poolmonitor.pid",
		"$LOGDIR/lease_daemon.log       644  14   1000  *     Z ".
		"/var/run/lease_daemon.pid",
		"$LOGDIR/apache_access_log      644  7   10000  *    BZ ".
		"/var/run/httpd.pid",
		"$LOGDIR/apache_error_log       644  7   10000  *    BZ ".
		"/var/run/httpd.pid",
		"$LOGDIR/apache_ssl_engine_log  644  7   10000  *    BZ ".
		"/var/run/httpd.pid",
		"$LOGDIR/apache_ssl_request_log 644  7   10000  *    BZ ".
		"/var/run/httpd.pid",
		"$LOGDIR/apache_ssl_access_log  644  7   10000  *    BZ ".
		"/var/run/httpd.pid",
		"$LOGDIR/portal_monitor.log     644  7    1000  *     Z ".
		"/var/run/portal_monitor.pid",
                "$LOGDIR/apt_daemon.log         644  7    1000  *     Z ".
		"/var/run/apt_daemon.pid",
		"$LOGDIR/aptevent_daemon.log    644  7    1000  *     Z ".
		"/var/run/aptevent_daemon.pid",
		"$LOGDIR/apt_scheduler.log      644  7    1000  *     Z ".
		"/var/run/apt_scheduler.pid"
		);

    	    if ($PROTOGENI_GENIRACK) {
		@nsyslog_lines = (@nsyslog_lines,
		  "$LOGDIR/foam.log               640  7     *    168   Z",
		  "$LOGDIR/flowvisor.log          640  7    1000  *     Z");
	    }

	    if ($WITHZFS && !$WITHAMD) {
		@nsyslog_lines = (@nsyslog_lines,
		  "$LOGDIR/autofs.log             640  14   1000  *     Z");
	    }

	    AppendToFileFatal($NEWSYSLOG_CONF, @nsyslog_lines);
	};
    };

    return 0;
}

# Local Variables:
# mode:perl
# End:
