#
# This is the generic part of target system setup. There should be
# targetsys dependent setup file as well.
#

use strict;
use libinstall;
use installvars;
use libtestbed;
use emutil;
use libEmulab;
use emdb;
use User;
use NodeType;
use OSImage;
use Node;
use EmulabFeatures;
use EmulabConstants;

my $TARGETSYS_DIR= lc($TARGETSYS_TARGET);
my $CONFIGVARS   = "$PREFIX/configvars.txt";
my $TARGETSYSVARS= "$PREFIX/etc/targetsys/variables.txt";
my $ELABPASSWORD = "$PREFIX/etc/elabman.pswd";
my $SWITCHPSWD   = "$PREFIX/etc/switch.pswd";
my $IPMIPSWD     = "$PREFIX/etc/ipmi.pswd";
my $DEFSEXTRA    = "$TOP_SRCDIR/install/$TARGETSYS_DIR/defs-extra";

my $PORTSRC      = "http://www.emulab.net/downloads/FreeBSD-".
    "${FBSD_MAJOR}.${FBSD_MINOR}" . "-ports.tar.gz";
my $ZZZ		 = "/usr/local/etc/rc.d/zzz-inelab.sh";
my $DEFAULTOSID  = "UBUNTU18-64-STD";
my @EXPORTEDOSIDS= ("UBUNTU18-64-STD");
my $PGOSSITEVAR  = "protogeni/default_osname";
my $CHPASS	 = "/usr/bin/chpass";
my $SSHTB	 = "$PREFIX/bin/sshtb";
my $DELETENODE	 = "$PREFIX/sbin/deletenode";
my $ELABMANDIR   = "/users/elabman";

sub Install($$$)
{
    my ($server, $isupdate, $impotent) = @_;
    my %configvars = ();

    # Replace if this script does an update for ip/domain.
    return 0
	if ($isupdate);

    SET_TESTBED_VERSION($TARGETSYS_TARGET);

    Phase "targetsys", "Doing additional targetsys tasks", sub {
	PhaseSkip("Not a target system")
	    if (!$CONFIG_TARGETSYS);

	Phase "config", "Reading in Emulab config variables", sub {
	    PhaseFail("No config file")
		if (! -e $CONFIGVARS);
	    
	    open(CN, $CONFIGVARS)
		 or PhaseFail("Could not open $CONFIGVARS: $!");
	    while (<CN>) {
		if ($_ =~ /^([-\w]*)\s*=\s*(.*)$/) {
		    my $key = $1;
		    my $val = $2;
		    if ($val =~ /^'(.*)'$/) {
			$val = $1;
		    }
		    $configvars{$key} = "$val";
		}
	    }
	    close(CN);
	};

	Phase "targetconfig", "Reading in targetsys config variables", sub {
	    PhaseFail("No config file")
		if (! -e $TARGETSYSVARS);
	    
	    open(CN, $TARGETSYSVARS)
		 or PhaseFail("Could not open $TARGETSYSVARS: $!");
	    while (<CN>) {
		if ($_ =~ /^([-\w]*)\s*=\s*(.*)$/) {
		    my $key = $1;
		    my $val = $2;
		    if ($val =~ /^'(.*)'$/) {
			$val = $1;
		    }
		    $configvars{$key} = "$val";
		}
	    }
	    close(CN);
	};

	#
	# Have not figured this out yet; it runs during boss setup but
        # the line in fstab gets lost. Run again and it works fine. 
	#
	Phase "swapon", "Reruning rc.freebsd", sub {
	    PhaseSkip("already enabled") unless `grep -q swap $FSTAB`;
	    ExecQuietFatal("/usr/local/etc/emulab/rc/rc.freebsd");
	};

	Phase "rclocal", "Removing $ZZZ", sub {
	    PhaseSkip("already deleted")
		if (! -e $ZZZ);
	    DeleteFileFatal($ZZZ);
	};

	#
	# Update geniuser password.
	#
	if (exists($configvars{'PROTOGENI_PASSWORD'}) &&
	    $configvars{'PROTOGENI_PASSWORD'} ne "") {
	    my $geniuser = User->Lookup("geniuser");
	    PhaseFail("No geniuser account")
		if (!defined($geniuser));
	    my $passhash = PassWordHash($configvars{'PROTOGENI_PASSWORD'});
	    $geniuser->SetPassword($passhash);
	}

	#
	# This is the password for the switches.
	#
	if (exists($configvars{'SWITCH_PASSWORD'}) &&
	    $configvars{'SWITCH_PASSWORD'} ne "" &&
	    ! -e $SWITCHPSWD) {
	    CreateFileFatal($SWITCHPSWD,
			    $configvars{'SWITCH_PASSWORD'});
	    ExecQuietFatal("$CHMOD 400 $SWITCHPSWD");
	}

	#
	# This is the password for the IPMI
	#
	if (exists($configvars{'IPMI_PASSWORD'}) &&
	    $configvars{'IPMI_PASSWORD'} ne "" &&
	    ! -e $IPMIPSWD) {
	    CreateFileFatal($IPMIPSWD,
			    $configvars{'IPMI_PASSWORD'});
	    ExecQuietFatal("$CHMOD 400 $IPMIPSWD");
	}

	#
	# This is the elabman password.
	#
	if (exists($configvars{'PASSWORD'}) && $configvars{'PASSWORD'} ne "") {
	    my $PASSWORD = $configvars{'PASSWORD'};
	    my $passhash = PassWordHash($PASSWORD);
	    
	    Phase "elabman_pswd", "Storing the elabman password", sub {
		PhaseSkip("exists")
		    if (-e $ELABPASSWORD);
		
		CreateFileFatal($ELABPASSWORD, $PASSWORD);
		ExecQuietFatal("$CHMOD 400 $ELABPASSWORD");
	    };

	    #
	    # Make sure root/toor have the same password on boss/ops.
	    #
	    Phase "root_pswd", "Setting root password on boss", sub {
		ExecQuietFatal("$CHPASS -p '$passhash' root");
		ExecQuietFatal("$CHPASS -p '$passhash' toor");
	    };

	    # shell escape.
	    $passhash =~ s/\$/\\\$/g;
	    $passhash =~ s/\*/\\\*/g;

	    Phase "root_pswdops", "Setting root password on ops", sub {
		ExecQuietFatal("$SSHTB -host $USERNODE ".
			       "  $CHPASS -p '$passhash' root");
		ExecQuietFatal("$SSHTB -host $USERNODE ".
			       "  $CHPASS -p '$passhash' toor");
	    };
	}

	#
	# Need to put root public key so tftp can get it.
	#
	my $SSHPUBKEY = "/root/.ssh/id_rsa.pub";
	my $COPYPUBKEY= "$TFTP_DIR/id_rsa.pub";
	
	Phase "sshpubkey", "Copying $SSHPUBKEY to $TFTP_DIR", sub {
	    DoneIfExists($COPYPUBKEY);
	    ExecQuietFatal("/bin/cp -p $SSHPUBKEY $COPYPUBKEY");
	};

	#
	# This is the elabman SSL cert password.
	#
	my $SSLCERT_PSWDFILE = "/users/elabman/.ssl/password";
	
	if (exists($configvars{'ELABMAN_SSLCERT_PASSWORD'}) &&
	    $configvars{'ELABMAN_SSLCERT_PASSWORD'} ne "") {
	    if (! -e $SSLCERT_PSWDFILE) {
		CreateFileFatal($SSLCERT_PSWDFILE,
				$configvars{'ELABMAN_SSLCERT_PASSWORD'});
		ExecQuietFatal("$CHMOD 400 $SSLCERT_PSWDFILE");
		ExecQuietFatal("$CHOWN elabman:emulab-ops $SSLCERT_PSWDFILE");
	    }
	    #
	    # Create encrypted SSL cert for elabman, for testing PG later.
	    #
	    ExecQuietFatal("$SUDO -u $PROTOUSER $PREFIX/sbin/mkusercert ".
	         " -p " . $configvars{'ELABMAN_SSLCERT_PASSWORD'} . " elabman");
	}

	#
	# Trun on arp lockdown.
	#
	Phase "arplockdown", "Turning on arplockdown", sub {
	    ExecQuietFatal("$PREFIX/sbin/setsitevar ".
			   "general/arplockdown static");
	};

	#
	# Mike says: With the default server/client settings, the
	# client is still dropping packets and causing re-requests of
	# blocks. So for now, use the sitevars to scale back the frisbeed
	# send rate to 50000000 (50Mb/sec) for both system and user
	# images. The run time for single client is actually slightly
	# improved at this lower rate due to many fewer re-requests.
	#
	Phase "frisbeerate", "Setting frisbeed max rate", sub {
	    ExecQuietFatal("$PREFIX/sbin/setsitevar ".
			   "images/frisbee/maxrate_std 50000000");
	    ExecQuietFatal("$PREFIX/sbin/setsitevar ".
			   "images/frisbee/maxrate_usr 50000000");
	};

	#
	# A reasonable default image.
	#
	Phase "sitevar1", "Setting sitevar $PGOSSITEVAR", sub {
	    my $osimage = OSImage->LookupByName($DEFAULTOSID);
	    PhaseFail("Could not look up $DEFAULTOSID osid")
		if (!defined($osimage));
	    
	    ExecQuietFatal("$PREFIX/sbin/setsitevar ".
			   "'$PGOSSITEVAR' '$DEFAULTOSID'");
	};

	#
	# Latitude/Longitude
	#
	if (exists($configvars{'TARGETSYS_COUNTRY'}) &&
	    $configvars{'TARGETSYS_COUNTRY'} ne "") {
	    Phase "sitevar2", "Setting country sitevar", sub {
		SetSiteVar("general/default_country",
			   $configvars{'TARTGETSYS_COUNTRY'})
		    or PhaseFail("failed");
	    };
	}
	if (exists($configvars{'TARGETSYS_LATITUDE'}) &&
	    $configvars{'TARGETSYS_LATITUDE'} ne "") {
	    Phase "sitevar3", "Setting latitude sitevar", sub {
		SetSiteVar("general/default_latitude",
			   $configvars{'TARGETSYS_LATITUDE'})
		    or PhaseFail("failed");
	    };
	}
	if (exists($configvars{'TARGETSYS_LONGITUDE'}) &&
	    $configvars{'TARGETSYS_LONGITUDE'} ne "") {
	    Phase "sitevar4", "Setting longitude sitevar", sub {
		SetSiteVar("general/default_longitude",
			   $configvars{'TARGETSYS_LONGITUDE'})
		    or PhaseFail("failed");
	    };
	}
	
	
	#
	# Shutdown the testbed for the rest of this.
	#
	Phase "shutdown", "Shutting down the testbed", sub {
	    PhaseSkip("not running")
		if (!CheckDaemonRunning("stated"));
	    ExecQuietFatal("$TESTBED_CONTROL shutdown");
	};

	#
	# Also grab the port source while close to the server.
	#
	Phase "portsrc", "Getting port source tarball", sub {
	    DoneIfExists("$PREFIX/ports.tar.gz");
	    FetchFileFatal($PORTSRC, "$PREFIX/ports.tar.gz");
	};
	Phase "ports", "Unpacking port source tarball", sub {
	    DoneIfExists("$PREFIX/ports/Mk");
	    ExecQuietFatal("cd $PREFIX; $TAR zxf $PREFIX/ports.tar.gz");
	};
	Phase "portlink", "Linking to unpacked ports tree", sub {
	    ExecQuietFatal("/bin/rm -rf /usr/ports")
		if (-e "/usr/ports" && -d "/usr/ports");
	    ExecQuietFatal("cd /usr; ln -sf testbed/ports .");
	};
	Phase "tests", "Removing /usr/tests directory", sub {
	    ExecQuietFatal("/bin/rm -rf /usr/tests")
		if (-e "/usr/tests" && -d "/usr/tests");
	};

	# Need to add a symlink. 
	
	#
	# Need to remove the ELABINELAB flag.
	#
	my $OLDDEFSFILE = "$main::TOP_SRCDIR/defs-elabinelab";
	my $NEWDEFSFILE = "$main::TOP_SRCDIR/defs-targetsys";
	
	Phase "elabinelab", "Removing ELABINELAB stuff from defs file", sub {
	    DoneIfExists($NEWDEFSFILE);
	    # And some other stuff.
	    ExecQuietFatal("echo 'EC2META_ENABLE=1' | ".
			   " cat $OLDDEFSFILE - | sed ".
			   "   -e 's/^ELABINELAB/#ELABINELAB/' ".
			   "   -e 's/^WWWHOST=boss/WWWHOST=www/' ".
			   "   -e 's/^EXTERNAL_NTPS/#EXTERNAL_NTPS/' ".
			   "   > $NEWDEFSFILE");
	};

	#
	# Extra defs.
	#
	if (-e $DEFSEXTRA) {
	    Phase "defsextra", "Adding extra stuff to the defs file", sub {
		DoneIfEdited($NEWDEFSFILE);
		
		my $EXTRA = `/bin/cat $DEFSEXTRA`;
		PhaseFail("Cannot read extra defs from file")
		    if ($?);

		#
		# A POWDER specific kludge.
		#
		if ($TARGETSYS_TARGET =~ /^POWDER/ &&
		    exists($configvars{"CONFIG_NICKNAME"})) {
		    my $nickname = $configvars{"CONFIG_NICKNAME"};
		    
		    $EXTRA .= "\n" +
			"POWDER_NICKNAME=\"${nickname}\"\n";
		}
		AppendToFileFatal($NEWDEFSFILE, $EXTRA);
	    };
	}

	#
	# Build and install software without ELABINELAB defined.
	#
	Phase "Software", "Rebuilding and Reinstalling Software", sub {
	    DoneIfExists("$PREFIX/marker");
	    
	    Phase "cleaning", "Cleaning (please be patient)", sub {
		ExecQuietFatal("cd $TOP_OBJDIR; $GMAKE clean");
	    };
	    Phase "config", "Configuring (please be patient)", sub {
		ExecQuietFatal("cd $TOP_OBJDIR; ".
			       "   $main::TOP_SRCDIR/configure ".
			       "      --with-TBDEFS=$NEWDEFSFILE ".
			       "      --disable-windows");
	    };
	    Phase "building", "Building (please be patient)", sub {
		ExecQuietFatal("cd $TOP_OBJDIR; $GMAKE");
	    };
	    Phase "installing", "Installing (please be patient)", sub {
		ExecQuietFatal("cd $TOP_OBJDIR; $GMAKE boss-install");
	    };
	    Phase "rc.testbed", "Installing testbed RC scripts", sub {
		ExecQuietFatal("$GMAKE -C $TOP_OBJDIR/rc.d install");
	    };
	    Phase "ntpd", "Installing testbed ntp config", sub {
		ExecQuietFatal("$GMAKE -C $TOP_OBJDIR/ntpd install");
	    };
	    CreateFile("$PREFIX/marker", "targetsys install marker");
	};

	#
	# Add this feature so we get the right libvtop.
	#
	my $LIBVTOP_FEATURE     = "LibVtopTest";
	my $LIBVTOP_DESRIPTION  = "Test version of libvtop";
    
	my $feature = EmulabFeatures->Lookup($LIBVTOP_FEATURE);
	Phase "feature", "Adding libvtop_test feature", sub {
	    PhaseSkip("already exists")
		if (defined($feature));
	    $feature = EmulabFeatures->Create($LIBVTOP_FEATURE,
					      $LIBVTOP_DESRIPTION);
	    PhaseFail("Failed to create feature")
		if (!defined($feature));
	};
	Phase "feature", "Enabling libvtop_test feature", sub {
	    $feature->SetGlobalEnable(1) == 0
		or PhaseFail("Could not enable feature");
	    $feature->SetGlobalDisable(0) == 0
		or PhaseFail("Could not clear disable flag on feature");
	};

	#
	# Update the DB with the switch community string.
	#
	if (exists($configvars{'SWITCH_COMMUNITY'})) {
	    my $safe_password = DBQuoteSpecial($configvars{'SWITCH_COMMUNITY'});
	    DBQueryWarn("update switch_stack_types set ".
			"snmp_community=$safe_password")
		or PhaseFail("Could not set snmp community strings");
	}

	#
	# Delete existing ops node; we recreate it later. 
	#
	Phase "opsnode", "Deleting ops node", sub {
	    PhaseSkip("already deleted")
		if (!defined(Node->Lookup("ops")));
	    ExecQuietFatal("$DELETENODE -f -s ops");
	};

	#
	# Shutdown DHCP and fix the dynamic range that rc.mkelab changed.
	# This is okay since the subnet is different then Emulab.
	#
	Phase "dhcpd", "Fixing dhcpd configuration", sub {
	    ExecQuietFatal("/bin/rm -f $DHCPD_TEMPLATE");
	    ExecQuietFatal("cd $TOP_OBJDIR/dhcpd; $GMAKE install");
	    ExecQuietFatal("$DHCPD_MAKECONF -i");
	};

	foreach my $osid (@EXPORTEDOSIDS) {
	    Phase "$osid", "Enabling protogeni export for $osid", sub {
		my $osimage = OSImage->LookupByName($osid);
		PhaseFail("No such image $osid")
		    if (!defined($osimage));
		$osimage->Update({"protogeni_export" => 1}) == 0
		    or PhaseFail("DB query failed");
	    };
	}

	#
	# 
	#
	Phase "buildenv", "Creating build environment", sub {
	    Phase "mkdir", "Creating directory in elabman", sub {
		DoneIfExists("$ELABMANDIR/emulab-devel");
		mkdir "$ELABMANDIR/emulab-devel",0775 or
		    PhaseFail("Unable to create $ELABMANDIR/emulab-devel: $!");

	    };
	    Phase "cpdefs", "Coping defs file to elabman", sub {
		DoneIfExists("$ELABMANDIR/emulab-devel/defs-targetsys");
		ExecQuietFatal("/bin/cp -f $PREFIX/src/testbed/defs-targetsys ".
			       "        $ELABMANDIR/emulab-devel");
	    };
	    Phase "mvsrc", "Moving src directory to elabman", sub {
		DoneIfExists("$ELABMANDIR/emulab-devel/emulab-devel");
		ExecQuietFatal("/bin/mv -f $PREFIX/src/testbed ".
			       "        $ELABMANDIR/emulab-devel/emulab-devel");
	    };
	    Phase "mvobj", "Moving obj directory to elabman", sub {
		DoneIfExists("$ELABMANDIR/emulab-devel/obj");
		ExecQuietFatal("/bin/mv -f $PREFIX/obj/testbed ".
			       "        $ELABMANDIR/emulab-devel/obj");
	    };
	    Phase "srcsymlink", "Leaving src symlink behind", sub {
		DoneIfExists("$PREFIX/src/testbed");
		ExecQuietFatal("cd $PREFIX/src; ln -s ".
			       "  $ELABMANDIR/emulab-devel/emulab-devel ".
			       "  testbed");
	    };
	    Phase "objsymlink", "Leaving obj symlink behind", sub {
		DoneIfExists("$PREFIX/obj/testbed");
		ExecQuietFatal("cd $PREFIX/obj; ln -s ".
			       "  $ELABMANDIR/emulab-devel/obj obj");
	    };
	    Phase "chown", "Changing owner and group", sub {
		ExecQuietFatal("$CHOWN -R elabman:emulab-ops ".
			       "   $ELABMANDIR/emulab-devel");
		ExecQuietFatal("$CHOWN -R -h elabman:emulab-ops ".
			       "   $ELABMANDIR/emulab-devel");
	    };
	};

	PhaseSucceed("Targetsys Setup Done");
    };
    return 0;
}

# Local Variables:
# mode:perl
# End:
