#
# Install xen support.
#
use strict;
use libinstall;
use installvars;
use NodeType;
use OSinfo;
use OSImage;
use EmulabConstants;

my $DESCRIPTORS   = "$TOP_SRCDIR/install/descriptors-xen.xml";
# See the images phase file if you change this.
my $XENIMAGE      = "XEN49-64-STD";

sub Install($$$)
{
    my ($server, $isupdate, $impotent) = @_;

    # Replace if this script does an update for ip/domain.
    return 0
	if ($isupdate);

    #
    # These are the images that are known to run as XEN guests.
    #
    my @images = ("UBUNTU16-64-STD", "UBUNTU18-64-STD", "CENTOS7-64-STD",
		  "FBSD103-64-STD", "FBSD113-64-STD", "FBSD121-64-STD");

    if ($FBSD_MAJOR <= 10) {
	$XENIMAGE = "XEN46-64-STD";
	push(@images, "UBUNTU14-64-STD");
    }

    Phase "xen", "Adding XEN Support", sub {
	Phase "sitevar", "Setting default_xen_parentosid sitevar", sub {
	    ExecQuietFatal("$PREFIX/sbin/setsitevar ".
		   "general/default_xen_parentosid emulab-ops,$XENIMAGE");
	};
	
	#
	# Load up the initial descriptors. 
	# Load up the images from boss.
	#
	Phase "descriptors", "Loading the Image and OS IDS", sub {
	    ExecQuietFatal("cd $TOP_OBJDIR/install; ".
			   "   $SUDO -u $PROTOUSER $WAP ".
			   "   perl load-descriptors -a $DESCRIPTORS");
	};
	#
	# Now that XEN-STD is loaded, need to find the nodetype for
	# PCVM and link them via the default_osid. We could avoid this by
	# creating an xml file for the pcvm nodetype and loading it that
	# way instead of as sql in database-fill-supplement.
	#
	my $pcvm = NodeType->Lookup("pcvm");
	PhaseFail("Could not look up PCVM node type")
	    if (!defined($pcvm));

	my $osinfo = OSinfo->LookupByName("XEN-STD");
	PhaseFail("Could not look up XEN-STD osid")
	    if (!defined($osinfo));

	my $parentosinfo = OSinfo->LookupByName($XENIMAGE);
	PhaseFail("Could not look up $XENIMAGE osid")
	    if (!defined($parentosinfo));

	my $nextosinfo = OSinfo->LookupByName($images[0]);
	PhaseFail("Could not look up " . $images[0] . " osid")
	    if (!defined($nextosinfo));

	my $diskload_osinfo = OSinfo->LookupByName("FRISBEE-MFS-PCVM");
	PhaseFail("Could not look up FRISBEE-MFS-PCVM osid")
	    if (!defined($diskload_osinfo));

	Phase "pcvm", "Updating the PCVM node type", sub {
	    $pcvm->SetAttribute("default_osid", $osinfo->osid()) == 0
		or PhaseFail("Could not update the pcvm node type");
	    
	    $pcvm->SetAttribute("diskloadmfs_osid",
				$diskload_osinfo->osid()) == 0
		or PhaseFail("Could not update the pcvm node type");
	};
	Phase "xenosid", "Updating the XEN-STD osid", sub {
	    $osinfo->SetNextOS($nextosinfo) == 0
		or PhaseFail("Could not set the nextosid for XEN-STD");
	    $osinfo->SetParentOS($parentosinfo) == 0
		or PhaseFail("Could not set the parent osid for XEN-STD");
	    $osinfo->SetRunsOnParent($parentosinfo) == 0
		or PhaseFail("Could not add os_submap entry for XEN-STD");
	};

	#
	# Foreach of these images, we need to mark them as running
	# on the pcvm node type. Then we need to set the parent and
	# os_submap stuff.
	#
	Phase "guests", "Updating images to run as a xen guest", sub {
	    foreach my $imagename (@images) {
		Phase "$imagename", "Updating $imagename", sub {
		    my $image = OSImage->Lookup(TBOPSPID(), $imagename);
		    
		    PhaseSkip("does not exist")
			if (!defined($image));
		    
		    my $osinfo = OSinfo->Lookup(TBOPSPID(), $imagename);
		    PhaseFail("No osinfo for $imagename")
			if (!defined($osinfo));

		    $image->SetRunsOnNodeType("pcvm") == 0
			or PhaseFail("Could not set $imagename to run on pcvm");
		    # This must be first. 
		    $osinfo->SetParentOS($parentosinfo) == 0
			or PhaseFail("Could not set $imagename parent os");
		    $osinfo->SetRunsOnParent($parentosinfo) == 0
			or PhaseFail("Could not set $imagename to run on parent");
		};
	    }
	};
	PhaseSucceed("done")
    };
    return 0;
}

# Local Variables:
# mode:perl
# End:
