#
# The template
#
use strict;
use libinstall;
use installvars;

my $APACHE_START = $APACHE_START_COMMAND;
my $OLDEMULABKEY = "/usr/emulabcerts/emulab.key";
my $OLDEMULABPEM = "/usr/emulabcerts/emulab.pem";

sub Install($$$)
{
    my ($server, $isupdate, $impotent) = @_;

    my $phase_message = ($isupdate ?
			 "Updating SSL certificates" :
			 "Setting up SSL certificates");

    Phase "sslcerts", $phase_message, sub {
	PhaseFail("$CACERT does not exist")
	    if ($isupdate && !-e $CACERT);

	if ($isupdate) {
	    #
	    # Check to see if the certificates need to be updated. The only
	    # reason to do this is if the domain has changed. We do not
	    # worry about other changes in the certificate subject, since
	    # regenerating the certificates is an annoyance to users.
	    #
	    my $subject = ParseCertificate($CACERT);
	    PhaseFail("Could not parse $CACERT")
		if (!defined($subject));

	    PhaseSkip("Domain has not changed")
		if (0 && $subject->{'CN'} eq "${BOSSNODE}");

	    #
	    # Need to regenerate the certificates, but we will use the
	    # existing keys (if we have them). 
	    #
	    Phase "oldcerts", "Locating old keys", sub {
		PhaseSkip("Old keys in object directory")
		    if (-e "$TOP_OBJDIR/ssl/emulab.key" &&
			-e "$TOP_OBJDIR/ssl/server.key" &&
			-e "$TOP_OBJDIR/ssl/apache.key" &&
			-e "$TOP_OBJDIR/ssl/apache-ops.key");

		ExecQuietFatal("cd $TOP_OBJDIR/ssl; $GMAKE recover-keys");
	    };
	    Phase "cleaning", "Cleaning build directory", sub {
		ExecQuietFatal("$GMAKE -C $TOP_OBJDIR/ssl clean-certs");
	    };
	}
	Phase "sslgen", "Generating SSL certificates", sub {
	    DoneIfExists("$TOP_OBJDIR/ssl/$EMULAB_PEM");
	    
	    #
	    # This is for complete regen of an existing site, but we
	    # want to retain the old key/cert, as for a genirack rebuild.
	    #
	    if (-e $OLDEMULABPEM && -e $OLDEMULABKEY) {
		ExecQuietFatal("$GMAKE -C $TOP_OBJDIR/ssl prebuild");
		ExecQuietFatal("$CP -p $OLDEMULABKEY $TOP_OBJDIR/ssl");
		ExecQuietFatal("$CP $OLDEMULABPEM $TOP_OBJDIR/ssl");
		if ($PGENISUPPORT) {
		    # Prevent reregistration of old certs.
		    ExecQuietFatal("$TOUCH $ETCDIR/.protogeni_federated");
		}
	    }
	    ExecQuietFatal("$GMAKE -C $TOP_OBJDIR/ssl remote-site");
	};
	if ($isupdate) {
	    Phase "backup", "Backup up $ETCDIR", sub {
		BackupDirectoryFatal("$ETCDIR");
	    };
	}
	Phase "sslinstall", "Installing SSL certificates", sub {
	    DoneIfIdentical("$ETCDIR/$EMULAB_PEM", "$TOP_OBJDIR/ssl/$EMULAB_PEM")
		if (-e "$ETCDIR/$EMULAB_PEM");
	    
	    ExecQuietFatal("$GMAKE -C $TOP_OBJDIR/ssl remote-site-boss-install");
	};
	Phase "sslopscopy", "Copying SSL certificates to ops", sub {
	    ExecQuietFatal("$SSH -o 'BatchMode=yes' root\@${USERNODE} ".
			   "     mkdir -p ${ETC_EMULAB_DIR} ");
	    ExecQuietFatal("$SCP $PREFIX/etc/$EMULAB_PEM ".
			   "     ${USERNODE}:${ETC_EMULAB_DIR}");
	    ExecQuietFatal("$SCP $PREFIX/etc/$EMULAB_PUB ".
			   "     ${USERNODE}:${ETC_EMULAB_DIR}");
	    ExecQuietFatal("$SCP $TOP_OBJDIR/ssl/$CTRLNODE_PEM".
			   "     ${USERNODE}:${ETC_EMULAB_DIR}/${CLIENT_PEM}");
	    ExecQuietFatal("$SSH -o 'BatchMode=yes' root\@${USERNODE} ".
			   "     'chmod 640 ${ETC_EMULAB_DIR}/${CLIENT_PEM}; ".
			   "      chmod 640 ${ETC_EMULAB_DIR}/${EMULAB_PEM}; ".
			   "      chown root:wheel ${ETC_EMULAB_DIR}/${CLIENT_PEM}; ".
			   "      chown root:wheel ${ETC_EMULAB_DIR}/${EMULAB_PEM}' ");
	};
	Phase "sslfscopy", "Copying SSL certificates to fs", sub {
	    if ($DISABLE_EXPORTS_SETUP) {
		PhaseSkip("FS node is not managed by boss");
	    }
	    if ($USERNODE eq $FSNODE) {
		PhaseSkip("FS node is ops node");
	    }
	    if ($BOSSNODE eq $FSNODE) {
		PhaseSkip("FS node is boss node");
	    }
	    ExecQuietFatal("$SSH -o 'BatchMode=yes' root\@${FSNODE} ".
			   "     mkdir -p ${ETC_EMULAB_DIR} ");
	    ExecQuietFatal("$SCP $PREFIX/etc/$EMULAB_PEM ".
			   "     ${FSNODE}:${ETC_EMULAB_DIR}");
	    ExecQuietFatal("$SCP $TOP_OBJDIR/ssl/$CTRLNODE_PEM".
			   "     ${FSNODE}:${ETC_EMULAB_DIR}/${CLIENT_PEM}");
	    ExecQuietFatal("$SSH -o 'BatchMode=yes' root\@${FSNODE} ".
			   "     'chmod 640 ${ETC_EMULAB_DIR}/${CLIENT_PEM}; ".
			   "      chmod 640 ${ETC_EMULAB_DIR}/${EMULAB_PEM}; ".
			   "      chown root:wheel ${ETC_EMULAB_DIR}/${CLIENT_PEM}; ".
			   "      chown root:wheel ${ETC_EMULAB_DIR}/${EMULAB_PEM}' ");
	};
	Phase "apache", "Setting up Apache on boss", sub {
	    Phase "dirs", "Creating SSL directories ", sub {
		PhaseSucceed()
		    if (-d "$APACHE_ETCDIR/ssl.crt" &&
			-d "$APACHE_ETCDIR/ssl.key");

		if (! -d "$APACHE_ETCDIR/ssl.crt") {
		    mkdir "$APACHE_ETCDIR/ssl.crt", 0700 or
			PhaseFail("Unable to create $APACHE_ETCDIR/ssl.crt : $!");
		}
		if (! -d "$APACHE_ETCDIR/ssl.key") {
		    mkdir "$APACHE_ETCDIR/ssl.key", 0700 or
			PhaseFail("Unable to create $APACHE_ETCDIR/ssl.key : $!");
		}
	    };
	    Phase "cert", "Installing Apache SSL certificate", sub {
		if (-e "$APACHE_CERTFILE") {
		    DoneIfIdentical("$APACHE_CERTFILE",
				    "$TOP_OBJDIR/ssl/$APACHE_CERTPEM");
		    BackUpFileFatal($APACHE_CERTFILE);
		}
		ExecQuietFatal("$CP $TOP_OBJDIR/ssl/$APACHE_CERTPEM ".
			       "    $APACHE_CERTFILE");
	    };
	    Phase "key", "Installing Apache SSL key", sub {
		if (-e "$APACHE_KEYFILE") {
		    DoneIfIdentical("$APACHE_KEYFILE",
				    "$TOP_OBJDIR/ssl/$APACHE_KEYPEM");
		    BackUpFileFatal($APACHE_KEYFILE);
		}
		ExecQuietFatal("$CP $TOP_OBJDIR/ssl/$APACHE_KEYPEM ".
			       "    $APACHE_KEYFILE");
	    };
	    if ($APACHE_VERSION eq "1.3" && !$isupdate) {
		Phase "rc.d", "Installing Apache startup file", sub {
		    DoneIfExists($APACHE_START);
		    my $sfile;
		    if ($FBSD_MAJOR > 6) {
			$sfile = "$RCDIR/apache";		
		    } else {
			$sfile = "$RCDIR/apache.sh.sample";
		    }
		    ExecQuietFatal("mv $sfile $APACHE_START");
		    if ($FBSD_MAJOR == 6) {
			ExecQuietFatal("sed -i .orig ".
				       "-e 's/^apache_enable/#apache_enable/' ".
				       "$APACHE_START");
			ExecQuietFatal("/bin/rm -f ${APACHE_START}.orig");
		    }
		};
	    }
	    if (!$isupdate) {
		Phase "starting", "Starting Apache server", sub {
		    DoneIfExists("$VARRUN/httpd.pid");
		    ExecQuietFatal("$APACHE_START start");
		};
	    }
	};
	if ($FBSD_MAJOR > 4) {
	    Phase "apache", "Setting up Apache on ops", sub {
		Phase "cert", "Installing Apache SSL certificate", sub {
		    ExecQuietFatal("$SCP $TOP_OBJDIR/ssl/$APACHE_CERTPEM_OPS ".
				   "     ${USERNODE}:$APACHE_CERTFILE_OPS");
		};
		Phase "key", "Installing Apache SSL key", sub {
		    ExecQuietFatal("$SCP $TOP_OBJDIR/ssl/$APACHE_KEYPEM_OPS ".
				   "     ${USERNODE}:$APACHE_KEYFILE_OPS");
		};
		if ($APACHE_VERSION eq "1.3" && !$isupdate) {
		    Phase "rc.d", "Installing Apache startup file", sub {
			ExecQuietFatal("$SCP $APACHE_START".
				       "     ${USERNODE}:${APACHE_START}");
		    };
		}
	    };
	}
	if ($isupdate) {
	    require emdb;
	    import emdb;
	    
	    Phase "tipservers", "Copying certificate to tipservers", sub {
		my $query_result =
		    DBQueryWarn("select server from tipservers");

		PhaseFail("Could not get tipservers from DB")
		    if (!$query_result);
		PhaseSucceed("No tipservers")
		    if (!$query_result->numrows());

		while (my ($server) = $query_result->fetchrow_array) {
		    Phase "tipcopy", "Copying new certificate to $server", sub {
			ExecQuietFatal("$SCP $TOP_OBJDIR/ssl/capture.pem ".
				       "     ${USERNODE}:${ETCDIR}");
		    };
		}
		PhaseSucceed("Tip servers updated")
	    };
	}
    };

    return 0;
}

# Local Variables:
# mode:perl
# End:
