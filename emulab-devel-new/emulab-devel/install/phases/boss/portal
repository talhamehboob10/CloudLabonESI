#
# Set up the Emulab Portal.
#
use strict;
use libinstall;
use installvars;
use emdb;
use EmulabConstants;

my $MYURN           = "urn:publicid:IDN+${OURDOMAIN}+authority+cm";
my $GENILIB_REPO    = "https://gitlab.flux.utah.edu/emulab/geni-lib.git";
my $GENILIB_SRCDIR  = "$TOP_SRCDIR/../geni-lib";
my $APACHEPREFIX    = ("$APACHE_VERSION" == "24" ? "apache24" : "apache22");
my $PROFILE_ONEVM   = "$TOP_SRCDIR/install/onevm.xml";
my $PROFILE_ONEPC   = "$TOP_SRCDIR/install/onepc.xml";
my $MANAGE_PROFILE  = "$TBROOT/bin/manage_profile";

sub Install($$$)
{
    my ($server, $isupdate, $impotent) = @_;

    Phase "portal", "Setting up the portal", sub {
	PhaseSkip("Portal not enabled")
	    if (!$PORTAL_ENABLE);

	# Only first token on THISHOMEBASE;
	my ($THB) = split(/\./, $THISHOMEBASE);

	Phase "aggregate", "Adding entry to aggregates table", sub {
	    my $query_result =
		DBQueryWarn("select urn from apt_aggregates where urn='$MYURN'");
	    PhaseFail("DB error")
		if (!$query_result);
	    PhaseSkip("already added")
		if ($query_result->numrows);

	    DBQueryWarn("insert into apt_aggregates set ".
			"  urn='$MYURN', name='$THB', ".
			"  nickname='$THB', ".
			"  abbreviation='$THB', ".
			"  weburl='$TBBASE', ".
			"  updated=now(),has_datasets=1,reservations=1, ".
			"  portals='emulab'")
		or PhaseFail("DB Error");
	};
	Phase "geni-lib", "Setting up geni-lib", sub {
	    Phase "clone", "Cloning geni-lib from repo", sub {
		PhaseSkip("Already cloned")
		    if (-e "$GENILIB_SRCDIR/.git");
		ExecQuietFatal("cd $TOP_SRCDIR/..; ".
			       "git clone $GENILIB_REPO");
	    };
	    Phase "rsync-one", "Copying geni-lib to /usr/local", sub {
		ExecQuietFatal("cd $TOP_SRCDIR/..; ".
			       "rsync -a geni-lib /usr/local/lib");
	    };
	    Phase "rsync-two", "Copying geni-lib to $TBROOT", sub {
		ExecQuietFatal("cd $TOP_SRCDIR/..; ".
			       "rsync -a geni-lib $TBROOT/opsdir/lib");
	    };
	};
	Phase "mod_fcgid", "Looking for mod_fcgid and installing", sub {
	    DoneIfPackageInstalled("mod_fcgid");
	    ExecQuietFatal("pkg install mod_fcgid");
	};
	Phase "fcgidsock", "Fixing /var/run/fcgidsock", sub {
	    ExecQuietFatal("chown nobody:nobody /var/run/fcgidsock");
	    ExecQuietFatal("chmod 770 /var/run/fcgidsock");
	};
	Phase "emulabkey", "Fixing perms on $TBROOT/etc/emulab.key", sub {
	    ExecQuietFatal("chmod 644 $TBROOT/etc/emulab.key");
	};
	Phase "rc.conf", "Adding fcgid to apache flags", sub {
	    PhaseSkip("already added") unless `grep -q PGENI_FCGID $RCCONF`;
	    my $flags = "-DSSL -DPGENI -DPGENI_FCGID";
    
	    AppendToFileFatal($RCCONF,
			      "${APACHEPREFIX}_flags=\"$flags\"");
	    ExecQuietFatal("$APACHE_START_COMMAND restart");
	};
	Phase "profile1", "Creating initial OneVM profile", sub {
	    my $tbopspid = TBOPSPID();
	    my $query_result =
		DBQueryWarn("select profileid from apt_profiles ".
			    "where pid='$tbopspid' and name='OneVM'");
	    PhaseFail("DB error")
		if (!$query_result);
	    PhaseSkip("already created")
		if ($query_result->numrows);
	    
	    ExecQuietFatal("$SUDO -u $PROTOUSER ".
			   "   $MANAGE_PROFILE create $PROFILE_ONEVM");
	};
	Phase "profile2", "Creating initial OneNode profile", sub {
	    my $tbopspid = TBOPSPID();
	    my $query_result =
		DBQueryWarn("select profileid from apt_profiles ".
			    "where pid='$tbopspid' and name='OneNode'");
	    PhaseFail("DB error")
		if (!$query_result);
	    PhaseSkip("already created")
		if ($query_result->numrows);
	    
	    ExecQuietFatal("$SUDO -u $PROTOUSER ".
			   "   $MANAGE_PROFILE create $PROFILE_ONEPC");
	};
	Phase "sitevar", "Setting default_profile sitevar", sub {
	    ExecQuietFatal("$PREFIX/sbin/setsitevar ".
		   "portal/default_profile emulab-ops,OneNode");
	};
    };    

    return 0;
}

# Local Variables:
# mode:perl
# End:
