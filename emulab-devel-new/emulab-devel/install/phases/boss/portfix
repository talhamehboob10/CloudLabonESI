#
# The template
#
use strict;
use libinstall;
use installvars;

sub Install($$$)
{
    my ($server, $isupdate, $impotent) = @_;

    # Replace if this script does an update for ip/domain.
    return 0
	if ($isupdate);

    Phase "portfixup", "Fixing up packages", sub {
	Phase "perllink", "Looking for working $EMULAB_PERL_PATH link", sub {
	    DoneIfExecutable($EMULAB_PERL_PATH);
	    if (! -x $PORT_PERL_PATH) {
		PhaseFail("$PORT_PERL_PATH does not exist!");
	    }
	    ExecQuietFatal("ln -sf $PORT_PERL_PATH $EMULAB_PERL_PATH");
	};
	Phase "pythonlink", "Looking for working $EMULAB_PYTHON_PATH link", sub {
	    DoneIfExecutable($EMULAB_PYTHON_PATH);
	    if (-x $PORT_PYTHON_PATH) {
		ExecQuietFatal("ln -sf $PORT_PYTHON_PATH $EMULAB_PYTHON_PATH");
	    } elsif (-x $PORT_PYTHON_PATH2) {
		ExecQuietFatal("ln -sf $PORT_PYTHON_PATH2 $EMULAB_PYTHON_PATH");
	    } else {
		PhaseFail("$PORT_PYTHON_PATH does not exist!");
	    }
	};
	Phase "rsync", "Looking for rsync", sub {
	    DoneIfPackageInstalled("rsync");
	    my $pname = GetPackage("rsync", $packagedir);
	    AddPackage($pname, $packagedir);
	};
	if ($FBSD_MAJOR >= 6) {
	    # Temporary for template stuff
	    Phase "Simple", "Looking for Simple XML Parser", sub {
		DoneIfPackageInstalled("p5-XML-Simple");
		my $pname = GetPackage("p5-XML-Simple", $packagedir);
		AddPackage($pname, $packagedir);
	    };
	    if ($ARCHSUPPORT) {
		Phase "Subversion", "Looking for Subversion", sub {
		    DoneIfPackageInstalled("subversion");
		    my $pname;
		    if ($FBSD_MAJOR > 6) {
			$pname = GetPackage("py-subversion", $packagedir);
		    } else {
			$pname = GetPackage("subversion-python", $packagedir);
		    }
		    AddPackage($pname, $packagedir);
		};
	    }
	}
	if ($WINSUPPORT) {
	    Phase "gcc30", "Looking for GCC 3.0 and installing", sub {
		if ($FBSD_MAJOR > 4) {
		    PhaseSkip("not needed");
		}
		DoneIfPackageInstalled("gcc30");
		my $pname = GetPackage("gcc30", $packagedir);
		AddPackage($pname, $packagedir);
	    };
	}
	if ($FBSD_MAJOR > 6) {
	    #
	    # What a crock!  First, that the FreeBSD ports system
	    # defaults to installing the zipped .egg files that have
	    # to be unzipped per-user before use.  Second, that it
	    # offers no easy way at package creation to override this.
	    # Third, that there is no easy way that I could find in
	    # the python eggs system to set a global cache directory
	    # into which to unpack all eggs; you have to set
	    # PYTHON_EGG_CACHE in the environment of every script.
	    # Fourth, that the per-user default value might be in an
	    # unwritable location.
	    #
	    # So, I am reduced to manually unpacking all .egg files
	    # into the corresponding .egg directories after the
	    # install!  Since this would totally screw any attempt
	    # to update those packages, I just do it to the one
	    # package that I know will fail otherwise.
	    #
	    Phase "m2crypto-egg", "Unpacking python m2crypto .egg", sub {
		my $pydir = "/usr/local/lib/$PY_VER/site-packages";
		my $egg = `ls -d $pydir/M2Crypto-*-py*-*.egg 2>/dev/null | tail -1`;
		chomp($egg);
		if ($egg eq "") {
		    PhaseSkip("egg not found");
		}
		if (-d "$egg") {
		    PhaseSkip("egg already unpacked");
		}
		if (! -x $EASYINSTALL) {
		    PhaseSkip("python easy_install missing");
		}
		# XXX swig must be installed for easyinstall to exit correctly
		Phase "swig", "Installing swig", sub {
		    DoneIfPackageInstalled("swig");
		    my $pname = GetPackage("swig", $packagedir);
		    AddPackage($pname, $packagedir);
		};
		ExecQuietFatal("mv $egg /var/tmp/");
		$egg =~ s/$pydir//;
		ExecQuietFatal("$EASYINSTALL -N -H None -Z /var/tmp$egg");
		ExecQuietFatal("mv /var/tmp$egg $pydir/$egg.bak");
	    };
	}
	if ($FBSD_MAJOR == 9) {
	    #
	    # Ports that were added after the 9.0 packages were made.
	    # As of 05/2014, the 9.0 stuff is still needed on geniracks.
	    #
	    Phase "p5-Net-IP", "Looking for p5-Net-IP and installing", sub {
		DoneIfPackageInstalled("p5-Net-IP");
		my $pname = GetPackage("p5-Net-IP", $packagedir);
		AddPackage($pname, $packagedir);
	    };
	    Phase "p5-JSON", "Looking for p5-JSON and installing", sub {
		DoneIfPackageInstalled("p5-JSON");
		my $pname = GetPackage("p5-JSON", $packagedir);
		AddPackage($pname, $packagedir);
	    };
	}
	if ($FBSD_MAJOR >= 10) {
	    Phase "bind-compat", "Creating /etc/namedb for backward compat", sub {
		PhaseSkip("already exists")
		    if (-e "/etc/namedb");
		PhaseSkip("bind not installed?")
		    if (! -d "/usr/local/etc/namedb");
		ExecQuietFatal("ln -sf /usr/local/etc/namedb /etc/namedb");
	    };
	}
	if ($PGENISUPPORT) {
	    Phase "mod_wsgi3", "Looking for mod_wsgi3 and installing", sub {
		if ($FBSD_MAJOR >= 11) {
		    DoneIfPackageInstalled("ap24-${PY_PKGPREFIX}-mod_wsgi");
		    my $pname = GetPackage("ap24-${PY_PKGPREFIX}-mod_wsgi",
					   $packagedir);
		    AddPackage($pname, $packagedir);
		} else {
		    DoneIfPackageInstalled("ap22-mod_wsgi");
		    my $pname = GetPackage("ap22-mod_wsgi", $packagedir);
		    AddPackage($pname, $packagedir);
		}
	    };
	    Phase "py-flask", "Looking for py-flask and installing", sub {
		DoneIfPackageInstalled("${PY_PKGPREFIX}-Flask");
		my $pname = GetPackage("${PY_PKGPREFIX}-Flask", $packagedir);
		AddPackage($pname, $packagedir);
	    };
	    Phase "mod_fcgid", "Looking for mod_fcgid and installing", sub {
		DoneIfPackageInstalled("mod_fcgid");
		ExecQuietFatal("pkg install mod_fcgid");
		ExecQuietFatal("chown nobody:nobody /var/run/fcgidsock");
		ExecQuietFatal("chmod 770 /var/run/fcgidsock");
	    };
	}
    };

    return 0;
}

# Local Variables:
# mode:perl
# End:
