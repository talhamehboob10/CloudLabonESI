#
# The template
#
use strict;
use libinstall;
use installvars;

sub Install($$$)
{
    my ($server, $isupdate, $impotent) = @_;

    Phase "samba", "Setting up Samba", sub {
	if (!ISFS($server)) {
	    PhaseSkip("Not FS node");
	}
	if (!$WINSUPPORT) {
	    PhaseSkip("Windows support not enabled");
	}
	if ($FBSD_MAJOR > 10 || ($FBSD_MAJOR == 10 && $FBSD_MINOR > 2)) {
	    PhaseSkip("Samba no longer supported");
	}
	Phase "smb.conf", "Installing smb.conf[.head]", sub {
	    DoneIfIdentical("$TOP_OBJDIR/install/smb.conf.head", $SMBCONF_HEAD)
		if (-e $SMBCONF_HEAD);
	    BackUpFileFatal($SMBCONF_HEAD)
		if (-e $SMBCONF_HEAD);
	    
	    ExecQuietFatal("$CP -pf $TOP_OBJDIR/install/smb.conf.head $SMBCONF_HEAD");
	    ExecQuietFatal("$CP -pf $SMBCONF_HEAD $SMBCONF_FILE");
	};
	PhaseSucceed("update complete")
	    if ($isupdate);
	
	Phase "samba.sh", "Installing samba.sh", sub {
	    DoneIfExists("$RCDIR/samba.sh");
	    DoneIfDoesntExist("$RCDIR/samba.sh.sample");
	    ExecQuietFatal("$MV -f $RCDIR/samba.sh.sample $RCDIR/samba.sh");
	};
	if ($ELABINELAB) {	
	    Phase "starting", "Starting Samba", sub {
		my $sscript;
		if (-x "$RCDIR/samba.sh") {
		    $sscript = "samba.sh";
		} elsif (-x "$RCDIR/samba") {
		    $sscript = "samba";
		} else {
		    PhaseFail("No samba startup script!?");
		}
		DoneIfExists("$VARRUN/smbd.pid");
		ExecQuietFatal("$RCDIR/$sscript start");
	    };
	}
    };
    return 0;
}

# Local Variables:
# mode:perl
# End:
