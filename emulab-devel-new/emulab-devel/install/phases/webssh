#
# Set up the Emulab Portal.
#
use strict;
use libinstall;
use installvars;

my $WEBSSH_REPO     = "https://gitlab.flux.utah.edu/emulab/webssh.git";
my $WEBSSH_SRCDIR   = "$TOP_SRCDIR/../webssh";
my $APACHEPREFIX    = ("$APACHE_VERSION" == "24" ? "apache24" : "apache22");

sub Install($$$)
{
    my ($server, $isupdate, $impotent) = @_;

    Phase "webssh", "Setting up webssh", sub {
	PhaseSkip("webssh not enabled")
	    if (!$BROWSER_CONSOLE_WEBSSH);

	if (ISOPSNODE($server)) {
	    Phase "tornado", "Installing tornado port", sub {
		DoneIfPackageInstalled("py27-tornado");
		$ENV{"ASSUME_ALWAYS_YES"} = "true";
		ExecQuietFatal("sudo pkg install -y -r Emulab py27-tornado");
	    };

	    Phase "paramiko", "Installing paramiko port", sub {
		DoneIfPackageInstalled("py27-paramiko");
		$ENV{"ASSUME_ALWAYS_YES"} = "true";
		ExecQuietFatal("sudo pkg install -y -r Emulab py27-paramiko");
	    };
	
	    Phase "clone", "Cloning webssh from repo", sub {
		PhaseSkip("Already cloned")
		    if (-e "$WEBSSH_SRCDIR/.git");
	    
		ExecQuietFatal("cd $TOP_SRCDIR/..; ".
			       "git clone $WEBSSH_REPO");
	    };
	    Phase "install", "Installing webssh", sub {
		PhaseSkip("Already installed")
		    if (-e "/usr/local/bin/wssh");
	    
		ExecQuietFatal("cd $WEBSSH_SRCDIR; ".
			       "sudo python setup.py install");
	    };
	    Phase "rcd", "Checking for rc.d start file", sub {
		DoneIfExists("$RCDIR/webssh.sh");
		ExecQuietFatal("$GMAKE -C $TOP_OBJDIR/rc.d ".
			       "  $RCDIR/webssh.sh");
	    };
	}
	Phase "httpd", "Checking for correct httpd.conf file", sub {
	    PhaseSkip("Apache disabled in proxy mode")
		if (ISOPSNODE($server) && $BROWSER_CONSOLE_PROXIED);
	    PhaseSkip("Apache updates not needed")
		if (ISBOSSNODE($server) && !$BROWSER_CONSOLE_PROXIED);

	    BackUpFileFatal("$HTTPD_GENI_CONF")
		if (-e $HTTPD_GENI_CONF);

	    if (-e "$APACHE_ETCDIR/httpd-www.conf") {
		if (ISOPSNODE($server)) {
		    DoneIfIdentical("$TOP_OBJDIR/apache/httpd-ops.conf",
				    "$APACHE_ETCDIR/httpd-www.conf");
		}
		else {
		    DoneIfIdentical("$TOP_OBJDIR/apache/httpd.conf",
				    "$APACHE_ETCDIR/httpd-www.conf");
		}
		BackUpFileFatal("$APACHE_ETCDIR/httpd-www.conf")	    
	    }
	    else {
		if (ISOPSNODE($server)) {
		    DoneIfIdentical("$TOP_OBJDIR/apache/httpd-ops.conf",
				    "$HTTPD_CONF");
		}
		else {
		    DoneIfIdentical("$TOP_OBJDIR/apache/httpd.conf",
				    "$HTTPD_CONF");
		}
		BackUpFileFatal("$HTTPD_CONF");
	    }
	    
	    if (ISOPSNODE($server)) {
		ExecQuietFatal("$GMAKE -C $TOP_OBJDIR/apache control-install");
	    }
	    else {
		ExecQuietFatal("$GMAKE -C $TOP_OBJDIR/apache install");
	    }
	    if (-e "$APACHE_ETCDIR/httpd-www.conf") {
		ExecQuietFatal("/bin/mv -f $HTTPD_CONF ".
			       " $APACHE_ETCDIR/httpd-www.conf");
	    }
	    Phase "apache", "Restarting Apache", sub {
		PhaseSkip("Apache not running")
		    if (system("/usr/bin/killall -q -s httpd"));
				
		ExecQuietFatal("$APACHE_START_COMMAND restart");
	    };
	};
    };
    return 0;
}

# Local Variables:
# mode:perl
# End:
