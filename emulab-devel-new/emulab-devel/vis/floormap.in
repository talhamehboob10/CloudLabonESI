#!/usr/bin/perl -w
#
# Copyright (c) 2000-2005 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;
use File::Basename;

#
# TODO: Deal with multiple buildings? Currently defaults to MEB! 
# 
sub usage {
    print STDERR "Usage: floormap [-tvnx] [-T] [-g] [-o <prefix>] ";
    print STDERR "[-s <scale>] | [-c <map_x>,<_y>] ";
    print STDERR "[-S <last_scale> -C <last_x>,<_y>] -O <last_x_off>,<_y>] ";
    print STDERR "[-f <floor>] [<building>]";
    print STDERR "\nor\n";
    print STDERR "Usage: floormap [-tvnx] [-T] [-g] [-o <prefix>] ";
    print STDERR "[-s <scale>] | [-c <map_x>,<_y>] ";
    print STDERR "[-S <last_scale> -C <last_x>,<_y>] -O <last_x_off>,<_y>] ";
    print STDERR "[-e <pid,eid>] [<building>]\n";
    print STDERR "[-F <feature>]\n";
    print STDERR "\nor\n";
    print STDERR "Usage: floormap [-k] [-o <prefix>] ";
    exit(-1);
}

# Debugging.
my $debug = 0;
sub dprint($) {
    my ($msg) = @_;
    
    print STDERR $msg
	if ($debug);
}

my $optlist  = "df:o:s:c:S:C:O:e:F:tTakgzvnxy";
my $notitles = 0;       # This suppresses titles surrounding the output map.
my $showany  = 0;	# When showing specific floor, showany is turned on.
my $mereuser = 1;
my $cleanup  = 0;
my $nozoom   = 0;
my $ghost    = 0;	#  Overlay ghost nodes from all floors onto each map.

# Display options
my $show_vnames    = 0;
my $show_cameras   = 0;
my $show_exclusion = 0;
my $show_nodes     = 1;

my $building;
my $pc600wifi_bldg = "MEB-MRC600";
my $floor;
my $image;

my $feature_filter;

# These result from clicking on zoom/pan controls outside.
my $scale      = 1;	# From clicking on one of the scale buttons.
my $scale_arg  = 1;     # Scale by half-integer factors: 1=>1, 2=>1.5, 3=>2, etc.
my $map_x      = 0;	# From clicking on the (possibly scaled and offset) map.
my $map_y      = 0;

# Calculated from the scale and click coords.
my $x_offset   = 0;	# Offset on the upper-left corner of the image.
my $y_offset   = 0;
my $curr_x     = 0;	# The UNZOOMED, and hence un-offset, click point.
my $curr_y     = 0;

# We get previous scale, offsets, etc. to help interpret new click coords.
my $last_scale_arg = 1;
my $last_scale = 1;
my $last_x_off = 0;
my $last_y_off = 0;
my $last_x  = 0;  # The UNZOOMED, and hence un-offset, previous click point.
my $last_y  = 0;
my $last_notitles = 0;  # This says there were no titles around the previous images.

# The image produced for each floor will be this size, except when
# using thumbnails.
#
# Try to make a standard-sized output image.
# (XXX Should fit the browser window size instead.)
my $out_width  = 792;
my $out_height = 492;
# We may have a smaller thumbnail image, and/or add header/trailer.
my $real_out_width;
my $real_out_height;

# Max x,y of image to go into state file.
my $max_x = 0;
my $max_y = 0;

# Unless we suppress titles, there will be a header/trailer around each floor image.
my $head_height = 50;
my $head_pointsize = 32;
my $tail_height = 15;

# Thumbnail images are 40% as big.  Use smaller header/trailer as well.
my $thumb_head_height = 25;
my $thumb_head_pointsize = 16;
my $thumb_width = 316;
my $thumb_height = 196;
my $thumb_tail_height = 5;

# Assume non-thumbnail images last time, unless told otherwise by $last_scale == 0.
my $last_head_height = $head_height;
my $last_head_pointsize = $head_pointsize;
my $last_height = $out_height;
my $last_tail_height = $tail_height;

my $pid;
my $eid;
my @areamaps   = ();
my %baseimages = ();
my $prefix = "/tmp/floormap";

#
# Configure variables
#
my $TB		= "@prefix@";
my $WWWPAGE     = "@TBBASE@/shownode.php3";
my $ICONDIR     = "$TB/www";

# Load libraries.
use lib '@prefix@/lib';
use libdb;

# See http://www.imagemagick.org/www/perl.html .
# Also man ImageMagick, identify, display, convert, etc.
use Image::Magick;
my $images = new Image::Magick;
my $img_n  = -1;

my $excl = Image::Magick->new;

# Admin people get extra info
$mereuser = 0
    if (TBAdmin($UID));

# Ha.
my @floortags = ();
$floortags[1] = "1st floor";
$floortags[2] = "2nd floor";   
$floortags[3] = "3rd floor";
$floortags[4] = "4th floor";
$floortags[5] = "5th floor";
$floortags[6] = "6th floor";
$floortags[7] = "7th floor";
$floortags[8] = "8th floor";
$floortags[9] = "9th floor";

#
# Turn off line buffering on output
#
$| = 1;

# Forward declarations.
sub dofloor($$);
sub writefiles($@);
sub adjustmap($$$);
sub adjust_map_y($$);
sub calc_offsets($$$$$);

#
# Parse command arguments. Once we return from getopts, all that should
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"a"})) {
    $showany = 1;
}
if (defined($options{"z"})) {
    $nozoom = 1;

    # XXX For the robot maps. Bogus.
    $out_width  = 1280;
    $out_height = 1024;
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"k"})) {
    $cleanup = 1;
}
if (defined($options{"t"})) {
    $notitles = 1;
}
if (defined($options{"T"})) {
    $last_notitles = 1;
}
if (defined($options{"g"})) {
    $ghost = 1;
}
if (defined($options{"f"})) {
    $floor   = $options{"f"};
    $showany = 1;
}
if (defined($options{"s"})) {
    $scale_arg = $options{"s"};
    if ($scale_arg > 0) {
	# Scale by half-integer factors: 1=>1, 2=>1.5, 3=>2, etc.
	$scale = ( $scale_arg + 1 ) / 2;
    }
    else {
	# Scale_arg 0 means to use the 40% size thumbnail images.
	$scale = 0.4;

	# Skinny down the head/tail heights as well.
	$head_height = $thumb_head_height;
	$head_pointsize = $thumb_head_pointsize;
	$tail_height = $thumb_tail_height;
    }
    dprint "scale arg $scale_arg, scaling factor $scale\n";
}
if (defined($options{"S"})) {
    $last_scale_arg = $options{"S"};
    if ($last_scale_arg > 0) {
	# Scale by half-integer factors: 1=>1, 2=>1.5, 3=>2, etc.
	$last_scale = ( $last_scale_arg + 1 ) / 2;
    }
    else {
	# Scale_arg 0 means to use the 40% size thumbnail images.
	$last_scale = 0.4;

	# Skinny down the head/tail heights as well.
	$last_head_height = $thumb_head_height;
	$last_head_pointsize = $thumb_head_pointsize;
	$last_height = $thumb_height;
	$last_tail_height = $thumb_tail_height;
    }
    dprint "last_scale arg $last_scale_arg, last scaling factor $last_scale\n";

    # Do this now so $scale is defined when reading in images.
    if (!defined($options{"s"})) {
	# If we didn't specify a new scale, keep it the same as the last time.
	$scale_arg = $last_scale_arg;
	$scale = $last_scale;

	# Skinny down the head/tail heights as well.
	$head_height = $last_head_height;
	$head_pointsize = $last_head_pointsize;
	$tail_height = $last_tail_height;

	dprint "scale from last_scale_arg $last_scale_arg, last_scale $scale\n";
    }
}
if (defined($options{"c"})) {
    if ($options{"c"} =~ /([-\w]*),([-\w]*)/) {
	$map_x = $1;
	$map_y = $2;
        dprint "click point $map_x, $map_y\n";
    }
    else {
	die("*** $0:\n".
	    "    Invalid argument to -c option!\n");
    }
}
if (defined($options{"C"})) {
    if ($options{"C"} =~ /([-\w]*),([-\w]*)/) {
	$last_x = $1;
	$last_y = $2;
        dprint "last click $last_x, $last_y\n";
    }
    else {
	die("*** $0:\n".
	    "    Invalid argument to -C option!\n");
    }
}
if (defined($options{"O"})) {
    if ($options{"O"} =~ /([-\w]*),([-\w]*)/) {
	$last_x_off = $1;
	$last_y_off = $2;
        dprint "last offset $last_x_off, $last_y_off\n";
    }
    else {
	die("*** $0:\n".
	    "    Invalid argument to -C option!\n");
    }
}
if (defined($options{"o"})) {
    $prefix = $options{"o"};
    if ($cleanup) {
	unlink $prefix, "${prefix}.jpg", "${prefix}.map", "${prefix}.state";
	exit(0);
    }
}
if (defined($options{"y"})) {
    $show_nodes = 0;
}
if (defined($options{"v"})) {
    $show_cameras = 1;
}
if (defined($options{"n"})) {
    $show_vnames = 1;
}
if (defined($options{"x"})) {
    $show_exclusion = 1;
}

if (defined($options{"F"})) {
    $feature_filter = $options{"F"};
}
if (defined($options{"e"})) {
    if ($options{"e"} =~ /([-\w]*),([-\w]*)/) {
	$pid = $1;
	$eid = $2;
    }
    else {
	die("*** $0:\n".
	    "    Invalid argument to -e option!\n");
    }

    #
    # Verify permission to view this experiment.
    #
    if ($UID && !TBAdmin($UID) &&
	! TBExptAccessCheck($UID, $pid, $eid, TB_EXPT_READINFO)) {
	die("*** $0:\n".
	    "    You do not have permission to view $pid/$eid!\n");
    }

    #
    # Optional building and floor (see above) for a specific experiment.
    #
    usage()
	if (@ARGV > 1);
    if (@ARGV) {
	$building = $ARGV[0];
    }
}
elsif (@ARGV == 1) {
    $building = $ARGV[0];
}

#
# Gather image data from DB.
#
# Scale_arg 0 means to use the 40% size thumbnail images.
my $path_col = ($scale_arg == 0 ? "thumb_path" : "image_path");
my $db_scale = max($scale_arg, 1);
# Nozoom signals a call by robotmap.  Don't use robots "building" otherwise.
my $robo_bldg = ($nozoom ? "" : "b.building not like '%ROBOTS%' and ");
my $query_result =
    DBQueryFatal("select b.building,b.title,f.floor,f.$path_col,".
		 "f.pixels_per_meter ".
		 "   from buildings as b ".
		 "left join floorimages as f on f.building=b.building ".
		 "where $robo_bldg f.scale=$db_scale");

if (!$query_result->numrows) {
    die("*** $0:\n".
	"    There is no building/floor data in the DB!\n");
}

while (my ($building,$title,$floor,$image,$ppm) = 
       $query_result->fetchrow_array()) {
    ##dprint "building $building, floor $floor, image $image\n";
    if (!exists($baseimages{$building})) {
	$baseimages{$building} = {};
	$baseimages{$building}->{"title"}  = $title;
	$baseimages{$building}->{"ppm"}  = $ppm;
	$baseimages{$building}->{"floors"} = {};
    }

    $image = "$TB/www/floormap/$image"
	if (dirname($image) eq ".");
    dprint "image $image\n";

    if (! -e $image) {
	die("*** $0:\n".
	    "    $image does not exist!\n");
    }
    $baseimages{$building}->{"floors"}->{$floor} = $image;
}

# Must specify a building with a floor.
if (defined($floor) && !defined($building)) {
    die("*** $0:\n".
	"    Must supply a building name!\n");
}

# Building must exist.
if (defined($building) && !exists($baseimages{$building})) {
    die("*** $0:\n".
	"    No such building: $building\n");
}

#
# If a floor specified, then do just that floor and spit it out.
#
if (defined($floor)) {
    if (!exists($baseimages{$building}->{"floors"}->{$floor})) {
	die("No such floor '$floor' in building: $building\n");
    }
    
    my ($floorimage, $areamap) = dofloor($building, $floor);
    $image    = $floorimage;
    @areamaps = ($areamap);

    $max_x = $floorimage->Get('width');
    $max_y = $floorimage->Get('height');
}
else {
    #
    # Need to find all the floors in this building and generate them all.
    #
    my @floors = ();

    if (defined($building)) {
	foreach my $floor (sort(keys(%{ $baseimages{$building}->{"floors"} }))) {
	    my ($floorimage, $areamap) = dofloor($building, $floor);

	    push(@floors, [ $floorimage, $areamap ])
		if (defined($floorimage));
	}
    }
    else {
	#
	# XXX We need to be fancier for multiple buildings at some point!
	# Not much of a worry right now.
	#
	foreach my $building (sort(keys(%baseimages))) {
	    my @floorlist = sort(keys(%{ $baseimages{$building}->{"floors"} }));
	    
	    foreach my $floor (@floorlist) {
		my ($floorimage, $areamap) = dofloor($building, $floor);

		push(@floors, [ $floorimage, $areamap ])
		    if (defined($floorimage));
	    }
	}
    }

    #
    # Now generate a superimage from all the base images. We just line
    # them up; nothing fancy at all.
    #
    my $running_y = 0;
    foreach my $ref (@floors) {
	my ($floorimage, $areamap) = @$ref;
	
	# Move all the map references down by adjusted amount.
	adjustmap($areamap, 0, $running_y);
	push(@areamaps, $areamap);
	
	$running_y += $real_out_height;  ## $floorimage->Get('height');
    }
    dprint "images ".($img_n+1)."\n";
    ## Append and Coalesce get this error - 
    ##    Image::Magick=ARRAY(0x84116b8) at ./floormap.in line 266.
    ## Instead, do it from the shell after writing the component images below.
    ##$err = $images->Append();
    ##warn "$err" if "$err";
}
writefiles($images->[0], @areamaps);

## Append the component images in the shell, until the Perl function is fixed.
dprint "Last image is $img_n.\n";
if ($img_n > 0) {
    ## Do the cropping here too.
    for ( my $i = 0; $i <= $img_n; $i++ ) {
	my @args = ("convert",
		    "-crop", "$real_out_width"."x$real_out_height+0+0",
		    "${prefix}-$i.jpg", "${prefix}-c$i.jpg");
	dprint "@args\n";
	system(@args) == 0
	    or die "system @args failed: $?";
    }

    my @args = ("convert","-append", "${prefix}-c*.jpg", "${prefix}.jpg");
    dprint "@args\n";
    system(@args) == 0
	or die "system @args failed: $?";

    ## Clean up the component image files.
    @args = ("/bin/sh", "-c", "rm ${prefix}-*.jpg");
    dprint "@args\n";
    system(@args) == 0
	or die "system @args failed: $?";
}
exit(0);

#
# Do a floor. Returns the image object and an "areamap". 
#
sub dofloor($$)
{
    my ($building, $floor) = @_;
    my $isnew = 0;

    #
    # Grab the nodes on this floor in this building. We want to know
    # their allocation status so we know what colors to use.
    #
    my $query = "select loc.*,r.pid,r.eid,r.vname,f.feature, ".
                "  n.battery_voltage,n.battery_percentage, ".
		"  n.destination_x,n.destination_y,n.destination_orientation ".
		"  from location_info as loc ".
		"left join reserved as r on r.node_id=loc.node_id ".
		"left join nodes as n on n.node_id=loc.node_id ".
		"left join node_features as f on f.node_id=loc.node_id " .
		"where loc.building='$building' " .
                (defined($feature_filter)?" and f.feature='$feature_filter' ":"") . 
		(defined($pid) ? " and r.pid='$pid' and r.eid='$eid'" : "");
    # Overlap dots left-to right, top-to-bottom where they are close-packed.
    my $order = " order by loc.loc_x, loc.loc_y";
    my $query_result = DBQueryFatal($query . " and loc.floor='$floor'" . $order );
    
    my $newnodes_query = "select * from new_nodes ".
		         "where building='$building'";
    my $newnodes_result = DBQueryFatal($newnodes_query . " and floor='$floor'");

    # When ghosting is turned on, get nodes from all floors to be overlaid.
    my ($ghost_result, $ghost_newnodes_result);
    if ($ghost) {
	$ghost_result = DBQueryFatal($query . $order);
	$ghost_newnodes_result = DBQueryFatal($newnodes_query);
    }

    if ($mereuser) {
	if (!$query_result->numrows && !$showany) {
	    return (undef, undef);
	}
    }
    else {
	if (!$query_result->numrows && !$newnodes_result->numrows && !$showany) {
	    return (undef, undef);
	}
    }

    #
    # The area map is indexed by nodeid, and contains a list of the
    # x1,y1,x2,y2 (upper left, lower right) coordinates of the "hot"
    # area.  We have to wait till later to actually generate the map
    # cause the coords might need to be adjusted if creating a floor
    # as part of a building (and the floor image gets moved within a
    # bigger image).
    #
    # XXX We make no attempt to deal with overlapping icons (areamaps).
    # This will eventually lead to confusion and incorrect maps.
    # 
    my $areamap = {};

    #
    # Grab the base image for the floor.
    #
    if (! exists($baseimages{$building}->{"floors"}->{$floor})) {
	die("*** $0:\n".
	    "    No base image for $building:$floor!\n");
    }
    
    my $err = $images->Read($baseimages{$building}->{"floors"}->{$floor});
    if ("$err") {
        die("*** $0:\n".
            "$err\n".
            "    Could not get base ".
            $baseimages{$building}->{"floors"}->{$floor}  ."!\n");
    }
    $img_n++;
    my $baseimage = $images->[$img_n];
    my $ppm = $baseimages{$building}->{"ppm"};

    # Figure out where the user clicked.  (Use the upper-left corner if no click yet.)
    # We won't have both scale and click coords, because they are separate controls.
    if (defined($options{"c"})) {
	if ($nozoom) {
	    #
	    # All we want is the crosshair.
	    # 
	    $curr_x = $map_x;
	    $curr_y = $map_y;
	}
	else {
	    # Back out the influence of the previously applied scale and
	    # offsets, so it is as if we are always clicking onto an image
	    # that is not scaled or offset.
	    my $image_x = $map_x;
	    my $image_y = adjust_map_y($map_y, $last_notitles);
	    dprint "recent click coords $image_x, $image_y ($map_y)\n";
	    $curr_x = int(($image_x + $last_x_off) / $last_scale);
	    $curr_y = int(($image_y + $last_y_off) / $last_scale);
	    dprint "new unzoomed center $curr_x, $curr_y\n";
	}
    } else {
	$curr_x = $last_x;
	$curr_y = $last_y;
    }

    # Set up for zoom (scale) and pan (offset center).  Get the offset to the
    # upper-left corner of the output image, based on the desired center point.
    my $in_width = $baseimage->Get('width');
    my $in_height = $baseimage->Get('height');
    dprint "input size $in_width, $in_height\n";
    ($x_offset, $y_offset) = 
	calc_offsets($scale, $curr_x, $curr_y, $in_width, $in_height);
    dprint "new offsets $x_offset, $y_offset\n";

    # Crop the correct rectangle out of the input image.
    my $this_width = min($in_width, $out_width);
    my $this_height = min($in_height, $out_height);
    $err = $baseimage->Crop(width=>$out_width, height=>$this_height, 
			    x=>$x_offset, y=>$y_offset);
    warn "$err" if "$err";

    #
    # Stick in obstacles, if any.
    #
    my $obstacles_result =
	DBQueryFatal("select * from obstacles ".
		     "where floor='$floor' and building='$building'");

    while (my %obrow = $obstacles_result->fetchhash()) {
	my $id       = $obrow{"obstacle_id"};
	my $x1       = $obrow{"x1"};
	my $x2       = $obrow{"x2"};
	my $y1       = $obrow{"y1"};
	my $y2       = $obrow{"y2"};
	my $descr    = $obrow{"description"};
	my $label    = $obrow{"label"};
	my $drawit   = $obrow{"draw"};
	my $no_exclusion = $obrow{"no_exclusion"};
	my $props  = {};

	$props->{"X1"}    = $x1;
	$props->{"Y1"}    = $y1;
	$props->{"X2"}    = $x2;
	$props->{"Y2"}    = $y2;
	$props->{"DESCR"} = $descr;
	$props->{"ISOBS"} = 1;
	$areamap->{"$id"} = $props;

	if ($drawit) {
	    my $fill;

	    if ($no_exclusion) {
		$fill = "#000000ee";
	    }
	    elsif ($show_exclusion) {
		$fill = "#FFFFFF";
	    }
	    else {
		$fill = "#000000dd";
	    }
	    $err = $baseimage->Draw(primitive=>'rectangle',
				    points=>"$x1,$y1 $x2,$y2",
				    stroke=>'Black',
				    strokewidth=>'2',
				    fill=>$fill);
	    warn "$err" if "$err";
	}

	if (defined($label) && $label ne "" && ($drawit || $show_exclusion)) {
	    my $pointsize = 12;
	    my $strlen    = length($label);
	    my $pointlen  = (($pointsize * 0.45) * $strlen);

	    #
	    # Initially, lets try to put the label right in the middle.
	    # 
	    my $dlx = $x1 + (($x2-$x1)/2) - ($pointlen / 2);
	    my $dly = $y1 + (($y2-$y1)/2);

	    #
	    # If the label looks too big along the X axis, then
	    # move it below the box. Yep, very simplistic ...
	    # 
	    if ($dlx <= $x1 || ($dlx + $pointlen) >= $x2) {
		$dly = $y2 + $pointsize;
	    }
	    
	    $err = $baseimage->Annotate(fill=>'black',
					x=>$dlx, y=>$dly,
					pointsize=>$pointsize,
					text=>"$label");
	    warn "$err" if "$err";
	}

	if ($show_exclusion && !$no_exclusion) {
	    my $obstacle_buffer = 23; # XXX
	    my $xmin = $x1 - $obstacle_buffer;
	    my $ymin = $y1 - $obstacle_buffer;
	    my $xmax = $x2 + $obstacle_buffer;
	    my $ymax = $y2 + $obstacle_buffer;

	    $err = $baseimage->Draw(primitive=>'rectangle',
				    points=>"$xmin,$ymin $xmax,$ymax",
				    stroke=>'#000000dd',
				    strokewidth=>'0.0',
				    fill=>"#000000dd");
	    warn "$err" if "$err";
	}
    }

    if ($show_cameras) {
	my $camera_query = "select * from cameras where building='$building'";
	my $camera_result = DBQueryFatal($camera_query . 
					 " and floor='$floor'");
	
	while (my %crow = $camera_result->fetchhash()) {
	    my $xmin    = $crow{"loc_x"} * $ppm;
	    my $ymin    = $crow{"loc_y"} * $ppm;
	    my $xmax    = ($crow{"loc_x"} + $crow{"width"}) * $ppm;
	    my $ymax    = ($crow{"loc_y"} + $crow{"height"}) * $ppm;
	    
	    $err = $baseimage->Draw(stroke=>'orange',
				    strokewidth=>'1',
				    primitive=>'rectangle',
				    points=>"$xmin,$ymin $xmax,$ymax");
	    warn "$err" if "$err";
	}
    }
    
    return ($baseimage, $areamap)
	if (!$show_nodes);

    # Draw the selected node locations and labels. 
    # Green dot means node is free or owned by pid/eid.
    # Red dot mean node is down.
    # Blue dot means node is allocated
    # Gold dot means node is new.
    my $DOT_RAD = 5;	# Offset from center to edge of dot.
    my $LX    = -10;    # Offset from center of dot to label.
    my $LY    = 15;
    foreach my $isnew (0, 1) {
	my $table;
	
	if ($isnew) {
	    next
		if ($mereuser);
	    
	    $table = ($ghost ? $ghost_newnodes_result : $newnodes_result);
	}
	else {
	    $table = ($ghost ? $ghost_result : $query_result);
	}
	
	while (my $rowref = $table->fetchrow_hashref()) {
	    my $nodeid = $rowref->{"node_id"};
	    my $x      = int($rowref->{"loc_x"} * $scale - $x_offset);
	    my $y      = int($rowref->{"loc_y"} * $scale - $y_offset);
	    my $o      = $rowref->{"orientation"};
	    my $dx     = $rowref->{"destination_x"};
	    my $dy     = $rowref->{"destination_y"};
	    my $do     = $rowref->{"destination_orientation"};
	    my $rpid   = $rowref->{"pid"};
	    my $reid   = $rowref->{"eid"};
	    my $vname  = $rowref->{"vname"};
	    my $label  = $nodeid;
 	    my $newid  = ($isnew ? $rowref->{"new_node_id"} : 0);
	    my $props  = {};

            my $color;
	    if ($isnew) {
		$color = 'gold'
		}
	    elsif ((!defined($pid) && !(defined($rpid))) ||
		   (defined($pid) && defined($rpid) && $pid eq $rpid)) {
		# Without -e option, green means node is free.
		# With -e option, green means node belongs to experiment. 
		$color = 'limegreen';
		if (defined($vname)) {
		    $props->{'PNAME'} = $nodeid;
		    $label = $vname 
			if ($show_vnames);
		}
		if (defined($rowref->{"battery_voltage"})) {
		    $props->{'BATVOLTS'} = $rowref->{"battery_voltage"};
		}
		if (defined($rowref->{"battery_percentage"})) {
		    $props->{'BATPERCENT'} = $rowref->{"battery_percentage"};
		}
	    }
	    elsif ($rpid eq NODEDEAD_PID() and $reid eq NODEDEAD_EID()) {
		$color = 'red';
	    }
	    else {
		$color = 'blue';
		if (!$mereuser) {
		    if (defined($rpid)) {
			$props->{'VNAME'} = $vname;
			$props->{'PID'}   = $rpid;
			$props->{'EID'}   = $reid;
		    }
		    if (defined($rowref->{"battery_voltage"})) {
			$props->{'BATVOLTS'} = $rowref->{"battery_voltage"};
		    }
		    if (defined($rowref->{"battery_percentage"})) {
			$props->{'BATPERCENT'} = $rowref->{"battery_percentage"};
		    }
		}
	    }

	    # Link to a special page for the pc600 Wifi Cluster nodes, 
	    # except on their own map.
	    my $ispc600wifi = defined($rowref->{"feature"}) &&
		$rowref->{"feature"} eq "pc600wifi" && 
		    $building ne $pc600wifi_bldg;
	    $props->{'ISPC600WIFI'} = $ispc600wifi;

            my $x2 = $x + $DOT_RAD;
	    if ($ghost && $rowref->{"floor"} != $floor) { 
		$err = $baseimage->Draw(stroke=>$color, strokewidth=>'1.5',
					primitive=>'circle', points=>"$x,$y $x2,$y");
	    }
	    else {
		$err = $baseimage->Draw(fill=>$color, 
					primitive=>'circle', points=>"$x,$y $x2,$y");
	    }
            warn "$err" if "$err";
	    if (defined($o)) {
		my ($ox2, $oy2);
		ComputeOrientationLine($x, $y, 15.0, $o, \$ox2, \$oy2);

		$err = $baseimage->Draw(stroke=>$color, 
					primitive=>'line',
					points=>"$x,$y $ox2,$oy2");
		warn "$err" if "$err";
	    }
	    #
	    # Draw hollow circle for the destination (of the robot).
	    # Add an oritentation stick as well, if defined.
	    # 
	    if (defined($dx) && defined($dy)) {
		$dx = int($dx * $scale - $x_offset);
		$dy = int($dy * $scale - $x_offset);
		my $dlx  = $dx+$LX;
		my $dly  = $dy+$LY;
		my $dx2 = $dx + $DOT_RAD;

		$err = $baseimage->Draw(stroke=>$color,
					strokewidth=>'1.5',
					primitive=>'circle',
					points=>"$dx,$dy $dx2,$dy");
		warn "$err" if "$err";

		if (defined($do)) {
		    my ($ox2, $oy2);
		    ComputeOrientationLine($dx, $dy, 15.0, $do, \$ox2, \$oy2);

		    $err = $baseimage->Draw(stroke=>$color, 
					    primitive=>'line',
					    points=>"$dx,$dy $ox2,$oy2");
		    warn "$err" if "$err";

		    # Shift the label above of the orientation line would go
		    # through it.
		    $dly = $dy - ($DOT_RAD + 2)
			if (($do < 0.0 && $do > -180.0) || 
			    ($do > 180.0 && $do < 360.0));
		}
		if (abs($x - $dx) > 20 || abs($y - $dy) > 20) {
		    $err = $baseimage->Annotate(fill=>'black',
						x=>$dlx, y=>$dly,
						text=>"$label");
		    warn "$err" if "$err";
		}

		#
		# And, draw a light grey line from source to destination
		# to make it very clear.
		#
		$err = $baseimage->Draw(stroke=>'Grey',
					strokewidth=>'1.0',
					primitive=>'line',
					points=>"$x,$y $dx,$dy");
		warn "$err" if "$err";
	    }
	    # Label location;
	    my $lx = $x+$LX;
	    my $ly = $y+$LY;

	    # Shift the label above of the orientation line would go
	    # through it.
	    $ly = $y - ($DOT_RAD + 2)
		if (defined($o) && (($o < 0.0 && $o > -180.0) || 
				    ($o > 180.0 && $o < 360.0)));
	    
	    # No labels on the pc600 wifi cluster nodes, except on their own map.
	    if (!$ispc600wifi) {
		$err = $baseimage->Annotate(fill=>'black', x=>$lx, y=>$ly, 
					    text=>"$label");
		warn "$err" if "$err";
	    }

	    $props->{"X1"} = $x - $DOT_RAD;
	    $props->{"Y1"} = $y - $DOT_RAD;
	    $props->{"X2"} = $x + $DOT_RAD;
	    $props->{"Y2"} = $y + $DOT_RAD;
	    $props->{"ISNEW"}   = $newid;
	    $areamap->{$nodeid} = $props;
	}
    }

    # Add a crosshair if the user specified a center point.
    if ($curr_x || $curr_y) {
	my $CROSS_SIZE = 12;	# Length of each arm of the crosshair.
	my $x0 = int($curr_x * $scale - $x_offset);
	my $y0 = int($curr_y * $scale - $y_offset);
	my $x1 = $x0 - $CROSS_SIZE;
	my $x2 = $x0 + $CROSS_SIZE;
	my $y1 = $y0 - $CROSS_SIZE;
	my $y2 = $y0 + $CROSS_SIZE;
	dprint "cross at $x0,$y0, lft $x1, rt $x2, top $y1, bot $y2\n";
	$err = $baseimage->Draw(stroke=>'red', primitive=>'line',
				points=>"$x1,$y0, $x2,$y0");
	warn "$err" if "$err";
	$err = $baseimage->Draw(stroke=>'red', primitive=>'line',
				points=>"$x0,$y1, $x0,$y2");
	warn "$err" if "$err";
    }

    if (!$notitles) {
	#
	# We want to stick in a label for the floor. To do that we need to make
	# some white space at the top by expanding the image, and moving it down.
	# 
	my $floor_label = $baseimages{$building}->{"title"} . 
	    " - "  . $floortags[$floor];
	dprint "head label $floor_label\n";
        $err = $baseimage->Border(fill=>'white', width=>0, height=>$head_height);
        warn "$err" if "$err";
        $err = $baseimage->Annotate(fill=>'black', x=>10, y=>$head_height*0.8, 
                                    font=>"/usr/testbed/lib/arial.ttf", 
				    pointsize=>$head_pointsize,
                                    text=>"$floor_label");
	warn "$err" if "$err";

	#
	# Stick in a very primitive scale bar.
	#
	# Zoom factor: scale_arg 0 means to use the 40% size thumbnail images.
	$fac = ($scale <= 2.0 ? ($scale_arg == 0 ? 3 : 2) : 1);
	my ($lab, $fac2);
	if ( $ppm < 100.0 ) {
	    # Show a 15 meter scale bar for thumbnails, 10 normal, zoomed 5.
	    $lab = sprintf("%d Meters", 5 * $fac);
	    $fac2 = ($scale_arg == 0 ? 2 : 5) * $fac;
	}
	else {
            # Use a 50 cm scale for the pc600 wifi cluster map.
            $lab = "50 cm";
            $fac2 = ($scale_arg == 0 ? 0.2 : 0.5);
	}
        dprint "scale bar: ppm $ppm, fac $fac, fac2 $fac2, lab $lab\n";

	my $dis = int($ppm * $fac2);
	my $sx1 = $this_width - ($dis + 10);
	my $sx2 = $this_width - 10;
	my $lx  = $sx1 + (($dis / 2) - ((length($lab) * 8) / 2));
	dprint "dis $dis sx1 $sx1 sx2 $sx2 lx $lx\n";

	$err = $baseimage->Draw(stroke=>'black', primitive=>'line',
				strokewidth=>'1.5',
				points=>"$sx1,10, $sx2,10");
	warn "$err" if "$err";

	$err = $baseimage->Draw(stroke=>'black', primitive=>'line',
				strokewidth=>'1.0',
				points=>"$sx1,5, $sx1,15");
	warn "$err" if "$err";

	$err = $baseimage->Draw(stroke=>'black', primitive=>'line',
				strokewidth=>'1.0',
				points=>"$sx2,5, $sx2,15");
	warn "$err" if "$err";

        $err = $baseimage->Annotate(fill=>'black',
				    x=>$lx,
				    y=>30, 
                                    font=>"/usr/testbed/lib/arial.ttf", 
				    pointsize=>$thumb_head_pointsize,
                                    text=>"$lab");
	warn "$err" if "$err";
	
        # Border adds to both the top and the bottom.  Crop some of it away.
        my $y1 = $head_height + $this_height;
        my $y2 = $y1 + $tail_height;
        ## This Crop stopped working inside Perl, so do it in the shell instead.
        ## (It started making smaller images at higher zoom factors.)
        $real_out_width = $this_width;
        $real_out_height = $y2;
        ##$err = $baseimage->Crop(width=>$this_width, height=>$y2);
        ##warn "$err" if "$err";

        # Fill in a black rectangle at the bottom for a separator.
        $err = $baseimage->Draw(fill=>'black', primitive=>'rectangle',
                                points=>"0,$y1, $this_width,$y2");
        warn "$err" if "$err";

	# Have to adjust the maps cause we just moved everything.
	adjustmap($areamap, 0, $head_height);
    }

    return ($baseimage, $areamap);
}

#
# Common code to adjust a Y coordinate from an image click into a map Y coordinate.
# The image may have multiple floor maps, with optional headers and trailers.
#
sub adjust_map_y($$) {
    my ($_y, $_notitles) = @_;
    
    my $map_height = $last_height + 
	($_notitles ? 0 : $last_head_height + $last_tail_height);
    my $raw_map_y = ($_y % $map_height) - ($_notitles ? 0 : $last_head_height);
    # Avoid out-of-bound coords if the header or trailer is clicked.
    my $map_y = max(0, min($raw_map_y, $last_height));
    dprint "adjust_map_y map_height $map_height, " .
	"_y $_y, raw_map_y $raw_map_y, map_y $map_y\n";

    return $map_y;
}

# 
# Common code to calculate the image offsets from the upper-left corner, given the
# desired image scale, UNZOOMED center point, and the dimensions of the source image.
# 
# At scale 1, the offsets will always be zero because we have to show the whole image.
# At higher scales, there is room in the middle of the image where we are not up
# against the edges, so we can offset to center the clicked point on the map.  Close
# to the edges, the image edges limit the offsets.
# 
sub calc_offsets($$$$$) {
    my ($scale, $curr_x, $curr_y, $in_width, $in_height) = @_;

    return (0, 0)
	if ($nozoom);

    my $scaled_click_x = $curr_x * $scale;
    my $scaled_click_y = $curr_y * $scale;

    # Offset limited by the scaled image size; scale 1 will always have zero offsets.
    if ($scaled_click_x > $out_width/2) {
        my $click_limit = $in_width - $out_width/2;
        if ($scaled_click_x > $click_limit) {
            dprint "right limit $click_limit\n";
            $x_offset = $in_width-$out_width;       # Against the right edge.
        }
        else {
            $x_offset = $scaled_click_x - ($out_width/2) # In the middle.
        }
    } else {
	dprint "left limit 0\n";
	my $x_offset = 0;                           # Against the left edge.
    }

    if ($scaled_click_y > $out_height/2) {
        $click_limit = $in_height - $out_height/2;
        if ($scaled_click_y > $click_limit) {
            dprint "bottom limit $click_limit\n"; 
            $y_offset = $in_height-$out_height;     # Against the bottom edge.
        }
        else {
            $y_offset = $scaled_click_y - ($out_height/2) # In the middle.
        }
    } else {
	dprint "top limit 0\n";
	my $y_offset = 0;                           # Against the top edge.
    }

    return (int($x_offset), int($y_offset));
}

#
# Adjust map coordinates moving everything by x,y amount. This is used
# when building an image of multiple maps.
#
sub adjustmap($$$)
{
    my ($mapref, $x, $y) = @_;
    dprint "adjustmap x $x y $y\n";

    foreach my $nodeid (keys(%{ $mapref })) {
	$mapref->{$nodeid}->{"X1"} += $x;
	$mapref->{$nodeid}->{"Y1"} += $y;
	$mapref->{$nodeid}->{"X2"} += $x;
	$mapref->{$nodeid}->{"Y2"} += $y;
    }
}

#
# Take a list of the areamaps created in the above function, and dump them
# to the output file so that the web page can grab them.
#
sub writefiles($@)
{
    my ($image, @maps) = @_;

    # Image.
    my $err = $images->Write("${prefix}.jpg");
    if ("$err") {
        die("*** $0:\n".
            "$err\n".
            "    Could not open ${prefix}.jpg for writing!\n");
    }
	
    # Areamap.
    if (!open(MAP, "> ${prefix}.map")) {
	unlink("${prefix}.jpg");
	die("*** $0:\n".
	    "    Could not open ${prefix}.map for writing!\n");
    }
    print MAP "<MAP NAME=floormap>\n";

    foreach my $mapref (@maps) {
	my %map = %{ $mapref };
	
	foreach my $nodeid (keys(%map)) {
	    my $x1 = $map{$nodeid}->{"X1"};
	    my $y1 = $map{$nodeid}->{"Y1"};
	    my $x2 = $map{$nodeid}->{"X2"};
	    my $y2 = $map{$nodeid}->{"Y2"};
	    my $isobs = $map{$nodeid}->{"ISOBS"};
	    my $descr = $map{$nodeid}->{"DESCR"};
	    my $isnew = $map{$nodeid}->{"ISNEW"};
	    my $ispc600wifi = $map{$nodeid}->{"ISPC600WIFI"};
	    my $link  = ($isobs ?
			 "showobstacle.php3?id=${nodeid}" :
			 ($isnew ?
			  "newnode_edit.php3?id=${isnew}" :
			  ($ispc600wifi ?
			   "floormap.php3?building=${pc600wifi_bldg}" :
			   "shownode.php3?node_id=${nodeid}")));
	    my $title = ($isobs ? $descr :
			 ($ispc600wifi ? "pc600 WiFi Cluster ($nodeid)" :
			  $nodeid));

	    $title .= " (vname=" . $map{$nodeid}->{'VNAME'} . ")"
		if (exists($map{$nodeid}->{'VNAME'}));
	    $title .= " " . $map{$nodeid}->{'PID'} . "/" .
		$map{$nodeid}->{'EID'} . ""
		    if (exists($map{$nodeid}->{'PID'}));

	    $title .= " " . $map{$nodeid}->{'BATVOLTS'} . " volts"
		if (exists($map{$nodeid}->{'BATVOLTS'}));
	    
	    $title .= " " . $map{$nodeid}->{'BATPERCENT'} . "%"
		if (exists($map{$nodeid}->{'BATPERCENT'}));

	    print MAP "<AREA SHAPE=RECT COORDS=\"$x1,$y1,$x2,$y2\" ".
		      "TITLE=\"$title\" HREF=\"${link}\">\n\n";
	}
    }
    print MAP "</MAP>\n";
    close(MAP);
	
    # HTML items save state.  They are included into the form by PHP and returned to
    # us by HTML-get as page arguments when the map or zoom buttons are clicked on.
    if (!open(STATE, "> ${prefix}.state")) {
	unlink("${prefix}.jpg");
	die("*** $0:\n".
	    "    Could not open ${prefix}.state for writing!\n");
    }
    print STATE "  <input type=\"hidden\" name=\"last_scale\" " .
	"value=\"$scale_arg\">\n";
    print STATE "  <input type=\"hidden\" name=\"last_x_off\" " .
	"value=\"$x_offset\">\n";
    print STATE "  <input type=\"hidden\" name=\"last_y_off\" " .
	"value=\"$y_offset\">\n";
    # Note that the click point is in UNZOOMED, and hence un-offset, coordinates.
    print STATE "  <input type=\"hidden\" name=\"last_x\" " .
	"value=\"$curr_x\">\n";
    print STATE "  <input type=\"hidden\" name=\"last_y\" " .
	"value=\"$curr_y\">\n";
    print STATE "  <input type=\"hidden\" name=\"last_ghost\" " .
	"value=\"$ghost\">\n";
    if ($notitles) {
	print STATE "  <input type=\"hidden\" name=\"last_notitles\" " .
	    "value=\"$notitles\">\n";
    }
    print STATE "  <input type=\"hidden\" name=\"max_x\" " .
	"value=\"$max_x\">\n";
    print STATE "  <input type=\"hidden\" name=\"max_y\" " .
	"value=\"$max_y\">\n";
    
    close(STATE);
}

#
# Compute a line segment given a point and a compass heading of a robot.
#
sub ComputeOrientationLine($$$$$$)
{
    my ($x1, $y1, $distance, $angle, $px2, $py2) = @_;

    my $x2 = $x1 + $distance * cos(-$angle * 3.1415926536 / 180.0);
    my $y2 = $y1 + $distance * sin(-$angle * 3.1415926536 / 180.0);

    $$px2 = $x2;
    $$py2 = $y2;
}

