#!/usr/bin/perl -w
#
# Copyright (c) 2005, 2006, 2010 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;

#
# Initial bugdb setup. Create bugdn accounts for all users and projects.
#
sub usage()
{
    print STDOUT "Usage: bugdbsetup\n";
    exit(-1);
}
my $optlist  = "d";
my $debug    = 0;
my $impotent = 0;

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";
my $CONTROL     = "@USERNODE@";
my $BOSSNODE	= "@BOSSNODE@";
my $BUGDBSUPPORT= @BUGDBSUPPORT@;
my $SSH         = "$TB/bin/sshtb";
my $BUGDBPROXY  = "$TB/sbin/bugdbproxy";
my $ADDUSER     = "$TB/sbin/addbugdbuser";
my $ADDPROJ     = "$TB/sbin/addbugdbproj";
my $SETGROUPS   = "$TB/sbin/setbugdbgroups";

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/usr/bin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

# Protos
sub fatal($);

#
# Load the Testbed support stuff. 
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;

#
# If no bugdb support, just exit. 
#
if (! $BUGDBSUPPORT) {
    print "BUGDB support is not enabled. Exit ...\n";
    exit(0);
}

#
# Only testbed admins.
#
if (!TBAdmin($UID)) {
    die("*** $0:\n".
	"    Must be a testbed admin to run this script\n");
}

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (@ARGV) {
    usage();
}

#
# First the projects. Only main group, no subgroups!
#
$query_result =
    DBQueryFatal("select pid from projects ".
		 "where approved=1 ".
#		 " and (pid='testbed' or pid='emulab-ops' or pid='tbres' or ".
#		 "      pid='utahstud')" .
		 "");

while (my ($pid) = $query_result->fetchrow_array()) {
    print "Creating bugdb for project $pid\n"
	if ($debug);
    
    if (!$impotent) {
	system("$ADDPROJ $pid") == 0
	    or fatal("Could not add bugdb for $pid");
    }
}

#
# Now the users.
# 
$query_result =
    DBQueryFatal("select distinct g.uid ".
		 "  from group_membership as g ".
		 "left join users as u on u.uid_idx=g.uid_idx ".
		 "where u.status='active' and g.trust!='none' ".
#		 "  and (g.pid='testbed' or g.pid='emulab-ops' or ".
#		 "       g.pid='tbres' or g.pid='utahstud')" .
		 "");

while (my ($uid) = $query_result->fetchrow_array()) {
    print "Adding user $uid to bugdb\n"
	if ($debug);
    
    if (!$impotent) {
	system("$ADDUSER $uid") == 0
	    or fatal("Could not add bugdb account for $uid");

	system("$SETGROUPS $uid") == 0
	    or fatal("Could not set bugdb groups for $uid");
    }
}

exit(0);

sub fatal($)
{
    my($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}
