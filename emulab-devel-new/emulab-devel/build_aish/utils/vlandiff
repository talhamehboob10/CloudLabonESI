#!/usr/bin/perl -w
#
# Copyright (c) 2000-2017 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use Getopt::Std;
use English;

#
# vlandiff - Show differences between switch state and vlan table, if any
#
sub usage()
{
    print(STDOUT "Usage: vlandiff [-v]\n");
    exit(-1);
}
my $optlist = "vd";
my $debug   = 0;

#
# Configure variables
#
my $TB		= "/users/achauhan/Cloudlab/CloudLabonESI/emulab-devel-new/emulab-devel/build_aish";
my $SNMPIT      = "$TB/bin/snmpit";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output. Very important for this script!
#
$| = 1; 

# Load the Testbed support stuff.
use lib "/users/achauhan/Cloudlab/CloudLabonESI/emulab-devel-new/emulab-devel/build_aish/lib";
use libdb;
use libtestbed;
use Interface;
use Lan;

# Parse args.
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
usage()
    if (@ARGV);
if (defined($options{"v"}) || defined($options{"d"})) {
    $debug++;
}

sub debug(@);

my %table  = ();
my %switch = ();
my %id     = ();
my @vlans;

#
# Get a list of all VLANs for swapped-in experiments
#
if (VLan->AllVLans(\@vlans) != 0) {
    die("*** $0:\n".
	"    Unable to load VLANs for all experiments\n");
}

foreach my $vlan (@vlans) {
    my @members;
    my @list = ();
    my $id   = $vlan->lanid();

    if ($vlan->MemberList(\@members) != 0) {
	die("*** $0:\n".
	    "    Unable to load members for $vlan\n");
    }
    foreach my $member (@members) {
	my $nodeid;
	my $iface;

	if ($member->GetAttribute("node_id", \$nodeid) != 0 ||
	    $member->GetAttribute("iface", \$iface) != 0) {
	    die("*** $0:\n".
		"    Missing attributes for $member in $vlan\n");
	}
	# Make sure we can still find it.
	my $interface = Interface->LookupByIface($nodeid, $iface);
	if (!defined($interface)) {
	    print STDERR "*** No interface for $nodeid:$iface in $vlan\n";
	    next;
	}
	push(@list, "$nodeid:$iface");
    }
    $table{$id} = \@list;
    debug("In table: $vlan $table{$id}\n");
}

# Get all the vlans from the switch
my $list;
my $vlan=0;
open(LIST,"$SNMPIT -l |") || die ("vlandiff: couldn't run snmpit: $!\n");
while(<LIST>) {
    chop;

    # Skip heaer lines
    if (/(^VLAN)|(^--)/) { next; }

    # Ignore the pid/eid and vlan_name
    if ( /^(\S+)\s+\S*\s+\S*\s+(.*)$/ ) {
	my $vlan_id = $1;
	my $members = $2;
	debug("VLAN id $vlan_id has members $members\n");
	$switch{$vlan_id} = [ split(" ",$members) ];
	$vlan = $vlan_id;
    } elsif ( /^\s+(.*)?$/ ) {
	# These lines are continuations of multi-line meber lists
	my $members = $1;
	if (!defined $members) { $list = ""; } else { $list = $members; }
	push @{$switch{$vlan}}, split(" ",$list);
	debug("On switch: vlan $vlan: $switch{$vlan}\n");
    }
}
close(LIST);

# Compare all of them...

foreach my $key (sort keys %table) {
    if ( defined $switch{$key} ) {
	# Hacky 'one liner' list comparison
	if (join("\0",sort(@{$switch{$key}}))
		eq join("\0",sort(@{$table{$key}}))) {
	    # If its in both lists, delete it from both
	    debug("vlan table:$key ($table{$key}) matches switch:$key ($switch{$key})\n");
	    delete $switch{$key};
	    delete $table{$key};
	}
    }
}

# Print out the difference

my $rv = 0;

if (keys %table) {
    print "In vlans table only:\n";
    foreach my $key (sort keys %table) {
	print "$key\t", join(" ",@{$table{$key}}), "\n";
    }
    $rv++;
}

if (keys %switch) {
    print "On switch only:\n";
    foreach my $key (sort keys %switch) {
	print "$key\t", join(" ",@{$switch{$key}}), "\n";
    }
    $rv++;
}

debug("Exiting with value $rv\n");


# Return 0 if same, 1 for a one-sided diff, 2 for a two-sided diff
# (Could be changed to return total # of different vlans)
exit($rv);

sub debug(@) {
    if ($debug) {
	warn @_;
    }
}
