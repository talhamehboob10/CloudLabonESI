#!/usr/bin/perl -wT
#
# Copyright (c) 2000-2019 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;

#
# Turn on/off admin mode for nodes and optionally reboot/wait.
#
sub usage()
{
    print STDOUT "Usage: node_admin [-h] [-n | -w] <on | off> [node ....]\n";
    print STDOUT "       node_admin [-h] [-n | -w] -e pid,eid <on | off>\n";
    print STDOUT "-h     This message\n";
    print STDOUT "-n     Do not reboot node\n";
    print STDOUT "-w     Wait for node to come back up if rebooted\n";
    print STDOUT "-R     Boot node into 'recovery' MFS instead\n";
    print STDOUT "-e     Operate on all nodes in an experiment\n";
    print STDOUT "-c cmd Run command in MFS and wait for completion\n".
		 "       (-n and -w apply after the command is run).\n";
    exit(-1);
}
my $optlist  = "hnwe:c:R";
my $waitmode = 0;
my $recovery = 0;
my $reboot   = 1;
my $runcmd   = "";
my $onoff;

#
# Configure variables
#
my $TB		= "/users/achauhan/Cloudlab/CloudLabonESI/emulab-devel-new/emulab-devel/build_aish";

#
# Testbed Support libraries
#
use lib "/users/achauhan/Cloudlab/CloudLabonESI/emulab-devel-new/emulab-devel/build_aish/lib";
use libdb;
use libtestbed;
use libadminmfs;
use User;
use Node;
use Experiment;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/sbin:/usr/bin:";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# 
#
my $nodereboot	= "$TB/bin/node_reboot";
my $osselect    = "$TB/bin/os_select";
my @nodes       = ();

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{h})) {
    usage();
}
if (defined($options{"n"})) {
    $reboot = 0;
}
if (defined($options{"w"})) {
    $waitmode = 1;
}
if (defined($options{"R"})) {
    $recovery = 1;
}
if (defined($options{"c"})) {
    $runcmd = $options{"c"};
    $onoff = "on";
}
else {
    if (!@ARGV) {
	usage();
    }
    $onoff  = shift(@ARGV);
}

if ($onoff ne "on" && $onoff ne "off") {
    usage();
}

#
# Verify user and get his DB uid and other info for later.
#
my $this_user;
if ($UID) {
    $this_user = User->ThisUser();
    if (! defined($this_user)) {
	die("*** $0:\n".
	    "    You ($UID) do not exist!\n");
    }
}

if (defined($options{"e"})) {
    #
    # Reboot all nodes in an experiment
    #
    if (@ARGV) {
	usage();
    }
    my $experiment = Experiment->Lookup($options{"e"});
    if (!defined($experiment)) {
	die("*** $0:\n".
	    "    Unknown experiment!\n");
    }

    #
    # Verify permission to muck with this experiment. This is to head off
    # permission problems early; the nodes are indvidually checked later
    # in the library.
    #
    if ($UID && !$this_user->IsAdmin() &&
	! $experiment->AccessCheck($this_user, TB_EXPT_MODIFY)) {
	die("*** $0:\n".
	    "    You not have permission to reboot nodes in $experiment!\n");
    }
    @nodes = $experiment->NodeList();
    if (! @nodes) {
	die("*** $0:\n".
            "    There are no nodes reserved in $experiment\n");
    }
}
else {
    if (! @ARGV) {
	usage();
    }

    foreach my $n (@ARGV) {
	my $node = Node->Lookup($n);
	if (!defined($node)) {
	    die("*** $0:\n".
		"    Node $n does not exist!\n");
	}
	if (!$node->IsReserved()) {
	    die("*** $0:\n".
		"    Node $n is not reserved; reserve it first!\n");
	}
	if ($UID && !$this_user->IsAdmin()) {
	    if (! $node->AccessCheck($this_user, TB_NODEACCESS_LOADIMAGE)) {
		die("*** $0:\n".
		    "    You are not allowed to put $node into admin mode!\n");
	    }
	    if ($node->IsTainted("useronly") || 
		$node->IsTainted("blackbox")) {
		die("*** $0:\n".
		    "    $node is running a restricted image. Admin mode ".
		    "not allowed!\n");
	    }
	}
	push(@nodes, $node);
    }
}

my @nodeids = map($_->node_id(), @nodes);
my @bad;
my %args;

if ($runcmd ne "") {
    #
    # Reboot into admin more and run the command
    #
    %args = ();
    $args{'name'} = $0;
    $args{'command'} = $runcmd;
    if (TBAdminMfsRunCmd(\%args, undef, @nodeids)) {
	die("*** $0:\n".
	    "    Failed to run '$runcmd' on some of @nodeids!\n");
    }

    #
    # Turn admin mode back off and optionally reboot back to the old OS
    #
    %args = ();
    $args{'name'} = $0;
    $args{'on'} = 0;
    $args{'clearall'} = 0;
    if (TBAdminMfsSelect(\%args, \@bad, @nodeids)) {
	die("*** $0:\n".
	    "    Could not turn admin mode off for @bad!\n");
    }

    #
    # Restore the startupcmd from the virt_nodes table since MfsRunCmd()
    # cleared it. We need to do this after the MfsSelect call above.
    #
    foreach my $node (@nodes) {
	$node->SetStartupCmd();
    }

    if ($reboot) {
	%args = ();
	$args{'name'} = $0;
	$args{'on'} = 0;
	$args{'reboot'} = $reboot;
	$args{'wait'} = $waitmode;
	if (TBAdminMfsBoot(\%args, \@bad, @nodeids)) {
	    die("*** $0:\n".
		"    Did not properly reboot @bad after command!\n");
	}
    }
    exit(0);
}

$args{'name'} = $0;
$args{'on'} = ($onoff eq "on");
$args{'clearall'} = 0;
$args{'recovery'} = 1 if ($recovery && $onoff eq "on");
if (TBAdminMfsSelect(\%args, \@bad, @nodeids)) {
    die("*** $0:\n".
	"    Could not turn admin mode $onoff for @bad!\n");
}

#
# If turning off admin mode, reset the startupcmd.
#
if ($onoff eq "off") {
    foreach my $node (@nodes) {
	$node->SetStartupCmd();
    }
}

if ($reboot) {
    %args = ();
    $args{'name'} = $0;
    $args{'on'} = ($onoff eq "on");
    $args{'reboot'} = $reboot;
    $args{'wait'} = $waitmode;
    if (TBAdminMfsBoot(\%args, \@bad, @nodeids)) {
	die("*** $0:\n".
	    "    Did not properly reboot @bad!\n");
    }
}
exit(0);
