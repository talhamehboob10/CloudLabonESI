#!/usr/bin/perl -w

#
# Copyright (c) 2000-2017 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

#
# export_tables - Create an SQL file with the contents of selected tables 
# that should more or less be the same across all sites.
#

use English;

my $dist = 0;
if (@ARGV && $ARGV[0] eq "-i") {
    $dist = 1;
}

#
# Configure variables
#
my $DBNAME = 'tbdb';

my $extraopts  = "";
my $mysqlvers = `mysql -V`;
if ($mysqlvers =~ /Distrib (\d\.\d)/) {
    my $vers = $1 + 0.0;
    if ($vers >= 5.0) {
	$extraopts .= "--skip-opt ";
    }
    if ($vers >= 5.7) {
	$extraopts .= "--set-gtid-purged=off ";
    }
}
else {
    fatal("Could not determine mysql version");
}
my $mysqldump = "mysqldump $extraopts";

#
# We use the bare module instead of the testbed libdb, so that this
# script can run from a first-time installation, before the latter is
# installed.
#
use DBI;

#
# Build a list of tables to export
#
my $dbh = DBI->connect("DBI:mysql:database=$DBNAME;host=localhost",
		       undef, "none",
		       {'PrintError' => 0});
if (!$dbh) {
    die("Unable to connect to mysqld - Either it's not running or \n" .
    	  "permission was denied.\n");
}
my $sth = $dbh->prepare("select table_name from exported_tables");
$sth->execute();
my $table_names;
while (my ($table_name) = $sth->fetchrow()) {
    $table_names .= "$table_name ";
}

#
# Run mysqldump, and read its stdout
#
open(FH, "$mysqldump " .
     ($dist ? "--add-locks" : "") . " -t $DBNAME $table_names |") or
    die "Unable to run $mysqldump: $!\n";

#
# Change INSERT to REPLACE, so that the resulting SQL can be used to update
# existing databases.
#
while (<FH>) {
    s/^INSERT/REPLACE/g;
    #
    # Kinda hackish, but gets the job done...
    #
    # Don't put any temporary entries from state_triggers out
    if (/INTO state_triggers VALUES \(\'([^\']*)\',/i &&
	$1 ne '*') { next; }

    print;

    if ($dist && /LOCK TABLES ([-\w]*) WRITE/i) {
	print "DELETE FROM $1;\n"
	    if ($1 ne "state_triggers");
    }
}
