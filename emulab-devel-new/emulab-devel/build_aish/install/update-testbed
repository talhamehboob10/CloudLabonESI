#!/usr/bin/perl -w
#
# Copyright (c) 2010-2016 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use Data::Dumper;

#
# Update DB.
#
sub usage()
{
    print STDERR "Usage: update-testbed\n";
    print STDERR "-v     - Verify install scripts by loading them only\n";
    print STDERR "-n     - Run install script in impotent mode\n";
    print STDERR "-d     - Debugging mode\n";
    print STDERR "-i     - Run 'gmake boss-install' after running scripts\n";
    print STDERR "-s     - Stop/Restart the testbed before/after running scripts\n";
    exit(-1);
}
my $optlist   = "idsvfn";
my $debug     = 0;
my $force     = 0;
my $verify    = 0;
my $install   = 0;
my $stopbed   = 0;
my $stopped   = 0;
my $nologins  = 0;
my $committed = 0;
my $impotent  = 0;
my $forceopt  = "";

#
# Configure variables
#
my $TB	         = "/users/achauhan/Cloudlab/CloudLabonESI/emulab-devel-new/emulab-devel/build_aish";
my $TBOPS        = "testbed-ops\@ops.cloudlab.umass.edu";
my $DBNAME       = "tbdb";
my $SRCDIR       = "../..";
my $SQLUPDATEDIR = "$SRCDIR/sql/updates";
my $PGENIUPDATEDIR = "$SRCDIR/protogeni/updates";
my $UPDATEDIR    = "$SRCDIR/install/updates";
my $DBUPDATE     = "$TB/sbin/dbupdate";
my $PGENIUPDATE  = "$TB/sbin/protogeni/update";
my $PGENISUPPORT = 1;
my $INSTALLUPDATE= "$TB/sbin/update-install";
my $SETSITEVAR   = "$TB/sbin/setsitevar";
my $MFRISBEED	 = "/usr/local/etc/rc.d/3.mfrisbeed.sh";
my $STARTUP      = "/usr/local/etc/rc.d/3.testbed.sh";
my $tempfile     = "/var/tmp/update.$$";

# Protos
sub Fatal($);
sub CheckForReboot();

# un-taint path
$ENV{'PATH'} = '/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# We want to force this to run from the build tree to avoid any
# problems with the install tree not being in a consistent state.
#
BEGIN
{
    if (-e "../Makeconf") {
	my $srcdir = "../..";
	my $objdir = `/bin/pwd`;
	chomp($objdir);
	# Prior to first install or running from object dir.
	unshift(@INC, "$objdir/../db");
	if ($srcdir =~ /^\//) {
	    unshift(@INC, "$srcdir/install");
	    unshift(@INC, "$srcdir/tbsetup");
	} else {
	    unshift(@INC, "$objdir/$srcdir/install");
	    unshift(@INC, "$objdir/$srcdir/tbsetup");
	}
	unshift(@INC, "$objdir/../tbsetup");
    }
}
use emdb;
use libEmulab;
use libtestbed;

#
# Parse command arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"f"})) {
    $force = 1;
    $forceopt = "-f";
}
if (defined($options{"i"})) {
    $install = 1;
}
if (defined($options{"v"})) {
    $verify = 1;
}
if (defined($options{"s"})) {
    $stopbed = 1;
}
if (defined($options{"n"})) {
    $impotent = 1;
}

#
# Must be root if actually doing this.
#
if (!($verify || $impotent) && $UID) {
    Fatal("This script must be run as root! Maybe use sudo?")
}

if (! (-e "../db/dbupdate" && -e "./update-install")) {
    Fatal("Cannot find dbupdate script! Running from the object dir?");
}

my $objdir = `/bin/pwd`;
chomp($objdir);

my $abssrcdir;
if ($SRCDIR =~ /^\//) {
    $abssrcdir = "$SRCDIR";
} else {
    $abssrcdir = "$objdir/$SRCDIR";
}

my @INCDIRS = ("-I${objdir}", "-I${objdir}/../tbsetup",
	       "-I${objdir}/../db", "-I${objdir}/../event/lib",
	       "-I${objdir}/../clientside/lib/event", 
	       "-I${objdir}/../clientside/lib/libtb", 
	       "-I${abssrcdir}/tbsetup",
	       "-I${abssrcdir}/install",
	       "-I${abssrcdir}/clientside/lib/event",
	       # To catch a few extra things that do not normally change.
	       "-I/users/achauhan/Cloudlab/CloudLabonESI/emulab-devel-new/emulab-devel/build_aish/lib"
	       );
if ($PGENISUPPORT) {
    @INCDIRS = (@INCDIRS, "-I${objdir}/../protogeni/lib");
}

# Chicken or Egg.
# XXX only set specific fields as the ns_include field may not be there yet.
DBQueryFatal("INSERT INTO sitevariables (name,value,defaultvalue,description)".
	     " VALUES ".
	     " ('general/testbed_shutdown',NULL,'0', ".
	     "  'Non-zero value indicates that the testbed is shutdown ".
	     "and scripts should not do anything when they run. ".
	     "DO NOT SET THIS BY HAND!')")
    if (!SiteVarExists("general/testbed_shutdown"));

#
# Dump the testbed version numbers in all modes.
#
print "Testbed version info:\n";
system("perl @INCDIRS ./testbed-version");

#
# Impotent mode, just runs the install scripts. 
#
if ($impotent) {
    system("perl @INCDIRS ./update-install -n -p $UPDATEDIR");
    if ($?) {
	exit(1);
    }
    CheckForReboot();
    exit(0);
}

#
# In verify mode, just run the update scripts in verify.
#
if ($verify) {
    my $exitval = 0;
    
    print "Checking for DB updates ...\n";
    system("perl @INCDIRS ../db/dbupdate -q -v -p $SQLUPDATEDIR $DBNAME");
    $exitval++
	if ($?);
    
    print "Checking for install updates ...\n";
    system("perl @INCDIRS ./update-install -q -v -p $UPDATEDIR");
    $exitval++
	if ($?);

    if ($PGENISUPPORT) {
	print "Checking for ProtoGENI DB updates ...\n";
	system("perl @INCDIRS ../protogeni/scripts/update ".
	       "       -q -v -p $PGENIUPDATEDIR");
	$exitval++
	    if ($?);
    }

    exit(0)
	if (!$exitval);

    print "*** You have update scripts that have not been run.\n";
    print "    As a safety measure, you will not be able to install until\n";
    print "    this is resolved. Typically, you can resolve this by:\n\n";
    print "        boss> cd /your/object/dir\n";
    print "        boss> gmake update-testbed\n\n";
    print "    More information is available at:\n";
    print "       https://users.emulab.net/trac/emulab/wiki/install/update-testbed-v2\n\n";
    exit($exitval);
}

#
# Cleanup handler when stopping the testbed.
#
sub Restart()
{
    if ($committed) {
	print "*** Update has progressed too far; you must renable by hand\n";
	return;
    }
    if ($stopped) {
	#
	# Need to to do this so the rc script knows it is okay to start.
	#  0  - Testbed is enabled.
	#  1  - Testbed is disabled.
	# -1  - Testbed is coming back online, so start up daemons.
	#
	system("$SETSITEVAR general/testbed_shutdown -1");
	if ($?) {
	    print "*** Could not set general/testbed_shutdown to -1\n";
	    exit(1);
	}
	
	print "Starting up testbed daemons.\n";
	if (system("$MFRISBEED start") || system("$STARTUP start")) {
	    print "*** Could not restart testbed daemons.\n";
	    exit(1);
	}
	print "\n";
    }
    if ($nologins) {
	print "Turning on the web interface and allowing swaps\n";
	if (system("$SETSITEVAR general/testbed_shutdown -") ||
	    system("$SETSITEVAR web/nologins -") ||
	    system("$SETSITEVAR web/message -")) {
	    print "*** Could not renable the web interface and swapping!\n";
	    exit(1);
	}
    }
}

sub Handler()
{
    Restart();
    exit(1);
}

if ($stopbed) {
    $SIG{INT} = \&Handler;
    
    #
    # Stop the testbed before doing the update.
    #
    print "** Putting the testbed to sleep before updating ...\n";
    print "-> Turning off the web interface and disallowing swaps.\n";

    my $msg = "Testbed software update in progress; back in a little while";
    $msg =~ s|\&|&amp;|g;
    $msg =~ s|\<|&lt;|g;
    system("$SETSITEVAR","web/message", $msg);
    if ($?) {
	Fatal("Could not update web message");
    }
    system("$SETSITEVAR web/nologins 1");
    if ($?) {
	Fatal("Could not disable web logins and experiment swaps");
    }
    system("$SETSITEVAR general/testbed_shutdown 1");
    if ($?) {
	Fatal("Could not set general/testbed_shutdown");
    }
    $nologins = 1;
    
    print "-> Waiting a few seconds for testbed to quiet down ...\n";
    sleep(5);
    print "-> Looking for experiments still in transition.\n";

    #
    # Look for any experiments in transition, and wait for them to stop.
    # This could take an arbitrarily long time of course, but its the only
    # safe way to do it. Don't worry about any experiments that are older
    # then 24 hours though; they are likely stuck and not going anywhere.
    #
    while (1) {
	my $query_result =
	    emdb::DBQueryWarn("select pid,eid,idx,state,expt_locked ".
			"   from experiments ".
			"where expt_locked is not null and ".
			"      DATE_SUB(NOW(),INTERVAL 1 DAY) <= expt_locked");
	if (!$query_result) {
	    Fatal("Error getting info from the DB. Stopping.");
	}
	last
	    if (!$query_result->numrows());

	print "-> Experiments still in transition:\n";
	while (my ($pid,$eid,$idx,$state,$expt_locked) =
	       $query_result->fetchrow_array()) {

	    print "  $pid,$eid,$idx -- $state, $expt_locked\n";
	}
	print "-> Waiting 30 seconds before trying again. ^C is okay\n\n";
	sleep(30);
    }
    print "** Testbed is quiet; stopping testbed daemons ... \n";
    if (system("$STARTUP stop >/dev/null 2>&1") ||
	(-x $MFRISBEED &&
	system("$MFRISBEED stop >/dev/null 2>&1"))) {
	Fatal("Could not stop testbed daemons. Stopping.");
    }
    $stopped = 1;

    print "** Testbed is stopped. Proceeding to update\n";

    #
    # No going back; we do not want to re-enable the testbed if things fail
    # from this point on.
    #
    $committed = 1;
}

print "Running DB updates ...\n";
system("perl @INCDIRS ../db/dbupdate -q -p $SQLUPDATEDIR $DBNAME");
exit(1)
    if ($?);
    
print "Running pre-install updates ...\n";
system("perl @INCDIRS ./update-install $forceopt -q -a pre -p $UPDATEDIR");
exit(1)
    if ($?);

if ($PGENISUPPORT) {
    print "Running ProtoGENI DB updates ...\n";
    system("perl @INCDIRS ../protogeni/scripts/update ".
	   "       -q -p $PGENIUPDATEDIR");
    exit(1)
	if ($?);
}

if ($install) {
    print "Installing testbed software ... this will take a while!\n";
    print "Output saved to $tempfile\n";
    
    system("(cd ..; gmake; gmake boss-install-noupdatecheck) >$tempfile 2>&1");
    if ($?) {
	exit(1);
    }
}

print "Running post-install updates ...\n";
system("perl @INCDIRS ./update-install $forceopt -q -a post -p $UPDATEDIR");
exit(1)
    if ($?);

if (CheckForReboot()) {
    exit(0);
}
# So we can turn the testbed back on.
elsif ($stopbed) {
    $committed = 0;
    Restart();
}
exit(0);

sub Fatal($)
{
    my ($msg) = @_;

    Restart();
    die("*** $0:\n".
	"    $msg\n");
}

#
# See if a reboot is needed. Typically not, but sometimes it might.
#
sub CheckForReboot()
{
    my $reboot_query =
	emdb::DBQueryWarn("select value from version_info ".
			  "where name='needreboot'");
    if ($reboot_query->numrows) {
	my ($needreboot) = $reboot_query->fetchrow_array();
	if ($needreboot) {
	    print "********************************************************\n";
	    print "*\n";
	    if ($impotent) {
		print "* THESE UPDATES WILL REQUIRE BOSS REBOOT!\n";
	    }
	    else {
		print "* YOU MUST NOW REBOOT BOSS!\n";
	    }
	    print "*\n";
	    print "********************************************************\n";
	    return 1;
	}
    }
    return 0;
}
