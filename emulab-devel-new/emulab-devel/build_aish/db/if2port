#!/usr/bin/perl -w

#
# Copyright (c) 2000-2017 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use Getopt::Std;
use strict;

use lib "/users/achauhan/Cloudlab/CloudLabonESI/emulab-devel-new/emulab-devel/build_aish/lib";
use libdb;

#
# if2port - Given an interface (specified as node[:card]), find the
# port on the switches that it's connected to. With the -v switch, gives
# some human-readable information to help in following wires and diagnosing
# problems.
#

#
# IMPORTANT: This file contains some information specific to the Utah
# Network Testbed! If you want to use it in another enviroment, change
# the information below (%switches, %cards, %wires)

#
# Describes the location of each of the switches that nodes may be
# connected to.
#
my %switches = ( cisco1 => 'pc850 cluster top right',
		 cisco2 => 'pc840 cluster bottom right',
		 cisco3 => 'pc850 cluster top middle',
		 cisco4 => 'pc850 cluster top left',
		 cisco5 => 'pc3000 cluster top left',
		 cisco6 => 'pc3000 cluster bottom left',
		 cisco8 => 'pc3000 cluster top right',
		 procurve1 => 'd710 cluster middle right',
		 procurve2 => 'd710 cluster bottom right',
		 procurve3 => 'd710 cluster top right',
		 procurve4 => 'd710 cluster top left',
		 procurve5 => 'd710 cluster middle left',
		 apcon1 =>    'd710 cluster bottom left',
		 arista1 =>   'd820 cluster top right'
);

#
# Description of the location of each chard on the back of a machine.
# A hash, indexed by node type. Each value is an array reference, ordered
# by the card order in the database.
#
my %cards = ( 'pc600' => [ 'second from left','third from left',
                          'second from right','rightmost','leftmost' ],
	      'pc850' => [ 'left port of dual card', 'right port of dual card',
	      		   'bottom builtin port', 'top builtin port',
			   'single port card' ],
	      'pc2000' =>[ 'bottom single', 'top right', 'top left',
			   'middle right', 'middle left' ],
	      'pc3000' =>[ 'builtin right', 'builtin left',
			   'top left', 'top right',
			   'bottom left', 'bottom right' ],
	      'd710'  => [ 'builtin leftmost', 'builtin second from left',
			   'builtin second from right', 'builtin rightmost',
			   'dual card left port', 'dual card right port' ],
	      'd820'  => [ 'builtin leftmost', 'builtin second from left',
			   'builtin second from right', 'builtin rightmost',
			   'left port of top 10G dual card',
			   'right port of top 10G dual card',
			   'left port of bottom 10G dual card',
			   'right port of bottom 10G dual card' ]
 );

# Colors of wires, indexed by wire type
my %wires = ( Node => 'yellow', Control => 'red', Power => 'green',
	Serial => 'white' );

# Options: v = verbose, d = debug, m = show mac
my %opt = ( v => 0, d => 0, m => 0, I => 0);

getopts('vdmI',\%opt);
$opt{m} = 0 if ($opt{v});


if (@ARGV < 1) {
	exit &usage;
}

while (my $arg = shift @ARGV) {
	my ($node,$iface) = split /:/,$arg;
	&debug("Node is $node");
	&debug("iface is $iface") if (defined $iface);

	printf("\n%9s %9s %5s%s%s %9s %9s %5s %5s %5s %3s %7s %7s\n",
	       "nodeid1", "iface1", "card1",
	       $opt{I} ? "              IP" : "",
	       $opt{m} ? "          MAC" : "",
	       "nodeid2", "iface2", "card2", "port2", "cable", "len", "wtype",
	       "ntype");

	my $query;
	my $ix = 0;
	if ($opt{m} || $opt{I}) {
	    $query = "SELECT w.node_id1,w.card1,";
	    if ($opt{I}) {
		$query .= "i.IP,";
		$ix++;
	    }
	    if ($opt{m}) {
		$query .= "i.mac,";
		$ix++;
	    }
	    $query .= "w.node_id2,w.card2,w.port2,w.cable,w.len,w.type,".
		"  n.type,w.iface1,w.iface2 ".
		" FROM wires AS w,nodes AS n,interfaces AS i".
		" WHERE w.node_id1=n.node_id AND ".
		"       w.node_id1=i.node_id AND w.iface1=i.iface";
	} else {
	    $query = "SELECT w.node_id1,w.card1,w.node_id2,w.card2,w.port2,".
		"w.cable,w.len,w.type,n.type,w.iface1,w.iface2 ".
		"FROM wires AS w,nodes AS n WHERE w.node_id1=n.node_id";
	}
	$query .= " AND node_id1='$node'";
	if (defined $iface) {
	    $query .= " AND iface1='$iface'";
	}

	&debug("Sending query $query\n");

	my $result = DBQueryFatal($query);

	if ($opt{v}) {
	    while (my @row = $result->fetchrow) {
		my $cardinfo;
		if (exists($cards{$row[8+$ix]})) {
		    $cardinfo = ${$cards{$row[8+$ix]}}[$row[1]];
		} else {
		    $cardinfo = "";
		}
		my $switchinfo = $switches{$row[2+$ix]};
		$switchinfo = "" if (!$switchinfo);
		my $wireinfo = $wires{$row[7+$ix]};
		$wireinfo = "black"
		    if ($row[2+$ix] eq "arista1" && $wireinfo eq "yellow");
		$row[5] = "0" if (!defined($row[5+$ix]));
		print "$row[0] $row[9+$ix] port $row[1] ($cardinfo) ".
		    "connects to $row[2+$ix] ($switchinfo), ".
		    "module $row[3+$ix], port $row[4+$ix] via ".
		    "wire #$row[5+$ix] (length $row[6+$ix], color $wireinfo)\n";
	    }
	} else {
	    while (my @row = $result->fetchrow) {
		my $i = 0;
		$row[5+$ix] = "0" if (!defined($row[5+$ix]));
		printf("%9s %9s %5d", $row[$i++], $row[9+$ix], $row[$i++]);
		printf("%16s", $row[$i++])
		    if ($opt{I});
		printf(" %12s", $row[$i++])
		    if ($opt{m});
		printf(" %9s %9s %5d %5d %5d %3d %7s %7s\n",
		       $row[$i++], $row[10+$ix], $row[$i++], $row[$i++], $row[$i++],
		       $row[$i++],$row[$i++],$row[$i++]);
	    }
	}
}

sub debug { warn @_,"\n" if $opt{d}; }

sub usage {
	print "Usage: $0 [-vdm] <node | node:ethNNN> ... \n";
	print "-v: Verbose, prose, output\n";
	print "-d: Enable debugging output\n";
	print "-m: Show MAC addresses\n";
	print "-I: Show any assigned IP addresses\n";
	return -1;
}
