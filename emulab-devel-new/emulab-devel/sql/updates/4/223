#
# DB state for secure boot and loading.
#
use strict;
use libdb;

sub DoUpdate($$$)
{
    my ($dbhandle, $dbname, $version) = @_;
    my @mode_transitions = (
	["SECUREBOOT","TPMSIGNOFF","MINIMAL","SHUTDOWN",""],
	["SECUREBOOT","TPMSIGNOFF","NORMAL","SHUTDOWN",""],
	["SECUREBOOT","TPMSIGNOFF","NORMALv2","SHUTDOWN",""],
	["SECUREBOOT","TPMSIGNOFF","PXEFBSD","SHUTDOWN",""]
    );
    my @timeouts = (
	["SECUREBOOT","BOOTING",3600,"STATE:SECVIOLATION"],
	["SECUREBOOT","GPXEBOOTING",3600,"STATE:SECVIOLATION"],
	["SECUREBOOT","PXEBOOTING",3600,"STATE:SECVIOLATION"],
	["SECUREBOOT","SHUTDOWN",3600,"STATE:SECVIOLATION"],
	["SECUREBOOT","TPMSIGNOFF",3600,"STATE:SECVIOLATION"],
	["SECURELOAD","BOOTING",3600,"STATE:SECVIOLATION"],
	["SECURELOAD","GPXEBOOTING",3600,"STATE:SECVIOLATION"],
	["SECURELOAD","PXEBOOTING",3600,"STATE:SECVIOLATION"],
	["SECURELOAD","RELOADDONE",3600,"STATE:SECVIOLATION"],
	["SECURELOAD","RELOADING",3600,"STATE:SECVIOLATION"],
	["SECURELOAD","RELOADSETUP",3600,"STATE:SECVIOLATION"],
	["SECURELOAD","SHUTDOWN",3600,"STATE:SECVIOLATION"],
	["SECURELOAD","TPMSIGNOFF",3600,"STATE:SECVIOLATION"]
    );
    my @transitions = (
	["SECUREBOOT","BOOTING","SECVIOLATION","QuoteFailed"],
	["SECUREBOOT","BOOTING","TPMSIGNOFF","QuoteOK"],
	["SECUREBOOT","GPXEBOOTING","PXEBOOTING","DHCP"],
	["SECUREBOOT","PXEBOOTING","BOOTING","BootInfo"],
	["SECURELOAD","BOOTING","PXEBOOTING","re-BootInfo"],
	["SECURELOAD","BOOTING","RELOADSETUP","QuoteOK"],
	["SECURELOAD","BOOTING","SECVIOLATION","QuoteFailed"],
	["SECURELOAD","GPXEBOOTING","PXEBOOTING","DHCP"],
	["SECURELOAD","PXEBOOTING","BOOTING","BootInfo"],
	["SECURELOAD","RELOADDONE","SECVIOLATION","QuoteFailed"],
	["SECURELOAD","RELOADDONE","TPMSIGNOFF","QuoteOK"],
	["SECURELOAD","RELOADING","RELOADDONE","ImageOK"],
	["SECURELOAD","RELOADING","SECVIOLATION","ImageBad"],
	["SECURELOAD","RELOADSETUP","RELOADING","ReloadReady"],
	["SECURELOAD","SHUTDOWN","GPXEBOOTING","QuoteOK"],
	["SECURELOAD","SHUTDOWN","SECVIOLATION","QuoteFailed"]
    );
    my @triggers = (
	["*","*","GPXEBOOTING","SECUREBOOT"],
	["*","*","SECVIOLATION","POWEROFF, EMAILNOTIFY"],
	["*","SECUREBOOT","BOOTING",""],
	["*","SECUREBOOT","PXEBOOTING",""],
	["*","SECUREBOOT","TPMSIGNOFF","PXEBOOT, BOOTING, CHECKGENISUP"],
	["*","SECURELOAD","BOOTING",""],
	["*","SECURELOAD","PXEBOOTING",""],
	["*","SECURELOAD","RELOADDONE","RESET, RELOADDONE"]
    );

    foreach my $row (@mode_transitions) {
	my ($opm1,$s1,$opm2,$s2,$lab) = @$row;
	my $query_result =
	    DBQueryFatal("SELECT op_mode1 FROM mode_transitions WHERE ".
			 "op_mode1='$opm1' AND state1='$s1' AND ".
			 "op_mode2='$opm2' AND state2='$s2'");
	if ($query_result->numrows == 0) {
	    DBQueryFatal("INSERT INTO mode_transitions VALUES ".
			 "('$opm1','$s1','$opm2', '$s2','$lab')");
	}
    }

    foreach my $row (@timeouts) {
	my ($opm,$s,$to,$act) = @$row;
	my $query_result =
	    DBQueryFatal("SELECT op_mode FROM state_timeouts WHERE ".
			 "op_mode='$opm' AND state='$s'");
	if ($query_result->numrows == 0) {
	    DBQueryFatal("INSERT INTO state_timeouts VALUES ".
			 "('$opm','$s','$to', '$act')");
	}
    }

    foreach my $row (@transitions) {
	my ($opm,$s1,$s2,$lab) = @$row;
	my $query_result =
	    DBQueryFatal("SELECT op_mode FROM state_transitions WHERE ".
			 "op_mode='$opm' AND state1='$s1' AND state2='$s2'");
	if ($query_result->numrows == 0) {
	    DBQueryFatal("INSERT INTO state_transitions VALUES ".
			 "('$opm','$s1','$s2','$lab')");
	}
    }

    foreach my $row (@triggers) {
	my ($node,$opm,$s,$trig) = @$row;
	my $query_result =
	    DBQueryFatal("SELECT node_id FROM state_triggers WHERE ".
			 "node_id='$node' AND op_mode='$opm' AND state='$s'");
	if ($query_result->numrows == 0) {
	    DBQueryFatal("INSERT INTO state_triggers VALUES ".
			 "('$node','$opm','$s','$trig')");
	}
    }

    #
    # Add fields to images table for authentication/decryption keys
    #
    if (!DBSlotExists("images", "auth_uuid")) {
        DBQueryFatal("ALTER TABLE images ADD `auth_uuid`".
		     "  varchar(64) DEFAULT NULL AFTER access_key");
    }
    DBQueryFatal("REPLACE INTO table_regex VALUES ".
		 "('images','auth_uuid','text','regex', ".
		 "  '^[0-9a-fA-F]+\$',0,0,NULL)");
    if (!DBSlotExists("images", "auth_key")) {
        DBQueryFatal("ALTER TABLE images ADD `auth_key` ".
		     "  varchar(512) DEFAULT NULL AFTER auth_uuid");
    }
    DBQueryFatal("REPLACE INTO table_regex VALUES ".
		 "('images','auth_key','text','regex', ".
		 "  '^[0-9a-fA-F,]+\$',0,0,NULL)");
    if (!DBSlotExists("images", "decryption_key")) {
        DBQueryFatal("ALTER TABLE images ADD `decryption_key` ".
		     "  varchar(256) DEFAULT NULL AFTER auth_key");
    }
    DBQueryFatal("REPLACE INTO table_regex VALUES ".
		 "('images','decryption_key','text','regex', ".
		 "  '^[0-9a-fA-F]+\$',0,0,NULL)");

    if (!DBSlotExists("node_hostkeys", "tpmidentity")) {
	DBQueryFatal("ALTER TABLE node_hostkeys ADD `tpmidentity` ".
		     " mediumtext AFTER tpmx509");
    }

    #
    # Add nonces/quotes tables
    #
    if (!DBTableExists("nonces")) {
	DBQueryFatal("CREATE TABLE `nonces` ( ".
		     "  `node_id` varchar(32) NOT NULL, ".
		     "  `purpose` varchar(64) NOT NULL, ".
		     "  `nonce` mediumtext, ".
		     "  `expires` int(10) NOT NULL, ".
		     "  PRIMARY KEY (`node_id`,`purpose`) ".
		     ") ENGINE=MyISAM DEFAULT CHARSET=latin1");
    }
    if (!DBTableExists("tpm_quote_values")) {
	DBQueryFatal("CREATE TABLE `tpm_quote_values` ( ".
		     "  `node_id` varchar(32) NOT NULL default '', ".
		     "  `op_mode` varchar(20) NOT NULL, ".
		     "  `state` varchar(20) NOT NULL, ".
		     "  `pcr` int(11) NOT NULL, ".
		     "  `value` mediumtext, ".
		     "  PRIMARY KEY (`node_id`,`op_mode`,`state`,`pcr`) ".
		     ") ENGINE=MyISAM DEFAULT CHARSET=latin1");
    }

    return 0;
}
1;
