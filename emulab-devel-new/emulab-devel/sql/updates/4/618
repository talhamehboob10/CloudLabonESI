use strict;
use libdb;

sub DoUpdate($$$)
{
    my ($dbhandle, $dbname, $version) = @_;

    if (!DBTableExists("apt_reservation_history_actions")) {
	DBQueryFatal("CREATE TABLE `apt_reservation_history_actions` ( ".
		     " `idx` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,".
		     " `aggregate_urn` varchar(128) NOT NULL default '',".
		     " `reservation_uuid` varchar(40) default NULL,".
		     " `stamp` datetime default NULL,".
		     " `action` enum('validate','submit','approve', ".
		     "               'delete','cancel','restore') ".
		     "      NOT NULL default 'validate', ".
		     " PRIMARY KEY (`idx`),".
		     " KEY `agguuid` (`aggregate_urn`,`reservation_uuid`)".
		     ") ENGINE=MyISAM DEFAULT CHARSET=latin1");
    }
    if (!DBTableExists("apt_reservation_history_details")) {
	DBQueryFatal("CREATE TABLE `apt_reservation_history_details` ( ".
		     " `idx` mediumint(8) unsigned NOT NULL default '0',".
		     " `aggregate_urn` varchar(128) NOT NULL default '',".
		     " `reservation_uuid` varchar(40) default NULL,".
		     " `pid` varchar(48) default NULL,".
		     " `pid_idx` mediumint(8) unsigned NOT NULL default '0',".
		     " `uid` varchar(8) default NULL,".
		     " `uid_idx` mediumint(8) unsigned default NULL,".
		     " `stamp` datetime default NULL,".
		     " `nodes` smallint(5) NOT NULL DEFAULT '0',".
		     " `type` varchar(30) NOT NULL DEFAULT '',".
		     " `start` datetime DEFAULT NULL,".
		     " `end` datetime DEFAULT NULL,".
		     " `refused` tinyint(1) NOT NULL default '0',".
		     " `approved` tinyint(1) NOT NULL default '0',".
		     " `reason` mediumtext,".
		     " PRIMARY KEY (`idx`),".
		     " KEY `agguuid` (`aggregate_urn`,`reservation_uuid`)".
		     ") ENGINE=MyISAM DEFAULT CHARSET=latin1");
    }
    return 0;
}

# Local Variables:
# mode:perl
# End:
