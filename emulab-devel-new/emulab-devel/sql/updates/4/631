use strict;
use Date::Parse;
use POSIX qw(strftime);

use emdb;
use EmulabConstants;
use Experiment;

sub TimeStamp($)
{
    my ($seconds) = @_;
    
    return POSIX::strftime("%m/%d/20%y %H:%M:%S", localtime($seconds));
}

sub DoUpdate($$$)
{
    my ($dbhandle, $dbname, $version) = @_;
    my $swapped = EXPTSTATE_SWAPPED();

    my $query_result =
	DBQueryFatal("select idx from experiments where ".
		     "      (state='$swapped' and geniflags=0 and ".
		     "       expt_expires is not null) or ".
		     "      (state!='$swapped' and autoswap and ".
		     "       expt_expires is null)");

    while (my ($idx) = $query_result->fetchrow_array()) {
	my $experiment = Experiment->Lookup($idx);
	next
	    if (!defined($experiment));

	if ($experiment->state() eq EXPTSTATE_SWAPPED()
	    && !$experiment->geniflags() &&
	    defined($experiment->expt_expires())) {
	    $experiment->SetExpiration(undef) == 0
		or return -1;
	    next;
	}
	if ($experiment->state() ne EXPTSTATE_SWAPPED() &&
	    $experiment->state() ne EXPTSTATE_NEW() &&
	    $experiment->autoswap() && 
	    !defined($experiment->expt_expires())) {
	    my $state = $experiment->state();
	
	    #
	    # Look to see if it has any nodes;
	    #
	    if ($experiment->NodeList(1)) {
		my $expires;
		print "No expiration for $experiment ($state).\n";

		#
		# ACTIVATING is the one annoying state, we do not have
		# a valid swapin time, since it is not set until the
		# swapin is done.
		#
		if ($experiment->state() eq EXPTSTATE_ACTIVATING()) {
		    $expires = $experiment->tstamp();
		}
		else {
		    # Easy.
		    $expires = $experiment->swapin_last();
		    if (!defined($expires)) {
			fatal("No swapin_last for $experiment");
		    }
		    $expires = str2time($expires);
		}
		$expires += $experiment->autoswap_timeout() * 60;
		print "-> Setting expiration to ". TimeStamp($expires) . "\n";
		$experiment->SetExpiration($expires) == 0
		    or return -1;
	    }
	}
	next;
    }
    return 0;
}

# Local Variables:
# mode:perl
# End:
