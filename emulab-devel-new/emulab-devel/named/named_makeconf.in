#!/usr/bin/perl -w

#
# Copyright (c) 2000-2020 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use Getopt::Std;
use Socket;

#
# named_makeconf - helper script to create named.conf file. The template
# looks like standard file, only with %token% strings that need to be
# replaced. See below.
#
sub usage {
	print "Usage: $0 <templatefile>\n";
	print "Spits out a named.conf file on stdout, as in:\n";
	print "$0 named.conf.template > named.conf\n";
}

#
# Configure variables
#
my $TESTBED_NETWORK          = "@TESTBED_NETWORK@";
my $TESTBED_NETMASK          = "@TESTBED_NETMASK@";
my $EXTERNAL_TESTBED_NETWORK = "@EXTERNAL_TESTBED_NETWORK@";
my $EXTERNAL_TESTBED_NETMASK = "@EXTERNAL_TESTBED_NETMASK@";
my $BOSSNODE_IP              = "@BOSSNODE_IP@";
my $USERNODE_IP              = "@USERNODE_IP@";
my $EXTERNAL_BOSSNODE_IP     = "@EXTERNAL_BOSSNODE_IP@";
my $EXTERNAL_USERNODE_IP     = "@EXTERNAL_USERNODE_IP@";

my $CONTROL_ROUTER_IP  = "@CONTROL_ROUTER_IP@";
my $CONTROL_NETWORK    = "@CONTROL_NETWORK@";
my $CONTROL_NETMASK    = "@CONTROL_NETMASK@";
my $PRIVATE_NETWORK    = "@PRIVATE_NETWORK@";
my $PRIVATE_ROUTER     = "@PRIVATE_ROUTER@";
my $PRIVATE_NETMASK    = "@PRIVATE_NETMASK@";
my $PUBLIC_NETWORK     = "@PUBLIC_NETWORK@";
my $PUBLIC_ROUTER      = "@PUBLIC_ROUTER@";
my $PUBLIC_NETMASK     = "@PUBLIC_NETMASK@";
my $NAMED_FORWARDERS   = "@NAMED_FORWARDERS@";
my $VIRTNODE_NETWORK   = "@VIRTNODE_NETWORK@";
my $VIRTNODE_NETMASK   = "@VIRTNODE_NETMASK@";
my $NAMED_ALSONOTIFY   = "@NAMED_ALSONOTIFY@";
my $IPV6_ENABLED       = @IPV6_ENABLED@;
my $IPV6_SUBNET_PREFIX = "@IPV6_SUBNET_PREFIX@";
my $IPV6_MAPFILE       = "";
if ($IPV6_ENABLED) {
    $IPV6_MAPFILE = $IPV6_SUBNET_PREFIX . ".db";    
    # Switch : to dot since colon causes gmake to act strange.
    $IPV6_MAPFILE =~ s/\:/./g;
}

# Protos
sub ReverseDottedIPV6($);

# Testbed libraries.
use lib "@prefix@/lib";

# Simple is good. I stole this out of a google search.
my @NETMASKS =
    (0x10000000,                                             # 0
     0x80000000, 0xC0000000, 0xE0000000, 0xF0000000,         #  1 -  4
     0xF8000000, 0xFC000000, 0xFE000000, 0xFF000000,         #  5 -  8
     0xFF800000, 0xFFC00000, 0xFFE00000, 0xFFF00000,         #  9 - 12
     0xFFF80000, 0xFFFC0000, 0xFFFE0000, 0xFFFF0000,         # 13 - 16
     0xFFFF8000, 0xFFFFC000, 0xFFFFE000, 0xFFFFF000,         # 17 - 20
     0xFFFFF800, 0xFFFFFC00, 0xFFFFFE00, 0xFFFFFF00,         # 21 - 24
     0xFFFFFF80, 0xFFFFFFC0, 0xFFFFFFE0, 0xFFFFFFF0,         # 25 - 28
     0xFFFFFFF8, 0xFFFFFFFC, 0xFFFFFFFE, 0xFFFFFFFF          # 29 - 32
);

my $TESTBED_SLASH_NETMASK = "24";
for (my $i = 0; $i < scalar(@NETMASKS); $i++) {
    my $foo = pack("N", $NETMASKS[$i]);

    if ($TESTBED_NETMASK eq inet_ntoa($foo)) {
	$TESTBED_SLASH_NETMASK = "$i";
	last;
    }
}
my $EXTERNAL_TESTBED_SLASH_NETMASK = "24";
for (my $i = 0; $i < scalar(@NETMASKS); $i++) {
    my $foo = pack("N", $NETMASKS[$i]);

    if ($EXTERNAL_TESTBED_NETMASK eq inet_ntoa($foo)) {
	$EXTERNAL_TESTBED_SLASH_NETMASK = "$i";
	last;
    }
}
my $VIRTNODE_SLASH_NETMASK = "24";
for (my $i = 0; $i < scalar(@NETMASKS); $i++) {
    my $foo = pack("N", $NETMASKS[$i]);

    if ($VIRTNODE_NETMASK eq inet_ntoa($foo)) {
	$VIRTNODE_SLASH_NETMASK = "$i";
	last;
    }
}

# This is for the dotted and reverse dotted notation needed for the
# reverse maps. This is probably all wrong ... 
my ($ia, $ib, $ic, $id) =
    ($TESTBED_NETWORK =~ /(\d+)\.(\d+)\.(\d+)\.(\d+)/);
my ($ea, $eb, $ec, $ed) =
    ($EXTERNAL_TESTBED_NETWORK =~ /(\d+)\.(\d+)\.(\d+)\.(\d+)/);
my ($ja, $jb, $jc, $jd) =
    ($VIRTNODE_NETWORK =~ /(\d+)\.(\d+)\.(\d+)\.(\d+)/);

my ($ima, $imb, $imc, $imd) =
    ($TESTBED_NETMASK =~ /(\d+)\.(\d+)\.(\d+)\.(\d+)/);
my ($ema, $emb, $emc, $emd) =
    ($EXTERNAL_TESTBED_NETMASK =~ /(\d+)\.(\d+)\.(\d+)\.(\d+)/);
my ($jma, $jmb, $jmc, $kmd) =
    ($VIRTNODE_NETMASK =~ /(\d+)\.(\d+)\.(\d+)\.(\d+)/);

$infile = shift @ARGV || exit &usage;

open(IF,"<$infile") or
    die("Unable to open $infile for reading\n");

while (<IF>) {
	if (/^(.*)\%([-\w]*)\%(.*)$/) {
	    if ($2 eq "internal_network_withmask") {
		print $1 . "${TESTBED_NETWORK}/${TESTBED_SLASH_NETMASK}" ."$3\n";
	    }
	    elsif ($2 eq "virtnode_network_withmask") {
		print $1 . "${VIRTNODE_NETWORK}/${VIRTNODE_SLASH_NETMASK}" ."$3\n";
	    }
	    elsif ($2 eq "internal_network_dotted") {
		print $1 . "${ia}.${ib}.${ic}" . "$3\n";
	    }
	    elsif ($2 eq "internal_network_dotted_reverse") {
		print $1 . "${ic}.${ib}.${ia}" . "$3\n";
	    }
	    elsif ($2 eq "external_network_dotted") {
		print $1 . "${ea}.${eb}.${ec}" . "$3\n";
	    }
	    elsif ($2 eq "external_network_dotted_reverse") {
		print $1 . "${ec}.${eb}.${ea}" . "$3\n";
	    }
	    elsif ($2 eq "forwarders") {
		if ($NAMED_FORWARDERS eq "") {
		    print "";
		}
		else {
		    print $1 . "forwarders {\n";
		    foreach my $forwarder (split(/[\s+,]/, $NAMED_FORWARDERS)) {
			print $1 . $1 . "$forwarder;\n";
		    }
		    print $1 . "};\n";
		}
	    }
	    elsif ($2 eq "alsonotify") {
		if ($NAMED_ALSONOTIFY eq "") {
		    print $1 . "allow-transfer {\n";
		    print $1 . $1 . "none;\n";
		    print $1 . "};\n";
		}
		else {
		    print $1 . "also-notify {\n";
		    foreach my $notify (split(" ", $NAMED_ALSONOTIFY)) {
			print $1 . $1 . "$notify;\n";
		    }
		    print $1 . "};\n";
		    print $1 . "allow-transfer {\n";
		    foreach my $notify (split(" ", $NAMED_ALSONOTIFY)) {
			print $1 . $1 . "$notify;\n";
		    }
		    print $1 . "};\n";
		}
	    }
	    elsif ($2 eq "internal_network_reverse_zones") {
		if ($IPV6_ENABLED) {
		    my $dotted_reverse = ReverseDottedIPV6($IPV6_SUBNET_PREFIX);

		    print $1 . "zone \"${dotted_reverse}.ip6.arpa\" in {\n";
		    print $1 . "\ttype master;\n";
		    print $1 . "\tfile \"reverse/${IPV6_MAPFILE}\";\n";
		    print $1 . "};\n\n";
		}
		for (my $i = $ic; $i <= $ic + (255 - $imc); $i++) {
		    my $dotted           = "${ia}.${ib}.${i}";
		    my $dotted_reverse   = "${i}.${ib}.${ia}";

		    print $1 . "zone \"${dotted_reverse}.in-addr.arpa\" in {\n";
		    print $1 . "\ttype master;\n";
		    print $1 . "\tfile \"reverse/${dotted}.db\";\n";
		    print $1 . "};\n";		    
		}
		for (my $i = $jb; $i <= $jb + (255 - $jmb); $i++) {
		    my $dotted           = "${ja}.${i}";
		    my $dotted_reverse   = "${i}.${ja}";

		    print $1 . "zone \"${dotted_reverse}.in-addr.arpa\" in {\n";
		    print $1 . "\ttype master;\n";
		    print $1 . "\tfile \"reverse/${dotted}.db\";\n";
		    print $1 . "};\n";
		}
	    }
	    elsif ($2 eq "external_network_reverse_zones") {
		if ($IPV6_ENABLED) {
		    my $dotted_reverse = ReverseDottedIPV6($IPV6_SUBNET_PREFIX);

		    print $1 . "zone \"${dotted_reverse}.ip6.arpa\" in {\n";
		    print $1 . "\ttype master;\n";
		    print $1 . "\tfile \"reverse/${IPV6_MAPFILE}\";\n";
		    print $1 . "};\n\n";
		}
		for (my $i = $ec; $i <= $ec + (255 - $emc); $i++) {
		    my $dotted           = "${ea}.${eb}.${i}";
		    my $dotted_reverse   = "${i}.${eb}.${ea}";

		    print $1 . "zone \"${dotted_reverse}.in-addr.arpa\" in {\n";
		    print $1 . "\ttype master;\n";
		    print $1 . "\tfile \"reverse/${dotted}.db\";\n";
		    print $1 . "};\n";		    
		}
	    }
	    elsif ($2 eq "internal_network_extra_stuff") {
		if (-e "/etc/namedb/internal.named.conf") {
		    open(EXTRA, "/etc/namedb/internal.named.conf") or
			die("*** $0:\n".
			    "    Could not open internal.named.conf!\n");
		    print $1 . "#\n";
		    print $1 . "# Fragment included from internal.named.conf\n";
		    print $1 . "#\n";
		    while (<EXTRA>) {
			print $1 . $_;
		    }
		    close(EXTRA);
		    print $1 .
			"# End of fragment included from internal.named.conf\n";
		}
	    }
	    elsif ($2 eq "external_network_extra_stuff") {
		if (-e "/etc/namedb/external.named.conf") {
		    open(EXTRA, "/etc/namedb/external.named.conf") or
			die("*** $0:\n".
			    "    Could not open external.named.conf!\n");
		    print $1 . "#\n";
		    print $1 . "# Fragment included from external.named.conf\n";
		    print $1 . "#\n";
		    while (<EXTRA>) {
			print $1 . $_;
		    }
		    close(EXTRA);
		    print $1 .
			"# End of fragment included from external.named.conf\n";
		}
	    }
	    elsif ($2 eq "nonroutable_network_hack") {
		if (@OPSVM_ENABLE@ && $USERNODE_IP eq "10.10.10.3") {
		    print $1 . "10.10.10.0/29;\n";
		}
	    }
	    else {
		die("*** $0:\n".
		    "    Unknown special tag in named template file!\n");
	    }
	}
	else {
	    # It's a regular line
	    print;
	}
}
close(IF);
exit(0);

#
# Helper to form a dotted reverse for IPv6
#
sub ReverseDottedIPV6($)
{
    my ($ipv6) = @_;
    my @digits = ();

    foreach my $nibblet (split(":", $ipv6)) {
	if ($nibblet =~ /^(\w)(\w)(\w)(\w)$/) {
	    push(@digits, $1, $2, $3, $4);
	}
	else {
	    die("*** $0:\n".
		"    Bad format for ipv6 address: $IPV6_SUBNET_PREFIX!\n");
	}
    }
    my $dotted = join(".", reverse(@digits));
    return $dotted;
}


