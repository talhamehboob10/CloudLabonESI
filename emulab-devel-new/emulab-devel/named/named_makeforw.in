#!/usr/bin/perl -w

#
# Copyright (c) 2000-2020 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use Getopt::Std;
use Socket;

#
# named_makeconf - helper script to create named.conf file. The template
# looks like standard file, only with %token% strings that need to be
# replaced. See below.
#
sub usage {
	print "Usage: $0 <templatefile>\n";
}

#
# Configure variables
#
my $OURDOMAIN                = "@OURDOMAIN@";
my $CONFIG_TARGETSYS         = @CONFIG_TARGETSYS@;
my $TARGETSYS_TARGET         = "@TARGETSYS_TARGET@";
my ($BOSSTOKEN)              = ("@BOSSNODE@" =~ /^([-\w]+).*$/);
my ($USERTOKEN)              = ("@USERNODE@" =~ /^([-\w]+).*$/);
my ($FSTOKEN)                = ("@FSNODE@" =~ /^([-\w]+).*$/);
my $TESTBED_NETWORK          = "@TESTBED_NETWORK@";
my $TESTBED_NETMASK          = "@TESTBED_NETMASK@";
my $EXTERNAL_TESTBED_NETWORK = "@EXTERNAL_TESTBED_NETWORK@";
my $EXTERNAL_TESTBED_NETMASK = "@EXTERNAL_TESTBED_NETMASK@";
my $BOSSNODE_IP              = "@BOSSNODE_IP@";
my $USERNODE_IP              = "@USERNODE_IP@";
my $FSNODE_IP                = "@FSNODE_IP@";
my $NTPSERVER                = "@NTPSERVER@";
my $EXTERNAL_BOSSNODE_IP     = "@EXTERNAL_BOSSNODE_IP@";
my $EXTERNAL_USERNODE_IP     = "@EXTERNAL_USERNODE_IP@";
my $EXTERNAL_FSNODE_IP       = "@EXTERNAL_FSNODE_IP@";

my $CONTROL_ROUTER_IP  = "@CONTROL_ROUTER_IP@";
my $CONTROL_NETWORK    = "@CONTROL_NETWORK@";
my $CONTROL_NETMASK    = "@CONTROL_NETMASK@";
my $PRIVATE_NETWORK    = "@PRIVATE_NETWORK@";
my $PRIVATE_ROUTER     = "@PRIVATE_ROUTER@";
my $PRIVATE_NETMASK    = "@PRIVATE_NETMASK@";
my $PUBLIC_NETWORK     = "@PUBLIC_NETWORK@";
my $PUBLIC_ROUTER      = "@PUBLIC_ROUTER@";
my $PUBLIC_NETMASK     = "@PUBLIC_NETMASK@";
my $NAMED_FORWARDERS   = "@NAMED_FORWARDERS@";

my $MXHOST = (@OPSVM_ENABLE@ ? "boss" : "ops");
my $MXSTR  = "\t\tIN\tMX 10\t${MXHOST}\n";

# Testbed libraries.
use lib "@prefix@/lib";
#use libdb;

sub isroutable($);

# This is for the dotted and reverse dotted notation needed for the
# reverse maps. This is probably all wrong ... 
my ($ia, $ib, $ic, $id) =
    ($TESTBED_NETWORK =~ /(\d+)\.(\d+)\.(\d+)\.(\d+)/);
my ($ea, $eb, $ec, $ed) =
    ($EXTERNAL_TESTBED_NETWORK =~ /(\d+)\.(\d+)\.(\d+)\.(\d+)/);

my $internal_forwfile = "${ia}.${ib}.${ic}.db.head";
my $external_forwfile = "${ea}.${eb}.${ec}.db.head";
my $internal_strings  = "";
my $external_strings  = "";

usage()
    if (@ARGV != 2);

my $which  = $ARGV[0];
my $infile = $ARGV[1];

open(IF,"<$infile") or
    die("Unable to open $infile for reading\n");

while (<IF>) {
	if (/^(.*)\%([-\w]*)\%(.*)$/) {
	    if ($2 eq "bossnode_ip") {
		$internal_strings .= $1 . "$BOSSNODE_IP" . $3 . "\n";
		$external_strings .= $1 . "$EXTERNAL_BOSSNODE_IP" . $3 . "\n";
	    }
	    elsif ($2 eq "usernode_ip") {
		$internal_strings .= $1 . "$USERNODE_IP" . $3 . "\n";
		$external_strings .= $1 . "$EXTERNAL_USERNODE_IP" . $3 . "\n";
	    }
	    elsif ($2 eq "usernode_ina") {
                $internal_strings .=
                    "${USERTOKEN}\t\tIN\tA\t\t${USERNODE_IP}\n";
		if ($MXHOST ne "ops") {
		    $internal_strings .= ${MXSTR};
		}
		if (isroutable($EXTERNAL_USERNODE_IP)) {
		    $external_strings .=
			"${USERTOKEN}\t\tIN\tA\t\t${EXTERNAL_USERNODE_IP}\n";
		    if ($MXHOST ne "ops") {
			$external_strings .= ${MXSTR};
		    }
		}
		#
		# If name is not "ops", we need an A record for that as well
		#
		if ($USERTOKEN ne "ops") {
		    $internal_strings .=
			"${MXSTR}ops\t\tIN\tA\t\t${USERNODE_IP}\n";
		    if (isroutable($EXTERNAL_USERNODE_IP)) {
			$external_strings .=
			    "${MXSTR}ops\t\tIN\tA\t\t${EXTERNAL_USERNODE_IP}\n";
		    }
		}
		#
		# If name is not "users" we need a CNAME for that
		#
		if ($USERTOKEN ne "users") {
		    $internal_strings .=
			"users\t\tIN\tCNAME\tops\n";
		    if (isroutable($EXTERNAL_USERNODE_IP)) {		    
			$external_strings .=
			    "users\t\tIN\tCNAME\tops\n";
		    }
		}
		# Other names ops is known by.
		$internal_strings .=
		    "event-server\tIN\tCNAME\tops\n";
		if (isroutable($EXTERNAL_USERNODE_IP)) {
		    $external_strings .=
			"event-server\tIN\tCNAME\tops\n";
		}
		$internal_strings .=
		    "wiki\t\tIN\tCNAME\tops\n";
		if (isroutable($EXTERNAL_USERNODE_IP)) {
		    $external_strings .=
			"wiki\t\tIN\tCNAME\tops\n";
		}
	    }
	    elsif ($2 eq "bossnode_ina") {
                $internal_strings .=
                    "${BOSSTOKEN}\t\tIN\tA\t\t${BOSSNODE_IP}\n${MXSTR}";
                $external_strings .=
                    "${BOSSTOKEN}\t\tIN\tA\t\t${EXTERNAL_BOSSNODE_IP}\n${MXSTR}";
		#
		# If name is not "boss", we need an A record for that as well
		#
		if ($BOSSTOKEN ne "boss") {
		    $internal_strings .=
			"boss\t\tIN\tA\t\t${BOSSNODE_IP}\n${MXSTR}";
		    $external_strings .=
			"boss\t\tIN\tA\t\t${EXTERNAL_BOSSNODE_IP}\n${MXSTR}";
		}
	    }
	    elsif ($2 eq "fsnode_ina") {
		if ($USERNODE_IP eq $FSNODE_IP) {
		    $internal_strings .=
                          "fs\t\tIN\tCNAME\tops\n";
		    $external_strings .=
                          "fs\t\tIN\tCNAME\tops\n";
		}
		elsif ($BOSSNODE_IP eq $FSNODE_IP) {
		    $internal_strings .=
                          "fs\t\tIN\tCNAME\tboss\n";
		    $external_strings .=
                          "fs\t\tIN\tCNAME\tboss\n";
		}
		else {
		    #
		    # If name is not "fs", we need an A record for that
		    #
		    if ($FSTOKEN ne "fs") {
			$internal_strings .=
                          "fs\t\tIN\tA\t\t${FSNODE_IP}\n${MXSTR}";
			$external_strings .=
                          "fs\t\tIN\tA\t\t${EXTERNAL_FSNODE_IP}\n${MXSTR}";
		    }
		    $internal_strings .=
                          "${FSTOKEN}\t\tIN\tA\t\t${FSNODE_IP}\n";
		    $external_strings .=
                          "${FSTOKEN}\t\tIN\tA\t\t${EXTERNAL_FSNODE_IP}\n";
		}
	    }
	    elsif ($2 eq "bossnode_mx") {
		$internal_strings .= ${MXSTR};
		$external_strings .= ${MXSTR};
	    }
	    elsif ($2 eq "fsnode_mx") {
		if ("$USERNODE_IP" ne "$FSNODE_IP" &&
                    "$BOSSNODE_IP" ne "$FSNODE_IP") {
		    $internal_strings .= ${MXSTR};
		    $external_strings .= ${MXSTR};
		} else {
		    ;
		}
	    }
	    elsif ($2 eq "ntp_cname") {
		$internal_strings .=
			"ntp1\t\tIN\tCNAME\t${NTPSERVER}\n".
			"ntp2\t\tIN\tCNAME\t${NTPSERVER}\n";
		$external_strings .=
			"ntp1\t\tIN\tCNAME\t${NTPSERVER}\n".
			"ntp2\t\tIN\tCNAME\t${NTPSERVER}\n";
	    }
	    elsif ($2 eq "private-router") {
                my $foo = "private-router\tIN\tA\t${PRIVATE_ROUTER}\n";

		$internal_strings .= $foo;
		$external_strings .= $foo
                    if (isroutable($PRIVATE_ROUTER));
	    }
	    elsif ($2 eq "public-router") {
                my $foo = "public-router\tIN\tA\t${PUBLIC_ROUTER}\n";

		$internal_strings .= $foo;
		$external_strings .= $foo
                    if (isroutable($PUBLIC_ROUTER));
	    }
	    elsif ($2 eq "control-router") {
                my $foo = "control-router\tIN\tA\t${CONTROL_ROUTER_IP}\n";

		$internal_strings .= $foo;
		$external_strings .= $foo
                    if (isroutable($CONTROL_ROUTER_IP));
	    }
	    elsif ($2 eq "primaries") {
		my $foo = "	IN	NS	ns.${OURDOMAIN}.\n";
		
		if ($which eq "-internal") {
		    $internal_strings .= $foo;
		}
		else {
		    # This needs to come from configure
		    if (!$CONFIG_TARGETSYS || $TARGETSYS_TARGET !~ /^POWDER/) {
			$external_strings .= $foo;
		    }
		}
	    }
	    elsif ($2 eq "secondaries") {
		if ($CONFIG_TARGETSYS) {
		    my $foo = "	IN	NS	ns.emulab.net.\n";

		    # This needs to come from configure
		    if ($TARGETSYS_TARGET =~ /^POWDER/) {
			$foo .= "	IN	NS	ns2.emulab.net.\n";
			$foo .= "	IN	NS	ns5.emulab.net.\n";
		    }
		    $internal_strings .= $foo;
		    $external_strings .= $foo;
		}
	    }
	    else {
		die("*** $0:\n".
		    "    Unknown special tag in named template file!\n");
	    }
	}
	else {
	    # A regular line
	    $internal_strings .= $_;
	    $external_strings .= $_;
	}
}
close(IF);

if ($which eq "-internal") {
    print $internal_strings;
}
else {
    print $external_strings;
}

exit(0);

#
# Is an IP routable?
#
sub isroutable($)
{
    my ($IP)  = @_;
    my ($a,$b,$c,$d) = ($IP =~ /^(\d*)\.(\d*)\.(\d*)\.(\d*)/);

    #
    # These are unroutable:
    # 10.0.0.0        -   10.255.255.255  (10/8 prefix)
    # 172.16.0.0      -   172.31.255.255  (172.16/12 prefix)
    # 192.168.0.0     -   192.168.255.255 (192.168/16 prefix)
    #

    # Easy tests.
    return 0
	if (($a eq "10") ||
	    ($a eq "192" && $b eq "168"));

    # Lastly
    return 0
	if (inet_ntoa((inet_aton($IP) & inet_aton("255.240.0.0"))) eq
	    "172.16.0.0");

    return 1;
}
