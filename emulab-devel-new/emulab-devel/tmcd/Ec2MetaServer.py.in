#!/usr/local/bin/python
#
# Copyright (c) 2012-2013 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
from BaseHTTPServer import HTTPServer
from BaseHTTPServer import BaseHTTPRequestHandler
import urlparse
import traceback
import os
import sys
import syslog
import socket
import re

# Configure variables
TBDIR = "@prefix@"
TBFACIL = "@TBLOGFACIL@"
AVAIL = "@THISHOMEBASE@"

# When debugging, runs in foreground printing to stdout instead of syslog
debug = 0

TBPATH = os.path.join(TBDIR, "lib")
if TBPATH not in sys.path:
    sys.path.append(TBPATH)
    pass

from libdb        import *

# This requires Python 2.6+
class Ec2MetaHandler(BaseHTTPRequestHandler):

    def __init__(self, req, ca, huh):
        BaseHTTPRequestHandler.__init__(self,req,ca,huh)

    ##
    # Log a message to stdout, if in debug mode, otherwise write to syslog.
    #
    # @param msg The message to log.
    #
    def logit(self, msg):
        if debug:
            print msg
            pass
        else:
            syslog.syslog(syslog.LOG_INFO, msg);
            pass
        return

    # Override so we can use above function.
    def log_message(self, format, *args):
        self.logit(format%args)
        return

    def do_GET(self):
        parsed_path = urlparse.urlparse(self.path)

        only_path = parsed_path.path
        folders=[]
        while 1:
            only_path,folder=os.path.split(only_path)

            if folder != "":
                folders.append(folder)
            if only_path=="/":
                break;

        if len(folders) > 0:
            folders.pop() #Ignore version
        folders.reverse()

        try:
            message = self.handle_req(folders, self.metas)
            message = message + "\n"
        except Exception as e:
            syslog.syslog(traceback.format_exc())
            self.send_response(404)
            self.end_headers()
            return

        self.send_response(200)
        self.end_headers()
        self.wfile.write(message)
        return

    def listmetas(self, metas):
        message = "\n".join(map(lambda x: x + "/"
                                if (x == "public-keys" or
                                    not(callable(metas[x])))
                                else x, metas.keys()));
        return message

    def handle_req(self, arg, metas):
        if callable(metas):
            return metas(self, arg)
        elif len(arg) == 0:
            return self.listmetas(metas);
        else:
            return self.handle_req(arg[1:], metas[arg[0]])

    def do_userdata(self, arg):
        #TODO
        return "\n";

    def doamiid(self, arg):
        ip = self.client_address[0]
        rows = DBQueryWarn("select osname from os_info "
            "join nodes on os_info.osid = nodes.osid "
            "join interfaces on nodes.node_id=interfaces.node_id "
            "where interfaces.ip=%s", (ip,));
        if len(rows) > 0:
            ami_id = rows[0]
            ami_id = ami_id[0]
        else:
            ami_id = ""
        return ami_id;

    def dolocal_hostname(self, args):
        ip = self.client_address[0]
        rows = DBQueryWarn("select vname,eid,pid from reserved join interfaces "
            "on interfaces.node_id=reserved.node_id"
            " where interfaces.ip=%s",(ip,))
        if len(rows) > 0:
            node_id = rows[0]
        else:
            return ""

        return node_id[0] + "." + node_id[1] + "." + node_id[2] + "." + "emulab.net"

    def doavail(self, args):
        return AVAIL

    def domacs(self, args):
        #TODO
        return "324AF"

    def domac(self, args):
        ip = self.client_address[0]
        rows = DBQueryWarn("select mac from interfaces"
            " where interfaces.ip=%s",(ip,))
        if len(rows) > 0:
            mac = rows[0]
        else:
            return ""

        split = [mac[0][i:i+2] for i in range(0, len(mac[0]),2)]
        return ":".join(split)

    def doinstance_id(self, args):
        ip = self.client_address[0]
        rows = DBQueryWarn("select uuid from interfaces"
            " where interfaces.ip=%s",(ip,))
        if len(rows) > 0:
            uuid = rows[0]
        else:
            return ""

        return uuid[0]


    def dopublic_keys(self, args):
        if len(args) == 0:
            #Throw out all the users. Hope the stuff don't change between queries
            ip = self.client_address[0]
            rows = DBQueryWarn("(select user_pubkeys.uid,user_pubkeys.idx from user_pubkeys "
                "join group_membership on group_membership.uid = user_pubkeys.uid "
                "join experiments on experiments.pid=group_membership.pid AND experiments.gid=group_membership.gid "
                "join reserved on reserved.exptidx=experiments.idx "
                "join interfaces on reserved.node_id=interfaces.node_id "
                "where interfaces.ip=%s and user_pubkeys.uid=experiments.expt_swap_uid ORDER BY idx DESC) "
                "UNION "
                "(select user_pubkeys.uid,user_pubkeys.idx from user_pubkeys "
                "join group_membership on group_membership.uid = user_pubkeys.uid "
                "join experiments on experiments.pid=group_membership.pid AND experiments.gid=group_membership.gid "
                "join reserved on reserved.exptidx=experiments.idx "
                "join interfaces on reserved.node_id=interfaces.node_id "
                "where interfaces.ip=%s and user_pubkeys.uid!=experiments.expt_swap_uid);"
                , (ip,ip,))

            list = ""
            ctr = 0
            if len(rows) > 0:
                for (user,uid) in rows:
                    list = list + str(ctr) + "=" + str(user) + str(uid) + "\n"
                    ctr = ctr+1
            else:
                return ""

            return list
        elif len(args) == 1:
            #TODO: Verify ig idx is within limits
            return "openssh-key"
        elif len(args) == 2:
            val = args[0]
            # Always check args before using in query!
            if not re.match("^[\d]*$", val):
                return ""
            ip = self.client_address[0]
            rows = DBQueryWarn("select * from "
                "((select user_pubkeys.pubkey from user_pubkeys "
                "join group_membership on group_membership.uid = user_pubkeys.uid "
                "join experiments on experiments.pid=group_membership.pid AND experiments.gid=group_membership.gid "
                "join reserved on reserved.exptidx=experiments.idx "
                "join interfaces on reserved.node_id=interfaces.node_id "
                "where interfaces.ip=%s and user_pubkeys.uid=experiments.expt_swap_uid ORDER BY idx DESC) "
                "UNION "
                "(select user_pubkeys.pubkey from user_pubkeys "
                "join group_membership on group_membership.uid = user_pubkeys.uid "
                "join experiments on experiments.pid=group_membership.pid AND experiments.gid=group_membership.gid "
                "join reserved on reserved.exptidx=experiments.idx "
                "join interfaces on reserved.node_id=interfaces.node_id "
                "where interfaces.ip=%s and user_pubkeys.uid!=experiments.expt_swap_uid)) "
                "as T limit " + str(val) + ", 1;",
                (ip, ip,))

            if len(rows):
                key = rows[0]
            else:
                return ""

            return key[0]

    metas = {
        "meta-data" : {
            "placement" : {"availability-zone" : doavail},
            "ami-id": doamiid,
            "local-hostname" : dolocal_hostname,
            "public-hostname":dolocal_hostname,
            "network": {"interfaces": {"macs" : domacs}},
            "mac":domac,
            "instance-id":doinstance_id,
            "public-keys": dopublic_keys },
        "user-data" : do_userdata
    }
    pass

#
# Check for debug flag.
# 
if len(sys.argv) > 1 and sys.argv[1] == "-d":
    debug = 1
    pass

#
# Daemonize when not running in debug mode.
#
if not debug:
    #
    # Connect to syslog.
    #
    syslog.openlog("tmcd-meta", syslog.LOG_PID,
                   getattr(syslog, "LOG_" + string.upper(TBFACIL)))
    syslog.syslog(syslog.LOG_INFO, "EC2 Meta server starting up");

    #
    # Daemonize. We redirect our output into a log file cause I have no
    # idea what is going to use plain print. 
    # Lifted from xmlrpc/sslxmlrpc_server.py.in
    #
    try:
        fp = open(TBDIR + "/log/ec2meta.log", "a");
        sys.stdout = fp
        sys.stderr = fp
        sys.stdin.close();
        pass
    except:
        print "Could not open log file for append"
        sys.exit(1);
        pass

    pid = os.fork()
    if pid:
        os.system("echo " + str(pid) + " > /var/run/tmcd-meta.pid")
        sys.exit(0)
        pass
    os.setsid();
    pass

server = HTTPServer((socket.gethostbyname(socket.gethostname()), 8787),
                    Ec2MetaHandler)
server.serve_forever()
