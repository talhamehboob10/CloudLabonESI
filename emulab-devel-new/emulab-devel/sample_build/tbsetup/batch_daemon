#!/usr/bin/perl -w

#
# Copyright (c) 2000-2018 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

use English;
use Getopt::Std;
use Fcntl;
use IO::Handle;

#
# Create a batch experiment.
#
# usage: batch_daemon
#
# TODO: Use "logger" instead of writing a log file.
#
sub usage()
{
    print STDOUT "Usage: batch_daemon [-d]\n" .
	"Use the -d option to prevent daemonization\n";
    exit(-1);
}

sub dosomething($$);
sub isexpdone($);

my  $optlist = "d";

#
# Configure variables
#
my $TB       = "/users/mshobana/CloudLabonESI/emulab-devel-new/emulab-devel/sample_build";
my $DBNAME   = "tbdb";
my $TBOPS    = "testbed-ops\@ops.cloudlab.umass.edu";
my $TBLOGS   = "testbed-logs\@ops.cloudlab.umass.edu";

#
# Only root can run this script.
#
if ($UID) {
    die("*** $0:\n".
	"    Only root can run this script!\n");
}

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/usr/bin:";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Testbed Support libraries
#
use lib "/users/mshobana/CloudLabonESI/emulab-devel-new/emulab-devel/sample_build/lib";
use libdb;
use libtestbed;
use Template;
use Experiment;

# Be careful not to exit on transient error; 0 means infinite retry.
$libdb::DBQUERY_MAXTRIES = 0;

my $tbbindir = "$TB/bin/";
my $swapexp  = "$TB/bin/swapexp";
my $endexp   = "$TB/bin/endexp";
my $savelogs = "$TB/bin/savelogs";
my $avail    = "$TB/sbin/avail";
my $batchlog = "$TB/log/batchlog";
my $debug    = 0;

# New template stuff.
my $template_swapout  = "$TB/bin/template_swapout";

my $BSTATE_POSTED	= EXPTSTATE_QUEUED;
my $BSTATE_ACTIVATING	= EXPTSTATE_ACTIVATING;
my $BSTATE_RUNNING	= EXPTSTATE_ACTIVE;
my $BSTATE_TERMINATING	= EXPTSTATE_TERMINATING;
my $BSTATE_PAUSED	= EXPTSTATE_SWAPPED;
my $BSTATE_LOCKED       = BATCHSTATE_LOCKED;
my $BSTATE_UNLOCKED     = BATCHSTATE_UNLOCKED;
my $TBOPSPID            = TBOPSPID;

#
# These are valid in the children, not the parent. I suppose I could use
# dynamically scoped variables, but hardly worth it.
#
my $eid;
my $pid;
my $gid;
my $logname;
my $nsfile;
my $userdir;
my $workdir;
my $user_name  = "Testbed Operations";
my $user_email = "$TBOPS";
my $template;

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (@ARGV != 0) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}

# Go to ground.
if (! $debug) {
    if (TBBackGround($batchlog)) {
	exit(0);
    }
}

#
# Loop, looking for batch experiments that want to run.
# 
while (1) {
    my($count, $i, $query_result, $pending_result, $running_result);
    my(%pending_row);
    my $retry_wait = 60;
    my $disabled;

    if (! TBGetSiteVar("web/nologins", \$disabled)) {
	print "Error getting sitevar 'web/nologins'. Waiting a bit ...\n";
	goto pause;
    }
    if ($disabled) {
	print "Web interface is disabled; waiting a bit ...\n";
	sleep(60);
	goto pause;
    }
    if (! TBGetSiteVar("batch/retry_wait", \$retry_wait)) {
	print "Error getting sitevar 'batch/retry_wait'. Waiting a bit ...\n";
	goto pause;
    }
    # Do not allow zero!
    $retry_wait = 60
	if ($retry_wait == 0);

    #
    # Need to lock the table here because of cancelation in endexp.
    # See the comments in there. We need to atomically grab the next
    # batch experiment we want to try, and then change its state from
    # new to configuring. We want to grab just one experiment, since
    # it takes a while to configure an experiment, and grabbing a bunch and
    # locking them up might result in having to wait a really long time
    # to cancel a batch experiment that hasn't really tried to start yet!
    # Thats would ne annoying to users.
    #
    # So, now you're wondering what my selection criteria is? Well, its
    # damn simplistic. I set the "started" datetime field each attempt,
    # and I pick the batch_experiment with the oldest time, thereby cycling
    # through in a "least recently attempted" manner. In addition, we want
    # to throttle the number simultaneous batches that one person can
    # can have running at a time (curently to just one batch), so check to
    # to see if the person has another batch active (thats e2 below).
    #
    $query_result =
	DBQuery("lock tables experiments write, experiments as e1 write, ".
		"experiments as e2 write");
    if (! $query_result) {
	print "DB Error locking tables. Waiting a bit ...\n";
	goto pause;
    }
    
    $pending_result =
	DBQueryWarn("SELECT e1.* FROM experiments as e1 ".
		    "left join experiments as e2 on ".
		    " e2.expt_head_uid=e1.expt_head_uid and ".
		    " e2.batchmode=1 and e2.state='$BSTATE_RUNNING' and ".
		    " e1.pid=e2.pid and e1.eid!=e2.eid and ".
		    " e2.pid!='$TBOPSPID' ".
		    "WHERE e2.eid is null and ".
		    " e1.batchmode=1 and e1.canceled=0 and ".
		    " e1.expt_locked is null and ".
		    " e1.batchstate!='$BSTATE_LOCKED' and ".
		    " e1.state='$BSTATE_POSTED' and ".
		    "  (e1.attempts=0 or ".
		    "    ((UNIX_TIMESTAMP() - ".
		    "      UNIX_TIMESTAMP(e1.expt_start) > ($retry_wait)))) ".
		    "ORDER BY e1.expt_start LIMIT 1");

    $running_result =
	DBQuery("select * from experiments ".
		"where batchmode=1 and state='$BSTATE_RUNNING' and ".
		"      batchstate!='$BSTATE_LOCKED' ".
		"ORDER BY expt_start");

    if (!$pending_result || !$running_result) {
	print "DB Error getting batch info. Waiting a bit ...\n";
	DBQuery("unlock tables");
	goto pause;
    }

    if (!$pending_result->numrows && !$running_result->numrows) {
	DBQuery("unlock tables");
	goto pause;
    }

    #
    # If we have a pending experiment to run, the lock it right away,
    # while we have the tables locked. 
    #
    if ($pending_result->numrows) {
	%pending_row = $pending_result->fetchhash();

	# Local vars!
	my $eid = $pending_row{'eid'};
	my $pid = $pending_row{'pid'};

	$query_result = 
	    DBQuery("update experiments set ".
		    "       expt_locked=now(),expt_start=now(), ".
		    "       batchstate='$BSTATE_LOCKED' ".
		    "where eid='$eid' and pid='$pid'");

	if (! $query_result) {
	    print "DB error setting batch $pid/$eid to configuring.\n";
	    DBQuery("unlock tables");
	    goto pause;
	}
    }

    #
    # Okay, first we check the status of running batch mode experiments
    # since we want to end those before trying to start any new ones, cause
    # it would be nice to have as many nodes available as possible before
    # trying to add a new one. This can potentially delay startup, but thats
    # okay. Its a batch system.
    #
    # If you are wondering why I check for finished experiments in the main
    # loop instead of in the child that started the experiment, its so that
    # we fire up again and look for them in the event that boss goes down.
    #
    if (!$running_result->numrows) {
	DBQueryWarn("unlock tables");
    }
    else {
	my %canterm = ();

        # Need to do this when we want to seek around inside the results.
	$running_result = $running_result->WrapForSeek();
	
	while (my %running_row = $running_result->fetchhash()) {
	    # Local vars!
	    my $eid         = $running_row{'eid'};
	    my $pid         = $running_row{'pid'};

	    #
	    # Lock so user cannot mess with it.
	    # 
	    $query_result = 
		DBQuery("update experiments set ".
			"       expt_locked=now(), ".
			"       batchstate='$BSTATE_LOCKED' ".
			"where eid='$eid' and pid='$pid'");

	    $canterm{"$pid:$eid"} = ($query_result ? 1 : 0);
	}
	DBQueryWarn("unlock tables");

	#
	# Reset and go through again.
	#
	$running_result->dataseek(0);
	
	while (my %running_row = $running_result->fetchhash()) {
	    my $canceled    = $running_row{'canceled'};
	    # Local vars!
	    my $eid         = $running_row{'eid'};
	    my $pid         = $running_row{'pid'};
	    my $canterm     = $canterm{"$pid:$eid"};

	    next
		if (!$canterm);

	    if ($canceled) {
		# Look at the cancel flag.
		if ($canceled == EXPTCANCEL_TERM) {
		    dosomething("cancel", \%running_row);
		}
		elsif ($canceled == EXPTCANCEL_SWAP) {
		    dosomething("swap", \%running_row);
		}
		else {
		    print "Improper cancel flag: $canceled\n";
		}
	    }
	    else {
		if (isexpdone(\%running_row)) {
		    #
		    # Terminate the experiment. 
		    # 
		    dosomething("swap", \%running_row);
		}
		else {
		    #
		    # Unlock.
		    # 
		    TBBatchUnLockExp($pid, $eid);
		}
	    }
	}
    }
    #
    # Finally start an actual experiment!
    #
    if ($pending_result->numrows) {
	dosomething("start", \%pending_row);
    }
  pause:
    sleep(15);
}

#
# Do something as the user. Either, start, end, or cancel an experiment.
#
sub dosomething($$)
{
    my($dowhat,$exphash)   = @_;
    my($unix_uid, $unix_gid, $row, $query_result);

    # Global vars
    $eid     = $exphash->{'eid'};
    $pid     = $exphash->{'pid'};
    $gid     = $exphash->{'gid'};
    $userdir = $exphash->{'path'};
    $workdir = TBExptWorkDir($pid, $eid);
    $nsfile  = "$eid.ns";
    $template= undef;
    
    # Locals
    my $experiment = Experiment->Lookup($pid, $eid);
    if (! defined($experiment)) {
	print "Could not find experiment object! Skipping ...\n";
	return -1;
    }
    my $creator = $experiment->GetCreator();
    if (! defined($creator)) {
	print "Could not find creator object! Skipping ...\n";
	return -1;
    }
    my $creator_uid = $creator->uid();
    
    print "Doing a '$dowhat' to batch experiment $pid/$eid\n";

    # Clean before starting.
    $experiment->CleanLogFiles();

    #
    # Create a temporary name for a log file. We do this in the parent so
    # we can remove it when the child ends. The child could remove it, but
    # since it is open in the child, it has the tendency to stick around.
    #
    my $logfile = $experiment->CreateLogFile("${dowhat}-batch");
    if (!defined($logfile)) {
	print "Could not create logfile!\n";
	return -1;
    }
    $logname = $logfile->filename();

    my $exptidx  = $exphash->{'idx'};
    my $instance = Template::Instance->LookupByExptidx($exptidx);
    if (defined($instance)) {
	$template = $instance->template();
    }

    #
    # Start up a child to run the guts. The parent waits. If the
    # experiment configures okay, the parent can return to try something
    # else.
    #
    $childpid = fork();
    if ($childpid) {

	print TBDateTimeFSSafe() . "\n";
	print "Child PID $childpid started to $dowhat $pid/$eid\n";

	waitpid($childpid, 0);
	my $status = $? >> 8;

	print TBDateTimeFSSafe() . "\n";
	print "Child PID $childpid exited with exit status $status\n";

        #
        # Close the log file.
	# The exp dir might be gone if the batch was killed/canceled.
        #
	if (-e $userdir) {
	    $experiment->CloseLogFile();
	}
	return $status;
    }
    openlog($logname);
    # We want it to spew to the web.
    $experiment->SetLogFile($logfile);
    # And mark it as spewing.
    $experiment->OpenLogFile();

    #
    # Get some user information. 
    #
    $user_name  = $creator->name();
    $user_email = $creator->email();
    
    chdir("$workdir") or
	fatal("Could not cd into $workdir!");

    #
    # Figure out the unix uid/gid that the experiment configuration is
    # going to run as. 
    #
    (undef,undef,$unix_uid) = getpwnam($creator_uid) or
	fatal("No such user $creator_uid");
    my $group = $experiment->GetGroup();
    if (!defined($group)) {
	fatal("Could not get group object for $experiment");
    }
    $unix_gid = $group->unix_gid();

    #
    # Need the entire group list for the user, cause of subgroups, and cause
    # thats the correct thing to do. Too bad perl does not have a getgrouplist
    # function like the C library.
    #
    my $glist = `id -G $creator_uid`;
    if ($glist =~ /^([\d ]*)$/) {
	$glist = $1;
    }
    else {
	fatal("Unexpected results from 'id -G $creator_uid': $glist");
    }
    #
    # Remove current group from glist, then add gid twice at the front
    # of the list. Order matters here, or we won't pick up all the
    # groups we need.
    #
    $glist =~ s/ ?\b$unix_gid\b ?//;
    $glist = $unix_gid . " " . $unix_gid . " " . $glist;

    #
    # Change the ownership of the log file before we flip.
    #
    chown($unix_uid, $unix_gid, $logname) or
	fatal("Could not chown $logname to $unix_uid/$unix_gid!");

    # Flip to the user. We never flip back.
    $GID            = $unix_gid;
    $EGID           = $glist;
    $EUID = $UID    = $unix_uid;
    $ENV{'USER'}    = $creator_uid;
    $ENV{'LOGNAME'} = $creator_uid;
    
    if ($dowhat eq "start") {
	startexp($exphash);
    }
    elsif ($dowhat eq "swap") {
	swapexp($exphash);
    }
    elsif ($dowhat eq "cancel") {
	cancelexp($exphash);
    }
    exit(0);
}

#
# Try to start an experiment. Never returns.
# 
sub startexp($)
{
    my($exphash)  = @_;
    my($exit_status, $running, $query_result);

    my $attempts  = $exphash->{'attempts'};

    #
    # Try to swap the experiment in. 
    #
    system("$swapexp -b -s in $pid $eid");
    $exit_status = $? >> 8;
    $running     = 1;
    if ($?) {
	$running = 0;
	if ($? >> 8 == 0) {
	    # Some other error, say signaled. Bad.
	    print "$swapexp exit with a signal: $exit_status\n";
	    $exit_status = -1;
	}
    }
    
    #
    # Look for cancelation. If we get a DB error on this, just continue cause
    # we can pick up the cancelation later.
    #
    $query_result =
	DBQueryWarn("select canceled from experiments ".
		    "where eid='$eid' and pid='$pid'");

    if ($query_result) {
	my ($canceled) = $query_result->fetchrow_array();
	$exphash->{'canceled'} = $canceled;

	# Yuck: This is strictly for the benefit of swapexp() below.
	$exphash->{'state'} = EXPTSTATE_ACTIVE
	    if ($running);
	
	if ($canceled) {
	    # Look at the cancel flag.
	    if ($canceled == EXPTCANCEL_TERM) {
		cancelexp($exphash);
	    }
	    elsif ($canceled == EXPTCANCEL_SWAP ||
		   $canceled == EXPTCANCEL_DEQUEUE) {
		swapexp($exphash);
	    }
	    else {
		print "Improper cancel flag: $canceled\n";
	    }
	    #
	    # Never returns, but just to be safe ...
	    #
	    exit(-1);
	}
    }

    #
    # If the configuration failed for lack of nodes, then don't send
    # email unless the number of attempts starts to get big.
    #
    # If the configuration failed for some other reason, then send email.
    # We have to reset the state to "new" so that it will be retried again
    # later. 
    #
    if (! $running) {
	#
	# XXX - What if this update fails?
	# 
	$query_result = 
	    DBQueryWarn("update experiments set attempts=attempts+1 ".
			"where eid='$eid' and pid='$pid'");

	#
	# The exit status does not tell us if the experiment can ever be
	# mapped. In fact, that is really hard to know at this level;
	# it depends on what resources the testbed actually has. So,
	# unless status is -1 (really really fatal) just keep going.
	# We leave it up the user to kill the batch if it looks like its
	# never going to work.
	#
	if ($exit_status == 255) {
	    TBBatchUnLockExp($pid, $eid, EXPTSTATE_SWAPPED());
	    
	    email_status("Experiment startup has failed with a fatal error!\n".
			 "Batch has been dequeued so that you may check it.");

	    exit($exit_status);
	}
	
	if (($attempts % 30) == 0) {
	    $attempts++;

	    my $msg =
		"Could not configure Batch Mode experiment $pid/$eid.\n".
		"\n".
		"There was an assignment violation (please check the log)\n".
		"that prevented it from being scheduled. The violation\n".
		"might result from not enough nodes or not enough link\n".
		"bandwidth. If you feel that the violation is in error,\n".
		"please cancel the batch and notify $TBOPS\n".
		"Otherwise, another attempt will be made in a little while.\n".
		"\n". 
		"There have been $attempts attempts to start this batch.";

	    email_status($msg);
	}
	TBBatchUnLockExp($pid, $eid, EXPTSTATE_QUEUED());
	exit($exit_status);
    }

    #
    # Well, it configured! We can now unlock it.
    #
    TBBatchUnLockExp($pid, $eid);
    
    email_status("Batch Mode experiment $pid/$eid is now running!\n".
		 "Please consult the Web interface to see how it is doing.");

    #
    # Done with this phase. Must exit.
    #
    exit(0);
}

#
# A batch has completed. Swap it out. 
#
sub swapexp($;$)
{
    my($exphash)  = @_;
    my $canceled  = $exphash->{'canceled'};
    my $running   = ($exphash->{'state'} eq EXPTSTATE_ACTIVE);

    if ($running) {
	if (defined($template)) {
	    my $guid = $template->guid();
	    my $vers = $template->vers();
	    
	    system("$template_swapout -b -e $eid $guid/$vers");
	}
	else {
	    system("$swapexp -b -s out $pid $eid");
	}
	if ($?) {
	    #
	    # TB admin is going to have to clean up. 
	    # 
	    fatal("Swapping out Batch Mode experiment $pid/$eid");
	}
    }
    #
    # Set the state to paused to ensure that it is not run again until
    # the user wants to.
    # 
    TBSetCancelFlag($pid, $eid, EXPTCANCEL_CLEAR);
    TBBatchUnLockExp($pid, $eid);
    
    if ($canceled) {
	email_status("Batch Mode experiment $pid/$eid has been stopped!");
    }
    else {
	email_status("Batch Mode experiment $pid/$eid has finished!");
    }
   
    #
    # Child must exit!
    #
    exit(0);
}

#
# Cancel an experiment. Never returns.
#
sub cancelexp($)
{
    my($exphash) = @_;
    
    #
    # It does not matter if the experiment is running; endexp does the
    # right thing.
    # 
    if (defined($template)) {
	my $guid = $template->guid();
	my $vers = $template->vers();
	
	system("$template_swapout -b -e $eid $guid/$vers");
    }
    else {
	system("$endexp -b $pid,$eid");
    }
    if ($?) {
	#
	# TB admin is going to have to clean up. 
	# 
	fatal("Terminating Batch Mode experiment $pid/$eid");
    }
    donotify("Your Batch Mode experiment has been canceled!", "Canceled", 0);
   
    #
    # Child must exit!
    #
    exit(0);
}

#
# Check experiment status. Looks to see if all of the nodes in an
# experiment have reported in.
#
sub isexpdone($)
{
    my($exphash)  = @_;
    my($query_result, @row);
    
    # Global vars
    $eid = $exphash->{'eid'};
    $pid = $exphash->{'pid'};

    print TBDateTimeFSSafe() . "\n";
    print "Checking to see if $pid/$eid has finished up yet\n";

    #
    # Look to see if any nodes yet to report status. If so, spin again.
    #
    $query_result =
	DBQueryWarn("SELECT startstatus,bootstatus FROM nodes ".
		    "LEFT JOIN reserved ON nodes.node_id=reserved.node_id ".
		    "WHERE reserved.eid='$eid' and reserved.pid='$pid'");

    if (! $query_result) {
	return 0;
    }

    #
    # Well, right now a node is considered finished up only if its
    # boot did not fail, and it has reported start command status.
    # The idea being that if the boot failed, then its status will
    # never be reported anyway, and we might as well consider the node
    # done (else the experiment would never end).
    # 
    while (@row = $query_result->fetchrow_array()) {
	if ($row[1] eq NODEBOOTSTATUS_FAILED) {
	    next;
	}
	if ($row[0] eq NODESTARTSTATUS_NOSTATUS) {
	    return 0;
	}
    }
    return 1;
}

#
# Start up a child, and set its descriptors talking to a log file.
# The log file already exists, created with mktemp above.
# 
sub openlog($)
{
    my($logname) = $_[0];
	
    #
    # We have to disconnect from the caller by redirecting both STDIN and
    # STDOUT away from the pipe. Otherwise the caller will continue to wait
    # even though the parent has exited. 
    #
    open(STDIN, "< /dev/null") or
	fatal("opening /dev/null for STDIN: $!");

    open(STDERR, ">> $logname") or
	fatal("opening $logname for STDERR: $!");
    open(STDOUT, ">> $logname") or
	fatal("opening $logname for STDOUT: $!");

    STDOUT->autoflush(1);
    STDERR->autoflush(1);

    return 0;
}

#
# A fatal error is something that the user does not need to know about.
# Caused by a breakdown in the TB system. Generally speaking, once the
# experiment is running, this should not be used.
# 
sub fatal($)
{
    my($mesg) = $_[0];

    donotify($mesg, "Failure", 1);

    exit(-1);
}

#
# Something the user cares about. 
# 
sub email_status($)
{
    my($mesg) = $_[0];

    donotify($mesg, "Status", 0);
}

sub donotify($$$)
{
    my($mesg, $subtext, $iserr) = @_;
    my($subject, $from, $to, $hdrs);
    my $MAIL;

    $mesg = "$mesg\n";

    print STDOUT "$mesg";

    $subject = "Batch Mode Experiment $subtext $pid/$eid";
    $from    = $TBOPS;
    $hdrs    = "Reply-To: $TBOPS";
    
    #
    # An error goes just to Testbed Operations. Normal status messages go
    # to the user and to the Testbed Logs address.
    # 
    if ($iserr) {
	$to = "$TBOPS";
    }
    else {
	$to   = "$user_name <$user_email>";
	$hdrs = "Bcc: $TBLOGS\n".
	        "$hdrs";
    }

    SENDMAIL($to, $subject, $mesg, $from, $hdrs,
	     ($logname, "assign.log", $nsfile));
}

