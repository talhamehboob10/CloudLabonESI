#!/usr/bin/perl
#
# Copyright (c) 2000-2017 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Long;

sub usage() {
    print "Usage: $0 [-h] [-a]\n";
    print " -h    Display this message\n";
    print " -a    Display all VLANs, not just those that cross trunks\n";
    return 1;
}

my %opt;
GetOptions(\%opt,'h','a');
if (@ARGV) {
    exit usage();
}

if ($opt{h}) {
    exit usage();
}

my $show_all = 0;
if ($opt{a}) {
    $show_all = 1;
}

#
# Turn off line buffering on output
#
$| = 1;

#
# Set umask for start/swap. We want other members in the project to be
# able to swap/end experiments, so the log and intermediate files need
# to be 664 since some are opened for append.
#
umask(0002);

#
# Untaint the path
#
# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Testbed Libraries.
use lib '/users/mshobana/CloudLabonESI/emulab-devel-new/emulab-devel/sample_build/lib';
use libdb;
use User;
use Lan;

#
# Verify user and get his DB uid and other info for later.
#
my $this_user = User->ThisUser();
if (! defined($this_user)) {
    die("*** $0:\n".
	"    You ($UID) do not exist!\n");
}
if (!$this_user->IsAdmin()) {
    die("*** $0:\n".
	"    You must be a TB administrator to use this program\n");
}

my ($pid,$eid,$virtual,$id,$pideid,$members);
print << "END";
ID     Project/Experiment Link/LAN   Switches (number of members in parens)
--------------------------------------------------------------------------------
END
format vlanlist =
@<<<<< @<<<<<<<<<<<<<<<<< @<<<<<<<<< ^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
$id,   $pideid,           $virtual,  $members
~~                                   ^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                     $members
.
$FORMAT_NAME = 'vlanlist';


#
# Get a list of all VLANs for swapped-in experiments
#
my @vlans;
if (VLan->AllVLans(\@vlans) != 0) {
    die("*** $0:\n".
	"    Unable to load VLANs for all experiments\n");
}

foreach my $vlan (@vlans) {
    my %switches = ();
    my @members;
    my $pid = $vlan->pid();
    my $eid = $vlan->eid();

    $id = $vlan->lanid();
    $virtual = $vlan->vname();

    if ($vlan->MemberList(\@members) != 0) {
	die("*** $0:\n".
	    "    Unable to load members for $vlan\n");
    }
    foreach my $member (@members) {
	my $node;
	my $iface;

	if ($member->GetNodeIface(\$node, \$iface) != 0) {
	    print STDERR "Missing attributes for $member in $vlan\n";
	    next;
	}
	my $nodeid = $node->node_id();

	#
	# Find out which switch this interface is connected to
	#
	my $interface = Interface->LookupByIface($nodeid, $iface);
	if (!defined($interface)) {
	    print STDERR "No interface for $nodeid:$iface\n";
	    next;
        }
	if (!$interface->wiredup()) {
	    print STDERR "Interface for $nodeid:$iface is not wired up\n";
	    next;
        }
	$switches{$interface->switch_id()}++;
    }

    #
    # Report if more than one switch was found
    #
    if ($show_all || (scalar(keys(%switches)) > 1)) {
	$pideid = "$pid/$eid";
	$members = join(" ", map { "$_ ($switches{$_})" } sort keys %switches);
	write;
    }
}
