diff -Nurb iperf-2.0.10.orig/include/Settings.hpp iperf-2.0.10/include/Settings.hpp
--- iperf-2.0.10.orig/include/Settings.hpp	2017-08-08 21:54:14.000000000 -0600
+++ iperf-2.0.10/include/Settings.hpp	2018-02-08 11:11:05.297576181 -0700
@@ -139,6 +139,7 @@
     int mBufLen;                    // -l
     int mMSS;                       // -M
     int mTCPWin;                    // -w
+    int mAckTimo;                   // -A
     /*   flags is a BitMask of old bools
         bool   mBufLenSet;              // -l
         bool   mCompat;                 // -C
@@ -342,7 +343,8 @@
  * base flags, keep compatible with older versions
  */
 #define HEADER_VERSION1 0x80000000
-#define HEADER_EXTEND   0x40000000
+#define HEADER_EMULAB   0x40000000
+#define HEADER_EXTEND   0x20000000
 #define RUN_NOW         0x00000001
 // newer flags
 #define UNITS_PPS             0x00000001
@@ -429,6 +431,7 @@
     int32_t bufferlen;
     int32_t mWinBand;
     int32_t mAmount;
+    int32_t mAckTimo;
 #else
     signed int flags      : 32;
     signed int numThreads : 32;
@@ -436,6 +439,7 @@
     signed int bufferlen  : 32;
     signed int mWinBand : 32;
     signed int mAmount    : 32;
+    signed int mAckTimo   : 32;
 #endif
 } client_hdr_v1;
 
diff -Nurb iperf-2.0.10.orig/src/Client.cpp iperf-2.0.10/src/Client.cpp
--- iperf-2.0.10.orig/src/Client.cpp	2017-08-08 21:54:14.000000000 -0600
+++ iperf-2.0.10/src/Client.cpp	2018-02-08 12:07:00.907572372 -0700
@@ -573,9 +573,11 @@
         if (isUDP(mSettings)) {
             // store datagram ID into buffer
 	    mBuf_UDP->id      = htonl((reportstruct->packetID & 0xFFFFFFFFL));
+#ifdef HAVE_SEQNO64b
 	    if (isSeqNo64b(mSettings)) {
 		mBuf_UDP->id2      = htonl(((reportstruct->packetID & 0xFFFFFFFF00000000LL) >> 32));
 	    }
+#endif
 	    mBuf_UDP->tv_sec  = htonl(reportstruct->packetTime.tv_sec);
 	    mBuf_UDP->tv_usec = htonl(reportstruct->packetTime.tv_usec);
 	    reportstruct->packetID++;
@@ -679,10 +681,13 @@
         // The negative datagram ID signifies termination to the server.
 
         // store datagram ID into buffer
+#ifdef HAVE_SEQNO64b
 	if (isSeqNo64b(mSettings)) {
 	    mBuf_UDP->id      = htonl((reportstruct->packetID & 0xFFFFFFFFFL));
 	    mBuf_UDP->id2     = htonl((((reportstruct->packetID & 0xFFFFFFFF00000000LL) >> 32) | 0x80000000L));
-	} else {
+	} else
+#endif
+	{
 	    mBuf_UDP->id      = htonl(((reportstruct->packetID & 0xFFFFFFFFL) | 0x80000000L));
 	}
         mBuf_UDP->tv_usec = htonl( reportstruct->packetTime.tv_usec );
@@ -709,7 +714,7 @@
             temp_hdr = (client_hdr*)mBuf;
         }
 	flags = Settings_GenerateClientHdr( mSettings, temp_hdr );
-	if (flags & (HEADER_EXTEND | HEADER_VERSION1)) {
+	if (flags & (HEADER_EXTEND | HEADER_VERSION1 | HEADER_EMULAB)) {
 	    //  This test requires the pre-test header messages
 	    //  The extended headers require an exchange
 	    //  between the client and server/listener
@@ -886,6 +891,7 @@
 
     int count = 0;
     int packetid;
+    int timo = (mSettings->mAckTimo < 0) ? 250 : mSettings->mAckTimo;
     while ( count < 10 ) {
         count++;
 
@@ -906,8 +912,8 @@
         // wait until the socket is readable, or our timeout expires
         FD_ZERO( &readSet );
         FD_SET( mSettings->mSock, &readSet );
-        timeout.tv_sec  = 0;
-        timeout.tv_usec = 250000; // quarter second, 250 ms
+	timeout.tv_sec  = (timo / 1000);
+	timeout.tv_usec = (timo % 1000) * 1000;
 
         rc = select( mSettings->mSock+1, &readSet, NULL, NULL, &timeout );
         FAIL_errno( rc == SOCKET_ERROR, "select", mSettings );
@@ -929,6 +935,6 @@
         }
     }
 
-    fprintf( stderr, warn_no_ack, mSettings->mSock, count );
+    fprintf( stderr, warn_no_ack, mSettings->mSock, count, timo );
 }
 // end write_UDP_FIN
diff -Nurb iperf-2.0.10.orig/src/Locale.c iperf-2.0.10/src/Locale.c
--- iperf-2.0.10.orig/src/Locale.c	2017-08-11 12:41:20.000000000 -0600
+++ iperf-2.0.10/src/Locale.c	2018-02-08 11:11:05.297576181 -0700
@@ -373,7 +373,7 @@
 "WARNING: Path MTU Discovery may not be enabled.\n";
 
 const char warn_no_ack[]=
-"[%3d] WARNING: did not receive ack of last datagram after %d tries.\n";
+"[%3d] WARNING: did not receive ack of last datagram after %d tries of %d ms.\n";
 
 const char warn_ack_failed[]=
 "[%3d] WARNING: ack of last datagram failed after %d tries.\n";
diff -Nurb iperf-2.0.10.orig/src/Server.cpp iperf-2.0.10/src/Server.cpp
--- iperf-2.0.10.orig/src/Server.cpp	2017-08-08 21:54:14.000000000 -0600
+++ iperf-2.0.10/src/Server.cpp	2018-02-08 10:59:38.116942057 -0700
@@ -313,9 +313,12 @@
 
             if (!reportstruct->emptyreport) {
                 // read the datagram ID and sentTime out of the buffer
+#ifdef HAVE_SEQNO64b
 		if (isSeqNo64b(mSettings)) {
 		    reportstruct->packetID = (((max_size_t) (ntohl(mBuf_UDP->id2)) << 32) | ntohl(mBuf_UDP->id));
-		} else {
+		} else
+#endif
+		{
 		    reportstruct->packetID = ntohl(mBuf_UDP->id);
 		}
                 reportstruct->sentTime.tv_sec = ntohl( mBuf_UDP->tv_sec  );
diff -Nurb iperf-2.0.10.orig/src/Settings.cpp iperf-2.0.10/src/Settings.cpp
--- iperf-2.0.10.orig/src/Settings.cpp	2017-08-11 11:55:44.000000000 -0600
+++ iperf-2.0.10/src/Settings.cpp	2018-02-08 12:11:03.680668904 -0700
@@ -114,6 +114,7 @@
 {"realtime",         no_argument, NULL, 'z'},
 
 // more esoteric options
+{"ack_timeout",required_argument, NULL, 'A'},
 {"bind",       required_argument, NULL, 'B'},
 {"compatibility",    no_argument, NULL, 'C'},
 {"daemon",           no_argument, NULL, 'D'},
@@ -189,7 +190,7 @@
 
 #define SHORT_OPTIONS()
 
-const char short_options[] = "1b:c:def:hi:l:mn:o:p:rst:uvw:x:y:zB:CDF:IL:M:NP:RS:T:UVWXZ:";
+const char short_options[] = "1b:c:def:hi:l:mn:o:p:rst:uvw:x:y:zA:B:CDF:IL:M:NP:RS:T:UVWXZ:";
 
 /* -------------------------------------------------------------------
  * defaults
@@ -237,6 +238,7 @@
     //main->mTCPWin       = 0;           // -w,  ie. don't set window
 
     // more esoteric options
+    main->mAckTimo        = -1;          // -A,  -1 means default 250 ms
     //main->mLocalhost    = NULL;        // -B,  none
     //main->mCompat     = false;         // -C,  run in Compatibility mode
     //main->mDaemon     = false;         // -D,  run as a daemon
@@ -538,6 +540,9 @@
 
 
             // more esoteric options
+        case 'A': // ms of delay between UDP Ack resends
+            mExtSettings->mAckTimo = atoi( optarg );
+            break;
         case 'B': // specify bind address
 	    if (mExtSettings->mLocalhost == NULL) {
 		mExtSettings->mLocalhost = new char[ strlen( optarg ) + 1 ];
@@ -843,6 +848,13 @@
         if ( hdr->base.bufferlen != 0 ) {
             (*client)->mBufLen = ntohl(hdr->base.bufferlen);
         }
+        if ( hdr->base.mWinBand != 0 ) {
+            if ( isUDP( server ) ) {
+                (*client)->mUDPRate = ntohl(hdr->base.mWinBand);
+            } else {
+                (*client)->mTCPWin = ntohl(hdr->base.mWinBand);
+            }
+        }
 	(*client)->mAmount     = ntohl(hdr->base.mAmount);
         if ( ((*client)->mAmount & 0x80000000) > 0 ) {
             setModeTime( (*client) );
@@ -887,6 +899,9 @@
                        (*client)->mHost, REPORT_ADDRLEN);
         }
 #endif
+	if ( (flags & HEADER_EMULAB) != 0 ) {
+	    (*client)->mAckTimo = ntohl(hdr->base.mAckTimo);
+	}
     } else {
         *client = NULL;
     }
@@ -907,11 +922,19 @@
     }
     if ( client->mMode != kTest_Normal ) {
 	flags |= HEADER_VERSION1;
+	if ( hdr->base.mAckTimo >= 0 ) {
+ 	    flags  |= HEADER_EMULAB;
+	}
 	if ( isBuflenSet( client ) ) {
 	    hdr->base.bufferlen = htonl(client->mBufLen);
 	} else {
 	    hdr->base.bufferlen = 0;
 	}
+	if ( isUDP( client ) ) {
+	    hdr->base.mWinBand  = htonl(client->mUDPRate);
+	} else {
+	    hdr->base.mWinBand  = htonl(client->mTCPWin);
+	}
 	if ( client->mListenPort != 0 ) {
 	    hdr->base.mPort  = htonl(client->mListenPort);
 	} else {
@@ -924,6 +947,9 @@
 	    hdr->base.mAmount = htonl((long)client->mAmount);
 	    hdr->base.mAmount &= htonl( 0x7FFFFFFF );
 	}
+	if ( hdr->base.mAckTimo >= 0 ) {
+	    hdr->base.mAckTimo = htonl(client->mAckTimo);
+	}
 	if ( client->mMode == kTest_DualTest ) {
 	    flags |= RUN_NOW;
 	}
diff -Nurb iperf-2.0.10.orig/src/main.cpp iperf-2.0.10/src/main.cpp
--- iperf-2.0.10.orig/src/main.cpp	2017-08-08 21:54:14.000000000 -0600
+++ iperf-2.0.10/src/main.cpp	2018-02-08 11:11:05.298576198 -0700
@@ -166,6 +166,11 @@
     // read settings from command-line parameters
     Settings_ParseCommandLine( argc, argv, ext_gSettings );
 
+    // if needed, redirect the output into a specified file
+    if ( !isSTDOUT( ext_gSettings ) ) {
+        redirect( ext_gSettings->mOutputFileName );
+    }
+
     // Check for either having specified client or server
     if ( ext_gSettings->mThreadMode == kMode_Client
          || ext_gSettings->mThreadMode == kMode_Listener ) {
diff -Nurb iperf-2.0.10.orig/src/stdio.c iperf-2.0.10/src/stdio.c
--- iperf-2.0.10.orig/src/stdio.c	2017-08-08 21:54:14.000000000 -0600
+++ iperf-2.0.10/src/stdio.c	2018-02-08 11:11:05.298576198 -0700
@@ -255,8 +255,6 @@
  * ------------------------------------------------------------------- */
 
 void redirect(const char *inOutputFileName) {
-#ifdef WIN32
-
     FILE *fp;
 
     if ( inOutputFileName == NULL ) {
@@ -264,14 +262,12 @@
         return;
     }
 
-    fp = freopen(inOutputFileName, "a+", stdout);
+    fp = freopen(inOutputFileName, "a", stdout);
     if ( fp == NULL ) {
         fprintf(stderr, "redirect stdout failed!\n");
         return;
     }
 
-#endif
-
     return;
 }
 
