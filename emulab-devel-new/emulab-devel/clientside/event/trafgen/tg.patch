diff -ru dist/tg2.0/src/tg/config.h tg2.0/src/tg/config.h
--- dist/tg2.0/src/tg/config.h	2002-01-24 16:30:09.000000000 -0700
+++ tg2.0/src/tg/config.h	2012-03-21 16:54:20.000000000 -0600
@@ -14,7 +14,7 @@
 
 /* Maximum packet buffer size.						*/
 
-#define MAX_PKT_SIZE		8192 /* 3072	/* Sized for Ethernet.	*/
+#define MAX_PKT_SIZE		65536 /* 3072	/* Sized for Ethernet.	*/
 
 /* Maximum value from random-number generator.				*/
 
diff -ru dist/tg2.0/src/tg/log.c tg2.0/src/tg/log.c
--- dist/tg2.0/src/tg/log.c	2002-01-24 16:30:09.000000000 -0700
+++ tg2.0/src/tg/log.c	2012-03-21 16:58:39.000000000 -0600
@@ -23,7 +23,6 @@
 #include <sys/utsname.h> 
 #include <sys/param.h>
 #include <errno.h>
-#include <utmp.h>
 
 #include "config.h"
 #include "distribution.h"
@@ -31,6 +30,10 @@
 #include "decode.h"
 #include "log.h"
 
+/* XXX utmp.h is defunct */
+#define UT_NAMESIZE 32
+#define UT_HOSTSIZE 256
+
 /* Type definitions local to this file.					*/
 
 #define FPRINTF		(void) fprintf
@@ -268,6 +271,11 @@
 	char		*cp = buf;
 	char		ctl;
 
+#ifdef USEEVENTS
+	if (log_fp == NULL)
+		return;
+#endif
+
 	/* Encode record type.						*/
 
 	*cp++ = LOGTYPE_ACCEPT;
@@ -326,6 +334,11 @@
 	char		*cp = buf;
 	char		ctl;
 
+#ifdef USEEVENTS
+	if (log_fp == NULL)
+		return;
+#endif
+
 	/* Encode record type.						*/
 
 	*cp++ = LOGTYPE_ERROR;
@@ -391,6 +404,11 @@
 	char		*cp = buf;
 	char		ctl;
 
+#ifdef USEEVENTS
+	if (log_fp == NULL)
+		return;
+#endif
+
 	/* Encode record type.						*/
 
 	*cp++ = LOGTYPE_RX;
@@ -459,6 +477,11 @@
 	char		*cp = buf;
 	char		ctl;
 
+#ifdef USEEVENTS
+	if (log_fp == NULL)
+		return;
+#endif
+
 	/* Encode record type.						*/
 
 	*cp++ = LOGTYPE_SETUP;
@@ -510,6 +533,11 @@
 	char		*cp = buf;
 	char		ctl;
 
+#ifdef USEEVENTS
+	if (log_fp == NULL)
+		return;
+#endif
+
 	/* Encode record type.						*/
 
 	*cp++ = LOGTYPE_TEARDOWN;
@@ -568,6 +596,11 @@
 	char		*cp = buf;
 	char		ctl;
 
+#ifdef USEEVENTS
+	if (log_fp == NULL)
+		return;
+#endif
+
 	/* Encode record type.						*/
 
 	*cp++ = LOGTYPE_TX;
@@ -717,6 +750,10 @@
 
 	extern FILE	*log_fp;
 	
+#ifdef USEEVENTS
+	if (log_fp == NULL)
+		return;
+#endif
 	if (log_fp != stdout &&  log_fp != stderr) 
 	  (void) fclose (log_fp);
 
diff -ru dist/tg2.0/src/tg/prot_dgram.c tg2.0/src/tg/prot_dgram.c
--- dist/tg2.0/src/tg/prot_dgram.c	2002-01-24 16:30:10.000000000 -0700
+++ tg2.0/src/tg/prot_dgram.c	2012-03-21 16:54:20.000000000 -0600
@@ -198,6 +198,22 @@
 	for (;;)
 		{
 
+#ifdef USEEVENTS
+		extern int gotevent;
+		tgevent_poll();
+		if (gotevent)
+			{
+			rcving = 0;
+			errno = ETIME;
+			return (0);
+			}
+		if (tv.tv_sec > 0 || tv.tv_usec > 100000)
+			{
+			tv.tv_sec = 0;
+			tv.tv_usec = 100000;
+			}
+#endif
+
 		/* Set up for select:  get fd bitmaps.			*/
 
 		rfds = fds;
@@ -396,6 +412,7 @@
 
 	if (fd == -1)
 		{
+		(*(prtab->buffer_free))(buf);
 		errno = EINVAL;
 		return (-1);
 		}
@@ -427,6 +444,7 @@
 
 			if (fromlen == 0)
 				{
+				(*(prtab->buffer_free))(buf);
 				errno = EBADF;
 				return (-1);
 				}
@@ -489,6 +507,7 @@
 
 	if (!dgram_get_packets(fd, endtout))
 		{
+		(*(prtab->buffer_free))(buf);
 		return (-1);
 		}
 	else
@@ -508,6 +527,7 @@
 
 			if (fromlen == 0)
 				{
+				(*(prtab->buffer_free))(buf);
 				errno = EBADF;
 				return (-1);
 				}
@@ -609,6 +629,11 @@
 	justrcvd = 0;
 	sta = close(fd);    
 	log_teardown(NULL, sta == 0 ? -1 : sta);
+	if (fd == sfd)
+		sfd = -1;
+#ifdef USEEVENTS
+	firsttime = 1;
+#endif
 	return (sta);
 	}
 
diff -ru dist/tg2.0/src/tg/prot_stream.c tg2.0/src/tg/prot_stream.c
--- dist/tg2.0/src/tg/prot_stream.c	2002-01-24 16:30:10.000000000 -0700
+++ tg2.0/src/tg/prot_stream.c	2012-03-21 16:54:20.000000000 -0600
@@ -147,6 +147,22 @@
 	for (;;)
 		{
 
+#ifdef USEEVENTS
+		extern int gotevent;
+		tgevent_poll();
+		if (gotevent)
+			{
+			rcving = 0;
+			errno = ETIME;
+			return (0);
+			}
+		if (tv.tv_sec > 0 || tv.tv_usec > 100000)
+			{
+			tv.tv_sec = 0;
+			tv.tv_usec = 100000;
+			}
+#endif
+
 		/* Set up for select:  get fd bitmaps.			*/
 
 		rfds = fds;
@@ -384,6 +400,7 @@
 	/* Make sure that fd wasn't closed out from under the sender.	*/
 
 	if (fd < 0) {
+		buffer_generic_free(buf);
 		errno = EINVAL;
 		return (-1);
 	}
@@ -440,6 +457,7 @@
 	    /* new connections while we are waiting to write.		*/
 
             if (!stream_get_packets(fd, endtout)) {
+		buffer_generic_free(buf);
 		return (-1);
             } else {
 
@@ -597,6 +615,22 @@
 		return (-1);
 		}
 
+#ifdef USEEVENTS
+	/*
+	 * XXX force the connection to disappear quickly in case we are
+	 * doing a restart.
+	 *
+	 * This is not considered a legit thing to do in general as it
+	 * potentially leaves TCP segments floating around that might be
+	 * improperly delivered to a new connection on the same IP/port.
+	 */
+	{
+		struct linger linger;
+		linger.l_onoff = 1;
+		linger.l_linger = 0;
+		setsockopt(fd, SOL_SOCKET, SO_LINGER, &linger, sizeof(linger));
+	}
+#endif
 	result = close(fd);
 	log_teardown(NULL, result == 0 ? -1 : errno);
 
@@ -626,5 +660,8 @@
 		errno = tmperrno;
 		}
 
+#ifdef USEEVENTS
+	firsttime = 1;
+#endif
 	return (result);
 	}
diff -ru dist/tg2.0/src/tg/prot_tcp.c tg2.0/src/tg/prot_tcp.c
--- dist/tg2.0/src/tg/prot_tcp.c	2002-01-24 16:30:10.000000000 -0700
+++ tg2.0/src/tg/prot_tcp.c	2012-03-21 16:54:20.000000000 -0600
@@ -93,6 +93,12 @@
 
 #endif /* QOSDEBUG */
 
+#ifndef SUNOS4 
+    if ((prot->qos & QOS_TOS) != 0)
+	if (setsockopt(fd, IPPROTO_IP, IP_TOS, (char *)(&(prot->tos)), 
+		       sizeof(prot->tos)) == -1)
+	    perror("tcp_setup: can't set TOS");
+#endif              
 
     if ((prot->qos & QOS_RCVWIN) != 0)
     {
@@ -165,14 +171,6 @@
 			return(-1);
 			}
 		/* handle any QOS parameters */
-#ifndef SUNOS4 
-               if ((prot->qos & QOS_TOS) != 0)
-               /* Set IP tos */
- 	              if (setsockopt(sfd, IPPROTO_IP, IP_TOS, (char *)(&(prot->tos)), 
-                         sizeof(prot->tos)) == -1)
-		            perror("tcp_setup: can't set TOS");
-#endif              
-
 		tcp_qos(sfd);
 
 		tmpaddr = (struct sockaddr_in *)&(prot->dst); 
@@ -184,7 +182,24 @@
 			return (-1);
 		}	
 
-		if ((connect(sfd, &(prot->dst), sizeof(prot->dst)) < 0) &
+		/* Bind to a local address if desired.			*/
+		if (prot->qos & QOS_SRC)
+			{
+#ifdef USEEVENTS
+			flags = 1;
+			if (setsockopt(sfd, SOL_SOCKET, SO_REUSEADDR, &flags, sizeof(int)) < 0)
+				{
+				perror("tcp_setup: can't set REUSEADDR");
+				}
+#endif
+			if (bind(sfd, &(prot->src), sizeof(prot->src)) < 0)
+				{
+				(void)close(sfd);
+				return (-1);
+				}
+			}
+
+		if ((connect(sfd, &(prot->dst), sizeof(prot->dst)) < 0) &&
 		    (errno != EINPROGRESS))
 			{
 			(void)close(sfd);
@@ -217,6 +232,13 @@
 			return (-1);
 		}	
 
+#ifdef USEEVENTS
+		flags = 1;
+		if (setsockopt(sfd, SOL_SOCKET, SO_REUSEADDR, &flags, sizeof(int)) < 0)
+			{
+			perror("tcp_setup: can't set REUSEADDR");
+			}
+#endif
 		if (bind(sfd, &(prot->src), sizeof(prot->src)) < 0)
 			{
 			(void)close(sfd);
diff -ru dist/tg2.0/src/tg/prot_test.c tg2.0/src/tg/prot_test.c
--- dist/tg2.0/src/tg/prot_test.c	2002-01-24 16:30:10.000000000 -0700
+++ tg2.0/src/tg/prot_test.c	2012-03-21 16:54:20.000000000 -0600
@@ -447,6 +447,7 @@
 
 	if (!test_get_packets(prtab, fd, endtout))
 		{
+		buffer_generic_free(buf);
 		return (-1);
 		}
 	else
diff -ru dist/tg2.0/src/tg/prot_udp.c tg2.0/src/tg/prot_udp.c
--- dist/tg2.0/src/tg/prot_udp.c	2002-01-24 16:30:10.000000000 -0700
+++ tg2.0/src/tg/prot_udp.c	2012-03-21 16:54:20.000000000 -0600
@@ -47,7 +47,7 @@
 
 /* Apply QOS parameters to an existing fd.                              */
 
-static void udp_qos(fd, prot)
+void udp_qos(fd, prot)
 int             fd;
 protocol       *prot;
 {
@@ -199,13 +199,20 @@
 
 		if (prot->qos & QOS_SRC)
 			{
+#ifdef USEEVENTS
+			flags = 1;
+			if (setsockopt(sfd, SOL_SOCKET, SO_REUSEADDR, &flags, sizeof(int)) < 0)
+			{
+				perror("udp_setup: can't set REUSEADDR");
+			}
+#endif
 			if (bind(sfd, &(prot->src), sizeof(prot->src)) < 0)
 				{
 				(void)close(sfd);
 				return (-1);
 				}
 			}
-		if ((connect(sfd, &(prot->dst), sizeof(prot->dst)) < 0) &
+		if ((connect(sfd, &(prot->dst), sizeof(prot->dst)) < 0) &&
 		    (errno != EINPROGRESS))
 			{
 			(void)close(sfd);
@@ -232,7 +239,7 @@
 
 
 
-		    /* don't think this is correect */
+		    /* don't think this is correct */
 		addr = (struct sockaddr_in *)&(prot->src);
 		if ( IN_MULTICAST(ntohl(addr->sin_addr.s_addr)))		
 	        {
@@ -270,6 +277,13 @@
 		 }   
 		 else
 		 {    
+#ifdef USEEVENTS
+			flags = 1;
+			if (setsockopt(sfd, SOL_SOCKET, SO_REUSEADDR, &flags, sizeof(int)) < 0)
+			{
+				perror("udp_setup: can't set REUSEADDR");
+			}
+#endif
 		        if (bind(sfd, &(prot->src), sizeof(prot->src)) < 0)
 			{
 			    (void)close(sfd);
diff -ru dist/tg2.0/src/tg/tg.y tg2.0/src/tg/tg.y
--- dist/tg2.0/src/tg/tg.y	2002-01-24 16:30:10.000000000 -0700
+++ tg2.0/src/tg/tg.y	2012-03-21 16:54:20.000000000 -0600
@@ -133,7 +133,11 @@
 char                    *version = "2.0";	/* TG program version.	*/
 char			*ofile = NULL;
 char			*ifile = NULL;
- int			FlushOutput = 0;      /* whether to flush after each*/
+int			FlushOutput = 0;      /* whether to flush after each*/
+int			active_tx_asn = -1;
+#ifdef USEEVENTS
+int			gotevent;
+#endif
 
 
 /* Variables local to this file.					*/
@@ -183,6 +187,10 @@
 
 int	sym_tbl_index = 0;
 
+/* Include here to compile on Bison as well as Yacc. */
+YYSTYPE yylval;
+#include "lex.yy.c"
+
 %}
 
 /* Lex token definitions.						*/
@@ -265,7 +273,6 @@
 macro
 	: IDENTIFIER EQUAL integer
 		{
-		extern char	*malloc();
 		char		*cp;
 
 		if (!(cp = malloc (strlen($1.n) + 1))) {
@@ -842,7 +849,13 @@
 	;
 
 %%
-#include "lex.yy.c"
+
+/* Forward definitions, necessary to compile on Yacc as well as Bison. */
+#if defined(__cplusplus) || defined(__STDC__)
+  int yylex(void);
+#else
+  int yylex();
+#endif
 
 /* MAINprogram for extractdoc.						*/
 
@@ -856,6 +869,14 @@
 	void		sigint();
 	FILE		*fp;
 
+#ifdef USEEVENTS
+	tgevent_init(argc, argv);
+
+	(void) signal(SIGINT, sigint);
+	(void) signal(SIGTERM, sigint);
+
+	tgevent_loop();
+#else
 	/* Set debugging if it is desired.				*/
 
 #	if YYDEBUG
@@ -917,6 +938,7 @@
 	/* Generate traffic.						*/
 
 	do_actions();
+#endif
 	return (0);
 	}
 
@@ -1005,7 +1027,7 @@
 	/* If there is no explicit setup clause, do an immediate setup.	*/
 
 	if (got_setup_implicit &&
-	    ((tx_asn = (*(prot.prot->setup))(&prot)) == -1))
+	    ((active_tx_asn = tx_asn = (*(prot.prot->setup))(&prot)) == -1))
 		{
 
 		/* log the setup error. */
@@ -1017,6 +1039,10 @@
 	/* Each pass through the following loop processes one tg_action	*/
 	/* element from the list.					*/
 
+#ifdef USEEVENTS
+ restart:
+	gotevent = 0;
+#endif
 	for (cur_tg = tg_first; cur_tg != NULL; cur_tg = cur_tg->next)
 		{
 
@@ -1070,7 +1096,7 @@
 
 			/* Perform setup phase.				*/
 
-			if ((tx_asn = (*(prot.prot->setup))(&prot)) == -1)
+			if ((active_tx_asn = tx_asn = (*(prot.prot->setup))(&prot)) == -1)
 				{
 
 				/* log the setup error. */
@@ -1116,7 +1142,7 @@
 
 			(*(prot.prot->sleep_till))(&(cur_tg->stop_before));
 			}
-	else if ((cur_tg->tg_flags & TG_LOG) != 0)
+		else if ((cur_tg->tg_flags & TG_LOG) != 0)
 			{
 			/* (Re-)Start logging to a new file */
 			time_t now;
@@ -1144,6 +1170,22 @@
 
 			generate(tx_asn, cur_tg, lasttime);
 			}
+#ifdef USEEVENTS
+		if (gotevent)
+			{
+			if (prot.qos & QOS_TOS)
+				{
+				/* XXX should be in proto table */
+				extern long tcp_setup(), udp_setup();
+				extern void tcp_qos(), udp_qos();
+				if (prot.prot->setup == tcp_setup)
+					tcp_qos(tx_asn);
+				else if (prot.prot->setup == udp_setup)
+					udp_qos(tx_asn, &prot);
+				}
+			goto restart;
+			}
+#endif
 		}
 
 	/* Finished, tear down connection.				*/
@@ -1154,8 +1196,11 @@
 		/* log the teardown error. */
 
 		perror("do_actions: protocol teardown");
+#ifndef USEEVENTS
 		exit(-1);
+#endif
 		}
+	active_tx_asn = -1;
 
 	return;
 	}
@@ -1341,6 +1386,12 @@
 
 		if (arrival != 0)
 			(*(prot.prot->sleep_till))(&nextpkt_tv);
+#ifdef USEEVENTS
+		else
+			tgevent_poll();
+		if (gotevent)
+			break;
+#endif
 		lasttime = nextpkt_tv;
 
 		/* Did we exceed the limit on the number of packets to send? */
@@ -1382,6 +1433,10 @@
 						   pktlen,
 						   &(cur_tg->stop_before),
 						   &pktid);
+#ifdef USEEVENTS
+			if (gotevent)
+				break;
+#endif
 			}
 		}
 	}
@@ -2096,5 +2151,16 @@
 	char		*addr;
 {
 
+	if ((*(prot.prot->teardown))(active_tx_asn) == -1)
+		{
+
+		/* log the teardown error. */
+
+		perror("sigint: protocol teardown");
+		}
 	log_close();
+#ifdef USEEVENTS
+	tgevent_shutdown();
+#endif
+	exit(1);
 }
