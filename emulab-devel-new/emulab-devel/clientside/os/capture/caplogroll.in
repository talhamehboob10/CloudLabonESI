#!/usr/bin/perl -w
#
# Copyright (c) 2021 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

#
# Create a newsyslog snippet to roll the capture logs for the indicated
# nodes or capture host.
#
# XXX Can only be run on a boss node right now.
#

use strict;
use English;
use Getopt::Std;
use POSIX qw(setsid);

sub usage()
{
    print STDERR "\nUsage: caplogroll [-hq] [-n numlogs] [-l loglen] [-H capture_host] [node ...]\n";
    print STDERR "\nCreate newsyslog entries (to stdout) for rolling capture log files.\n";
    print STDERR "Should be run on boss node.\n";
    print STDERR "   -h         This message\n";
    print STDERR "   -n num     Number of instances of logfiles to keep (default 7)\n";
    print STDERR "   -l len     Length (KB) at which to roll a logfile (default 10000)\n";
    print STDERR "   -q         Do not print warnings\n";
    print STDERR "   -H host    Generate entries for all nodes serviced by this host\n";
    print STDERR "   node ...   Generate entries for the specified nodes\n";
}

my $optlist = "hn:l:qH:";
my $quiet = 0;
my $chost = "";
my @nodes;
my $isboss = 0;
my $lognum = 7;
my $loglen = 10000;

#
# Configure variables
#
my $TB          = "@prefix@";
my $OURDOMAIN	= "@OURDOMAIN@";

# Load the Testbed support stuff.
use lib "@prefix@/lib";
#use emdb;
#use EmulabConstants;
use libdb;
use libtestbed;

my $me = `hostname`;
chomp($me);
if ($me eq "boss.$OURDOMAIN") {
    $isboss = 1;
}

# XXX
if (!$isboss) {
    print STDERR "Can only run on boss node right now.\n";
    exit(1);
}

#
# Process command line options. Some will override sitevars.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
    exit(1);
}
if (defined($options{'h'})) {
    usage();
    exit(0);
}
if (defined($options{'n'})) {
    if ($options{'n'} !~ /^(\d+)$/ || $1 <= 0 || $1 > 99) {
	print STDERR "-n arg should be 0 < numlog < 100\n";
	exit(1);
    }
    $lognum = $1;
}
if (defined($options{'l'})) {
    if ($options{'l'} !~ /^(\d+)$/ || $1 <= 0 || $1 > 1000000) {
	print STDERR "-l arg should be 0 < loglen < 1000000\n";
	exit(1);
    }
    $loglen = $1;
}
if (defined($options{'q'})) {
    $quiet = 1;
}
if (defined($options{'H'})) {
    $chost = $options{'H'};
    if ($chost !~ /^([^\.]+)(\.$OURDOMAIN)?$/) {
	print STDERR "Invalid hostname '$chost'.\n";
	exit(1);
    }
    $chost = "$1.$OURDOMAIN";
}
@nodes = @ARGV;
if (!$chost && @nodes == 0) {
    print STDERR "Must specify either -H or a list of nodes.\n";
    usage();
    exit(1);
}

if ($chost) {
    my $query_result =
	DBQueryFatal("select node_id from tiplines where server='$chost'");
    if ($query_result->numrows) {
	my @dbnodes = ();
	while (my ($node) = $query_result->fetchrow_array()) {
	    push(@dbnodes, $node)
	}
	push(@nodes, @dbnodes);
    }
}

print "# DO NOT EDIT from here on. Autogenerated by caplogroll\n";
foreach my $node (sort @nodes) {
    my $logdir = "$TB/log/tiplogs";
    if (!$quiet && $me eq $chost) {
	if (! -e "$logdir/$node.log") {
	    print STDERR "$node: no current logfile!\n";
	}
	if (! -e "$logdir/$node.pid") {
	    print STDERR "$node: capture not currently running?\n";
	}
    }
    print "$logdir/$node.log\t\t640\t$lognum\t$loglen\t*\tZ\t$logdir/$node.pid\n";
}

exit(0);
