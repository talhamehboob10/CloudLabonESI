#!/usr/bin/perl -w
#
# Copyright (c) 2000-2016 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;

sub usage()
{
    print "Usage: rc.linktest start | stop\n";
    exit(1);
}
my $optlist	= "";
my $action      = "start";

# Turn off line buffering on output
$| = 1;

# Drag in path stuff so we can find emulab stuff.
BEGIN { require "/etc/emulab/paths.pm"; import emulabpaths; }

#
# Load the OS independent support library. It will load the OS dependent
# library and initialize itself. 
# 
use libsetup;
use libtmcc;

# XXX this only works if called after linkdelay setup as is the case here
sub LINKDELAYHOST() { if (-e TMLINKDELAY()) { return 1; } else { return 0; } }

#
# Exit if not a valid node to run linktest on.
# 
exit(0)
    if (MFS() || REMOTE() || SIMHOST() || JAILHOST() || STORAGEHOST() ||
	(DELAYHOST() && !LINKDELAYHOST()));

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (@ARGV) {
    $action = $ARGV[0];

    usage()
	if ($action ne "start" and $action ne "stop");
}

my $logfile = "$LOGDIR/linktest.debug";
my $pidfile = "/var/run/linktest.pid";
my $swapper = `cat $BOOTDIR/swapper`;
chomp($swapper);

# Stop.
if ($action eq "stop") {
    if (-e $pidfile) {
	system("kill `cat $pidfile`");
	# Does not unlink its own pidfile!
	unlink($pidfile);
    }
    exit(0);
}

#
# Need the keyfile. We talk to the elvind on boss, not locally.
#
my $keyfile = TMEVENTKEY();

#
# Need the pid/eid. 
# 
my ($pid, $eid, $vname) = check_nickname();

#
# Start the daemon.
#
print("Starting linktest daemon\n");

my $server = getlocalevserver();
my $args = "-s $server -l $logfile -i $pidfile -k $keyfile -u $swapper";

#
# Only wait for a couple of minutes, to avoid pointless wait forever.
# We will report an error.
#
my $childpid = fork();
if ($childpid) {
    my $timedout = 0;
    local $SIG{ALRM} = sub { kill("TERM", $childpid); $timedout = 1; };
    alarm 120;
    waitpid($childpid, 0);
    alarm 0;

    #
    # If failure then we want to report an error.
    #
    if ($? || $timedout) {
	print STDERR "*** ERROR: linktest daemon failed to start. ";
	print STDERR ($timedout ? "Timed out" : "Status: $?") . ".\n";
	exit(-1);
    }
    exit(0);
}
else {
    exec("linktest -e $pid/$eid $args");
    exit($? >> 8);
}
