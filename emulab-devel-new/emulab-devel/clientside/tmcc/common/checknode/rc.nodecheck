#! /bin/sh
#
# Copyright (c) 2013-2014 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

#
# This is a shell script instead of a perl script since we want to use this
# in the FreeBSD-based frisbee MFS which does not include perl. It also uses
# only "basic" sh syntax, where the other shell scripts require bash.
#

if [ -r /etc/emulab/paths.sh ]; then
        . /etc/emulab/paths.sh
else
        BINDIR=/usr/local/etc/emulab
	LOGDIR=/var/emulab/logs
fi

MFSPROJDIR=/proj/emulab-ops

# XXX compat with other Emulab rc.* scripts
# We only run on a "boot" invocation, not shutdown/reconfig/reset.
# Note if invoked with no args then treat as "boot"
#
if [ $# -gt 0 -a "$1" != "boot" ]; then
    exit 0
fi

#
# XXX see if hwinfo returns anything. If not, assume node checks are not
# supported and don't bother with the rest.
#
# defaults will be collect=0 check=0 

testinfo=`$BINDIR/tmcc hwinfo | grep TESTINFO`
if [ -z "$testinfo" ]; then
    echo "Skipping nodechecks tmcc does not support hwinfo"
    exit 0
fi

x=`echo $testinfo | awk -F = '{print $3}' | awk '{print $1}'`
if [ -n "$x" ] ; then
    collect=$x
else
    collect=0
fi
x=`echo $testinfo | awk -F = '{print $4}'`
if [ -n "$x" ] ; then
    check=$x
else
    check=0
fi

if [ "$check" = "0" -a "$collect" = "0" ] ; then
    echo 'testbed says not to run nodecheck, skipping'
    exit 0
fi

typenode=`$BINDIR/tmcc nodetype`
if [ "$typenode" = "m400" ] ; then
    echo "Skipping nodechecks on nodetype m400"
    exit 0
fi
    
if [ -d /proc/xen ]; then
    echo "Skipping nodechecks in Xen dom0"
    exit 0
fi

# if asked to collect need the proj directory this project
# (as given by tmcc hwinfo) and mounted to save logs
# Later - try mounting in any case since the static binaries will be better to use if found

collectdir=`echo $testinfo | awk -F \" '{print $2}'`
a=`echo $collectdir | awk -F \/ '{print $2}'`
b=`echo $collectdir | awk -F \/ '{print $3}'`
mountpoint="/$a/$b"

if [ ! -d "$mountpoint" ] ; then
    mkdir -p $mountpoint
fi

mounted=0
isitmounted=$(mount | grep -c $mountpoint)
if [ $isitmounted -eq 0 ] ; then
    mount -o soft,intr,bg fs:$mountpoint $mountpoint
    if [ $? -ne 0 ]; then
	echo "*** Could not mount $mountpoint, nodecheck collect not done"
	collect=0
    else
	mounted=1
	if [ ! -d "$collectdir" ] ; then
	    mkdir -p $collectdir
	fi
    fi
fi

if [ -f "/etc/emulab/ismfs" ] ; then
    # MFSes doesn't have all the apps we need, so mount an extra directory
    # and put in the path

    if [ ! -d $mountpoint/nodecheck/`uname -s`/bin-`uname -m` ] ; then
	echo "Nodecheck - Can not run in MFS mode without having helper programs."
	echo "Expecting to have $MFSPROJDIR/nodecheck/`uname -s`/bin-`uname -m` available"
	exit 0
    fi

    os=`uname -s`
    export PATH="/usr/local/sbin:/usr/local/bin:$mountpoint/nodecheck/`uname -s`/bin-`uname -m`:$PATH"
    
    echo 'Running Hardware Inventory Gather'
    bash $BINDIR/checknode $LOGDIR/nodecheck.log
    echo 'Done Running Hardware Inventory'

    if [ $mounted -ne 0 ]; then
	umount $mountpoint
    fi
    exit 0
else
    # just don't run if not in a mfs
    :
    exit 0
fi

action=""
if [ "$check" = "1" -a "$collect" = "1" ] ; then
    action="collect and check"
else
    if [ "$check" = "1" ] ; then
	action="check"
    else
	action="collect"
    fi
fi

echo "Starting nodecheck $action at `date`"

# set path if we have the extra static binaries
os=`uname -s`
if [ -d "$mountpoint"/nodecheck/`uname -s`/bin-`uname -m` ] ; then
    export PATH="/usr/local/sbin:/usr/local/bin:$mountpoint/nodecheck/`uname -s`/bin-`uname -m`:$PATH"
fi

# if booting node then truncate local log file
if [ "$1" = "boot" ] ; then
    printf "%s------ Start boottime_nodecheck ------\n" "$(date)" > $LOGDIR/nodecheck.log
fi

bash $BINDIR/checknode $LOGDIR/nodecheck.log

if [ "$1" = "boot" ] ; then
    printf "%s------ Finish boottime_nodecheck -----\n\n" "$(date)" >> $LOGDIR/nodecheck.log
fi

if [ $mounted -ne 0 ]; then
    umount $mountpoint
fi

echo "Finishing nodecheck $action at `date`"
exit 0
