#!/usr/bin/perl -w
#
# Copyright (c) 2004, 2005, 2017 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;

#
# This takes a special argument so it can be called by ixpsetup to create
# a specific hosts file other than /etc/hosts.
# 
sub usage()
{
    print "Usage: " .
	scriptname() . " [-j vnodeid] [-f file] boot|shutdown|reconfig|reset\n";
    exit(1);
}
my $optlist = "j:f:";
my $action  = "boot";

# Only root.
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be root to run this script!\n");
}

# Turn off line buffering on output
$| = 1;

# Drag in path stuff so we can find emulab stuff.
BEGIN { require "/etc/emulab/paths.pm"; import emulabpaths; }

# Script specific goo
my $DEFAULT    = "$ETCDIR/hosts";

#
# Load the OS independent support library. It will load the OS dependent
# library and initialize itself. 
# 
use libsetup;
use liblocsetup;
use libtmcc;
use librc;

my $pathname   = $HOSTSFILE;  # Default path from liblocsetup.

#
# Not all clients support this.
#
exit(0)
    if (MFS() || (REMOTE() && !(REMOTEDED() || PLAB() || JAILED())) || INDOCKERVM());

# Protos.
sub doboot();
sub doshutdown();
sub doreconfig();
sub docleanup();

# Parse command line.
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{'f'})) {
    $pathname = $options{'f'};
}
if (defined($options{'j'})) {
    my $vnodeid = $options{'j'};
    libsetup_setvnodeid($vnodeid);
}
# Allow default above.
if (@ARGV) {
    $action = $ARGV[0];
}

# Execute the action.
SWITCH: for ($action) {
    /^boot$/i && do {
	doboot();
	last SWITCH;
    };
    /^shutdown$/i && do {
	doshutdown();
	last SWITCH;
    };
    /^reconfig$/i && do {
	doreconfig();
	last SWITCH;
    };
    /^reset$/i && do {
	docleanup();
	last SWITCH;
    };
    fatal("Invalid action: $action\n");
}
exit(0);

# More protos
sub fromtopo($);

#
# Boot Action.
#
sub doboot()
{
    my @tmccresults;

    print STDOUT "Checking Testbed hostnames configuration ... \n";

    #
    # Firewall hostname setup is done much earlier (rc.firewall)
    #
    return 0
	if (ISFW());

    #
    # First see if we have a topo file; we can generate our own hosts
    # file if we do, saving a lot of load on tmcd in big experiments.
    #
    my $mapfile = "$BOOTDIR/hostmap";
    if (genhostslistfromtopo($mapfile,\@tmccresults) < 0 &&
	tmcc(TMCCCMD_HOSTS, undef, \@tmccresults) < 0) {
	fatal("Could not get hosts file from server!");
    }
    # Important; if no results then do nothing. Do not want to kill
    # the existing hosts file.
    return 0
	if (! @tmccresults);

    if (genhostsfile($pathname, @tmccresults) != 0) {
	fatal("Could not update $pathname!");
    }

    return 0;
}

#
# Shutdown Action.
#
sub doshutdown()
{
    # Nothing to do
}

#
# Node Reconfig Action (without rebooting).
#
sub doreconfig()
{
    doshutdown();
    return doboot();
}

#
# Node cleanup action (node is reset to completely clean state).
#
sub docleanup()
{
    system("$CP -f $DEFAULT $HOSTSFILE");
    if ($?) {
	fatal("Could not copy default $HOSTSFILE into place!");
    }
}
