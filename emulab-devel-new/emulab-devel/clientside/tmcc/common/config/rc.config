#!/usr/bin/perl -w
#
# Copyright (c) 2004-2020 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;

#
# This is the entrypoint to running the config scripts. It would be nice
# to just stick these in a directory and run them all, but order matters
# and I hate naming things so that the order comes up the way I want it!
# Anyway, this script fires off the rc scripts in the proper order.
#
# All of the scripts accept a -j argument since in some cases we run these
# on behalf of a vnode, and the script needs to tell the tmcc library the
# vnodeid for when it talks to tmcd. Otherwise, libtmcc knows when it is
# running *inside* a vnode and sets things up properly for talking to tmcd.
#
sub usage()
{
    print "Usage: " .
	scriptname() . " [-j vnodeid] boot|shutdown|reconfig|reset\n";
    exit(1);
}
my $optlist = "j:dM";
my %options = ();
my $action  = "boot";
my $debug   = 0;
my $vnodeid;
my $updatemasterpasswdfiles = 0;

# Turn off line buffering on output
$| = 1;

# Drag in path stuff so we can find emulab stuff.
BEGIN { require "/etc/emulab/paths.pm"; import emulabpaths; }

# Only root.
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be root to run this script!\n");
}

#
# Load the OS independent support library. It will load the OS dependent
# library and initialize itself. 
# 
use libsetup;
use libtmcc;
use librc;

# Protos.
sub doboot();
sub doshutdown();
sub doreconfig();
sub docleanup();

# Parse command line.
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{'j'})) {
    $vnodeid = $options{'j'};
    libsetup_setvnodeid($vnodeid);
}
if (defined($options{'d'})) {
    $debug++;
}
if (defined($options{'M'})) {
    $updatemasterpasswdfiles = 1;
}
# Allow default above.
if (@ARGV) {
    $action = $ARGV[0];
}

#
# The master list of scripts. Add in the right order! To speed things up
# specify a shorter set for the MFS.
#
my @bootscripts;
my %bootscript_args = ( 'rc.accounts' => $updatemasterpasswdfiles ?
			                 '-M' : '' );

if (MFS()) {
    @bootscripts = ("rc.misc", "rc.localize", "rc.mounts", "rc.accounts", 
		    "rc.hostnames", "rc.keys", "rc.tarfiles", "rc.rpms",
		    "rc.tpmsetup");
}
elsif (FAKEJAILED()) {
    @bootscripts = ("rc.misc", "rc.keys", "rc.route", "rc.tunnels",
		    "rc.ifconfig", "rc.progagent");
}
elsif (WINDOWS()) {
    @bootscripts = ("rc.misc", "rc.localize", "rc.keys", "rc.mounts",
		    "rc.accounts", "rc.topomap", 
		    "rc.route", "rc.ifconfig",
		    "rc.hostnames", "rc.lmhosts", "rc.syncserver", 
		    # rc.progagent is run by a separate service named ProgAgent.
		    # It's started by EmulabStartup after rc.bootsetup runs.
		    "rc.tarfiles", "rc.rpms");
} elsif (STORAGEHOST()) {
    @bootscripts = ("rc.misc","rc.localize","rc.keys");
}
elsif (INDOCKERVM()) {
    @bootscripts = ("rc.misc", "rc.localize", "rc.keys",
		    "rc.blobs", "rc.topomap", "rc.accounts",
		    "rc.route", "rc.tunnels",
		    "rc.trace", "rc.syncserver", "rc.trafgen",
		    "rc.tarfiles", "rc.rpms", "rc.progagent", "rc.linkagent"
		    );
}
else {
    @bootscripts = ("rc.firewall", "rc.tpmsetup",
		    "rc.misc", "rc.localize", "rc.keys",
		    #
		    # local blockstore setup should happen before rc.mounts,
		    # rc.blobs and rc.trace.
		    #
		    "rc.storagelocal",
		    "rc.mounts", "rc.blobs", "rc.topomap", "rc.accounts",
		    "rc.route", "rc.tunnels", "rc.ifconfig", "rc.delays",
		    "rc.hostnames",
		    #
		    # remote blockstore setup should be after rc.ifconfig
		    # and rc.hostnames. rc.storage handles its own mounts,
		    # so it is okay that it is called after rc.mounts.
		    #
		    "rc.storageremote", 
		    "rc.trace", "rc.syncserver", "rc.trafgen",
		    "rc.tarfiles", "rc.rpms", "rc.progagent", "rc.linkagent",
		    "rc.tiptunnels", "rc.motelog", "rc.simulator",
		    "rc.diskagent", "rc.hwcollect", "rc.nodecheck",
		    "rc.wbstore"
		    );
}

# Execute the action.
SWITCH: for ($action) {
    /^boot$/i && do {
	doboot();
	last SWITCH;
    };
    /^shutdown$/i && do {
	doshutdown();
	last SWITCH;
    };
    /^reconfig$/i && do {
	doreconfig();
	last SWITCH;
    };
    /^reset$/i && do {
	docleanup();
	last SWITCH;
    };
    fatal("Invalid action: $action");
}
exit(0);

sub doaction($@)
{
    my ($what, @scripts) = @_;
    
    #
    # Run all the scripts. We run them all, not worrying about individual
    # failure. Right thing to do? Maybe stop on failure?
    #
    my $optarg = (defined($vnodeid) ? "-j $vnodeid" : "");

    #
    # Grab our rc manifest so we can enable/disable/replace this script and
    # run (or not) its hooks.
    #
    my %manifest = ();
    getrcmanifest(\%manifest);

    foreach my $script (@scripts) {
	my $bargs = '';
	if (exists($bootscript_args{$script})
	    && defined($bootscript_args{$script})) {
	    $bargs = $bootscript_args{$script};
	}

	# No need to install all this cruft on the MFS or other small envs.
	next
	    if (!-x "$BINDIR/rc/$script");

	runbootscript(\%manifest,"$BINDIR/rc",$script,$what,"$optarg $bargs $what");
    }
}

#
# Boot Action.
#
sub doboot()
{
    doaction("boot", @bootscripts);
}

#
# Shutdown Action.
#
sub doshutdown()
{
    doaction("shutdown", reverse(@bootscripts));
}

#
# Node Reconfig Action (without rebooting).
#
sub doreconfig()
{
    doshutdown();
    #
    # Must tell tmcc to reload its cache!
    # 
    tmccgetconfig();
    return doboot();
}

#
# Node cleanup action (node is reset to completely clean state).
#
sub docleanup()
{
    doaction("reset", reverse(@bootscripts));
}
