#! /bin/sh
#
# Copyright (c) 2000-2016, 2019 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

. /etc/emulab/paths.sh

#
# Enable ICMP ping-of-death
# Support both the old style (host only) and the new style (host+mask+key)
#
# This is a shell script instead of a perl script since we want to use this
# in the frisbee MFS which does not include perl.
#

IPODINFO=`$BINDIR/tmcc ipodinfo`
if [ -z "$IPODINFO" ]; then
	echo "*** WARNING: no IPOD info, not enabled"
	exit 0
elif ! sysctl net.ipv4.icmp_ipod_enabled > /dev/null 2>&1; then
    #
    # Try to load ipod module.
    #
    modprobe ipod
    if [ $? -ne 0 ]; then
	echo "*** WARNING: no IPOD sysctls, not enabled"
	exit 1
    fi
fi

for token in $IPODINFO; do
	key=${token%%=*}
	value=${token#*=}
	if [ $key = HOST ]; then
		IPOD_HOST_IP="$value"
		IPODHOST=`echo $value | \
			awk -F. '{ val=($1*2^24)+($2*2^16)+($3*2^8)+$4 ; if (val > 2147483647.0) { printf "%.0f\n",val-4294967296 } else { printf "%.0f\n",val } }'`
	elif [ $key = MASK ]; then
		IPOD_MASK_IP="$value"
		IPODMASK=`echo $value | \
			awk -F. '{ val=($1*2^24)+($2*2^16)+($3*2^8)+$4 ; if (val > 2147483647.0) { printf "%.0f\n",val-4294967296 } else { printf "%.0f\n",val } }'`
	elif [ $key = HASH ]; then
		IPODKEY="$value"
	fi
done

version=`sysctl -n net.ipv4.icmp_ipod_version 2>/dev/null`
[ -z "$version" ] && version=1

sysctl -w net.ipv4.icmp_ipod_host=$IPODHOST >/dev/null

if [ $version -gt 1 ]; then
	sysctl -w net.ipv4.icmp_ipod_mask=$IPODMASK >/dev/null
	sysctl -w net.ipv4.icmp_ipod_key=$IPODKEY >/dev/null
	str="Authenticated"
else
	str="Old-style"
fi

sysctl -w net.ipv4.icmp_ipod_enabled=1 >/dev/null

echo "$str IPOD enabled from $IPOD_HOST_IP/$IPOD_MASK_IP"
exit 0
