#!/bin/sh
#
# Copyright (c) 2000-2018 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

# The device is always the same in ONIE.
DISKDEV=/dev/sda

# Special grub env file for our flipping.
EMULABENV=/mnt/onie-boot/emulabenv

# Marker file for MLNX reload. See below.
MLNXRELOAD=/mnt/onie-boot/mlnxreload

if [ -r /etc/emulab/paths.sh ]; then
	. /etc/emulab/paths.sh
else
	BINDIR=/etc/testbed
	BOOTDIR=/etc/testbed
	ETCDIR=/etc/testbed
fi

PLATFORM=`onie-sysinfo -b`
TMCC="$BINDIR/tmcc"
BOSSNAME=`$TMCC bossinfo | cut -d ' ' -f 2`

#
# Extract a variable of interest from the VAR=VALUE string and return value.
# If variable does not exist, return the given default (if provided).
#
getvar() {
    local _VAR=$1
    local _STR=$2
    local _DFL=$3

    for _kv in $_STR; do
	_k=${_kv%%=*}
	if [ -n "$_k" -a "$_k" = "$_VAR" ]; then
	    echo "${_kv##*=}"
	    return 0
	fi
    done
    echo "$_DFL"
    return 0
}

get_value()
{
    local data=$1
    local key=$2

    echo `getvar $key "$data"`
    return 0
}

#
# Zap whatever is installed on the "disk". We do this with parted
# rather then let onie uninstall do it, since it takes forever to
# zap the flash (which we do not want to do anyway). 
#
zap_flash()
{
    echo "Zapping the flash"
    for i in 3 4 5 6 7 8 9 10 11 12 13 14 15; do
	echo "-> clearing partition $i"
	parted -s $DISKDEV rm $i
    done
}

#
# Install the image using the onie installer. The only thing we care
# about in the loadinfo results is the path, which we have to munge
# into a URL into the downloads directory. 
#
write_image()
{
    local imagepath=$1

    $TMCC state RELOADING

    onie-nos-install $imagepath
    rc=$?

    return $rc
}

handle_loadinfo()
{
    local LOADINFO="$1"
    local IMAGEPATH=`get_value "$LOADINFO" PATH`

    #
    # Munge the path into a URL. 
    #
    IMAGENAME=`basename $IMAGEPATH`
    IMAGEPATH="http://$BOSSNAME/downloads/$IMAGENAME"

    echo "Munged image path to $IMAGEPATH";

    zap_flash

    # See ./rc.testbed for an explanation.
    if [ "$PLATFORM" = "mlnx_x86" ]; then
	/bin/touch $MLNXRELOAD
	rc=$?
	if [ $rc -ne 0 ]; then
	    echo "Failed to create $MLNXRELOAD"
	    return 1
	fi
    fi

    write_image $IMAGEPATH || {
	return 1
    }

    if [ "$PLATFORM" = "mlnx_x86" ]; then
	# Ah, we loaded an image that does not kexec, so we returned.
	/bin/rm -f $MLNXRELOAD
    fi
    
    echo "Image load complete at `date`"
    return 0
}

get_loadinfo()
{
	# Occasionally there is some delay before tmcd reports back valid
	# loadinfo, so try repeatedly for 30 seconds and give up if we don't
	# get any data.
	time=30
	while [ $time -gt 0 ]; do
		# Just write it out to a tempfile to avoid extra nasty
		# shell script hacks.
		$TMCC loadinfo > /tmp/loadinfo.out
		[ -s /tmp/loadinfo.out ] && break
		sleep 1
		time=$(( $time - 1 ))
	done
	if [ $time -eq 0 ]; then
		return 1
	fi

	return 0
}

$TMCC state RELOADSETUP

echo "Requesting loadinfo data... "
if ! get_loadinfo; then
	echo "*** Failed to get loadinfo data" 1>&2
	exit 2
fi
echo "Got loadinfo data"

#
# We expect just one image to load.
# If a load fails, we exit non-zero so that the rc script will drop into
# single-user mode.
#
while read line; do
    echo "Loading image"
    echo "  LOADINFO=\"$line\""

    if ! handle_loadinfo "$line"; then
	echo "Failed to load disk, dropping to login prompt at `date`" 1>&2
	exit 1
    fi
done < /tmp/loadinfo.out
echo "`date`: Load finished"

echo "`date`: sending RELOADDONE"
$TMCC state RELOADDONE
echo "`date`: waiting a bit for server to react"
sleep 15;
exit 0

