#!/usr/bin/perl -w
#
# Copyright (c) 2004, 2008 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;

#
# This script is the jail equiv of ../common/rc.bootsetup. It runs
# inside the jail and does a limited set of bootstrapping tasks.
#
sub usage()
{
    print "Usage: " . scriptname() . " boot|shutdown|reconfig|reset\n";
    exit(1);
}
my $optlist = "";
my $action  = "boot";

# Drag in path stuff so we can find emulab stuff.
BEGIN { require "/etc/emulab/paths.pm"; import emulabpaths; }

# Only root.
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be root to run this script!\n");
}

# Script specific goo.
my $RCDIR	 = "$BINDIR/rc";

#
# Load the OS independent support library. It will load the OS dependent
# library and initialize itself.
#
use libsetup;
use libtmcc;
use librc;

# Protos.
sub doboot();
sub doshutdown();
sub doreconfig();
sub docleanup();
sub doplabconfig();
sub BootFatal($);

# Parse command line.
#if (! getopts($optlist, \%options)) {
#    usage();
#}
# Allow default above.
if (@ARGV) {
    $action = $ARGV[0];
}

# Execute the action.
SWITCH: for ($action) {
    /^boot$/i && do {
	doboot();
	last SWITCH;
    };
    /^shutdown$/i && do {
	doshutdown();
	last SWITCH;
    };
    /^reconfig$/i && do {
	doreconfig();
	last SWITCH;
    };
    /^reset$/i && do {
	docleanup();
	last SWITCH;
    };
    BootFatal("Invalid action: $action\n");
}
exit(0);

#
# This version of fatal sends boot status to tmcd, and then generates
# a TBFAILED state transition. 
#
sub BootFatal($)
{
    my ($msg) = @_;
    
    # XXX "--" ensures that -1 is not interpreted as a tmcc cmdline arg
    if (tmcc(TMCCCMD_BOOTERRNO, "-- -1") < 0) {
	print "Error sending boot errno to Emulab Control!\n";
    }
    
    if (tmcc(TMCCCMD_STATE, "TBFAILED") < 0) {
	print "Error sending TBFAILED to Emulab Control!\n";
    }
    exit(-1);
}

#
# Boot Action.
#
sub doboot()
{
    TBDebugTimeStamp("rc.injail starting up");
    
    print("Checking Testbed reservation status\n");
    my ($pid, $eid, $vname) = jailsetup();

    #
    # At this point, if we are a free node just return. Something went wacky.
    #
    if (!defined($pid)) {
	return;
    }

    #
    # Do this *before* config scripts. At the moment we use a hacky test
    # in vnodesetup to see if the watchdog is running, which tells vnodesetup
    # that the vnode has finished setting up. By doing it now, we allow vnode
    # setup to proceed in parallel (okay, at most two are going to partially
    # overlap, but that is better then nothing at all!
    # 
    TBDebugTimeStamp("rc.injail starting watchdog");
    if (-x "$BINDIR/watchdog") {
        print("Starting testbed watchdog daemon\n");
	system("$BINDIR/watchdog start");
	if ($?) {
	    BootFatal("Error running $BINDIR/watchdog");
	}
    }

    #
    # This is where we run all of the config scripts. These talk to the
    # DB and setup the node the way it is supposed to be. 
    # 
    TBDebugTimeStamp("rc.injail running config scripts");
    print("Running config scripts\n");
    system("$RCDIR/rc.config boot");
    if ($?) {
	BootFatal("Error running $RCDIR/rc.config");
    }
    TBDebugTimeStamp("rc.injail done running config scripts");

    # Linktest daemon now runs inside jails.
    if (-x "$RCDIR/rc.linktest") {
	print("Starting linktest daemon\n");
	system("$RCDIR/rc.linktest start");
	if ($?) {
	    BootFatal("Error running $RCDIR/rc.linktest");
	}
    }

    print("Informing the testbed that we are up and running\n");
    if (tmcc(TMCCCMD_STATE, "ISUP") < 0) {
	BootFatal("Error sending ISUP to Emulab Control!");
    }
}

#
# Shutdown Action.
#
sub doshutdown()
{
}

#
# Node Reconfig Action (without rebooting).
#
sub doreconfig()
{
}

#
# Node cleanup action (node is reset to completely clean state).
#
sub docleanup()
{
}

