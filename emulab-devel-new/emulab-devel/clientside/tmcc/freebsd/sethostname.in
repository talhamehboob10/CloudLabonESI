#!/usr/bin/perl -wT
#
# Copyright (c) 2000-2013 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;

#
# Configure variables
#
my $USEPNAME	= "@DISABLE_NAMED_SETUP@";

#
# Set the hostname for the node according to the current experiment.
# Run from /etc/dhclient-exit-hooks.
#
#	usage: sethostname [domain]
#
# We get the domain from dhclient script setup, and pass it through.
# Otherwise, we have no safe way to determine the domain.
# 

# Drag in path stuff so we can find emulab stuff.
BEGIN { require "/etc/emulab/paths.pm"; import emulabpaths; }

#
# Turn off line buffering on output
#
$| = 1;

#
# Load the OS independent support library. It will load the OS dependent
# library and initialize itself. 
# 
use libsetup;
use libtmcc;

# Do not do this on remote nodes. Let their DHCP server or static hostname
# take precedence. We will check to make sure there is a hostname later
# in the bootsetup.
exit(0)
    if (REMOTE());

#
# Check to see if hostname actually set yet. The dhclient exit hook gets
# invoked no matter what, and typically the first or second DHCP fails,
# and then this script runs tmcc, which fails and prints an annoying
# warning.
#
my $curname = `hostname -s`;
if (! ($curname =~ /.+/)) {
    print STDERR "Hostname not set, ignoring...\n";
    exit 0;
}

#
# We assume that we are in the same domain as our boss node.
#
# Note: tmccbossname can fail if the DNS is not responding properly.
# Sometimes this is transient and is caused by the control net interface
# getting tweaked (down/up'ed, speed/duplex changed) during the DHCP process.
# Hence we wait a couple of seconds and retry if this happens.
#
my $bossname = tmccbossname();
if (!$bossname) {
    for (my $i = 1; $i <= 3; $i++) {
	print STDERR "Waiting for DNS...\n";
	sleep($i);
	$bossname = tmccbossname();
	last if ($bossname);
    }
}
if ($bossname =~ /^[^\.]+\.(.*)$/) {
    $domain = ".$1";
}
else {
    $domain = ".foo.net";
}

#
# If testbed is not maintaining DNS aliases, we had better not
# use the nickname for the hostname as it will not resolve.
#
my $nickname;
if ($USEPNAME) {
    chomp($curname);
    $nickname = $curname;
} else {
    $nickname = whatsmynickname();
}
if (! $nickname) {
    print STDERR "No Testbed nickname available!\n";
    exit(0);
}
$nickname = lc($nickname);

#
# Watch for setting to something > 64 chars; breaks almost everywhere.
# Use just the nickname, which will still resolve properly cause of the
# search clause in /etc/resolv.conf. It *CANNOT* be just the vname, since
# that would conflict with experimental interface names in /etc/hosts.
#
my $newhostname = "${nickname}${domain}";
if (!$USEPNAME && length($newhostname) > 64) {
    $newhostname = $nickname;
}
    
print STDERR "Resetting hostname to $newhostname ... ";

if (system("hostname", $newhostname)) {
    print STDERR "*** FAILED!\n";
    exit 1;
}

print STDERR "Done!\n";
exit 0;
