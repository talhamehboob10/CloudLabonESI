#!/usr/bin/perl -w
#
# Copyright (c) 2000-2003 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;

#
# tbshutdown
#
# A simple daemon that starts up automatically, and waits to be killed
# when the system does a killall just before shutting down, rebooting,
# or going single-user. When it gets killed, it sends a notification
# to the testbed.
#

# Drag in path stuff so we can find emulab stuff.
BEGIN { require "/etc/emulab/paths.pm"; import emulabpaths; }

use libtmcc;

# First, we background ourselves (daemonize)
if ( background() ) {
    # parent exits now
    exit(0);
}

# Set up some signal handlers
$SIG{INT}  = \&cleanup;
$SIG{QUIT} = \&cleanup;
$SIG{ABRT} = \&cleanup;
$SIG{TERM} = \&cleanup;
$SIG{KILL} = \&cleanup;

# Then fall asleep until we're sent a signal

sleep;

exit(0);

sub cleanup {
    # This is our signal handler.
    tmcc(TMCCCMD_STATE, "SHUTDOWN");
    exit(0);
}

# Put ourselves into the background so that caller sees immediate response.
sub background {

    $mypid = fork();
    if ($mypid) { return $mypid; }

    # We have to disconnect from the caller by redirecting both STDIN
    # and STDOUT away from the pipe. Otherwise the caller will
    # continue to wait even though the parent has exited.
    open(STDIN, "< /dev/null") or
        die("opening /dev/null for STDIN: $!");

    open(STDERR, ">> /dev/null") or die("opening /dev/null for STDERR: $!");
    open(STDOUT, ">> /dev/null") or die("opening /dev/null for STDOUT: $!");

    return 0;
}
