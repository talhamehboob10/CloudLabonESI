#!/bin/sh
#
# Copyright (c) 2000-2020 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
# Optional flag argument says "do not reboot"
#
reboot=1
if [ $# -eq 1 -a "$1" = "-noreboot" ]; then
    reboot=0
fi

echo "`date`: rc.frisbee starting"

#
# Amount of memory in MB to leave for everyone else in the system.  If you
# get out-of-memory or vm_pager error while running frisbee, increase this.
#
RESIDMEM=32

#
# Maximum socket buffer size in KB.
# Big enough to buffer a whole chunk.
#
MAXSOCKBUF=1024

if [ -r /etc/emulab/paths.sh ]; then
	. /etc/emulab/paths.sh
else
	BINDIR=/etc/testbed
	BOOTDIR=/etc/testbed
	ETCDIR=/etc/testbed
fi

# Behave a little different on widearea nodes.
isrem=0
if [ -e $ETCDIR/isrem ]; then
    isrem=1
fi

#
# Extract a variable of interest from the VAR=VALUE string and return value.
# If variable does not exist, return the given default (if provided).
#
getvar() {
    _VAR=$1
    _STR=$2
    _DFL=$3

    for _kv in $_STR; do
	_k=${_kv%%=*}
	if [ -n "$_k" -a "$_k" = "$_VAR" ]; then
	    echo "${_kv##*=}"
	    return 0
	fi
    done
    echo "$_DFL"
    return 0
}

#
# Update the MBR of the given disk to the indicated "version."
#
# XXX this is somewhat of a hack right now.  We recognize three
# versions of the MBR:
#	v1 (partition 1 size 6281352)
#	v2 (partition 1 size 12305790)
#	v3 (partition 1 size 33554432)
# Currently we only install a new MBR if the existing one is the
# wrong size or if ALWAYS is specified, just in case the user has
# customized the boot program.
#
tweakmbr() {
    _DSK=$1
    _NEW=$2
    _ALWAYS=$3

    dd if=/dev/$_DSK of=/dev/null bs=512 count=1 2>/dev/null || {
	echo "WARNING: could not read from $_DSK, MBR not changed"
	return
    }

    _size=`fdisk -s $_DSK 2>/dev/null | sed -n -e 's/^ *1: *[0-9][0-9]* *\([0-9][0-9]*\).*$/\1/p'`
    case ${_size}s in
    6281352s)
	_CUR=1
	;;
    12305790s)
	_CUR=2
	;;
    33554432s)
	_CUR=3
	;;
    s)
        # special case: no part1 so probably no MBR at all, make sure we install
	echo "Found no MBR on $_DSK, installing version $_NEW"
	_CUR=1000000
	;;
    *)
        if [ $_ALWAYS -ne 0 ]; then
	    echo "WARNING: overwriting unknown MBR on $_DSK with version $_NEW"
	    _CUR=1000000
	else
	    echo "WARNING: custom MBR on $_DSK, not changed"
	    return
	fi
    	;;
    esac

    if [ $_ALWAYS -eq 0 -a $_CUR = $_NEW ]; then
	return
    fi

    # now set it if we can
    if [ ! -r "/etc/emulab/mbr${_NEW}.dd" ]; then
	echo "WARNING: cannot find MBR version $_NEW, not installed"
	return
    fi

    echo "Installing MBR version $_NEW ..."
    dd if=/etc/emulab/mbr${_NEW}.dd of=/dev/$_DSK bs=512 count=1
}

#
# XXX Use sysctl info if available.
# Do to the async nature of activity in booting, dmesg.boot info may be
# interleaved. E.g., we often see:
#    da1: 300.000MB/s transfersda0: 476940MB (976773168 512 byte sectors)
# which means we won't see da0 as a disk using the sed RE.
#
find_disks() {
    _DISKS=`sysctl -n kern.disks 2>/dev/null`
    if [ -z "$_DISKS" ]; then
	for d in `sed -n 's/^\([a-z]*[0-9][0-9]*\): [0-9][0-9]*MB.*/\1/p' /var/run/dmesg.boot`; do
	    case $d in
		ad*|da*|ar*|aacd*|amrd*|mfid*|mfisyspd*|nvd*) _DISKS="$_DISKS $d"
	    esac
	done
    fi

    echo $_DISKS
}

#
# Function to zero all potential superblocks in the DOS partitions that
# could interfere with the OSes on the image being loaded.
#
# FreeBSD 4 or 5 goes out of its way to make this hard.  In FBSD4, we
# cannot overwrite the beginning of partitions that have a legit superblock.
# In FBSD5, DOS partitions that have a zero type cannot even be accessed.
# So we have to use the whole-disk special file using offsets extracted
# via fdisk.
#
zapsuperblocks() {
    _DSK=$1

    echo "Invalidating old potential superblocks on $_DSK"
    if [ -x "$BINDIR/zapdisk" ]; then
	$BINDIR/zapdisk -v -SZ /dev/$_DSK
	return
    fi

    # XXX fall back to the old way

    #
    # Note we are not overly concerned about the consequences of misparsing
    # the fdisk output.  If we whack random blocks, it doesn't hurt anything.
    #
    offs=`fdisk -s $_DSK 2>/dev/null | sed -n -e 's/^[ 0-9]*: *\([0-9]*\).*$/\1/p'`

    if [ x"$offs" = x ]; then
        return
    fi

    echo -n "Invalidating old potential superblocks on $_DSK: "
    for off in $offs; do
        echo -n "$off "
	dd if=/dev/zero of=/dev/${_DSK} oseek=$off count=16 >/dev/null 2>&1 || {
	    echo "WARNING: failed to invalidate $off"
	}
    done
    echo ""

    return
}

#
# Function to load a single image on a disk
#
loadone() {
    _DISK=$1
    _PART=$2
    _LOADINFO=$3
    _NUM=$4

    echo "Loading image #$_NUM"
    echo "  LOADINFO=\"$_LOADINFO\""

    ADDR=`getvar ADDR "$_LOADINFO"`
    SERVER=`getvar SERVER "$_LOADINFO" $BOSSIP`
    PARTOS=`getvar PARTOS "$_LOADINFO" unknown`
    ZFILL=`getvar ZFILL "$_LOADINFO" 0`
    MBRVERS=`getvar MBRVERS "$_LOADINFO" 1`
    PREPARE=`getvar PREPARE "$_LOADINFO" 0`
    IMAGEID=`getvar IMAGEID "$_LOADINFO"`
    KEEPALIVE=`getvar KEEPALIVE "$_LOADINFO"`
    OSVERSION=`getvar OSVERSION "$_LOADINFO" 0`
    HEARTBEAT=`getvar HEARTBEAT "$_LOADINFO" 0`

    #
    # XXX If KEEPALIVE is not explicitly set, attempt to intuit a value.
    #
    # It appears that FreeBSD 8.x's IGMP v3 implementation doesn't
    # properly sent V2 reports when it is connected to a V2-only querier
    # (switch). It insists on sending V3 reports event when the default
    # version is set to 2. So if detect that we have the newer IGMP
    # implementation, we will use the V2 keep alive mechanism in the
    # frisbee client.
    #
    if [ -z "$KEEPALIVE" ]; then
	igmpversion=`sysctl -n net.inet.igmp.default_version 2>/dev/null`
	if [ -n "$igmpversion" ]; then
	    echo "WARNING: possible IGMP issues; using frisbee keep alive timer"
	    KEEPALIVE=30
	else
	    KEEPALIVE=0
	fi
    fi

    #
    # One of ADDR or IMAGEID must be set.
    #
    if [ -n "$IMAGEID" ]; then
        ADDR=""
    	# IMAGEID=pid,gid,imagename
	pid=`echo $IMAGEID | awk -F, '{ printf $1 }'`
	name=`echo $IMAGEID | awk -F, '{ printf $3 }'`
	IMAGEID="$pid/$name"
    elif [ -z "$ADDR" ]; then
	echo "Unable to get imageid or address for loading image"
	return 1
    fi

    if [ "$PART" != "0" ]; then
	SLICE="-s $PART"
	case $PARTOS in
	FreeBSD)
		SLICE="$SLICE -D 165"
		PTYPE=165
		;;
	OpenBSD)
		SLICE="$SLICE -D 166"
		PTYPE=166
		;;
	Fedora|Linux)
		SLICE="$SLICE -D 131"
		PTYPE=131
		;;
	*)
		;;
	esac
    fi

    #
    # set memory limits:
    #	allow $RESIDMEM MB for non-frisbee stuff
    #	split remaining memory (min of 2MB) between network/disk buffering
    #
    MEMARGS=""
    HOSTMEM=`sysctl -n hw.usermem`
    HOSTMEM=`expr $HOSTMEM / 1048576`
    if [ $HOSTMEM -ge `expr $RESIDMEM + 2` ]; then
	HOSTMEM=`expr $HOSTMEM - $RESIDMEM`
	KBYTES=`expr $HOSTMEM \* 1024`
	DATASEGSZ=`ulimit -d`
	if [ $KBYTES -gt $DATASEGSZ ]; then
	    KBYTES=$DATASEGSZ
	    HOSTMEM=`expr $KBYTES / 1024`
	    echo "WARNING: kernel limits buffering to $HOSTMEM MB"
	fi
	ulimit -v $KBYTES

	# Let the client split up the memory
	MEMARGS="-M $HOSTMEM"
    fi


    #
    # Allow for large-ish socketbuf for frisbee
    # NOTE: add 12.5% slop to get socketbuf of the appropriate size
    # NOTE: if the sysctl fails, it doesn't matter as frisbee will downsize
    #
    osbs=`sysctl -n kern.ipc.maxsockbuf`
    sbs=`expr $MAXSOCKBUF \* 1024`
    sbs=`expr $sbs \+ \( $sbs / 8 \)`
    if [ $sbs -gt $osbs ]; then
	sysctl kern.ipc.maxsockbuf=$sbs
    fi

    # NOTE: make sure you install the latest frisbee client for -k!
    MEMARGS="$MEMARGS -k $MAXSOCKBUF"

    #
    # Make sure the necessary device files exist (only necessary on
    # FreeBSD 4.x).  Note that we create partition files for all slices,
    # not just slice 1, for the benefit of the slicefix script.
    #
    if [ -x /dev/MAKEDEV -a ! -e /dev/$DISK ]; then
	(cd /dev; ./MAKEDEV $DISK ${DISK}s2a ${DISK}s3a ${DISK}s4a)
    fi

    if [ x"$ADDR" != x ]; then
	isurl=`echo $ADDR | grep http -`
	ispath=`echo $ADDR | grep '^/' -`

	if [ x"$isurl" != x ]; then
	    echo "Need to download $ADDR"

	    isurl=1
	    ispath=0
	    if [ ! -d /images ]; then
		echo "Need to create or mount /images directory!"
		return 1
	    fi

	    #
	    # This needs a lot more work ...
	    #
	    imagefile=`echo $ADDR | sed -e 's,^http[s]*://[^/]*/,,'`
	    imagefile="/images/$imagefile"
	elif [ x"$ispath" != x ]; then
	    isurl=0
	    ispath=1

	    if [ ! -e $ADDR ]; then
		echo "$ADDR does not exist!"
		return 1
	    fi
	    imagefile="$ADDR"
	else
	    PORT=`echo $ADDR | awk -F: '{ printf $2 }'`
	    MCAST=`echo $ADDR | awk -F: '{ printf $1 }'`
	    if [ -e $BOOTDIR/myip ]; then
		MCASTIF="-i `cat $BOOTDIR/myip`"
	    else
		MCASTIF=""
	    fi
	    MCASTADDR="-m $MCAST -p $PORT"
	    IMAGEID="$MCASTIF $MCASTADDR"
	    isurl=0
	    ispath=0
	fi
    else
	#
	# Note: if you want to use broadcast rather that multicast as
	# the distribution method, add "-X bcast" to the IMAGEID= below.
	#
        IMAGEID="-B 30 -F $IMAGEID"
	isurl=0
	ispath=0
    fi

    #
    # ZFILL==1: use frisbee
    # ZFILL==2: separate disk-wipe pass (not yet implemented)
    #
    if [ "$ZFILL" != "0" ]; then
	ZFILL="-z"
    else
	ZFILL=""
    fi

    if [ "$KEEPALIVE" != "0" ]; then
	KA="-K $KEEPALIVE"
    else
	KA=""
    fi

    #
    # Current semantics:
    # HEARTBEAT==0: no heartbeat
    # ow: enable heartbeat, but let server dictate (-H 0)
    #
    HB=""
    case "$HEARTBEAT" in
	''|*[!0-9]*)
	    echo "Ignoring bogus HEARTBEAT value \"$HEARTBEAT\""
	    ;;
	*)
	    if [ $HEARTBEAT -gt 0 ]; then
		HB="-H 0"
	    fi
	    ;;
    esac

    #
    # Make sure the write-cache is enabled on SCSI disks.  It makes a
    # huge difference.  We don't worry about data corruption in the
    # case of a crash, because we will just reload the disk again anyway
    # in that situation.
    #
    turncacheoff=0
    case $DISK in
    da*)
	if [ -x $BINDIR/camwce ] && $BINDIR/camwce on $DISK; then
	    turncacheoff=1;
	fi
	;;
    esac

    #
    # For slice images, ensure that the MBR is the correct version
    # and replace if not.
    #
    if [ $_NUM -eq 0 ]; then
	if [ "$PART" != "0" ]; then
	    tweakmbr $DISK $MBRVERS $PREPARE
	fi
        FIRSTMBR=$MBRVERS
    else
	if [ "$FIRSTMBR" != "$MBRVERS" ]; then
	    echo "MBR Mismatch: First MBR is \"$FIRSTMBR\" while image #$_NUM is \"$MBRVERS\""
	fi
    fi

    #
    # If a remote node and we have a URL, make sure that we have a place
    # to put it. Done after the MBR tweak of course. Then download the URL.
    #
    if [ $isrem -eq 1 -a $isurl -eq 1 ]; then
	echo "Downloading image \'$ADDR\' to /images directory ..."
	$BINDIR/mkextrafs.pl -c -s 4 -r $DISK /images || {
	    # XXX run growdisk to ensure we have a partition in the MBR
	    $BINDIR/growdisk -vW /dev/$DISK >/dev/null 2>&1
	    $BINDIR/mkextrafs.pl -n -f -s 4 -r $DISK /images || {
		echo "Could not create /images partition"
		return 1
	    }
	}
	wget -nv -N -P /images "$ADDR"
	wstat=$?
	case $wstat in
	0)
	    echo "wget succeeded getting the image"
	    ;;
	*)
	    echo "wget failed, status $wstat"
	    return 1
	    ;;
	esac
    fi

    #
    # If not zeroing the disk and we are loading a full disk image
    # we need to ensure that we at least invalidate any old superblocks
    # that might leak through (most likely in partition 4 which isn't
    # touched by our current image).  We do this before running frisbee
    # so that any legit filesystems loaded from the image work.
    #
    # Since we do it before frisbee, we are counting on the current
    # MBR being the same as the MBR being layed down.  While not
    # a reasonable assumption in general, it mostly works in our
    # environment and at least won't hurt anything if not true.
    #
    if [ $PREPARE -ne 0 -o \
         \( $isrem -eq 0 -a x"$ZFILL" = x -a "$PART" = "0" \) ]; then
	zapsuperblocks $DISK
    fi

    if [ x"$imagefile" != x ]; then
	echo "`date`: Running /usr/local/bin/imageunzip -o -O -W 32 $ZFILL $imagefile /dev/${DISK}s${PART}"
	/usr/local/bin/imageunzip -o -O -W 32 $ZFILL $imagefile /dev/${DISK}s${PART}
    else
	_ARGS="-S $SERVER $MEMARGS $KA $HB $ZFILL $SLICE"
	echo "`date`: Running $BINDIR/frisbee $_ARGS $IMAGEID /dev/$DISK"
	$BINDIR/frisbee $_ARGS $IMAGEID /dev/$DISK
    fi
    fstat=$?

    #
    # If we mounted a partition from the disk to store the image,
    # we must unmount it now so that slicefix and others don't fail
    # due to an in-use partition.
    #
    if [ $isrem -eq 1 -a $isurl -eq 1 ]; then
	umount /images || {
	    echo "WARNING: could not unmount /images"
	}
    fi

    #
    # Turn the cache back off if we turned it on.
    # Is this sufficient to ensure the cache gets flushed?
    #
    if [ $turncacheoff -eq 1 ]; then
	$BINDIR/camwce off $DISK
    fi

    case $fstat in
    0)
	;;
    *)
	echo "Frisbee run failed, status $fstat"
	;;
    esac
    return $fstat
}

#
# Run slicefix on the indicated partition
#
fixone() {
    DISK=$1
    PART=$2
    iline=$3

    echo "`date`: Adjusting slice-related files on $DISK slice $PART"

    export SLICEFIX_ACPI=`getvar ACPI "$iline" unknown`
    export SLICEFIX_ASF=`getvar ASF "$iline" unknown`
    export SLICEFIX_NOCLFLUSH=`getvar NOCLFLUSH "$iline" unknown`
    export SLICEFIX_VGAONLY=`getvar VGAONLY "$iline" unknown`
    export SLICEFIX_CONSOLE=`getvar CONSOLE "$iline" unknown`
    export SLICEFIX_BIOSDISK=`getvar BIOSDISK "$iline"`
    export SLICEFIX_DOM0MEM=`getvar DOM0MEM "$iline" unknown`
    export SLICEFIX_DISABLEIF=`getvar DISABLEIF "$iline"`

    #
    # XXX stop complaining about potential UFS1 problems
    # unless we are loading old FBSD4xx image.
    #
    _os=`getvar PARTOS "$iline" unknown`;
    _osv=`getvar OSVERSION "$iline" 0`;
    case "$_os/$_osv" in
    FreeBSD/4.*)
	export SLICEFIX_OLDFBSD=1
	;;
    esac

    $BINDIR/slicefix $PART $DISK
    return $?
}

$BINDIR/tmcc state RELOADSETUP

BOSSINFO=`$BINDIR/tmcc bossinfo`

# Can we run nodecheck?
NODECHECK=0

# See if we are in the reloading experiment
INRELOADING=0
case `$BINDIR/tmcc status` in
*ALLOCATED=emulab-ops/reloading*)
    INRELOADING=1
    NODECHECK=1
    ;;
esac

BOSSIP=`echo $BOSSINFO | awk '{ print $2 }'`

NTPIP=`grep -w ntp1 /etc/hosts 2>/dev/null | awk '{ print $1 }'`
if [ -z "$NTPIP" ]; then
    NTPIP=$BOSSIP
fi
if [ -x /usr/sbin/ntpdate ]; then
	/usr/sbin/ntpdate -b $NTPIP >/dev/null 2>&1
fi

# Enable IPoD
if [ -x $BINDIR/rc.ipod ]; then
	$BINDIR/rc.ipod
fi

#
# Assign each line (one image) to one of the positional parameters.
# This is done by setting IFS to a newline and using set.
# XXX there must be a better way to do this!
#
OIFS="$IFS"
IFS='
'
set -- `$BINDIR/tmcc loadinfo`
IFS="$OIFS"
if [ -z "$1" ]; then
    echo "No load information for node"
    exit 1
fi

$BINDIR/tmcc state RELOADING

#
# Handle full reloads when not in the reloading experiment. This is
# indicated by PREPARE=2.
#
# Since the PREPARE= attribute will be the same for each line of the image,
# we only need look at the first line.
#
if [ $INRELOADING -eq 0 ]; then
    _PREPARE=`getvar PREPARE "$1" 0`
    if [ $_PREPARE -eq 2 ]; then
	INRELOADING=1
    fi
fi

#
# Handle disk TRIMing.
#
# The TRIM= attribute will be the same for each line of the image,
# so we only need look at the first line. We also only want to do this
# once before loading the first image!
#
# If PREPARE is set, we TRIM the entire disk, even for a partition load.
# This will smoke the MBR, but it doesn't matter in the prepare case since
# the MBR would be overwritten anyway.
#
TRIM=`getvar TRIM "$1" 0`
if [ $TRIM -ne 0 ]; then
    _DISK=`getvar DISK "$1" ad0`
    _PART=`getvar PART "$1" 0`
    _PREPARE=`getvar PREPARE "$1" 0`
    _PARG=""
    if [ $INRELOADING -eq 0 -a $_PART -ne 0 -a $_PREPARE -eq 0 ]; then
	_PARG="-p $_PART"
    fi
    echo "`date`: Erasing /dev/$_DISK..."
    if [ ! -x "$BINDIR/zapdisk" ] || ! zapdisk -v -EZ $_PARG /dev/$_DISK; then
	echo "`date`: WARNING: Erase of /dev/$_DISK failed"
    else
	echo "`date`: Erase of /dev/$_DISK done"
    fi
fi

#
# HACK ALERT: If we're reloading we need to zap the superblocks and
# MBRs of any other disks in the system.  This is to prevent Linux from
# finding an old filesystem with the same label or UUID and mounting
# that instead of the right one.  We skip the disks that are mounted
# and the disk we're going to write to.
#
# DOUBLE HACK ALERT: Changed this to zap all disks to avoid having
# to figure out what the other disks are when loading multiple images.
# Since a new MBR will be laid down anyway there is no harm in doing
# this as long as we are sure we are in the reloading experiment.
#
if [ $INRELOADING -eq 1 ]; then
    disks=`find_disks`
    for d in $disks; do
	#[ $d = $DISK ] && continue
	mount | grep "^/dev/$d" >/dev/null && continue
	if [ -x "$BINDIR/zapdisk" ]; then
	    echo "Invalidating superblocks and MBR/GPT on $d"
	    $BINDIR/zapdisk -v -SBZ /dev/$d
	else
	    zapsuperblocks $d
	    echo "Invalidating MBR/GPT on $d"
	    dd if=/dev/zero of=/dev/$d bs=512 count=16
	fi
    done

    #
    # If we have nodecheck, run it. This allows us to both collect HW info
    # (if nodecheck "collect" is enabled in the DB) and to run a destructive
    # disk write speed test (as part of a nodecheck "check" operation).
    #
    if [ -x $BINDIR/rc.nodecheck -a $NODECHECK -eq 1 ]; then
	$BINDIR/rc.nodecheck boot
    fi
fi

#
# Load each image in turn.
# If a load fails, we exit non-zero so that the rc script will drop into
# single-user mode.  If all loads succeed we either reboot or continue with
# the rc script as desired by the caller.
#
NUM=0
devs=""
while [ -n "$1" ]; do
    iline=$1

    #
    # Remember the info for this partition line so we can run slicefix later.
    # Yes, we can load the same partition multiple times due to our delta
    # image mechanism.
    #
    # Note that we always overwrite the saved info so we wind up with the
    # info for the last image loaded on the slice. Thus we assume that the
    # last image loaded has the right info. Probably this will never matter
    # as delta images should always have the same attributes as the full
    # image loaded.
    #
    DISK=`getvar DISK "$iline" ad0`
    PART=`getvar PART "$iline" 0`
    dev="${DISK}_${PART}"
    devs="$devs $dev"
    eval ${dev}_info=\"$iline\"

    loadone $DISK $PART "$iline" $NUM || {
	echo "`date`: Failed to load disk, dropping to login prompt"
        exit 1
    }
    echo "`date`: Image #$_NUM load complete"
    NUM=`expr $NUM + 1`
    shift
done
echo "`date`: Frisbee run(s) finished"

echo "`date`: Running slicefix"
for dev in $devs; do
    DISK=${dev%%_*}
    PART=${dev##*_}
    eval iline=\$${dev}_info
    if [ -n "$iline" ]; then
	fixone $DISK $PART "$iline" || {
	    echo "`date`: WARNING: slicefix on $DISK slice $PART failed"
	}
	# whack the info so we don't slicefix again
	eval ${dev}_info=\"\"
    fi
done
echo "`date`: slicefix run(s) done"

#
# Note that if growdisk succeeds, then the newly defined partition might
# contain metadata from a previous use. We would not have picked up on this
# earlier because the partition was not defined yet. So in our usual paranoid
# fashion, zap that partition if and only if we are in the reloading experiment.
#
echo "`date`: Resizing final disk partition"
out=`$BINDIR/growdisk -vW /dev/$DISK`
stat=$?
echo $out
if [ $INRELOADING -eq 1 -a $stat -eq 0 ]; then
    xpart=`echo $out | sed -n -e 's/.*defining partition \([0-9]\) .*/\1/p'`
    if [ -n "$xpart" ]; then
	echo "Zapping newly created extra partition $xpart"
	if [ -x "$BINDIR/zapdisk" ]; then
	    echo "Invalidating superblocks and MBR/GPT on $DISK partition $xpart"
	    $BINDIR/zapdisk -v -p $xpart -SZ /dev/$DISK
	else
	    off=`echo $out | sed -n -e 's/.*start=\([0-9][0-9]*\),.*/\1/p'`
            dd if=/dev/zero of=/dev/$DISK oseek=$off count=16 >/dev/null 2>&1
	fi
	if [ $? -ne 0 ]; then
	    echo "WARNING: failed to invalidate extra partition $xpart at $off"
	fi
    fi
fi

#
# If requested to reboot, do so.
#
# Note: there is a race condition with stated here.
# If we reboot immediately after sending RELOADDONE,
# it is possible that, under heavy server load, we will
# finish the reboot and reach the bootinfo stage before
# stated gets and processes our RELOADDONE.  So now we
# wait around after sending the RELOADDONE.  stated should
# force us to reboot when the transition takes place.
# For backward compatibility we use a new state: RELOADDONEV2.
# For paranoia we just wait around for awhile and then
# reboot anyway, just in case stated's reboot fails for
# some reason.
#
if [ $reboot -eq 1 ]; then
    echo "`date`: Waiting for server to reboot us ..."
    sleep 1
    $BINDIR/tmcc state RELOADDONEV2
    if [ $isrem -eq 1 ]; then
	sleep 30
    else
	sleep 300
    fi
    echo "`date`: No response from server, rebooting myself ..."
    /sbin/reboot
    sleep 100
else
    $BINDIR/tmcc state RELOADDONE
fi

echo "`date`: rc.frisbee finished"

exit 0
