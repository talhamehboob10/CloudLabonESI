/*
 * Copyright (c) 2004 University of Utah and the Flux Group.
 * 
 * {{{EMULAB-LICENSE
 * 
 * This file is part of the Emulab network testbed software.
 * 
 * This file is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or (at
 * your option) any later version.
 * 
 * This file is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this file.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * }}}
 */

/**
 * @file error-record.h
 *
 * Header file for error records, which are used to track errors caused by a
 * particular event.
 */

#ifndef _error_record_h
#define _error_record_h

#include "event-sched.h"
#include "listNode.h"

#ifdef __cplusplus
extern "C" {
#endif

/**
 * Structure used to track errors generated by an event.
 */
struct _error_record {
	struct lnNode er_link;	/*< Linked list node. */
	struct agent *er_agent;	/*< The agent that encountered an error. */
	long er_token;		/*< The unique token for the event that caused
				  the error.  Used to tie the event to the log
				  files. */
	int er_error;		/*< The error code returned in the COMPLETED
                                  event. */
};

/**
 * Pointer type for the _error_record structure.
 */
typedef struct _error_record *error_record_t;

/**
 * Create an error record object and initialize it with the default values.
 * Note that the object must still be initialized with an agent, token number,
 * and error number before it can be passed to the other functions (except
 * delete_error_record).
 *
 * @return A pointer to an initialized _error_record struct.
 */
error_record_t create_error_record(void);

/**
 * Delete an error record object.
 *
 * @param er The initialized object to delete.
 *
 * @see delete_error_records
 */
void delete_error_record(error_record_t er);

/**
 * Check an error record object against the following invariants:
 *
 * @li er_agent != NULL
 * @li er_token != -1
 *
 * If the object does not pass these tests an assert will be blown.
 *
 * @param er The error record object to check.
 * @return True
 */
int error_record_invariant(error_record_t er);

/**
 * Empty a list of error records and delete the objects.
 *
 * @param list The list of error records to delete.
 *
 * @see delete_error_record
 */
void delete_error_records(struct lnList *list);

/**
 * Dump an error record to the given FILE object.  The output generated depends
 * on the type of agent that encountered an error.  Currently, the only type
 * supported is a program-agent, which writes a digested version of the
 * "status" file and the tail of any log files.  Note that any files to be
 * dumped must exist locally before calling this function.
 *
 * @param er The error record to dump.
 * @param out The FILE to write the error information and log tails to.
 * @return Zero on success, negative one and an initialized errno otherwise.
 *
 * @see dump_error_records
 * @see send_report
 * @see dump_agent_status
 * @see tail_file
 */
int dump_error_record(error_record_t er, FILE *out);

/**
 * Dump a list of error records to the given FILE object using
 * dump_error_record.
 *
 * @param list The list of error records to dump.
 * @param out The FILE to write the error information and log tails to.
 * @return Zero on success, negative one and an initialized errno otherwise.
 *
 * @see dump_error_record
 */
int dump_error_records(struct lnList *list, FILE *out);

#ifdef __cplusplus
}
#endif

#endif
