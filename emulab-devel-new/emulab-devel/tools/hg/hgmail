#!/usr/bin/perl -w
#
# Copyright (c) 2009-2011 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
# To set this script up:
# 1) Set this script as the changegroup hook in your .hg/hgrc file.
# 2) Set configuration options by editng the values of variables directly
#    below.
# 3) Test it by running it with the -d and -t options, which will not send
#    mail and will give you a chance to make sure everything looks right
#
# TODO:
#    Users can add notifications for themselves
#

use strict;
use IPC::Open2;
use POSIX 'setsid';
use Getopt::Long;
sub get_config($$);
my $CONFIGBASE = "hgmail";

######################################################################
# Configuration Options
# Options that use get_config can be set using 'hg --config' - if not
# set, the second parameter is used as the default
######################################################################

#
# If debugging is enabled, prints a lot of messages and doesn't actually send
# mail.
#
my $debug = get_config("debug",undef);

#
# If set, just picks up the most recent commits instead of reading them from
# stdin. Note that this one doesn't look in the hg config; that wouldn't
# make any sense.
#
my $testmode = undef;

#
# Command-line options - have to do this before setting other options, since
# we want to be able to turn on debugging early
#
my %opt;
Getopt::Long::Configure("no_ignore_case");
if (!GetOptions(\%opt, 'd', 'h', 't', 'o=s@') || @ARGV || $opt{h}) {
    print STDERR "Usage: hgmail [-h|-d]\n";
    print STDERR "  -h     this message\n";
    print STDERR "  -d     enable debugging output and don't send mail\n";
    print STDERR "  -t     test mode - operate on last 3 commits to master\n";
    print STDERR "  -o o=v give option o the value v (may be given multiple\n";
    print STDERR "         times)\n";
    exit 1;
}

my $testbranch = "default";
if ($opt{d}) { $debug    = 1; }
if ($opt{t}) { $testmode = 1; }

#
# Name of this repository - set it to a string to get it included in the
# mail subject line and the X-Hg-Repo header
#
my $reponame = get_config("reponame",undef);

#
# Data structure mapping branch names and path names to email address. Each
# entry is a triple:
#    Branch name
#    File path
#    Mail address
# If *both* the branch and path match for a commit, mail will be sent to the
# associated address. The branch and paths are interpreted as perl regexps,
# with the special value 'undef' matching anything at all. Any of these may
# be array references: for the branch and path fields, if *any* of the
# elements in the array match, the field is considered to match. For the email
# address field, the mail will be sent to all addresses in the array.
#
# *NOTE* This are perl regexps, not shell globs! *NOTE*
# *NOTE* This can also be read from a file - see below *NOTE*
#
my @mailto = (
  # Branch              # Path             # Send mail to
# Examples
# [ undef,              undef,             'cvs-testbed@flux.utah.edu' ],
# [ undef,              'snmpit',         ['ricci@flux.utah.edu',
#                                          'sklower@vangogh.cs.berkeley.edu']],
# [ ['^ricci-',
#    '^test-'],         'assign/',         'ricci+assign@flux.utah.edu']
);

#
# If set, look in a file for the @mailto structure.  This file should be
# executable perl code that returns an array following the same format as the
# @mailto array below. For example, the file could contain:
# ( [ undef, undef, 'me@example.com'] )
#
# *NOTE* If this is set, overrides the @mailto setting above *NOTE*
#
my $mailconfigfile = get_config("mailconfigfile",undef);

#
# Default mail address - if none of the more specific regular expressions
# match, send to this address
#
my $defmail = get_config("defmail",undef);

#
# If set, *always* send mail to this address (even if one or more regexps
# match). ($defmail will still be used if no regexps match)
#
my @alwaysmail = get_config("alwaysmail",undef);

#
# This works exactly like alwaysmail, but it causes seperate mail to get sent
# to each address (this mail is also seperate from the 'main' message that will
# get sent to all of the other addresses)
#
my @archivemail = get_config("archivemail",undef);

#
# If set, set the 'Reply-To' header in the mail, so that discussion can
# take place on, for example, a particular development mailing list
#
my $replyto = get_config("replyto",undef);

#
# If set to true, detach and run in background - the push doesn't return until
# the hook finishes, so doing this means the pusher doesn't have to wait for
# us to finish
# Note: Not well tested!
#
my $detach = get_config("detach",undef);

#
# If set to true, send a separate mail message for every single commit. If
# false, pushes of multiple commits along a branch get included in the same
# mail.
#
my $separate_mail = get_config("separatemail",undef);

#
# If set, these arguments will be passed *in addition* to the regular arguments
# to 'hg log' to produce descriptions of commits
#
my $showcommit_extra = get_config("showcommitextra",undef);

#
# If set, check all commit objects to see if they exist in the repository
# at the specified path.  If a commit object exists in this repository,
# do not include its log in the email message.
my $exclude_repo = get_config("excluderepo",undef);

#
# If set, these values will be used to create 'X-Hg-Repo-Keyword' headers, one
# for each value.  This is to facilitate filtering of commit mails for those only
# interested in certain projects.
#
my @repo_keywords = get_config("keyword",undef);

######################################################################
# Constants
######################################################################

#
# Programs we use
#
my $HG = "hg";
my $SENDMAIL = get_config("sendmail","sendmail");
my $HOSTNAME = get_config("hostname","hostname");

#
# Tired of typing this and getting it wrong
#
my $STDERRNULL = " 2> /dev/null";

######################################################################
# Function Prototypes
######################################################################
sub changed_files(@);
sub get_mail_addresses($@);
sub uniq(@);
sub flatten_arrayref($);
sub commit_mail($\@@);
sub get_commits($$);
sub send_mail($$@);
sub debug(@);
sub object_exists($$);
sub filter_out_objects_in_repo($@);
sub generate_messageid();

######################################################################
# Main Body
######################################################################

debug("starting");

#
# Read from the mail config file, if requested. We do this before detaching
# so that we can report an error if one occurs.
#
if ($mailconfigfile) {
    #
    # We open the file, read the contents, then eval them. If we didn't get any
    # errors, the result becomes the new contents of the @mailto array
    #
    if (!open(MCF,"<$mailconfigfile")) {
        warn "hgmail: Unable to open config file $mailconfigfile - $!\n";
    } else {
        my @mailcode = <MCF>;
        close MCF;

        #
        # Have to turn array back into a single string before we can call
        # eval on it. Put the result in a temp. variable so that we don't
        # overwrite @mailto if there is an error
        #
        my @mailconfig = eval join("\n",@mailcode);

        #
        # If there were any errors in the eval, they will be found in the magic
        # variable $@ - however, they will also have been printed to stderr, so
        # don't print again
        #
        if ($@) {
            warn "hgmail: Error in $mailconfigfile: $@\n";
        } else {
            @mailto = @mailconfig;
        }
    }
}

#
# Detach?
#
if ($detach && !$debug) {
    # Stolen from perlipc manpage
    chdir '/'               or die "Can't chdir to /: $!";
    open STDIN, '/dev/null' or die "Can't read /dev/null: $!";
    open STDOUT, '>/dev/null'
                            or die "Can't write to /dev/null: $!";
    defined(my $pid = fork) or die "Can't fork: $!";
    exit if $pid;
    setsid                  or die "Can't start a new session: $!";
    open STDERR, '>&STDOUT' or die "Can't dup stdout: $!";
}

#
# Loop over all of the references we got on stdin
#
my @commits;
my @changed_files;

#
# Each line we get on stdin gives us an old revision, a new revision, and
# a reference (such as the branch name). It's our job to figure out what
# happened in the middle
#
my $newrev = $ENV{HG_NODE};
exit 0 unless (defined $newrev);

#
# Figure out which commits we're interested in based on reference type
# and change type.
#

if ($testmode) {
    @commits = `$HG log --template '{node}\n' -l 3 -r $testbranch`;
    chomp @commits;
} else {
    @commits = get_commits('tip',$newrev);
}

my $branch = `$HG log --template '{branch}\n' -r $newrev`;
chomp $branch;

# We only want to see *new* commits, which means that commits already
# in the main repository need to be excluded too.
if (defined $exclude_repo) {
    @commits = filter_out_objects_in_repo($exclude_repo, @commits);
}

exit 0 unless (@commits);
debug("commits are: ", join(" ",@commits));

@changed_files = changed_files(@commits);
debug("Changed files: ", join(",",@changed_files));

#
# Based on the list of files, figure out who to mail
#
my @mailaddrs = get_mail_addresses($branch, @changed_files);

#
# Send off the mail!
#
if (@mailaddrs) {
    commit_mail($branch,@commits,@mailaddrs);
}

debug("finishing");

######################################################################
# Functions
######################################################################

#
# Given a list of commit object hashes, return the list of files changed by
# all commits.
#
sub changed_files(@) {
    my %files;
    my @tmp = @_;

    for (@tmp) {
        debug("running '$HG status -mard --no-status' on '$_'");
        open STATUS, "$HG status -mard --no-status --rev $_|";
	while (<STATUS>) {
               chomp;
	       $files{$_} = 1;
        }
        close(STATUS);
    }

    return keys(%files);
}

#
# Given a list of filenames, return the set of email addresses
# the report should be sent to
#
sub get_mail_addresses($@) {
    my ($branchname, @changedfiles) = @_;
    my (@addrs,@archiveaddrs);
    my $matched = 0;

    #
    # Note: we use flatten_arrayref so that either individual strings or array
    # references containing lists of addresses can be used
    #

    #
    # If there's an address we're always supposed to send to, include that now
    #
    if (@alwaysmail) {
        push @addrs, @alwaysmail;
        debug("Used alwaysmail address(es) " . join(",",@alwaysmail));
    }

    #
    # If there are any 'archive' mail addresses, put them into array refs,
    # which will cause them to get sent separately
    #
    if (@archivemail) {
        push @archiveaddrs, map {[$_]} @archivemail;
        debug("Used archivemail address(es) " . join(",",@archivemail));
    }

    #
    # Loop through each entry, making sure both branch and path match
    #
    ENTRY: foreach my $entry (@mailto) {
        my ($branches, $paths, $addresses) = @$entry;
        my @branches = flatten_arrayref($branches);
        my @paths = flatten_arrayref($paths);
        my @addresses = flatten_arrayref($addresses);

        #
        # If the branch doesn't match, go on to the next entry
        #
        my $branch_matched = 0;
        BRANCH: foreach my $branchRE (@branches) {
            if (!defined($branchRE)) {
                debug("Empty branch matched");
                $branch_matched = 1;
                last BRANCH;
            } elsif ($branchname =~ $branchRE) {
                debug("Matched branch regexp /$branchRE/");
                $branch_matched = 1;
                last BRANCH;
            }
        }

        if (!$branch_matched) {
            next ENTRY;
        }

        #
        # If the path doesn't match, go on to the next entry
        #
        my $paths_matched = 0;
        PATH: foreach my $regexp (@paths) {
            if (!defined($regexp)) {
                debug("  Empty path matched");
                $paths_matched = 1;
                last PATH;
            }
            # Have to check against every file in the changeset
            foreach my $file (@changedfiles) {
                if ($file =~ $regexp) {
                    debug("  Matched path regexp /$regexp/");
                    $paths_matched = 1;
                    last PATH;
                }
            }
        }

        if (!$paths_matched) {
            debug("  Path match failed");
            next ENTRY;
        }

        #
        # Great, made it through - we add all addresses, we'll weed out
        # duplicates later
        #
        debug("  Adding adddresses ", join(",",@addresses));
        $matched = 1;
        push @addrs, @addresses;
    }

    #
    # Fall back to default if no matches (note that an earlier match with an
    # empty list of addresses will cause this case to not be triggered - this
    # is intentional)
    #
    if (!$matched && defined($defmail)) {
        @addrs = flatten_arrayref($defmail);
        debug("Used default address $defmail");
    }

    #
    # Pull out unique values to return
    #
    return (uniq(@addrs),@archiveaddrs);
}

#
# Return only the unique elements of the supplied list. Input does not have
# to be sorted, sort order of output is undefined.
#
sub uniq(@) {
    my %uniq;
    map { $uniq{$_} = 1 } @_;
    return keys %uniq;
}

#
# If the parameter is a scalar, just return a one-element array containing the
# scalar. If it's a reference to an array, return the array referenced.
#
sub flatten_arrayref($) {
    my ($ref) = @_;
    if (ref($ref) eq "ARRAY") {
        return @$ref;
    } else {
        return ($ref);
    }
}

#
# Send mail about a regular update commit
#
sub commit_mail($\@@) {
    my ($branch,$commits,@mailaddrs) = @_;
    my $node;


    $node = `$HG log --template '{node|short}\n' -r $branch`;
    chomp $node;

    #
    # Construct the subject line. For now, we just say what repo (if defined)
    # and what branch/tag it happened on
    #
    my $subject = "hg commit: ";
    my $ref_type;
    if (defined($reponame)) {
        $subject .= "[$reponame] ";
    }

    $subject .= sprintf "branch $branch updated ($node)";

    my @fullbody;
    foreach my $rev (@$commits) {
        #
        # Just use regular hg log command, with purty +/- summary at the
        # bottom (formatted to be narrow enough for email)
        #
        my $showcommand = "$HG log --stat -v ";
        if (defined($showcommit_extra)) {
            $showcommand .= "$showcommit_extra ";
        }
        $showcommand .= "-r $rev";
        debug("running '$showcommand'");
        my @body = `$showcommand`;
        
        if ($separate_mail) {
            # Send this message by itself
            send_mail($subject,join("",@body), @mailaddrs);
        } else {
            push @fullbody,\@body;
        }
    }

    #
    # Send all the changes together in one message
    #
    if (!$separate_mail && @fullbody) {
        send_mail($subject,
            join("\n" . "-"x72 . "\n\n",
                 map { join "",@$_} @fullbody), @mailaddrs);
    }
}

sub get_commits($$) {
    my ($oldrev,$newrev) = @_;

    #
    # If this is an update, we can just ask hg for the revisions between the
    # two revisions we were given.
    #
    my $revstring = "$oldrev:$newrev";
    
    debug("running '$HG log -r '$revstring' --template '{node}\n'");
    my @revs = `$HG log -r '$revstring' --template '{node}\n'`;
    chomp @revs;
    return @revs;
}

#
# Send out some mail (or not, if in debug mode)
# If any parameters are references to lists, then we send a seperate peice
# of mail to each of those lists
#
sub send_mail($$@) {
    my ($subject, $body, @to) = @_;

    #
    # Generate our own messageid - this will be helpful if we are sending
    # multiple copies to multiple addesses, so that people's duplicate
    # supression can pick up on the fact that they are the same message
    #
    my $messageid = generate_messageid();

    my @regular_addresses = grep { ref($_) ne "ARRAY" } @to;
    my @list_refs = grep { ref($_) eq "ARRAY" } @to;

    debug("regular addresses are: ", join(",",@regular_addresses));
    debug("there are " . scalar(@list_refs) . " list_refs");

    foreach my $mailto (\@regular_addresses, @list_refs) {

        # The list ref could be empty (eg. if there were no @regular_addresses)
        next unless @$mailto;

        print "Sending email notification to ", join(",",@$mailto), "\n";

        if ($debug) {
               open(MAIL,">&STDERR");
               print MAIL "\n\n";
        } else {
               # sendmail args:
               # -oem causes errors in mail to be "mailed back"
               # -odb deliver mail in background
               # -t causes sendmail to look in the message for 'To:' 'Cc:' and
               #    'Bcc:' lines
               open(MAIL, "| $SENDMAIL -odb -oem -t");
        }

        print MAIL "To: " . join(", ",@$mailto) . "\n";
        print MAIL "Subject: $subject\n";
        print MAIL "Message-Id: $messageid\n";
        
        # If requested, set the Reply-To header
        if (defined($replyto)) {
            print MAIL "Reply-To: $replyto\n"
        }

        #
        # Add an X-Hg-Repo header to help people procmail
        #
        if (defined($reponame)) {
            print MAIL "X-Hg-Repo: $reponame\n";
        }
	if (@repo_keywords) {
		@repo_keywords = map { split /\s+/ } @repo_keywords;
		print MAIL "X-Hg-Repo-Keyword: $_\n" for (@repo_keywords);
	}

        #
        # Marks end of headers
        #
        print MAIL "\n";

        print MAIL $body;

        if ($debug) {
            print MAIL "\n\n";
        }
    }

}

#
# Print only if in debug mode
#
sub debug(@) {
    if ($debug) {
        print STDERR "*** hgmail: ", @_, "\n";
    }
}

#
# Return either the config value associated with the repo or the second
# argument, which supplies the default.
#
sub get_config($$) {
    my ($var,$default) = @_;

    my $multivalue = 0;

    # This lets us check whether the caller wanted multiple values or not -
    # if we were called in list context, this will be true
    if (wantarray()) {
        $multivalue = 1;
    }

    #
    # Allow the user to override on command line
    #
    if ($opt{o}) {
        my @values;
        foreach my $pair (@{$opt{o}}) {
            my ($name,$value) = split /=/, $pair;
            if ($name eq $var) {
                debug("Using config value $value for $name from command line");
                if ($multivalue) {
                    push @values, $value;
                } else {
                    return $value;
                }
            }
        }
        if ($multivalue && (@values > 0)) {
            return @values;
        }
    }

    # Note: We have to use 'hg', not '$HG' here, since the latter is fetched
    # using this function
    my @value = `hg showconfig $CONFIGBASE.$var`;
    chomp @value;

    # XXX hg showconfig doesn't support multiple values for each key, so we
    # need to use some sort of separator.  For now, just use any whitespace
    # char. :-(

    if (@value) {
        if ($multivalue) {
            @value = split /\s+/, $value[0];
            foreach my $value (@value) {
                debug("Got $value from hg showconfig for $var");
            }
            return @value;
        } else {
            debug("Got $value[0] from hg showconfig for $var");
            return $value[0];
        }
    } else {
        if (!$multivalue) {
            debug("Using " , defined($default)?$default : "(undef)" , " for $var");
            return $default;
        } else {
            # Multivalue always returns the empty array for the defauly
            debug("Using the emtpy list for $var");
            return ();
        }
    }
}

#
# Returns 1 if the given object (identified by hash) exists in the given
# repository (identified by path); 0 if it does not .
#
sub object_exists($$) {
    my ($obj, $repo) = @_;

    debug("running $HG --repository '$repo' log $obj");
    my $rv = system "$HG --repository '$repo' log $obj > /dev/null 2>&1";
    if ($rv) {
        return 0;
    } else {
        return 1;
    }
}

#
# Return a list of all objects from the input list that do *not* exist in
# the given repo
#
sub filter_out_objects_in_repo($@) {
    my $repo = shift @_;
    return grep { !object_exists($_,$repo)} @_;
}

#
# Generate a value suitable for use in a Message-Id header
#
sub generate_messageid() {
    # First part: current time
    my $first = time();
    # Second part: some random junk
    my $second;
    foreach my $i (0 .. 8) {
        $second .= sprintf "%02x", int(rand(256));
    }
    # Third part: hostname
    my $hostname = `$HOSTNAME -f`;
    chomp $hostname;

    my $msgid = "<$first.$second\@$hostname>";

    debug("generated message id $msgid");

    return $msgid;
}
