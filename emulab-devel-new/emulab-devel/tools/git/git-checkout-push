#!/usr/bin/perl -w
#
# Copyright (c) 2011 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

use POSIX qw(strftime);

#
# Simple script to do a checkout whenever the 'master' branch is pushed
# to. Intended for situations where you have people pushing up to a central
# repository that is also the 'real' copy (eg. of a paper)
#
# NOTE: In order to use this script, you need to set:
#     git config receive.denyCurrentBranch ignore
#

#
# Note: Does not hanle the case where the master branch is being deleted. This
# probably does not matter!
#

my $GIT = "git";
my $UNSAFE = 0;
my $STASH_CHANGES = 0;
my $GIT_STASH_OPTS = '';
my $BRANCH = `git rev-parse --symbolic-full-name HEAD`;
my $IS_BARE_REPO = `$GIT rev-parse --is-bare-repository`;
my $IN_WORK_TREE = `$GIT rev-parse --is-inside-work-tree`;
my $IN_GIT_DIR = `$GIT rev-parse --is-inside-git-dir`;

chomp $BRANCH;
chomp $IN_WORK_TREE;
chomp $IN_GIT_DIR;
chomp $IS_BARE_REPO;

if ($IS_BARE_REPO eq 'true') {
        print "*** ERROR: Repository being pushed to is bare ";
        print "(has no work tree), checkout aborted\n";
        exit(1);
} elsif ($IN_WORK_TREE ne 'true') {
        print "*** ERROR: Repository being pushed to is not ";
        print "inside work tree; checkout aborted\n";
        exit(1);
}

if ($IN_GIT_DIR eq 'true') {
	chdir "$ENV{GIT_DIR}/..";
	delete $ENV{GIT_DIR};
} else {
	print "*** ERROR: Not running from GIT_DIR.  Aborted\n";
	exit(1);
}

#
# Look through all of the changed references to see if any was for the master
# branch
#
my $branch_pushed = 0;
foreach my $refline (<STDIN>) {
    chomp $refline;
    my ($oldrev, $newrev, $refname) = split(/\s+/, $refline);
    if ($refname eq $BRANCH) {
        $branch_pushed = 1;
    }
}

if ($branch_pushed) {
    print "Checking out new $BRANCH\n";

    #
    # Check to see whether there are any changes (staged or not) before doing
    # the checkout, so that we can give a reasonable error message
    #
    if (!$UNSAFE && system("$GIT diff-files --quiet -q --exit-code")) {
	    if ($STASH_CHANGES) {
		    my $stash_msg = "git-checkout-push: stashed changes to $BRANCH " .
		                    "on %a %b %e %H:%M:%S %Y";
		    $stash_msg = strftime $stash_msg, localtime;
		    print "*** WARNING: Repository being pushed to has uncommitted ";
		    print "changes, stashing them.\n";
		    system("$GIT stash save $GIT_STASH_OPTS \"$stash_msg\"");

		    # git-stash will automatically do a hard reset, and since
		    # the branch has already been updated there's nothing left
		    # to do.
		    exit(0);
	    } else {
		    print "*** ERROR: Repository being pushed to has uncommitted ";
		    print "changes, checkout aborted\n";
		    exit(1);
	    }
    }

    #
    # Note that we use 'reset' rather than 'checkout' - the latter doesn't
    # work for reasons that appear to be very complicated...
    #
    system("$GIT reset --hard $BRANCH");
}
