#!/usr/bin/perl -w
#
# Copyright (c) 2005-2021 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use strict;
use Getopt::Std;
use Data::Dumper;
use Date::Parse;

#
# Search for papers at scopus that reference us.
#
sub usage()
{
    print "Usage: findpapers [-n] [-d] [-f] [portal]\n";
    exit(1);
}
my $optlist   = "ndf";
my $impotent  = 0;
my $debug     = 0;
my $flush     = 0; # Download new copy of paper from scopus
my $query;
my $token     = "cloudlab";

# Paper search for cloudlab.
my $PAPER_QUERY = "( TITLE ( $token ) OR REF ( $token ) OR ".
    "ABS ( $token ) OR KEY ( $token ) ) AND PUBYEAR > 2013";

#
# Configure variables
#
my $TB		     = "@prefix@";

# Load the Testbed support stuff.
use lib "@prefix@/lib";
use lib ".";
use emdb;
use emutil;
use scopus;

#
# Turn off line buffering on output
#
$| = 1;

my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"n"})) {
    $impotent++;
}
if (defined($options{"d"})) {
    $debug++;
}
if (defined($options{"f"})) {
    $flush++;
}
if (@ARGV) {
    usage()
	if (@ARGV != 1);
    my $portal = $ARGV[0];
    usage()
	if ($portal !~ /^(emulab|cloudlab|powder)$/);

    if ($portal eq "emulab") {
	# Paper search for cloudlab.
	$PAPER_QUERY = "( TITLE ( emulab ) OR REF ( emulab ) OR ".
	    "ABS ( emulab ) OR KEY ( emulab ) ) AND PUBYEAR > 2000";
    }
    elsif ($portal eq "powder") {
	$PAPER_QUERY = "( REF ( powderwireless.net )  OR  ".
	    "REF ( {POWDER: Platform for Open Wireless} ) )  AND  ".
	    "PUBYEAR  > 2017";
    }
}    

print "Searching for papers, this will take a few seconds.\n";
my (undef, $ref) = scopus::Search("paper", $PAPER_QUERY);
if (!defined($ref)) {
    die("Search failure\n");
}
my $results = scopus::SearchResults($ref);
if (!defined($results)) {
    die("Could not download search results\n");
}
print "There are " . scalar(@$results) . " matches.\n";
foreach my $ref (@$results) {
    my $dcid = $ref->{'dc:identifier'};
    my $eid  = $ref->{'dc:identifier'};
    my $citedus;
    
    if (!$dcid) {
	print STDERR "No dc:identifier for $eid. Skipping ...\n";
	next;
    }
    if ($dcid =~ /^SCOPUS_ID:(\d+)$/) {
	$dcid = $1;

	if (!$flush && scopus::PaperEntered($dcid)) {
	    print "Already have this paper, skipping.\n" if ($debug > 1);
	    next;
	}
	print "Checking $dcid\n";
	
	my $abstract = scopus::GetAbstract($dcid, $flush);
	if (!defined($abstract)) {
	    print " *** Could not retrieve abstract $dcid\n";
	    next;
	}
	if ($citedus = scopus::CitesUs($abstract)) {
	    print " Cited $citedus!!!\n";
	    scopus::EnterPaper($dcid, $impotent, $citedus, $flush);
	}
	else {
	    print " Does not cite us\n" if ($debug);
	}
    }
    else {
	print STDERR "Invalid dc:identifier $dcid for $eid. Skipping ...\n";
    }
    select(undef, undef, undef, 0.25);
}
