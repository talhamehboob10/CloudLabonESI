#!/usr/bin/perl -w
#
# Copyright (c) 2005-2021 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use strict;
use Getopt::Std;
use Data::Dumper;
use Date::Parse;

#
# For a user that we have matched to (possibly more then one) user in the
# scopus database, get the papers from scopus and look for ones that cite
# us, or failing that, the most recent. Update the DB, we will use this
# info to ask the user to validate which (if any) user matches is correct. 
#
sub usage()
{
    print "Usage: getpapers [-n] [-u] [-f] [user ...]\n";
    exit(1);
}
my $optlist   = "nl:uf";
my $impotent  = 0;
my $update    = 0;
my $flush     = 0;
my $limit     = "";

#
# Configure variables
#
my $TB		     = "@prefix@";

# Load the Testbed support stuff.
use lib "@prefix@/lib";
use lib ".";
use emdb;
use emutil;
use scopus;

# For specific users,
my $users_clause = "";

#
# Turn off line buffering on output
#
$| = 1;

my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"n"})) {
    $impotent++;
}
if (defined($options{"u"})) {
    $update++;
}
if (defined($options{"f"})) {
    $flush++;
}
if (defined($options{"l"})) {
    $limit = "limit " . $options{"l"};
}
# Restrict to users.
if (@ARGV) {
    my $users = join(",", map {"'" . $_ . "'"} @ARGV);
    $users_clause = "and u.uid in ($users)";
}

my $query_result =
    DBQueryFatal("select u.uid,u.uid_idx,scopus.scopus_id ".
		 "  from users as u ".
		 "left join user_stats as s on ".
		 "   s.uid_idx=u.uid_idx ".
		 "left join user_scopus_info as scopus on ".
		 "   scopus.uid_idx=u.uid_idx ".
		 "where scopus.uid is not null ".
		 (!$update ? "and scopus.latest_abstract_id='' " : " ") .
		 "$users_clause order by u.uid $limit");

while (my ($uid,$idx,$scopus_id) = $query_result->fetchrow_array()) {
    print " $uid, $scopus_id\n";
    # Force author reload when updating
    my $aref  = scopus::GetAuthor($scopus_id, $flush);
    if (!defined($aref)) {
	print STDERR "*** Cannot get author $scopus_id\n";
	next;
    }
    my $coredata  = $aref->{'coredata'};
    my $documents = $aref->{'documents'}->{'abstract-document'};
    my $citedus;
    my $citedus_paper;
    my $mostrecent;

    if (!defined($documents)) {
	print " *** No Documents for $uid, $scopus_id\n";
	next;
    }
    foreach my $document (@$documents) {
	my $dcid = $document->{'dc:identifier'};
	my $date = $document->{'prism:coverDate'};
	my $type = $document->{'prism:aggregationType'};

	# Preprint
	next
	    if ($type eq "x");

	if ($dcid =~ /^SCOPUS_ID:(\d+)$/) {
	    $dcid = $1;
	}
	else {
	    print " *** Could not parse dcid for $uid, $scopus_id, $dcid\n";
	    next;
	}
	if (!defined($date)) {
	    print " *** No date for $uid, $scopus_id, $dcid\n";
	    next;
	}
	my $abstract = scopus::GetAbstract($dcid, $flush);
	if (!defined($abstract)) {
	    print " *** Could not retrieve abstract $dcid\n";
	    next;
	}
	if (my $tmp = scopus::CitesUs($abstract)) {
	    if (!defined($citedus)) {
		print " Cited $tmp!!!\n";
		$citedus = $tmp;
		$citedus_paper = $document;
	    }
	    next;
	}
	if (!defined($mostrecent)) {
	    $mostrecent = $document;
	}
	else {
	    my $thistime = str2time($date);
	    my $thattime = str2time($mostrecent->{'prism:coverDate'});
	    if ($thistime > $thattime) {
		$mostrecent = $document;
	    }
	}
    }
    if (defined($citedus_paper)) {
	$mostrecent = $citedus_paper;
    }
    if (!defined($mostrecent)) {
	print " *** Could not determine most document for $uid, $scopus_id\n";
	next;
    }
    my $dcid  = $mostrecent->{'dc:identifier'};
    
    if ($dcid =~ /^SCOPUS_ID:(\d+)$/) {
	$dcid = $1;
    }
    else {
	print "*** Could not parse dcid for $uid, $scopus_id, $dcid\n";
	next;
    }
    print " Most recent document for $uid ($scopus_id): $dcid\n";
    if (scopus::EnterPaper($dcid, $impotent, $citedus, $update)) {
	exit(1);
    }
    my $query = "update user_scopus_info set ".
	"  latest_abstract_id=" .  DBQuoteSpecial($dcid) . " " .
	"where uid_idx='$idx' and scopus_id='$scopus_id'";

    print "$query\n";
    if (!$impotent) {
	DBQueryFatal($query);
    }
    sleep(1);
}

