#!/usr/bin/perl -w
#
# Copyright (c) 2005-2021 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use strict;
use Getopt::Std;
use Data::Dumper;
use Date::Parse;

#
# Reload abstract
#
sub usage()
{
    print "Usage: reload [-n] [-f] scopus_id ...\n";
    print "Usage: reload [-n] [-a | -c]\n";
    exit(1);
}
my $optlist   = "nafc";
my $impotent  = 0;
my $cites     = 0;
my $all       = 0;
my $flush     = 0;

#
# Configure variables
#
my $TB		     = "@prefix@";

# Load the Testbed support stuff.
use lib "@prefix@/lib";
use lib ".";
use emdb;
use emutil;
use scopus;

#
# Turn off line buffering on output
#
$| = 1;

my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"a"})) {
    $all++;
}
if (defined($options{"c"})) {
    $cites++;
}
if (defined($options{"f"})) {
    $flush++;
}
if (defined($options{"n"})) {
    $impotent++;
}
usage()
    if (! ($all || $cites || @ARGV));
usage()
    if ($all && $flush);

sub ReloadOne($)
{
    my ($scopus_id) = @_;

    my $abstract  = scopus::GetAbstract($scopus_id, $flush);
    if (!defined($abstract)) {
	die("No such abstract abstract\n");
    }
    my $citedus = scopus::CitesUs($abstract);
    scopus::EnterPaper($scopus_id, $impotent, $citedus, 1);    
}

if ($all) {
    my $query_result =
	DBQueryFatal("select scopus_id from scopus_paper_info");
    while (my ($scopus_id) = $query_result->fetchrow_array()) {
	ReloadOne($scopus_id);
	sleep(1) if ($impotent);
    }
}
elsif ($cites) {
    my $query_result =
	DBQueryFatal("select scopus_id from scopus_paper_info ".
		     "where cites is not null");
    while (my ($scopus_id) = $query_result->fetchrow_array()) {
	my $abstract  = scopus::GetAbstract($scopus_id, $flush);
	if (!defined($abstract)) {
	    die("No such abstract abstract\n");
	}
	scopus::UpdatePaper($scopus_id, $impotent);
	sleep(1) if ($impotent);
    }
}
else {
    foreach my $id (@ARGV) {
	ReloadOne($id)
    }
}
exit(0)
