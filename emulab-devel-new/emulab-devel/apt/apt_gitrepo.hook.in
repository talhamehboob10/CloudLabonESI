#!/usr/bin/perl -w
#
# Copyright (c) 2008-2019 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use Data::Dumper;
use JSON;
use CGI;

# Configure variables
my $TB               = "@prefix@";
my $MAINSITE 	     = @TBMAINSITE@;
my $TBOPS            = "@TBOPSEMAIL@";
my $TBLOGS           = "@TBLOGSEMAIL@";
my $MANAGEPROFILE    = "$TB/bin/manage_profile";

# Locals
my $debug      = 0;
my $token;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
#
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Testbed libraries.
use lib '@prefix@/lib';
use emutil;
use libaudit;
use libtestbed;
use APT_Profile;
use User;
use Group;

#
# We want to make sure we send back a header.
#
sub SendStatus($)
{
    my ($status) = @_;
    
    print "Content-Type: text/plain \n\n";
    print "We love all profiles equally.\n";
    print "Exited with $status\n";
    exit(0);    
}

# The query holds the token we need to find the profile.
my $query = new CGI();

if ($debug > 1) {
    my %headers = map { $_ => $query->http($_) } $query->http();
    print STDERR Dumper(\%headers);
    print STDERR Dumper($query);
}

#
# The profile is provided in the path.
#
if (!exists($ENV{'PATH_INFO'}) || $ENV{'PATH_INFO'} eq "") {
    print STDERR "No path info\n";
    SendStatus(1);
}
my $pathinfo = $ENV{'PATH_INFO'};
if ($pathinfo =~ /^\/([-\w]+)$/) {
    $token = $1;
}
else {
    print STDERR "Bad path info\n";
    SendStatus(1);
}
if (!defined($token)) {
    print STDERR "No token provided\n";
    SendStatus(1);
}
if ($token !~ /^[-\w]+$/ || length($token) > 64) {
    print STDERR "Bad token format\n";
    SendStatus(1);
}
#
# Before calling out, find the profile.
#
my $profile = APT_Profile->LookupByRepoKey($token);
if (!defined($profile)) {
    print STDERR "No profile for token $token\n";
    SendStatus(1);
}
if (!defined($profile->repourl())) {
    print STDERR "Not a repo based profile for token $token\n";
    SendStatus(1);
}
#
# Let the parent return, no need to keep the client waiting since it
# don't care anyway.
#
my $mypid = fork();
if ($mypid) {
    #
    # Must end with this for the client. Does not return;
    #
    SendStatus(0);
}
sleep(1);

#
# Send logs to tblogs (only)
#
LogStart(0, undef, LIBAUDIT_LOGONLY() | LIBAUDIT_LOGTBLOGS());
AddAuditInfo("to", $TBLOGS);

if ($debug) {
    print "$profile\n";
}

#
# We are going to do the update as the profile creator.
#
my $creator = User->Lookup($profile->creator_idx());
if (!defined($creator)) {
    print STDERR "Cannot lookup creator for $profile\n";
    exit(1);
}
my $group = Group->Lookup($profile->gid_idx());
if (!defined($group)) {
    print STDERR "Cannot lookup group for $profile\n";
    exit(1);
}
if ($creator->FlipTo($group)) {
    print STDERR "Could not flip to $creator\n";
    exit(1);
}
my $output =
    emutil::ExecQuiet("$MANAGEPROFILE updatefromrepo " . $profile->uuid());
if ($?) {
    print STDERR $output;
    exit(1);
}
if ($debug > 1) {
    print $output;
}

exit(0);
