#!/usr/bin/perl -w

#
# Copyright (c) 2000-2020 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use BSD::Resource;
use POSIX qw(:signal_h);
    
#
# Simply a wrapper for the geni-lib python environment
#
sub usage()
{
    print STDOUT
	"Usage: gitrepo.proxy -n reponame clone [-c] url\n".
	"Usage: gitrepo.proxy -n reponame update\n".
	"Usage: gitrepo.proxy -n reponame delete\n";
 
    exit(-1);
}
my $optlist  = "dn:";
my $debug    = 0;
my $reponame;

#
# Configure variables
#
my $TB         = "@prefix@";
my $TBOPS      = "@TBOPSEMAIL@";
my $REPODIR    = "/repos";
my $GIT        = "/usr/local/bin/git";

# Locals

# Protos
sub fatal($);
sub RunCommand($);
sub Clone();
sub Delete();
sub Update();
sub GetDefaultBranch($);
sub GetRemoteDefaultBranch($);

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/usr/bin:/sbin:/usr/sbin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Testbed Support libraries
#
use lib "@prefix@/lib";

#
# Parse command arguments. Once we return from getopts, all that should
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"n"})) {
    $reponame = $options{"n"};
}
usage()
    if (@ARGV < 1 || !(defined($reponame)));

my $action   = shift(@ARGV);

if (! -e $REPODIR) {
    fatal("$REPODIR directory does not exist");
}

# Do not want to be asked for password, we want straight out failure.
$ENV{"GIT_ASKPASS"} = "/bin/true";

#
# Dispatch.
#
if ($action eq "clone") {
    exit(Clone());
}
elsif ($action eq "update") {
    exit(Update());
}
elsif ($action eq "delete") {
    exit(Delete());
}
else {
    fatal("Unknown command");
}
exit(-1);

#
# Clone a repo. 
#
sub Clone()
{
    my $checkout = 0;
    
    usage()
	if (!@ARGV);
    
    if ($ARGV[0] eq "-c") {
	$checkout = 1;
	shift(@ARGV);
	usage()
	    if (!@ARGV);
    }
    my $repourl = shift(@ARGV);
    
    if (-e "$REPODIR/$reponame") {
	fatal("Repository has already been cloned");
    }
    chdir($REPODIR) or
	fatal("Could not chdir to $REPODIR");

    my $status = RunCommand("$GIT clone " . ($checkout ? "" : "--bare ") .
			    "   $repourl $reponame");
    if ($status) {
	fatal("Not able to clone repo from $repourl");
    }
    if (! -d "$REPODIR/$reponame") {
	fatal("Cannot find the git repo after cloning");
    }
    #
    # Make sure a source file exists, delete if not. The caller will
    # pick up the file via NFS if it needs it.
    #
    chdir("$REPODIR/$reponame") or
	fatal("Could not chdir to $REPODIR/$reponame");

    #
    # If we did a checkout, look for submodules that need to be initialized
    #
    if ($checkout) {
	if (-e ".gitmodules") {
	    if (system("$GIT submodule init") ||
		system("$GIT submodule update")) {
		fatal("Could not initialize submodules");
	    }
	}
	# Need to force getting all the remote branches.
	# -p prunes deleted branches. But tags are not pruned.
	if (system("$GIT fetch -u -f -p -t origin '+refs/*:refs/*'")) {
	    fatal("Could not fetch remote branches");
	}
	if (-e "profile.py") {
	    system("/bin/cat profile.py");
	}
	elsif (-e "profile.rspec") {
	    system("/bin/cat profile.rspec");
	}
	else {
	    print STDERR "No geni-lib script or rspec in this repository\n";
	}
    }
    else {
	my $refspec = GetDefaultBranch($reponame);
    
	if (system("$GIT cat-file -e ${refspec}:profile.py") &&
	    system("$GIT cat-file -e ${refspec}:profile.rspec")) {
	    print STDERR "No geni-lib script or rspec in this repository\n";
	}
    }
    return 0;
}

#
# Delete a repository.
#
sub Delete()
{
    if (! -e "$REPODIR/$reponame") {
	return 0;
    }
    system("/bin/rm -rf $REPODIR/$reponame");
    if ($?) {
	fatal("Not able to delete repository");
    }
    return 0;
}

#
# Update a repo. 
#
sub Update()
{
    my $command;
    
    if (! -e "$REPODIR/$reponame") {
	fatal("Repository does not exist.");
    }
    chdir("$REPODIR/$reponame") or
	fatal("Could not chdir to $REPODIR/$reponame");

    if (-e ".git") {
	$command = "$GIT fetch -u -f -t --prune-tags ".
	    "origin '+refs/*:refs/*'";
    }
    else {
	$command = "$GIT fetch -u -f -t --prune --prune-tags ".
	    "origin '+refs/*:refs/*'";
    }
    my $status = RunCommand($command);
    if ($status) {
	fatal("Not able to update repo");
    }
    my $current_refspec = GetDefaultBranch($reponame);
    my $remote_refspec  = GetRemoteDefaultBranch($reponame);

    #
    # Local checkout.
    #
    if (-e ".git") {
	# Prune dead branches
	$command = "$GIT remote prune origin";
	my $status = RunCommand($command);
	if ($status) {
	    fatal("Not able to prune dead branches");
	}
	$command = "$GIT merge -q origin/$current_refspec";
	my $status = RunCommand($command);
	if ($status) {
	    fatal("Not able to merge current branch");
	}
	if (-e ".gitmodules") {
	    $status = RunCommand("$GIT submodule update");
	    if ($status) {
		fatal("Not able to update submodules");
	    }
	}
    }

    #
    # Update local default branch if the remote has switched it.
    #
    if ($current_refspec ne $remote_refspec) {
	if (-e ".git") {
	    $command = "$GIT checkout -q $remote_refspec";
	}
	else {
	    $command = "$GIT symbolic-ref --short HEAD '$remote_refspec'";
	}
	system($command);
	if ($?) {
	    fatal("Could not update default branch tp $remote_refspec");
	}
	$current_refspec = $remote_refspec;
    }
    if (-e ".git") {
	if (-e "profile.py") {
	    system("/bin/cat profile.py");
	}
	elsif (-e "profile.rspec") {
	    system("/bin/cat profile.rspec");
	}
	else {
	    print STDERR "No geni-lib script or rspec in this repository\n";
	}
    }
    else {
	if (system("$GIT cat-file -e ${current_refspec}:profile.py") &&
	    system("$GIT cat-file -e ${current_refspec}:profile.rspec")) {
	    print STDERR "No geni-lib script or rspec in this repository\n";
	}
    }
    return 0;
}

#
# Get default branch (refspec)
#
sub GetDefaultBranch($)
{
    my ($reponame) = @_;
    
    chdir("$REPODIR/$reponame") or
	fatal("Could not chdir to $REPODIR/$reponame");

    my $branch = `$GIT symbolic-ref --short HEAD`;
    if ($?) {
	fatal("Could not get default branch for $reponame");
    }
    chomp($branch);

    if ($branch =~ /^([-\w]+)$/) {
	$branch = $1;
    }
    else {
	fatal("Illegal default branch name: $branch");
    }
    return (-e ".git" ? $branch : "refs/heads/$branch");
}

#
# Ask the remote for the default branch; user can change the default
# branch at the origin, but we will not know that after the initial
# clone unless we ask. 
#
sub GetRemoteDefaultBranch($)
{
    my ($reponame) = @_;
    my $branch;
    
    chdir("$REPODIR/$reponame") or
	fatal("Could not chdir to $REPODIR/$reponame");

    my $command = "$GIT remote show origin";

    #
    # This open implicitly forks a child, which goes on to execute the
    # command. The parent is going to sit in this loop and capture the
    # output of the child. We do this so that we have better control
    # over the descriptors.
    #
    my $pid = open(PIPE, "-|");
    if (!defined($pid)) {
	fatal("popen failed!");
    }
    if ($pid) {
	while (<PIPE>) {
	    if ($_ =~ /^\s*head branch:\s+([-\w]+)$/i) {
		$branch = $1;
	    }
	}
	if (!close(PIPE)) {
	    fatal("$command failed");
	}
    }
    else {
	open(STDERR, ">&STDOUT");
	exec($command);
    }
    if (!defined($branch)) {
	fatal("Could not get default branch from remote repo");
    }
    return (-e ".git" ? $branch : "refs/heads/$branch");
}

#
# Run git protected by CPU limit.
#
sub RunCommand($)
{
    my ($cmd) = @_;
    if ($debug) {
	print STDERR "$cmd\n";
    }
    
    #
    # Fork a child process to run git in.
    #
    my $pid = fork();
    if (!defined($pid)) {
	fatal("Could not fork a new process!");
    }

    #
    # Child runs git, niced down, and then exits.
    #
    if (! $pid) {
	# Set the CPU limit for us.
	setrlimit(RLIMIT_CPU, 600, 600);
	
	# Give parent a chance to react.
	sleep(1);

	exec("nice -5 $cmd");
	die("Could not exec: '$cmd'!\n");
    }

    # Parent waits.
    waitpid($pid, 0);
    my $exit_status = $?;

    #
    # If the child was KILLed, then it overran its time limit.
    # Otherwise, exit with result of child.
    #
    if (($exit_status & 0xff) == SIGKILL) {
	print STDERR "git exceeded CPU limit\n";
	$exit_status = 15;
    }
    elsif ($exit_status & 0xff) {
	# Get the mapping from signal num. to name
	use Config;
	my (%sig_num, @sig_name);
	my @names = split ' ', $Config{sig_name};
	@sig_num{@names} = split ' ', $Config{sig_num};
	foreach (@names) {$sig_name[$sig_num{$_}] ||= $_}
    
	my $signal = $exit_status & 0x7f;
	my $signame = $sig_name[$signal];
	
	print STDERR "git died with SIG$signame.\n";
	$exit_status = 128 + $signal;
    }
    elsif ($exit_status) {
	$exit_status = $exit_status >> 8;
    }
    return $exit_status;
}

sub fatal($) {
    my ($mesg) = $_[0];

    print STDERR "*** $0:\n".
	         "    $mesg\n";
    exit(-1);
}
