#!/usr/bin/perl -w
#
# Copyright (c) 2000-2020 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use strict;
use Getopt::Std;
use Data::Dumper;

#
# 
#
sub usage()
{
    print STDERR "Usage: verifycredentials <user>\n";
    exit(-1);
}
my $optlist     = "d";
my $debug       = 0;

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";

#
# Untaint the path
#
$ENV{'PATH'} = "$TB/bin:$TB/sbin:/bin:/usr/bin:/usr/bin:/usr/sbin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Load the Testbed support stuff.
#
use lib "@prefix@/lib";
use libtestbed;
use User;
use GeniUser;
use APT_Geni;

# Protos
sub fatal($);

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (grep {$_ eq "--"} @ARGV &&
    ! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
usage()
    if (@ARGV != 1);

my $this_user = User->Lookup($ARGV[0]);
if (! defined($this_user)) {
    fatal("User does not exist!");
}
my $geniuser = GeniUser->CreateFromLocal($this_user);
if (!defined($geniuser)) {
    fatal("Could not create geniuser");
}

my $errmsg;
my $retval = APT_Geni::VerifyCredentials($geniuser, \$errmsg);
if ($retval) {
    if ($retval < 0) {
	fatal($errmsg);
    }
    else {
	print STDERR $errmsg . "\n";
	exit(1);
    }
}
exit(0);

sub fatal($)
{
    my ($mesg) = @_;

    print STDERR "$mesg\n";
    # Exit with negative status so web interface treats it as system error.
    exit(-1);
}
