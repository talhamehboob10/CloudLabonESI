#!/usr/bin/perl -w
#
# Copyright (c) 2000-2020 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use strict;
use Getopt::Std;
use Data::Dumper;
use JSON;

#
# Back-end script to manage spectrum stuff
#
sub usage()
{
    my @usage = (
	"list -p pid",
	"list [global | named]",
	"expand pid",
	"add named <name> <low> <high>",
	"add global <name>",
	"add global <low> <high>",
	"add project <pid> <name>",
	"add project <pid> <low> <high>",
	"remove named <name>",
	"remove global <idx> | <name>",
	"remove project <pid> <idx>|<name>",
	"remove project -all <pid>",
	"modify named <name> <low> <high>",
	"set list <setname>",
	"set list -all",
	"set add <setname> <name>",
	"set add <setname> <low> <high>",
	"set remove <setname> <idx>|<name>",
	"set grant <setname> <pid>",
	);
    print STDERR "Usage: manage_rfranges " . shift(@usage) . "\n";
    foreach my $s (@usage) {
	print STDERR "       manage_rfranges $s\n";
    }
    exit(-1);
}
my $optlist     = "dt:";
my $debug       = 0;
my $webtask_id;
my $webtask;

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";
my $OURDOMAIN	= "@OURDOMAIN@";

#
# Untaint the path
#
$ENV{'PATH'} = "$TB/bin:$TB/sbin:/bin:/usr/bin:/usr/bin:/usr/sbin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Load the Testbed support stuff.
#
use lib "@prefix@/lib";
use EmulabConstants;
use emdb;
use emutil;
use Brand;
use User;
use Project;
use libEmulab;
use libtestbed;
use WebTask;
use APT_RFRange;

# Protos
sub fatal($);
sub UserError($);
sub DoList();
sub DoExpand();
sub DoAdd();
sub DoRemove();
sub DoModify();
sub DoSet();

# Check floats.
sub CheckFloat($$)
{
    my ($value, $pmsg) = @_;

    if (!TBcheck_dbslot($value, "default", "float",
			TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)){
	$$pmsg = "Invalid float: $value";
	return 1;
    }
    return 0;
}

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"t"})) {
    $webtask_id = $options{"t"};
    $webtask = WebTask->Lookup($webtask_id);
    if (!defined($webtask)) {
	fatal("Could not lookup webtask $webtask_id");
    }
    # Convenient.
    $webtask->AutoStore(1);
}
if (defined($options{"d"})) {
    $debug++;
}
if (@ARGV < 1) {
    usage();
}
my $action = shift(@ARGV);

my $this_user = User->ThisUser();
if (! defined($this_user)) {
    fatal("You ($UID) do not exist!");
}
if (!$this_user->IsAdmin()) {
    fatal("Must be an administrator");
}

if ($action eq "list") {
    DoList();
}
elsif ($action eq "expand") {
    DoExpand();
}
elsif ($action eq "add") {
    DoAdd();
}
elsif ($action eq "remove") {
    DoRemove();
}
elsif ($action eq "modify") {
    DoModify();
}
elsif ($action eq "set") {
    DoSet();
}
else {
    usage();
}
exit(0);

sub DoList()
{
    my $optlist   = "p:s:";
    
    my %options = ();
    if (! getopts($optlist, \%options)) {
	usage();
    }
    if (defined($options{"p"})) {
	my $project = Project->Lookup($options{"p"});
	if (!defined($project)) {
	    fatal("No such project");
	}
	my $ranges;
	if (APT_RFRange::ProjectRange->LookupAll($project, \$ranges)) {
	    fatal("Could not lookup global ranges");
	}
	if (!keys(%$ranges)) {
	    print "No ranges defined for project\n";
	    exit(0);
	}
	APT_RFRange::ProjectRange->DumpList($ranges);
	exit(0);
    }
    elsif (defined($options{"s"})) {
	my $set = APT_RFRange::Set->Lookup($options{"s"});
	if (!defined($set)) {
	    fatal("No such set");
	}
	$set->Dump();
	exit(0);
    }
    elsif (@ARGV != 1) {
	usage();
    }
    if ($ARGV[0] eq "global") {
	my $ranges;
	if (APT_RFRange::GlobalRange->LookupAll(\$ranges)) {
	    fatal("Could not lookup global ranges");
	}
	if (!keys(%$ranges)) {
	    print "No global ranges defined\n";
	    exit(0);
	}
	APT_RFRange::GlobalRange->DumpList($ranges);
    }
    elsif ($ARGV[0] eq "named") {
	my $ranges;
	if (APT_RFRange::NamedRange->LookupAll(\$ranges)) {
	    fatal("Could not lookup named ranges");
	}
	if (!keys(%$ranges)) {
	    print "No named ranges defined\n";
	    exit(0);
	}
	APT_RFRange::NamedRange->DumpList($ranges);
    }
    elsif ($ARGV[0] eq "sets") {
	my $sets;
	
	if (APT_RFRange::Set->LookupAll(\$sets)) {
	    fatal("Could not get range sets");
	}
	if (!keys(%{$sets})) {
	    print "No range sets defined\n";
	    exit(0);
	}
    }
    else {
	usage();
    }
    exit(0);
}

#
# A project has ranges specific to the project, and then the global ones.
# Expand just prints them all. 
#
sub DoExpand()
{
    usage()
	if (@ARGV < 1);
    
    my $project = Project->Lookup($ARGV[0]);
    if (!defined($project)) {
	fatal("No such project");
    }
    my $project_range = APT_RFRange::Project->Lookup($project);
    if (!defined($project_range)) {
	fatal("Could not get ranges for project");
    }
    print "Global Ranges:\n";
    $project_range->DumpGlobal();
    print "Project Ranges:\n";
    $project_range->DumpProject();
    exit(0);
}

#
# Add various kinds of things
#
# A named range
#
sub AddNamedRange()
{
    my $errmsg;
    
    usage()
	if (@ARGV != 3);

    my ($name, $low, $high) = @ARGV;
    if (CheckFloat($low, \$errmsg)) {
	fatal($errmsg);
    }
    if (CheckFloat($high, \$errmsg)) {
	fatal($errmsg);
    }
    if ($name !~ /^[-\w]+$/) {
	fatal("Invalid name for range");
    }
    if (APT_RFRange::NamedRange->Lookup($name)) {
	UserError("Already have a range with this name");
    }
    my $range = APT_RFRange::NamedRange->Create($name, $low, $high);
    if (!defined($range)) {
	fatal("Could not create new named range");
    }
    if ($debug) {
	$range->Dump();
    }
    exit(0);
}

#
# A global range. Can be either a named range (so indirect) or low/high pair
#
sub AddGlobalRange()
{
    my $errmsg;

    if (@ARGV == 1) {
	my $name = $ARGV[0];
	if ($name !~ /^[-\w]+$/) {
	    fatal("Invalid name for range");
	}
	if (APT_RFRange::GlobalRange->Lookup($name)) {
	    UserError("Already have a global range with this name");
	}
	if (!APT_RFRange::GlobalRange->Create($name)) {
	    fatal("Could not add new global range");
	}
    }
    elsif (@ARGV == 2) {
	my ($low, $high) = @ARGV;
	if (CheckFloat($low, \$errmsg)) {
	    fatal($errmsg);
	}
	if (CheckFloat($high, \$errmsg)) {
	    fatal($errmsg);
	}
	if (APT_RFRange::GlobalRange->Lookup($low, $high)) {
	    UserError("Already have a global range with this low,high");
	}
	if (!APT_RFRange::GlobalRange->Create($low, $high)) {
	    fatal("Could not add new global range");
	}
    }
    else {
	usage();
    }
    exit(0);
}

#
# A project range. Can be either a named range (so indirect) or low/high pair
#
sub AddProjectRange()
{
    my $errmsg;
    usage()
	if (!(@ARGV == 2 || @ARGV == 3));

    my $project = Project->Lookup(shift(@ARGV));
    if (!defined($project)) {
	fatal("No such project");
    }
    if (@ARGV == 1) {
	my $name = $ARGV[0];
	if ($name !~ /^[-\w]+$/) {
	    fatal("Invalid name for range");
	}
	if (APT_RFRange::ProjectRange->Lookup($project, $name)) {
	    UserError("Already have a project range with this name");
	}
	if (!APT_RFRange::ProjectRange->Create($project, $name)) {
	    fatal("Could not add new project range");
	}
    }
    elsif (@ARGV == 2) {
	my ($low, $high) = @ARGV;
	if (CheckFloat($low, \$errmsg)) {
	    fatal($errmsg);
	}
	if (CheckFloat($high, \$errmsg)) {
	    fatal($errmsg);
	}
	if (APT_RFRange::ProjectRange->Lookup($project, $low, $high)) {
	    UserError("Already have a project range with this low,high");
	}
	if (!APT_RFRange::ProjectRange->Create($project, $low, $high)) {
	    fatal("Could not add new project range");
	}
    }
    else {
	usage();
    }
    exit(0);
}

sub DoAdd()
{
    usage()
	if (!@ARGV);

    my $which = shift(@ARGV);
    if ($which eq "named") {
	AddNamedRange();
    }
    elsif ($which eq "global") {
	AddGlobalRange();
    }
    elsif ($which eq "project") {
	AddProjectRange();
    }
    else {
	usage();
    }
}

#
# Remove various kinds of things
#
sub RemoveNamedRange()
{
    my $errmsg;
    
    usage()
	if (@ARGV != 1);

    my $name  = $ARGV[0];
    my $range = APT_RFRange::NamedRange->Lookup($name);
    if (!defined($range)) {
	fatal("No range with this name");
    }
    if ($range->InUse()) {
	fatal("Range is referenced by either a project, set, or globally");
    }
    $range->Delete() == 0
	or fatal("Could not delete range");

    exit(0);
}

sub RemoveGlobalRange()
{
    usage()
	if (@ARGV != 1);
    my $name  = $ARGV[0];
    my $range = APT_RFRange::GlobalRange->Lookup($name);
    if (!defined($range)) {
	UserError("No such range");
    }
    $range->Delete();
    exit(0);
}

sub RemoveProjectRange()
{
    my $doall = 0;
    
    usage()
	if (@ARGV != 2);

    if ($ARGV[0] eq "-all") {
	$doall = 1;
	shift(@ARGV);
    }
    my $project = Project->Lookup(shift(@ARGV));
    if (!defined($project)) {
	fatal("No such project");
    }
    if ($doall) {
	my $ranges;
	if (APT_RFRange::ProjectRange->LookupAll($project, \$ranges)) {
	    fatal("Could not lookup global ranges");
	}
	if (!keys(%$ranges)) {
	    print "No ranges defined for project\n";
	    exit(0);
	}
	foreach my $range (values(%{$ranges})) {
	    $range->Delete();
	}
    }
    else {
	my $name  = $ARGV[0];
	my $range = APT_RFRange::ProjectRange->Lookup($project, $name);
	if (!defined($range)) {
	    UserError("No such range");
	}
	$range->Delete();
    }
    exit(0);
}

sub DoRemove()
{
    usage()
	if (!@ARGV);

    my $which = shift(@ARGV);
    if ($which eq "named") {
	RemoveNamedRange();
    }
    elsif ($which eq "global") {
	RemoveGlobalRange();
    }
    elsif ($which eq "project") {
	RemoveProjectRange();
    }
    else {
	usage();
    }
}

#
# Only named sets can be modifed.
#
sub DoModify()
{
    my $errmsg;
    
    usage()
	if (!@ARGV);

    my $which = shift(@ARGV);
    if ($which ne "named") {
	usage();
    }
    usage()
	if (@ARGV != 3);

    my ($name, $low, $high) = @ARGV;

    if (CheckFloat($low, \$errmsg)) {
	fatal($errmsg);
    }
    if (CheckFloat($high, \$errmsg)) {
	fatal($errmsg);
    }
    my $range = APT_RFRange::NamedRange->Lookup($name);
    if (!defined($range)) {
	UserError("No such range");
    }
    if ($range->Update($name, $low, $high)) {
	fatal("Could not add update range");
    }
}

#
# Deal with Sets.
#
sub ListSet()
{
    usage()
	if (!@ARGV);

    if ($ARGV[0] eq "-all") {
	my $sets;
	if (APT_RFRange::Set->LookupAll(\$sets)) {
	    fatal("Could not lookup sets");
	}
	if (!keys(%{$sets})) {
	    print "No sets to show you\n";
	    exit(0);
	}
	foreach my $setname (sort(keys(%{$sets}))) {
	    my $set = $sets->{$setname};
	    print "$setname:\n";
	    $set->Dump();
	}
	exit(0);
    }
    my $set = APT_RFRange::Set->Lookup($ARGV[0]);
    if (!defined($set)) {
	UserError("No such set");
    }
    $set->Dump();
    exit(0);
}

sub AddToSet()
{
    my $errmsg;
    usage()
	if (!(@ARGV == 2 || @ARGV == 3));

    my $setname = shift(@ARGV);
    my $set     = APT_RFRange::Set->Lookup($setname);

    if (@ARGV == 1) {
	my $name = $ARGV[0];
	if ($name !~ /^[-\w]+$/) {
	    fatal("Invalid name for range");
	}
	if (defined($set) && $set->FindRange($name)) {
	    UserError("Already have a range with this name in the set");
	}
	if (APT_RFRange::Set::AddRange($setname, $name)) {
	    fatal("Could not add new project range");
	}
    }
    elsif (@ARGV == 2) {
	my ($low, $high) = @ARGV;
	if (CheckFloat($low, \$errmsg)) {
	    fatal($errmsg);
	}
	if (CheckFloat($high, \$errmsg)) {
	    fatal($errmsg);
	}
	if (defined($set) && $set->FindRange($low, $high)) {
	    UserError("Already have a range with this low,high in the set");
	}
	if (APT_RFRange::Set::AddRange($setname, $low, $high)) {
	    fatal("Could not add new project range");
	}
    }
    else {
	usage();
    }
}

sub RemoveFromSet()
{
    my $errmsg;
    usage()
	if (@ARGV != 2);

    my $setname = shift(@ARGV);
    my $name    = shift(@ARGV);
    my $set     = APT_RFRange::Set->Lookup($setname);
    if (!defined($set)) {
	UserError("No such set");
    }
    my $range = $set->FindRange($name);
    if (!defined($range)) {
	UserError("No such range with this name in the set");
    }
    if ($set->RemoveRange($range)) {
	UserError("Could not remove range from set");
    }
    exit(0);
}

sub GrantSet()
{
    my $errmsg;
    usage()
	if (@ARGV != 2);

    my $setname = shift(@ARGV);
    my $set     = APT_RFRange::Set->Lookup($setname);
    if (!defined($set)) {
	UserError("No such set");
    }
    my $project = Project->Lookup(shift(@ARGV));
    if (!defined($project)) {
	UserError("No such project");
    }
    foreach my $range ($set->RangeList()) {
	my $exists;

	if (defined($range->range_id())) {
	    $exists = APT_RFRange::ProjectRange->Lookup($project,
							$range->range_id());
	}
	else {
	    $exists = APT_RFRange::ProjectRange->Lookup($project,
							$range->freq_low(),
							$range->freq_high());
	}
	if (!defined($exists)) {
	    my $new;
	    
	    if (defined($range->range_id())) {
		$new = APT_RFRange::ProjectRange->Create($project,
							 $range->range_id());
	    }
	    else {
		$new = APT_RFRange::ProjectRange->Create($project,
							 $range->freq_low(),
							 $range->freq_high());
	    }
	    if (!defined($new)) {
		fatal("Could not add $range to project");
	    }
	}
    }
    exit(0);
}

sub DoSet()
{
    usage()
	if (!@ARGV);

    my $which = shift(@ARGV);
    if ($which eq "list") {
	ListSet();
    }
    elsif ($which eq "add") {
	AddToSet();
    }
    elsif ($which eq "remove") {
	RemoveFromSet();
    }
    elsif ($which eq "grant") {
	GrantSet();
    }
}

sub fatal($)
{
    my ($mesg) = @_;

    if (defined($webtask)) {
	$webtask->output($mesg);
	$webtask->Exited(-1);
    }
    print STDERR "*** $0:\n".
	         "    $mesg\n";
    # Exit with negative status so web interface treats it as system error.
    exit(-1);
}

sub UserError($)
{
    my ($mesg) = @_;

    if (defined($webtask)) {
	$webtask->output($mesg);
	$webtask->Exited(1);
    }
    print STDERR "*** $0:\n".
	         "    $mesg\n";
    exit(1);
}

