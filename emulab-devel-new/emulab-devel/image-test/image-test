#!/usr/bin/perl -w

#
# Copyright (c) 2005-2006 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

########################################################################

# This value is prefixed to all experiments to avoid conflicts with
# existing experient names
my $eid_prefix = 'it-';

# Maxium length of experment name
my $max_eid_length = 19;

# Where libxmlrpc is
use lib "/usr/testbed/lib";

########################################################################
#
# Prelude
#

use strict;

use ImageTest;
use Cwd;
use Getopt::Long;
use POSIX 'setsid';
use POSIX ':sys_wait_h';
use Errno 'EINTR';

use libxmlrpc;

sub true() {1}
sub false() {0}

sub LARGE_NUM {100000}

########################################################################
#
# Process command-line arguments
#

sub usage() {
  die "usage: $0 -? | -l | [OPTIONS] IMAGE [EXPS ...]\n";
}

sub help() {
  print
    ("usage: $0 -h | -l | [OPTIONS] IMAGE [EXPS ...]\n".
     "  IMAGE      image to use\n".
     "  EXPS       if present only run these particular experiments\n".
     "  -? --help  print this help message\n".
     "  -l --list  just list the available experements\n".
     "OPTIONS:\n".
     "  -s STAGES  only execute particular stages of the experiment where\n".
     "             STAGES is any one of:\n".
     "               c: create, s: swapin, t: test o: swapout, e: end experment\n".
     "             (note 'e' implies 'o')\n".
     "  -p         run experments in parallel\n".
     "  -m NUM     soft limit on the maximum number of nodes to use at once\n".
     "  -M NUM     hard limit on the maximum number of nodes to use at once\n".
     "  -e FILE    exceptions file to use\n".
     "  -u         don't swap an experment out with unexpected failed tests\n".
     "  -h         halt on failed swapouts\n".
     "  --eid-prefix STR  (default \"it-\")\n".
     "  --skip-std-tests  skip standard tests expect for ssh-*\n");
}

die usage unless @ARGV > 0;
my $ARGV = join ' ', @ARGV;

my $cwd = cwd();
$cwd =~ s~^/q/~/~;
die "Working Directory needs to be in /proj\n" unless $cwd =~ m~^/proj~;

my $basedir = $cwd;

my $srcdir = $cwd;
my $destdir = $cwd;

my $date=`date +%Y%m%d%H%M`;
chop $date;
$destdir="$destdir/results-$date";

my $testsdir = "$srcdir/tests";

my ($pid) = $cwd =~ m~^/proj/(.+?)/~;

my @argv;

my $stages = 'cstoe';
my $in_parallel;
my $soft_limit = 5;
my $hard_limit = 0;
my $exceptions_file;
my $dont_swapout_unexpected = false;
my $halt_failed_swapouts = false;
my $just_list;
my $skip_std_tests = false;

Getopt::Long::Configure 'no_ignore_case';

GetOptions
    "help|?" => sub {help(); exit 0;},
    "s=s" => \$stages,
    "p" => \$in_parallel,
    "m=i" => \$soft_limit,
    "M=i" => \$hard_limit,
    "e=s" => \$exceptions_file,
    "u" => \$dont_swapout_unexpected,
    "h" => \$halt_failed_swapouts,
    "l|list" => \$just_list,
    "eid-prefix=s" => \$eid_prefix,
    "skip-std-tests" => \$skip_std_tests
  or usage();

$soft_limit = LARGE_NUM   if $soft_limit == 0;
$hard_limit = LARGE_NUM   if $hard_limit == 0;
$soft_limit = $hard_limit if $soft_limit > $hard_limit;

if (@ARGV == 0 && !$just_list) {
  print STDERR "Must specify an image.\n";
  usage();
}

my $os = shift @ARGV;
my @exps_torun = map {lc} @ARGV;

if ($stages =~ /([^cstoe])/) {
  print STDERR "Unknown stage, \"$1\", in stage string.\n" if $stages =~ /([^cstoe])/;
  usage();
}

########################################################################
#
# Get the list of exceptions
#

my @exps_toskip;
my %tests_toskip;
my %tests_toignore;

if (defined $exceptions_file) {

  open F, $exceptions_file;

  my $lineno = 1;
  while (<F>) {
    chop;
    s/\#.*//;
    s/^\s+//;
    next unless /\S/;
    if (s/^in\s+(\S+)\s+//) {
      my $exp = $1;
      if (s/^skip\s+//) {
	my @tests = split /\s+/;
	push @{$tests_toskip{$exp}}, @tests; 
      } elsif (s/^ignore\s+//) {
	my @tests = split /\s+/;
	push @{$tests_toignore{$exp}}, @tests;
      } else {
	die "Syntax error in line $lineno of \"$exceptions_file\"\n";
      }
    } elsif (s/^skip\s+//) {
      my @exps = split /\s+/;
      push @exps_toskip, @exps;
    } else {
      die "Syntax error in line $lineno of \"$exceptions_file\"\n";
    }
    $lineno++;
  }

}


########################################################################
#
# Get the list of experments to run
#

sub get_parms ($);
sub get_numnodes ($);
sub mktests ($$$@);

my @exps;
my %exps;
my @exps_inseries;
my $num_exps_inparallel = 0;
my @exps_inparallel_bysize;

my @p;

opendir D, "$testsdir";
while (my $test = readdir D) {
  next if $test =~ /^(\.|CVS)/;
  @p = get_parms $test;
  mktests $test, get_numnodes $test, [], @p;
}

sub get_parms ($) {
  my ($test) = @_;
  my @p;
  open F, "$testsdir/$test/parms" or return;
  while (<F>) {
    chop;
    next if /^\s*$/;
    my ($key, $value) = /^\s*(.+?)\s*:\s*(.+?)\s*$/ or die "?$_?";
    my @values = split /\s+/, $value;
    push @p, [$key, [@values]];
  }
  return @p;
}

sub get_numnodes ($) {
  # FIXME: needs better error detection
  my ($test) = @_;
  open F, "$testsdir/$test/num-nodes" or die "Unable to open $test/num-nodes\n";
  local $_ = <F>;
  chop;
  return $_;
}

sub use_exp ( $ );
sub get_exceptions ( $$ );

sub mktests ($$$@) {
  my ($test, $numnodes, $what, @parms) = @_;
  if (@parms == 0) {
    my $t = $test;
    for (my $i = 1; $i < @$what; $i += 2) {$t .= "-".lc($what->[$i])}
    return unless use_exp $t;
    $exps{$t} = {pid => $pid,
		 eid => "$eid_prefix$t",
		 numnodes => $numnodes,
		 os => $os,
		 datadir => "$testsdir/$test",
		 resultsdir => "$destdir/$t",
		 @$what,
		 stages => $stages,
		 dont_swapout_unexpected => $dont_swapout_unexpected,
		 skip => get_exceptions($t, \%tests_toskip),
		 ignore =>  get_exceptions($t, \%tests_toignore),
		 skip_std_tests => $skip_std_tests};
    push @exps, $t;
  } else {
    my $p = shift @parms;
    foreach (@{$p->[1]}) {
      mktests $test, $numnodes, [@$what, $p->[0], $_], @parms;
    }
  }
}

sub use_exp ($) {
  my ($exp) = @_;
  foreach my $e (@exps_toskip) {
    return false if ($e eq $exp);
    return false if $exp =~ /^$e-/;
  }
  return true if (@exps_torun == 0);
  foreach my $e (@exps_torun) {
    return true if ($e eq $exp);
    return true if $exp =~ /^$e-/;
  }
  return false;
}

sub get_exceptions ($$) {
  my ($exp, $exceptions) = @_;
  my @res;
  foreach my $e (keys %$exceptions) {
    push(@res, @{$exceptions->{$e}})
	if $e eq '*' || $e eq $exp || $exp =~ /^$e-/;
  }
  return \@res;
}

########################################################################
#
# Handle the just list case
#

if ($just_list) {
  foreach (@exps) {
    print "$_\n";
  }
  exit 0;
}

########################################################################
#
# Perform some basic pre-checks to catch common errors.
#

#
# Check to make sure the image exists
#

if ($stages =~ /c/ || $os ne '.') {
  my $res = CallMethod0("osid", "getlist", {});
  die $res->{output} unless $res->{code} == 0;
  my $found_image = false;
  while (my ($k,$v) = each %{$res->{value}}) {
    next unless $v->{pid} eq 'emulab-ops' || $v->{pid} eq $pid;
    $found_image = true if ($k eq $os);
  }
  if (!$found_image) {
    print STDERR "The osid \"$os\" doesn't exists in the \"emulab-ops\" or \"$pid\" project.\n";
    exit 2;
  }
}

#
# Check to make sure that each experiment is a valid name and
# it doesn't already exists.
#

my $eid_to_long = '';
foreach my $e (@exps) {
  my $eid = "$eid_prefix$e";
  if (length($eid) > $max_eid_length) {
    $eid_to_long = $eid unless length($eid_to_long) > length($eid);
  }
}
if (length($eid_to_long) > 0) {
  print STDERR "The experiment name \"$eid_to_long\" is longer than $max_eid_length characters.\n";
  exit 2;
}

if ($stages ne 'e') {
  my $exp_errors = 0;

  foreach my $e (@exps) {
    my $eid = "$eid_prefix$e";
    my $res = CallMethod0("experiment", "state", {proj=>$pid, exp=>$eid});
    die $res->{output} unless $res->{code} == 0 || $res->{code} == 2;
    if ($stages =~ /c/) {
      # should't exist
      if ($res->{code} != 2) {
	print STDERR "Experiment \"$eid\" in \"$pid\" must not exist.\n";
	$exp_errors++;
      }
    } elsif ($stages =~ /s/) {
      # need to exist, but not be swapped in
      if ($res->{code} != 0 || $res->{value} ne 'swapped') {
	print STDERR "Experiment \"$eid\" in \"$pid\" must be in the \"swapped\" state.\n";
	$exp_errors++;
      }
    } else {
      # need to exist, and be swapped in
      if ($res->{code} != 0 || $res->{value} ne 'active') {
	print STDERR "Experiment \"$eid\" in \"$pid\" must be in the \"active\" state.\n";
	$exp_errors++;
      }
    }
  }
  if ($exp_errors) {
    exit 2;
  }
}

#sub experment_precheck($) {
#  if ($
#}


########################################################################
#
# Set everything up
#

#
# setup results directory
#

mkdir $destdir, 0777;
unlink "$basedir/results";
symlink "results-$date", "results";

open F, ">$destdir/argv" or die;
print F "$ARGV\n";
close F;

open LOG, ">$destdir/log" or die;
autoflush LOG, 1;

print LOG "EXPECT RESULTS IN \"$destdir\"\n";

#
# Fork a child to do the real work.
# The parent will monitor the log file and echo the results to stdout.
# And pass the TERM and INT signals to the child.
#

if ((my $pid = fork()) != 0) {

  my $TERM;
  $TERM = sub {
    my ($sig) = @_;
    $SIG{$sig} = $TERM;
    kill $sig, $pid;
  };
  $SIG{TERM} = $TERM;
  $SIG{INT} = $TERM;

  open LOG2, "$destdir/log";

  my $res = 0;
  for (;;) {
    my $data;
    $res = sysread LOG2, $data, 1024;
    last if (!defined $res && $! != EINTR); # Error
    print $data;
    if ($res == 0) {
      my $p = waitpid $pid, WNOHANG;
      last if $p > 0;
      sleep 1;
    }
  }

  unless (defined $res) {
    my $str = "read: $!\n";
    print $str;
    print LOG $str;
    exit 1;
  }

  exit 0;

} elsif (not defined $pid) {
  die "couldn't fork child\n";
}

#
# disassociate stufff
#

open STDIN, "/dev/null";
setsid();
delete $ENV{DISPLAY};

#
# setup standard output streams
#

open STDOUT, ">&LOG";
open STDERR, ">&LOG";

autoflush STDOUT, 1;
autoflush STDERR, 1;

#
# setup signal handlers
#

my $quit = 0;

sub TERM {
  my ($sig) = @_;
  print "TERMINATING\n";
  $quit = 1;
  $SIG{TERM} = sub {
    $SIG{$sig} = \&TERM;
  };
  kill TERM => -$$;
}
$SIG{TERM} = \&TERM;
$SIG{INT} = \&TERM;

########################################################################
#
# Begin
#

sub start_exp ($);    # parms: experiment name
                      # starts an experent, returns nothing
sub wait_exp ();      # parms: none
                      # waits for an expernet to end, returns nothing
sub get_exps ($@);    # parms: available nodes, size list
                      # returns list of experments, see below
sub get_sizelist ($); # parms: maxim size
                      # returns list of sizes less than max
sub extract_exps (@); # parms: size list
                      # extracts nodes from %explist_bysize and returns them

my @results;
my %pids;

my $avail_in_parallel = $in_parallel ? $soft_limit : 0;

#
# fill the initial list of experments to run in parallel and in series
#

foreach (@exps) {
  my $s = $exps{$_}{numnodes};
  if ($s <= $avail_in_parallel) {
    push @{$exps_inparallel_bysize[$s]}, $_;
    $num_exps_inparallel++;
  } else {
    push @exps_inseries, $_;
  }
}
for (my $i = 0; $i <= $avail_in_parallel; $i++) {
  $exps_inparallel_bysize[$i] = [] unless defined $exps_inparallel_bysize[$i];
}

#
# run as many experiments in parallel as possible
#

while (%pids || $num_exps_inparallel > 0) {
  last if $quit;
  my ($size, @set) = get_exps($avail_in_parallel, 
			      get_sizelist($avail_in_parallel));
  last if (!%pids && $size == 0); # unable to run any more experments
                                  # in parallel so give up
  foreach (extract_exps(@set)) {
    start_exp($_);
  }
  wait_exp();
}

#
# remove any experiments that were unable to be run in parallel
#

foreach (@exps_inparallel_bysize) {
  foreach my $exp (@$_) {
    push @exps_inseries, $exp;
  }
}

#
# run the rest in series, unless over the hard limit
#

foreach my $exp (@exps_inseries) {
  last if $quit;
  if ($exps{$exp}{numnodes} > $hard_limit) {
    print "SKIPPING $exp since it uses more nodes than are available\n";
    next;
  }
  next if $exps{$exp}{numnodes} > $hard_limit;
  start_exp($exp);
  wait_exp();
}


#
# Wait for any remaing experments to end, which may happen if $quit.
#

while (%pids) {
  wait_exp();
}

#
# Start an experment, keeping $avail_in_parallel in sync
#

sub start_exp ($) {
  my ($exp) = @_;
  print "STARTING TEST EXP $exp\n";
  my $pid = test_experiment %{$exps{$exp}};
  $pids{$pid} = $exp;
  $avail_in_parallel -= $exps{$exp}{numnodes};
}

#
# Wait for an experient to end, keeping $avail_in_parallel in sync. If
# for some reason an experient couldn't be swapped out than adjust the soft and
# hard limits accordingly.
#
sub wait_exp () {
  my $pid = wait();
  if ($pid >= 0) {
    my $exp = $pids{$pid};
    delete $pids{$pid};
    my $exit = $? >> 8;
    &print_results_summary($exp, $exit);
    push @results, [$exp, $exit];
    my $F = new IO::File ">$exps{$exp}{resultsdir}/exit";
    print $F "$exit\n";
    print $F exit_str($exit), "\n";
    print $F &results_summary($exp, $exit), "\n";
    close $F;
    unless (($exit & STATUS_MASK) == STATUS_SWAPPEDIN) {
      $avail_in_parallel += $exps{$exp}{numnodes};
    } else {
      # the experient failed to swap out
      if ($halt_failed_swapouts) {
	print "  will not start any new experiments\n";
	$quit = 1;
      } else {
	# since the nodes are still in use substract that number from
	# the soft and hard limits
	$soft_limit -= $exps{$exp}{numnodes}   unless $soft_limit == LARGE_NUM;
	$hard_limit -= $exps{$exp}{numnodes}   unless $hard_limit == LARGE_NUM;
	print "  only $hard_limit nodes now available for use\n"
	    unless $hard_limit == LARGE_NUM;
      }
    }
    print "FINISHED TEST EXP $exp\n";
  }
}

#
# get_exps: get a list of experiments (actually sizes) to run
# such that the total number of nodes used is less than $avail.
# the second paramater is a sorted list of experment sizes with
# the smallest size first
#
sub get_exps($@) {
  my ($avail,@exps_s) = @_;
  return (0) unless @exps_s;
  while ($exps_s[-1] > $avail) {
    pop @exps_s;
  }
  if ($exps_s[-1] == $avail) {
    return ($avail, $exps_s[-1]);
  } else {
    # every element of @exps_s < $avail
    my $best_size = 0;
    my @best_set  = ();
    while (@exps_s) {
      my $s = pop @exps_s;
      my ($size, @set) = get_exps($avail - $s, @exps_s);
      $size += $s;
      push @set, $s;
      return ($size, @set) if $size == $avail;
      ($best_size = $size, @best_set = @set) if $size > $best_size;
    }
    return ($best_size, @best_set);
  }
}

sub get_sizelist ($) {
  my ($max) = @_;
  my @sizes;
  for (my $i = 1; $i <= $max; $i++) {
    for (my $j = 0; $j < @{$exps_inparallel_bysize[$i]}; $j++) {
      push @sizes, $i;
    }
  }
  return @sizes;
}

sub extract_exps (@) {
  my @e;
  foreach (@_) {
    push @e, (shift @{$exps_inparallel_bysize[$_]});
    $num_exps_inparallel--;
  }
  return @e;
}

########################################################################
#
# Finish
#

print "SUMMARY: \n";

sub print_results_summary($$) {
  my ($exp, $res) = @_;
  print "  $exp ", results_summary($exp, $res), "\n";
}

foreach (@results) {
  &print_results_summary(@$_);
}

sub failed_but_ignored($) {
  my ($exp) = @_;
  open FAILED, "$exps{$exp}{resultsdir}/failed-but-ignored";
  my $res;
  while (<FAILED>) {
    chop;
    $res .= "$_ ";
  }
  chop $res;
  return $res;
}

sub failed_tests($) {
  my ($exp) = @_;
  open FAILED, "$exps{$exp}{resultsdir}/failed-tests";
  my $res;
  while (<FAILED>) {
    chop;
    $res .= "$_ ";
  }
  chop $res;
  return $res;
}

sub results_summary($$) {
  my ($exp, $res) = @_;

  return "passed"
    if $res == (ERR_NONE | STATUS_NONE);
  return "passed but is still swapped in"
    if $res == (ERR_NONE | STATUS_SWAPPEDIN);
  return "passed but still exists" 
    if $res == (ERR_NONE | STATUS_EXISTS);
  return "passed but requires cleanup"
    if $res == (ERR_NONE | STATUS_CLEANUP);

  return "passed with expected failures: ".failed_but_ignored($exp)
    if $res == (ERR_EXPECTED | STATUS_NONE);
  return "passed with expected failures but is still swapped in: ".failed_but_ignored($exp)
    if $res == (ERR_EXPECTED | STATUS_SWAPPEDIN);
  return "passed with expected failures but still exists: ".failed_but_ignored($exp)
    if $res == (ERR_EXPECTED | STATUS_EXISTS);
  return "passed with expected failures but requires cleanup: ".failed_but_ignored($exp)
    if $res == (ERR_EXPECTED | STATUS_CLEANUP);

  return "had failed tests: ".failed_tests($exp)
    if $res == (ERR_FAILED | STATUS_NONE);
  return "is still swapped in and had failed tests: ".failed_tests($exp)
    if $res == (ERR_FAILED | STATUS_SWAPPEDIN);
  return "still exists had failed tests: ".failed_tests($exp)
    if $res == (ERR_FAILED | STATUS_EXISTS);
  return "requires cleanup and had failed tests: ".failed_tests($exp)
    if $res == (ERR_FAILED | STATUS_CLEANUP);

  return "had one or more fatal errors"
    if $res == (ERR_FATAL | STATUS_NONE);
  return "had one or more fatal errors and is still swapped in"
    if $res == (ERR_FATAL | STATUS_SWAPPEDIN);
  return "had one or more fatal errors and still exists"
    if $res == (ERR_FATAL | STATUS_EXISTS);
  return "had one or more fatal errors and requires cleanup"
    if $res == (ERR_FATAL | STATUS_CLEANUP);

  return "was interrupted"
    if $res == (ERR_INT | STATUS_NONE);
  return "was interrupted and is still swapped in"
    if $res == (ERR_INT | STATUS_SWAPPEDIN);
  return "was interrupted and still exists"
    if $res == (ERR_INT | STATUS_EXISTS);
  return "was interrupted and requires cleanup"
    if $res == (ERR_INT | STATUS_CLEANUP);

  return "exited with unknown code: $res";
}

print "RESULTS IN \"$destdir\".\n";


