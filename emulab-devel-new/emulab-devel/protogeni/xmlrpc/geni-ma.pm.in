#!/usr/bin/perl -w
#
# Copyright (c) 2008-2016 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Frontier::Responder;
use Frontier::RPC2;

# Do this early so that we talk to the right DB.
use vars qw($GENI_DBNAME $GENI_METHODS $EMULAB_PEMFILE
	    $GENI_RESPONSE_CONVERTER $GENI_VERSION);
BEGIN { $GENI_DBNAME = "geni"; }

# Configure variables
my $ETCDIR         = "@prefix@/etc";
$EMULAB_PEMFILE    = "$ETCDIR/genisa.pem";

# Testbed libraries.
use lib '@prefix@/lib';
use GeniMA;
use GeniResponse;

GeniMA::SetGeniVersion($GENI_VERSION);

if (defined($GENI_VERSION)) {
        if ($GENI_VERSION != 1) {
            if ($GENI_VERSION != 2) {
                print STDERR "Invalid API version: $GENI_VERSION\n";
                print STDERR "Will fall back to API version 2\n";
                #fallback to version 2
            }
            $GENI_METHODS = {
                 "get_version"                  => \&GeniMA::GetVersion,

                 "create"                       => \&GeniMA::Create,
                 "lookup"                       => \&GeniMA::Lookup,
                 "update"                       => \&GeniMA::Update,
                 "delete"                       => \&GeniMA::Delete,
    
                 "get_credentials"              => \&GeniMA::GetCredentials,
            };
        } else {
            $GENI_METHODS = {
                 "get_version"                     => \&GeniMA::GetVersion,
                 "lookup_public_member_info"       => \&GeniMA::LookupPublic,
                 "lookup_private_member_info"      => \&GeniMA::LookupPrivate,
                 "lookup_identifying_member_info"  => \&GeniMA::LookupIdentifying,
                 "update_member_info"              => \&GeniMA::UpdateMember,
                 "get_credentials"                 => \&GeniMA::GetCredentials,
             
                 "create_key"                      => \&GeniMA::CreateKey,
                 "delete_key"                      => \&GeniMA::DeleteKey,
                 "update_key"                      => \&GeniMA::UpdateKey,
                 "lookup_keys"                     => \&GeniMA::LookupKeys,
         };
     }
} else {
    #print STDERR "No API version specified in URL\n";
    #print STDERR "Will fall back to supporting both API version 1 and version 2. get_version will fall back to version 2.\n";

    $GENI_METHODS = {
            "get_version"                     => \&GeniMA::GetVersion,
            "get_credentials"                 => \&GeniMA::GetCredentials,

            "lookup_public_member_info"       => \&GeniMA::LookupPublic,
            "lookup_private_member_info"      => \&GeniMA::LookupPrivate,
            "lookup_identifying_member_info"  => \&GeniMA::LookupIdentifying,
            "update_member_info"              => \&GeniMA::UpdateMember,
        
            "create_key"                      => \&GeniMA::CreateKey,
            "delete_key"                      => \&GeniMA::DeleteKey,
            "update_key"                      => \&GeniMA::UpdateKey,
            "lookup_keys"                     => \&GeniMA::LookupKeys,

            "create"                          => \&GeniMA::Create,
            "lookup"                          => \&GeniMA::Lookup,
            "update"                          => \&GeniMA::Update,
            "delete"                          => \&GeniMA::Delete,
    };
}

1;
