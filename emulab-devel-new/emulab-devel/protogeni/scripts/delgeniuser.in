#!/usr/bin/perl -w
#
# Copyright (c) 2008-2013 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;

#
# Remove a geni user from the DB.
# 
sub usage()
{
    print "Usage: delgeniuser -c | -m | -s <urn|hrn>\n";
    exit(1);
}
sub fatal($);
my $optlist = "cmsf";
my $doch    = 0;
my $docm    = 0;
my $dosa    = 0;
my $force   = 0;

#
# Configure variables
#
my $TB		  = "@prefix@";
my $TBOPS         = "@TBOPSEMAIL@";
my $TBLOGS        = "@TBLOGSEMAIL@";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1; 

# Load the Testbed support stuff.
use lib "@prefix@/lib";
use GeniDB;
use GeniUser;
use GeniCertificate;
use GeniSlice;

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"f"})) {
    $force = 1;
}
if (defined($options{"c"})) {
    $doch = 1;
}
if (defined($options{"m"})) {
    $docm = 1;
}
if (defined($options{"s"})) {
    $dosa = 1;
}
usage()
    if (@ARGV != 1 ||
	($dosa + $doch + $docm) == 0 || ($dosa + $doch + $docm) > 1);
my $token = $ARGV[0];

# Map invoking user to object.
my $this_user = User->ThisUser();
if (! defined($this_user)) {
    fatal("You ($UID) do not exist!");
}

# Connect to the proper DB.
DBConnect(($doch ? GENICH_DBNAME() :
	   ($docm ? GENICM_DBNAME() : GENISA_DBNAME())));

my $geniuser = GeniUser->Lookup($token);
if (!defined($geniuser)) {
    fatal("No such user");
}
my @slices = GeniSlice->LookupByCreator($geniuser);
if (@slices && !$force) {
    fatal("$geniuser has active slices. Not deleting.\n");
}
$geniuser->Delete() == 0
    or fatal("Could not delete $geniuser\n");

sub fatal($) {
    my ($msg) = @_;

    print STDERR "$msg\n";
    exit(1);
}
