#!/usr/bin/perl -w
#
# Copyright (c) 2008-2018 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use Data::Dumper;

#
# Verify a certificate is signed by someone in the bundle.
#
sub usage()
{
    print STDERR "Usage: $0 [-e] <cert file>\n";
    exit(1);
}
my $optlist   = "e";
my $chainonly = 0;

# Configure ...
my $TB		   = "@prefix@";
my $EMULAB_PEMFILE = "$TB/etc/emulab.pem";

use lib '@prefix@/lib';
use GeniCertificate;
use GeniHRN;

sub fatal($)
{
    my ($msg) = @_;

    die("*** $0:\n".
	"    $msg\n");
}

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"e"})) {
    $chainonly = 1;
}
usage()
    if (@ARGV != 1);
my $certfile = $ARGV[0];

my $certificate = GeniCertificate->LoadFromFile($certfile);
if (!defined($certificate)) {
    fatal("Could not parse certificate");
}
if ($certificate->VerifySSLChain()) {
    fatal("Could not verify certificate");
}
exit(0)
    if ($chainonly);
#
# We now know the the root cert, make sure its us.
#
my $ourcert = GeniCertificate->LoadFromFile($EMULAB_PEMFILE);
if (!defined($ourcert)) {
    fatal("Could not load $EMULAB_PEMFILE");
}
if (!$ourcert->SameCert($certificate->rootcert())) {
    fatal("We did not sign this certificate!");
}
exit(0);
