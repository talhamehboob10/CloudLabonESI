#!/usr/bin/perl -w
#
# Copyright (c) 2008-2010 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;

#
# Register slivers at their SAs
# 
sub usage()
{
    print "Usage: register_sliver [-d] [-u] slice_idx\n";
    exit(1);
}
my $optlist    = "ndu";
my $debug      = 1;
my $impotent   = 0;
my $unregister = 0;
sub fatal($);

#
# Configure variables
#
my $TB		  = "@prefix@";
my $TBOPS         = "@TBOPSEMAIL@";
my $TBLOGS        = "@TBLOGSEMAIL@";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1; 

#
# Check args.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"n"})) {
    $impotent = 1;
}
if (defined($options{"u"})) {
    $unregister  = 1;
}
usage()
    if (@ARGV != 1);

use vars qw($GENI_DBNAME);
$GENI_DBNAME = "geni-cm";

# Now we can load the libraries after setting the proper DB.
use lib '@prefix@/lib';
use libtestbed;
require GeniDB;
require Genixmlrpc;
require GeniCertificate;
require GeniSlice;
require GeniCM;

my $slice = GeniSlice->Lookup($ARGV[0]);
if (!defined($slice)) {
    fatal("Could not find slice in the DB");
}

#
# The RPC context for this script is as the SA
#
my $EMULAB_PEMFILE = "@prefix@/etc/genicm.pem";
my $certificate  = GeniCertificate->LoadFromFile($EMULAB_PEMFILE);
if (!defined($certificate)) {
    fatal("Could not load certificate from $EMULAB_PEMFILE");
}
$ENV{'MYURN'} = "urn:publicid:IDN+@OURDOMAIN@+authority+cm";
Genixmlrpc->SetContext(Genixmlrpc->Context($certificate));
Genixmlrpc->SetTimeout(10);

if ($slice->Lock() != 0) {
    print STDERR "Could not lock slice $slice. Try again later.\n";
    exit(0);
}
my $retval = ($unregister ?
	      GeniCM::UnRegisterSliver($slice) :
	      GeniCM::RegisterSliver($slice));
$slice->UnLock();
exit($retval);

sub fatal($) {
    my ($msg) = @_;

    print STDERR "$msg\n";
    exit(1);
}
