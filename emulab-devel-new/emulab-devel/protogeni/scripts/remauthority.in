#!/usr/bin/perl -w
#
# Copyright (c) 2008-2011 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Data::Dumper;
use Getopt::Std;

#
# Remove an authority from the DB.
# 
sub usage()
{
    print "Usage: remauthority [-c | -m] <uuid>\n";
    exit(1);
}
my $optlist    = "cm";
my $asch       = 0;
my $ascm       = 0;

sub fatal($);

#
# Check args.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"c"})) {
    $asch = 1;
}
if (defined($options{"m"})) {
    $ascm = 1;
}
usage()
    if (@ARGV != 1);

my $uuid     = $ARGV[0];

use vars qw($GENI_DBNAME);
if ($asch) {
    $GENI_DBNAME = "geni-ch";
}
elsif ($ascm) {
    $GENI_DBNAME = "geni-cm";
}

# Now we can load the libraries after setting the proper DB.
use lib '@prefix@/lib';
require GeniDB;
require GeniCertificate;
require GeniAuthority;
require GeniSlice;
require GeniUser;
require GeniComponent;

my $authority = GeniAuthority->Lookup($uuid);
if (!defined($authority)) {
    fatal("No such authority in DB");
}
if ($authority->type() eq "cm") {
    if (GeniComponent->DeleteAll($authority) != 0) {
	fatal("Could not delete components for $authority");
    }
}
elsif ($authority->type() eq "sa") {
    if (GeniSlice->DeleteAll($authority) != 0) {
	fatal("Could not delete slices for $authority");
    }
    if (GeniUser->DeleteAll($authority) != 0) {
	fatal("Could not delete users for $authority");
    }
    GeniCertificate->DeleteCRL($authority);
}
elsif ($authority->type() eq "ses") {
    # Nothing to do.
}
elsif ($authority->type() eq "am") {
    # Nothing to do.
}
else {
    fatal("Do not know how to delete $authority");
}

if ($authority->Delete() != 0) {
    fatal("Could not delete components for $authority");
}

exit(0);

sub fatal($)
{
    my ($msg) = @_;

    die("*** $0:\n".
	"    $msg\n");
}
