#!/usr/bin/perl -w
#
# Copyright (c) 2009-2010 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use Data::Dumper;

#
# Ask all components managers for a list of tickets issued.
# 
sub usage()
{
    print "Usage: listusage [cm ...]\n";
    exit(1);
}
my $optlist    = "";
my $errors     = 0;
my @managers;
sub fatal($);

#
# Configure variables
#
my $TB		  = "@prefix@";
my $TBOPS         = "@TBOPSEMAIL@";
my $TBLOGS        = "@TBLOGSEMAIL@";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1; 

#
# Check args.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
use vars qw($GENI_DBNAME);
$GENI_DBNAME = "geni-ch";

# Now we can load the libraries after setting the proper DB.
use lib '@prefix@/lib';
use libtestbed;
require GeniDB;
require Genixmlrpc;
use GeniResponse;
require GeniCertificate;
require GeniCredential; 
require GeniAuthority;
require GeniSlice;

if (@ARGV) {
    while (@ARGV) {
	my $urn = shift(@ARGV);

	my $manager = GeniAuthority->Lookup($urn);
	print STDERR "Could not lookup up CM $urn\n"
	    if (!defined($manager));

	push(@managers, $manager);
    }
}
else {
    #
    # List of all CMs.
     #
    my $query_result =
	GeniDB::DBQueryWarn("select uuid from geni_authorities ".
			    "where type='cm'");
    fatal("Could not lookup CM list")
	if (!defined($query_result));
    fatal("No managers listed in the DB; is this a ClearingHouse?")
	if (!$query_result->numrows);

    while (my ($manager_uuid) = $query_result->fetchrow_array()) {
	my $manager = GeniAuthority->Lookup($manager_uuid);
	print STDERR "Could not lookup up CM $manager_uuid\n"
	    if (!defined($manager));

	push(@managers, $manager);
    }
}

#
# The RPC context for this script is as the CH
#
my $certificate = GeniRegistry::ClearingHouse->GetCertificate();
if (!defined($certificate)) {
    fatal("Could not load ClearingHouse certificate");
}
Genixmlrpc->SetContext(Genixmlrpc->Context($certificate));
Genixmlrpc->SetTimeout(15);

my $authority = GeniAuthority->Lookup($certificate->urn());
if (!defined($authority)) {
    fatal("Could not locate ClearingHouse authority object");
}

#
# Use a self signed clearinghouse credential.
#
my $credential = GeniCredential->GetSelfCredential($authority);
if (!defined($credential)) {
    fatal("Could not create self signed clearinghouse credential");
}

#
# Call ListHistory on a CM.
#
sub ListHistory($)
{
    my ($manager) = @_;
    
    print "$manager\n";
	
    my $response =
	Genixmlrpc::CallMethod($manager->url(), undef,
			       "ListHistory",
			       { "type"        => "",
				 "credential"  => $credential->asString(),
				 "credentials" => [$credential->asString()]});
    if (!defined($response) || $response->code() != GENIRESPONSE_SUCCESS) {
	print STDERR
	    "Could not listusage on $manager: ".
	    (defined($response) ? $response->output() : "") . "\n";
	    $errors++;
	return;
    }
    foreach my $ref (@{$response->value()}) {
	my $owner_hrn = $ref->{'owner_hrn'};
	my $slice_hrn = $ref->{'slice_hrn'};
	my $created   = $ref->{'created'};
	my $redeemed  = $ref->{'redeemed'};
	my $expired   = $ref->{'expired'};
	my $released  = $ref->{'released'};
	my $rspec     = $ref->{'rspec'};

	print "$owner_hrn,$slice_hrn,$created,$redeemed,$expired,$released\n";
	print "$rspec\n";
    }
}
foreach my $manager (@managers) {
    ListHistory($manager);
}
exit($errors);

sub fatal($) {
    my ($msg) = @_;

    print STDERR "$msg\n";
    exit(1);
}
