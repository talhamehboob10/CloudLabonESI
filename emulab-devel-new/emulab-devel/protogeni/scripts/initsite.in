#!/usr/bin/perl -w
#
# Copyright (c) 2008-2018 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use vars qw($GENI_DBNAME);

#
# Initialize an emulab to act as a protogeni emulab. Add optional -c
# option if this is a clearinghouse.
# 
sub usage()
{
    print "Usage: initpgenisite\n";
    exit(1);
}
my $optlist = "n";
my $asch    = @PROTOGENI_ISCLEARINGHOUSE@;
my $cflag   = ($asch ? "-c" : "");
my $noregister = 0;

#
# Configure variables
#
my $TB		  = "@prefix@";
my $TBOPS         = "@TBOPSEMAIL@";
my $TBLOGS        = "@TBLOGSEMAIL@";
my $OURDOMAIN     = "@OURDOMAIN@";
my $PGENIDOMAIN   = "@PROTOGENI_DOMAIN@";
my $PGENISUPPORT  = @PROTOGENI_SUPPORT@;
my $PROTOGENI_RPCNAME = "@PROTOGENI_RPCNAME@";
my $PROTOGENI_RPCPORT = "@PROTOGENI_RPCPORT@";
my $OUTERBOSS_XMLRPCPORT = "@OUTERBOSS_XMLRPCPORT@";
my $PROTOGENI_WEBSITE  = "@PROTOGENI_WEBSITE@";
my $PROTOGENI_URL = "@PROTOGENI_URL@";
my $geniuserid    = "geniuser";
my $geniprojid    = "GeniSlices";
my $PROTOUSER	  = "elabman";
my $NEWUSER	  = "$TB/sbin/newuser";
my $NEWPROJ	  = "$TB/sbin/newproj";
my $MKPROJ	  = "$TB/sbin/mkproj";
my $TBACCT	  = "$TB/sbin/tbacct";
my $ADDAUTHORITY  = "$TB/sbin/protogeni/addauthority";
my $GETCACERTS    = "$TB/sbin/protogeni/getcacerts";
my $POSTCRL       = "$TB/sbin/protogeni/postcrl";
my $GENCRL        = "$TB/sbin/protogeni/gencrl";
my $GENCRLBUNDLE  = "$TB/sbin/protogeni/gencrlbundle";
my $INITCERTS	  = "$TB/sbin/protogeni/initcerts";
my $REGISTERCERTS = "$TB/sbin/protogeni/reregister";
my $CACONTROL     = "$TB/sbin/protogeni/cacontrol";
my $MKSYSCERT	  = "$TB/sbin/mksyscert";
my $MKUSERCERT	  = "$TB/sbin/mkusercert";
my $BATCHEXP      = "$TB/bin/batchexp";
my $WAP           = "$TB/sbin/withadminprivs";
my $SACERT	  = "$TB/etc/genisa.pem";
my $CMCERT	  = "$TB/etc/genicm.pem";
my $CHCERT	  = "$TB/etc/genich.pem";
my $SESCERT	  = "$TB/etc/genises.pem";
my $RPCCERT	  = "$TB/etc/genirpc.pem";
my $CRL		  = "$TB/ssl/crl.pem";
my $CRLBUNDLE	  = "$TB/etc/genicrl.bundle";
my $SUDO	  = "/usr/local/bin/sudo";
my $MYSQL         = "/usr/local/bin/mysql";
my $MYSQLADMIN    = "/usr/local/bin/mysqladmin";
my $MYSQLSHOW     = "/usr/local/bin/mysqlshow";
my $MYSQLDUMP     = "/usr/local/bin/mysqldump";
my $PKG_INFO      = "/usr/sbin/pkg_info";
my $FETCH	  = "/usr/bin/fetch";
my $OPENSSL       = "/usr/bin/openssl";
my $FIXROOTCERT   = "$TB/sbin/fixrootcert";
my $MYSAURN       = "urn:publicid:IDN+@OURDOMAIN@+authority+sa";
my $APACHEPREFIX  = ("@APACHE_VERSION@" == "22" ? "apache22" :
		     "@APACHE_VERSION@" == "24" ? "apache24" : "apache");
my $APACHE_START  = "@APACHE_START_COMMAND@";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Protos
sub fatal($);

#
# Turn off line buffering on output
#
$| = 1; 

# Load the Testbed support stuff.
use lib "@prefix@/lib";
use libtestbed;
use emdb;
use libdb qw(TBSetSiteVar TBOPSPID DBQueryFatal);
use emutil qw(TBGetUniqueIndex);
use User;
use Project;
use Experiment;
use OSImage;
use libinstall;
use installvars;

if ($UID != 0) {
    fatal("Must be root to run this script\n");
}

#
# Check args.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"n"})) {
    $noregister = 1;
}

#
# People seem to miss this.
#
if ($PGENIDOMAIN =~ /^unknown/i) {
    print STDERR "Please define PROTOGENI_DOMAIN in your defs file!\n";
    print STDERR "Then reconfig,rebuild,reinstall, then try this again.\n";
    exit(1);
}

#
# Check for (and update) an old (pre-URN) root certificate.
#
if (system($FIXROOTCERT)) {
    fatal("Could not fix root certificate");
}
elsif (!$noregister) {
    unlink( "$TB/etc/.protogeni_federated" );
}

#
# Set this differently for readability. 
#
$MAGIC_TESTBED_VERSION = "";
$MAGIC_TESTBED_START   = "Added by Emulab for the ProtoGENI module";
$MAGIC_TESTBED_END     = "End of Emulab added section";

#
# Packages.
#
my %packlist =
    ("libxml2>=2.6.26"       => "/usr/ports/textproc/libxml2",
     "p5-Frontier-RPC"       => "/usr/ports/net/p5-Frontier-RPC",
     "p5-XML-LibXML>=1.70"   => "/usr/ports/textproc/p5-XML-LibXML",
     "xmlsec1"               => "/usr/ports/security/xmlsec1",
     "p5-Crypt-SSLeay>=0.57" => "/usr/ports/security/p5-Crypt-SSLeay",
     "p5-Crypt-OpenSSL-X509" => "/usr/ports/security/p5-Crypt-OpenSSL-X509",
     "p5-Crypt-X509"         => "/usr/ports/security/p5-Crypt-X509",
     "xerces-c2>=2.7.0"      => "/usr/ports/textproc/xerces-c2",
     "p5-XML-SemanticDiff"   => "/usr/ports/textproc/p5-XML-SemanticDiff",
     );
my $needpkgs = 0;

Phase "ports", "Installing ports", sub {
    # Check for new package tools
    my $pkgarg = "-E";
    if (-x "/usr/sbin/pkg") {
	$PKG_INFO = "/usr/sbin/pkg info";
	$pkgarg = "-g -e";
    }
    foreach my $pkgname (sort(keys(%packlist))) {
	my $pkgdir = $packlist{$pkgname};

	Phase "$pkgname", "Checking for $pkgname", sub {
	    if (!ExecQuiet("$PKG_INFO $pkgarg '${pkgname}*'")) {
		PhaseSkip("Already installed");
	    }
	    ExecQuietFatal("cd $pkgdir; make -DBATCH install");
	};
    }
};

#
# crossdomain.xml is needed to allow the flash client to talk to
# this host.
#
my $crosstext = <<'CROSSEND';
<?xml version="1.0"?>
<cross-domain-policy>
    <site-control permitted-cross-domain-policies="all"/>
</cross-domain-policy>
CROSSEND

Phase "crossdomain", "Installing www crossdomain.xml", sub {
    Phase "create", "Creating file", sub {
	DoneIfExists("$TB/www/crossdomain.xml");
	CreateFileFatal("$TB/www/crossdomain.xml", $crosstext);
    };
    Phase "chmod", "Setting permissions", sub {
	ExecQuietFatal("$CHMOD 0644 $TB/www/crossdomain.xml");
    };
};

Phase "dirs", "Creating directories", sub {
    foreach my $dir ("$TB/www/protogeni",
		     "$TB/etc/genicacerts",
		     "$TB/www/protogeni/advertisements",
		     "$TB/www/protogeni/authorities") {
	Phase $dir, $dir, sub {
	    PhaseSkip("already exists")
		if (-e $dir);
	    
	    mkdir $dir, 0775 or
		PhaseFail("Unable to create $dir : $!");
	};
    }
};

#
# Another version of this file?
#
$crosstext = <<'CROSSEND';
<?xml version="1.0"?>
<cross-domain-policy>
    <allow-access-from domain="*.emulab.net" />
    <allow-access-from domain="*.protogeni.net" />
</cross-domain-policy>
CROSSEND

Phase "crossdomain2", "Installing protogeni crossdomain.xml", sub {
    Phase "create", "Creating file", sub {
	DoneIfExists("$TB/www/protogeni/crossdomain.xml");
	CreateFileFatal("$TB/www/protogeni/crossdomain.xml", $crosstext);
    };
    Phase "chmod", "Setting permissions", sub {
	ExecQuietFatal("$CHMOD 0644 $TB/www/protogeni/crossdomain.xml");
    };
};

#
# Flash Policy.
#
my $FLASH_LINE = "flashpolicy stream tcp  nowait          root    /bin/echo               /bin/echo '<cross-domain-policy> <site-control permitted-cross-domain-policies=\"master-only\"/> <allow-access-from domain=\"*\" to-ports=\"80,443,$PROTOGENI_RPCPORT,$OUTERBOSS_XMLRPCPORT\"/> </cross-domain-policy>'";

Phase "flashpolicy", "Installing the flash policy", sub {
    Phase "services", "Adding services entry", sub {
	DoneIfEdited("/etc/services");
	AppendToFileFatal("/etc/services", 'flashpolicy     843/tcp');
    };
    Phase "inetd", "Adding inetd.conf entry", sub {
	DoneIfEdited("$INETD_CONF");
	AppendToFileFatal($INETD_CONF, $FLASH_LINE);
    };
    Phase "restarting", "Restarting inetd", sub {
	PhaseSkip("not changed")
	    if (PhaseWasSkipped("inetd"));
	HUPDaemon("inetd");
    };
};

#
# The web server needs to do client authentication, for the geni xmlrpc
# interface. A bundle of CA certs from the trusted roots (emulabs) will
# be used. This bundle will periodically update as sites come online.
#
Phase "bundles", "Installing SSL bundles", sub {
    Phase "genica", "Installing genica.bundle", sub {
	DoneIfExists("$TB/etc/genica.bundle");
	ExecQuietFatal("$CP $TB/etc/emulab.pem $TB/etc/genica.bundle");
	ExecQuietFatal("$CHMOD 0644 $TB/etc/genica.bundle");
    };
    Phase "genicrl", "Creating initial CRL", sub {
	ExecQuietFatal("$GENCRL -f");
    };
    Phase "crl", "Installing genicrl.bundle", sub {
	ExecQuietFatal("$CP -f $CRL $CRLBUNDLE");
	ExecQuietFatal("$CHMOD 0644 $CRLBUNDLE");
    };
};
if ($asch) {
    #
    # For xmlsec1
    #
    Phase "genicacerts", "Initial genicacerts directory", sub {
	DoneIfExists("$TB/etc/genicacerts/emulab.pem");
	ExecQuietFatal("$CP $TB/etc/emulab.pem $TB/etc/genicacerts");
    };
    Phase "wwwgenica", "Copying genica.bundle to www", sub {
	DoneIfExists("$TB/www/genica.bundle");
	ExecQuietFatal("$CP $TB/etc/genica.bundle $TB/www/genica.bundle");
	ExecQuietFatal("$CHMOD 0644 $TB/www/genica.bundle");
    };
    Phase "wwwgenicrl", "Copying genicrl.bundle to www", sub {
	DoneIfExists("$TB/www/genicrl.bundle");
	ExecQuietFatal("$CP $TB/etc/genicrl.bundle $TB/www/genicrl.bundle");
	ExecQuietFatal("$CHMOD 0644 $TB/www/genicrl.bundle");
    };
}

#
# I do not understand where this file comes from.
#
Phase "index", "Creating ssl index.txt.attr", sub {
    BackUpFileFatal("$TB/ssl/index.txt.attr");
    DeleteFileFatal("$TB/ssl/index.txt.attr");
    CreateFileFatal("$TB/ssl/index.txt.attr", 'unique_subject = no');
};
Phase "sslcnf", "Updating ssl syscert.cnf", sub {
    ExecQuietFatal("$GMAKE -C @top_builddir@/ssl install-conf");
};
Phase "apache", "Updating apache config", sub {
    if (-e $HTTPD_GENI_CONF) {
	DoneIfIdentical("@top_builddir@/apache/httpd-geni.conf",
			"$HTTPD_GENI_CONF");
	BackUpFileFatal("$HTTPD_GENI_CONF");
    }
    ExecQuietFatal("$GMAKE -C @top_builddir@/apache pgeni-install");
};
Phase "rcconf", "Updating $RCCONF", sub {
    my $flags = "-DSSL -DPGENI";
    $flags .= " -DPGENI_FCGID" if ($PORTAL_ENABLE);
    
    DoneIfEdited($RCCONF);
    AppendToFileFatal($RCCONF,
		      "${APACHEPREFIX}_flags=\"$flags\"",
		      "${APACHEPREFIX}_profiles=\"www geni\"",
		      "${APACHEPREFIX}_geni_configfile=\"$HTTPD_GENI_CONF\"",
		      "${APACHEPREFIX}_geni_enable=\"YES\"");
};
Phase "newsyslog", "Updating $NEWSYSLOG_CONF", sub {
    DoneIfEdited($NEWSYSLOG_CONF);
    AppendToFileFatal($NEWSYSLOG_CONF,
	      "$LOGDIR/apache_access_log.geni      644  7   10000  *    BZ ".
		      "/var/run/httpd.geni.pid",
	      "$LOGDIR/apache_error_log.geni       644  7   10000  *    BZ ".
		      "/var/run/httpd.geni.pid",
	      "$LOGDIR/apache_ssl_engine_log.geni  644  7   10000  *    BZ ".
		      "/var/run/httpd.geni.pid",
	      "$LOGDIR/apache_ssl_request_log.geni 644  7   10000  *    BZ ".
		      "/var/run/httpd.geni.pid",
	      "$LOGDIR/apache_ssl_access_log.geni  644  7   10000  *    BZ ".
		      "/var/run/httpd.geni.pid");
};

#
# user/project that slices (experiments) belong to.
#
my $geniuser = User->Lookup($geniuserid);
Phase "geniuser", "Creating user $geniuserid", sub {
    PhaseSkip("already created")
	if (defined($geniuser));

    PhaseFail("geniuser.xml does not exist")
	if (! -e "$TB/etc/protogeni/geniuser.xml");

    ExecQuietFatal("$SUDO -u $PROTOUSER ".
		   "$WAP $NEWUSER $TB/etc/protogeni/geniuser.xml");

    $geniuser = User->Lookup($geniuserid);
    PhaseFail("$geniuserid did not create properly")
	if (!defined($geniuser));

    ExecQuietFatal("$SUDO -u $PROTOUSER $WAP $TBACCT verify $geniuserid");

    # No need for email lists.
    $geniuser->Update({'nocollabtools' => '1', 'stud' => '1'});
};

my $geniproj = Project->Lookup($geniprojid);
Phase "geniproj", "Creating project $geniprojid", sub {
    PhaseSkip("already created")
	if (defined($geniproj));

    PhaseFail("geniproj.xml does not exist")
	if (! -e "$TB/etc/protogeni/geniproj.xml");

    ExecQuietFatal("$SUDO -u $PROTOUSER ".
		   "$WAP $NEWPROJ $TB/etc/protogeni/geniproj.xml");
    ExecQuietFatal("$SUDO -u $PROTOUSER $WAP $MKPROJ -s $geniprojid");

    $geniproj = Project->Lookup($geniprojid);
    PhaseFail("$geniprojid did not create")
	if (!defined($geniproj));
};
$geniuser->Refresh();
$geniproj->Refresh();

# Create an encrypted certificate for the test scripts.
Phase "usercert", "Creating certificate for $geniuserid", sub {
    my $sslcert;
    $geniuser->SSLCert(1, \$sslcert);

    PhaseSkip("already created")
	if (defined($sslcert));

    my $passwd = substr(TBGenSecretKey(), 0, 10);
    PhaseFail("failed to generate password")
	if (!defined($passwd) || $passwd eq "");
    
    ExecQuietFatal("$SUDO -u $PROTOUSER ".
		   "$WAP $MKUSERCERT -p '$passwd' $geniuserid");
};

# Now that we have the geniuser ...
Phase "chown", "Changing ownership on dirs", sub {
    ExecQuietFatal("$CHOWN $geniuserid ".
		   "$TB/www/protogeni/advertisements ".
		   "$TB/www/protogeni/authorities");
};

Phase "dbstuff", "Adding a few things to Emulab DB", sub {
    #
    # Need this fake type for now.
    #
    # It would be unusual if this OSID did not exist.
    #
    my $osimage = OSImage->Lookup(TBOPSPID(), "RHL-STD");
    PhaseFail("RHL-STD does not exist")
	if (!defined($osimage));

    my $osid = $osimage->osid();

    DBQueryWarn("replace into node_types (type,class,isvirtnode,isdynamic) ".
		"values ('pcfake','pcvm',1,1)")
	or PhaseFail("Error inserting node_types");
	
    DBQueryWarn("replace into node_type_attributes ".
		"(type,attrkey,attrvalue,attrtype) values ".
		"('pcfake','rebootable','1','boolean')")
	or PhaseFail("Error inserting rebootable attribute");
    
    DBQueryWarn("replace into node_type_attributes ".
		"(type,attrkey,attrvalue,attrtype) values ".
		"('pcfake','default_osid','$osid','integer')")
	or PhaseFail("Error inserting default_osid attribute");
};
    
#
# Databases.
#
Phase "databases", "Creating Databases", sub {
    foreach my $dbname ("geni", "geni-ch", "geni-cm") {
	Phase $dbname, "Creating DB $dbname", sub {
	    if (!ExecQuiet("$MYSQLSHOW $dbname")) {
		PhaseSkip("already exists");
	    }
	    ExecQuietFatal("$MYSQLADMIN create $dbname");
	};
	Phase "fill${dbname}", "Initializing DB $dbname", sub {
	    if (!ExecQuiet("$MYSQLDUMP -d $dbname geni_users")) {
		PhaseSkip("already initialized");
	    }
	    ExecQuietFatal("$MYSQL $dbname < $TB/etc/protogeni/protogeni.sql");
	};
	Phase "fix${dbname}", "Patching DB $dbname", sub {
	    ExecQuietFatal("$MYSQL -e \"UPDATE geni_authorities ".
			   "   SET type='ses' ".
			   "WHERE hrn LIKE '%.ses' AND type='';\" $dbname");
	};
    }
};

#
# This script builds the certs and registers them. Separate script so
# it can be rerun independently, as when updating certificates.
#
Phase "initcerts", "Creating PG certificates", sub {
    # This script will not overwrite existing certificates, so okay
    # to call again even if certs already exist.
    ExecQuietFatal("$INITCERTS");
};

#
# On the clients, we have to get the bundle from the CH website and
# then break it up for xmlsec (see above). We use a script for this
# since the clients need to do this everytime a new client is added.
# This script restarts apache.
#
if (!$asch) {
    Phase "getcacerts", "Getting current CA bundle", sub {
	# Use -f cause testbed is probably shutdown.
	ExecQuietFatal("$GETCACERTS -l -p -f");
    };
    #
    # This cron entry will autoupdate the CA/CRL certs by getting them from
    # the CH website.
    #
    Phase "crontab", "Updating $CRONTAB", sub {
	DoneIfEdited($CRONTAB);
	AppendToFileFatal($CRONTAB,
			  "13  4  *  *	*  root  $GETCACERTS");
    };
}
else {
    # Restart to pick up initial CRL created above.
    Phase "apcahe", "Restarting Apache", sub {
	ExecQuietFatal("$APACHE_START restart");
    };
    
    #
    # Need to initialize CAs in the geni-ch DB with our own, so we can
    # talk to the CH from ourself.
    #
    Phase "cacontrol", "Running cacontrol", sub {
	ExecQuietFatal("$CACONTROL -i");
    };

    #
    # Now we can post our initial CRL to our CH database. Yes, we could
    # just do insert into the DB, but if this fails we might as bail now. 
    #
    Phase "postcrl", "Posting initial CRL", sub {
	ExecQuietFatal("$POSTCRL -f");
    };
    
    #
    # On clearinghouse, we have to generate the CRL bundle for downloading
    # by remote sites each night.
    # 
    Phase "crontab", "Updating $CRONTAB", sub {
	DoneIfEdited($CRONTAB);
	AppendToFileFatal($CRONTAB,
			  "10  4  *  *  *  root  $GENCRLBUNDLE");
    };
}

if (!$asch && !$noregister) {
    #
    # Register the certificates at the clearinghouse.
    #
    Phase "register", "Registering PG certificates", sub {
	PhaseFail("You have not emailed your root CA to the clearinghouse yet!")
	    if (! "$TB/etc/.protogeni_federated");

	PhaseSkip("already registered")
	    if (-e "$TB/etc/.protogeni_registered");
	
	ExecQuietFatal("$REGISTERCERTS");
    };
}
exit(0);

sub fatal($)
{
    my ($msg) = @_;

    die("*** $0:\n".
	"    $msg\n");
}
