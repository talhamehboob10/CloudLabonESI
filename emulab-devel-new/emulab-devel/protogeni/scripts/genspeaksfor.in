#!/usr/bin/perl -w
#
# Copyright (c) 2008-2014 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use Data::Dumper;

#
# Generate a speaksfor credential, useful only for testing.
# The user grants the speaker the right to speak for user. 
#
sub usage()
{
    print STDERR "Usage: $0 [-a] <user-urn> [<speaker-urn>]\n";
    exit(1);
}
my $optlist = "a";
my $doabac  = 0;

# Configure ...
my $TB		  = "@prefix@";
my $SACERT	  = "$TB/etc/genisa.pem";

# Do this early so that we talk to the right DB. 
use vars qw($GENI_DBNAME);
BEGIN { $GENI_DBNAME = "geni"; }

use lib '@prefix@/lib';
use GeniCredential;
use GeniCertificate;
use GeniAuthority;
use GeniHRN;
use GeniResponse;
use GeniUser;
use GeniRegistry;

sub fatal($)
{
    my ($msg) = @_;

    die("*** $0:\n".
	"    $msg\n");
}

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"a"})) {
    $doabac = 1;
}
usage()
    if (@ARGV < 1);
my $user_urn = shift();
my $speaker;

if (@ARGV) {
    my $speaker_urn = shift();

    if (! (GeniHRN::IsValid($speaker_urn))) {
	fatal("Malformed speaker urn");
    }
    $speaker = GeniUser->Lookup($speaker_urn, 1);
    if (!defined($speaker)) {
	fatal("No such speaker in the DB");
    }
}
else {
    $speaker = GeniCertificate->LoadFromFile($SACERT);
    if (!defined($speaker)) {
	fatal("Could not load certificate from $SACERT\n");
    }
    $speaker->LoadKeyFromFile($SACERT);
}

#
# Must be an emulab user.
#
if (! (GeniHRN::IsValid($user_urn))) {
    fatal("Malformed user urn");
}
my $geniuser = GeniUser->Lookup($user_urn, 1);
if (!defined($geniuser)) {
    fatal("No such user in the DB");
}

if ($doabac) {
    require ABAC;
    import ABAC;

    my $userfile = $geniuser->GetCertificate()->WriteToFile(1);
    fatal("Could not write user cert/key to file!")
	if (!defined($userfile));
    my $speakerfile = $speaker->GetCertificate()->WriteToFile(1);
    fatal("Could not write speaker cert/key to file!")
	if (!defined($speakerfile));

    my $abacuser = ABAC::ID->new($userfile);
    fatal("Could not create user ABAC:ID")
	if (!defined($abacuser));
    $abacuser->load_privkey($userfile);

    my $abactool = ABAC::ID->new($speakerfile);
    fatal("Could not create speaker ABAC:ID")
	if (!defined($abactool));
    
    my $abacattr = ABAC::Attribute->new($abacuser,
					"speaks_for_" . $abacuser->keyid(),
					365 * 24 * 60 * 60);
    fatal("Could not create ABAC::Attribute")
	if (!defined($abacattr));
    
    $abacattr->principal($abactool->keyid());
    $abacattr->bake();
    my $xml = $abacattr->cert_chunk();
    if (0) {
	my $cred = GeniCredential->CreateFromSigned($xml);
	$cred->SetTargetCert($geniuser->GetCertificate());
	$cred->SetOwnerCert($speaker->GetCertificate());
	$cred->CheckCredential();
    }
    else {
	print $xml;
    }
}
else {
    my $credential = GeniCredential->Create($geniuser, $speaker);
    fatal("Could not create credential")
	if (!defined($credential));
    $credential->SetType("speaksfor");
    fatal("Could not sign speaksfor credential")
	if ($credential->Sign($speaker->GetCertificate()));
    print $credential->{'string'};
}
exit(0);


