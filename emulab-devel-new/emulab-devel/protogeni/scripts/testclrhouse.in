#!/usr/bin/perl -w
#
# Copyright (c) 2009-2010 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use Data::Dumper;

sub usage()
{
    print "Usage: testclrhouse\n";
    exit(1);
}
my $optlist    = "";
sub fatal($);

#
# Configure variables
#
my $TB		  = "@prefix@";
my $TBOPS         = "@TBOPSEMAIL@";
my $TBLOGS        = "@TBLOGSEMAIL@";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1; 

#
# Check args.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
usage()
    if (@ARGV);

use vars qw($GENI_DBNAME);
$GENI_DBNAME = "geni-ch";

# Now we can load the libraries after setting the proper DB.
use lib '@prefix@/lib';
use libtestbed;
require GeniDB;
require Genixmlrpc;
use GeniResponse;
require GeniCertificate;
require GeniCredential; 
require GeniAuthority;
require GeniRegistry;

#
# The RPC context for this script is as the CH
#
my $certificate  = GeniRegistry::ClearingHouse->GetCertificate();
if (!defined($certificate)) {
    fatal("Could not load ClearingHouse certificate");
}
Genixmlrpc->SetContext(Genixmlrpc->Context($certificate));

print $certificate->uuid() . "\n";

my $authority = GeniAuthority->Lookup($certificate->uuid());
if (!defined($authority)) {
    fatal("Could not find local authority object");
}

# Ask the local clearinghouse for a credential via xmlrpc. Good test, eh?
print "Asking the clearinghouse for a credential ...\n";
my $credential = GeniRegistry::ClearingHouse->GetCredential();
if (!defined($credential)) {
    fatal("Could not get a credential from the local ClearingHouse");
}
print "Got the credential back. Resolving ourself ...\n";

my $clearinghouse = GeniRegistry::Client->Create($authority);
if (!defined($clearinghouse)) {
    fatal("Could not create a clearinghouse client object");
}
my $result;
if ($clearinghouse->Resolve($authority->uuid(), "ma", \$result) != 0) {
    fatal("Could not resolve ourself\n");
}
print Dumper($result);

exit(0);

sub fatal($) {
    my ($msg) = @_;

    print STDERR "$msg\n";
    exit(1);
}
