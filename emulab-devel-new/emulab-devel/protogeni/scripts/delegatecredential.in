#!/usr/bin/perl -w
#
# Copyright (c) 2008-2012 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;

#
# This script can be used to delegate a credential to a local user.
# Acts as the SA, but use -c to act as the CM. The credential is
# specified as a text file on the command line, or on stdin. The output
# is written to the file or stdout. The permissions to delegate are
# specified as pairs in the form 'perm:delegate" where 'perm' is
# something like "resolve" and 'delegate' is a boolean that says if
# that permission can be further delegated. You must supply at least
# one permission (can be special tag 'all' to grant all perms).
#
# For example:
#
# boss> getchcredential | delegatecredential urn:stoller resolve:0 list:1
#
# Note that I shortened the URN for brevity.
#
sub usage()
{
    print STDERR "Usage: $0 [-c] [-i input_file] [-o output_file] <user-urn> ";
    print STDERR "[permission,delegate ...]\n";
    exit(-1);
}
my $optlist = "ci:o:";
my $ascm    = 0;
my $infile;
my $outfile;

# Configure ...
my $TB		  = "@prefix@";
my $SACERT	  = "$TB/etc/genisa.pem";
my $CMCERT	  = "$TB/etc/genicm.pem";

# Do this early so that we talk to the right DB. 
use vars qw($GENI_DBNAME);
BEGIN { $GENI_DBNAME = "geni"; }

use lib '@prefix@/lib';
use GeniCredential;
use GeniCertificate;
use GeniAuthority;
use GeniHRN;
use GeniResponse;
use GeniUser;
use GeniRegistry;

sub fatal($)
{
    my ($msg) = @_;

    die("*** $0:\n".
	"    $msg\n");
}

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"i"})) {
    $infile = 1;
}
if (defined($options{"o"})) {
    $outfile = 1;
}
if (defined($options{"c"})) {
    $ascm = 1;
}
usage()
    if (@ARGV < 1);
my $user_urn = shift();

#
# Must be an emulab user.
#
if (! (GeniHRN::IsValid($user_urn))) {
    fatal("Malformed user urn");
}
my $geniuser = GeniUser->Lookup($user_urn, 1);
if (!defined($geniuser)) {
    fatal("No such user in the DB");
}

#
# Load the cert to act as caller context.
#
my $certificate = GeniCertificate->LoadFromFile(($ascm ? $CMCERT : $SACERT));
if (!defined($certificate)) {
    fatal("Could not load certificate\n");
}
Genixmlrpc->SetContext(Genixmlrpc->Context($certificate));

#
# Load the input credential.
#
my $credstring = "";
if ($infile) {
    open(IN, $infile)
	or fatal("Could not open $infile");

    while (<IN>) {
	$credstring .= $_;
    }
}
else {
    while (<STDIN>) {
	$credstring .= $_;
    }
}
my $credential = GeniCredential->CreateFromSigned($credstring);
if (!defined($credential)) {
    fatal("Could not load credential\n");
}
my $delegate = $credential->Delegate($geniuser);
#
# Add the perms
#
foreach my $arg (@ARGV) {
    if ($arg =~ /^(\w*):(\d)$/) {
	$delegate->AddCapability($1, $2);
    }
    else {
	fatal("Bad permission: $arg");
    }
}
if ($delegate->Sign(($ascm ? $GeniCredential::LOCALCM_FLAG :
		     $GeniCredential::LOCALSA_FLAG)) != 0) {
    fatal("Could not sign delegated credential");
}
if ($outfile) {
    open(OUT, ">$outfile")
	or fatal("Could not open $outfile");
    print OUT $delegate->asString();
    close(OUT);
}
else {
    print $delegate->asString();
}
exit(0);


