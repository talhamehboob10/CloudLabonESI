#!/usr/bin/perl -wT
#
# Copyright (c) 2000-2014 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;

#
# Setup GateOne stuff for in browser SSH client.
#
sub usage()
{
    print "Usage: gateone-setup [-d] ...\n";
    print "Options:\n";
    print " -d      Turn on debugging\n";
    print " -r      Force a regenerate of initial key for user\n";
    exit(-1);
}
my $optlist   = "dr";
my $debug     = 0;
my $regen     = 0;

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";
my $OURDOMAIN   = "@OURDOMAIN@";
my $CONTROL	= "@USERNODE@";
my $PROTOGENI   = @PROTOGENI_SUPPORT@;
my $KEYGEN	= "/usr/bin/ssh-keygen";
my $APTDIR      = "/var/apt/users";
my $USERSAPTDIR = "$TB/usersvar/apt/users";
my $SSH		= "$TB/bin/sshtb";
my $SAVEUID	= $UID;

# Locals
my $user;

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use GeniDB;
use GeniUser;
use emutil;
# Connect to the SA DB.
GeniDB::DBConnect(GeniDB::GENISA_DBNAME());

#
# Function prototypes
#
sub fatal($);

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# We don't want to run this script unless its the real version.
#
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be setuid! Maybe its a development version?\n");
}

#
# Please do not run it as root. Hard to track what has happened.
# 
if ($UID == 0) {
    die("*** $0:\n".
	"    Please do not run this as root!\n");
}

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"r"})) {
    $regen = 1;
}
usage()
    if (@ARGV != 1);

my $geniuser = GeniUser->Lookup($ARGV[0], 0);
if (!defined($geniuser)) {
    fatal("No such Geni user!");
}
my $uid  = $geniuser->uid();
my $dir  = "$APTDIR/$uid";
my $udir = "$USERSAPTDIR/$uid";

$UID = 0;
if (! -e "$udir") {
    system("$SSH -host $CONTROL '/bin/mkdir -p -m 0750 $dir'")
	== 0 or fatal("Could not mkdir $dir: $!");
}
system("$SSH -host $CONTROL ".
       "   'rm -f $dir/id_rsa; $KEYGEN -q -t rsa -P \"\" ".
       "   -C \"${uid}" . "\@" . ${OURDOMAIN} . "\" ".
       "   -f $dir/id_rsa'")
    == 0 or fatal("Failure in ssh-keygen!");
system("$SSH -host $CONTROL '/usr/sbin/chown -R nobody:nobody $dir'")
    == 0 or fatal("Could not mkdir $dir: $!");
system("$SSH -host $CONTROL '/bin/chmod -R 700 $dir'")
    == 0 or fatal("Could not mkdir $dir: $!");
# Grab a copy for the DB.
my $pubkey =
    emutil::ExecQuiet("$SSH -host $CONTROL '/bin/cat $dir/id_rsa.pub'");
if ($?) {
    fatal("Could not read new key from file: $pubkey");
}
chomp($pubkey);
$UID = $SAVEUID;

# Only one.
$geniuser->DeleteInternalKeys();

$geniuser->AddInternalKey($pubkey) == 0
    or fatal("Could not add new pub key to the database!");

exit(0);

sub fatal($) {
    my($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}
