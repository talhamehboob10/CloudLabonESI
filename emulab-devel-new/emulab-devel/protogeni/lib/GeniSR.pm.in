#!/usr/bin/perl -wT
#
# Copyright (c) 2013 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
package GeniSR;

#
# The server side of the GENI CH interface.
#
use strict;
use Exporter;
use vars qw(@ISA @EXPORT);

@ISA    = "Exporter";
@EXPORT = qw ( );

# Must come after package declaration!
use libtestbed;
use libEmulab;
use GeniDB;
use Genixmlrpc;
use GeniResponse;
use GeniUser;
use GeniSlice;
use GeniCredential;
use GeniCertificate;
use GeniAuthority;
use GeniHRN;
use English;
use XML::Simple;
use Data::Dumper;
use Date::Parse;
use POSIX qw(strftime);
use Time::Local;
use Project;

# Configure variables
my $TB		   = "@prefix@";
my $TBOPS          = "@TBOPSEMAIL@";
my $MAINSITE 	   = @TBMAINSITE@;
my $OURDOMAIN      = "@OURDOMAIN@";
my $PGENIDOMAIN    = "@PROTOGENI_DOMAIN@";
my $PROTOGENI_URL  = "@PROTOGENI_URL@";
my $API_VERSION    = "1.0";

#
# Provide a structure detailing the version information as well as details
# of accepted options for Registry API calls.
#
# NB: This is an unprotected call, no client cert required.
#
# Arguments:
#  None
# Return: 
#  get_version structure information as described above
#
sub get_version()
{
    my $coder = Frontier::RPC2->new('use_objects' => 1);
    my $version = $coder->string( $API_VERSION );
    my %fields = ();
    my %result = (
	"VERSION" => $version, "FIELDS" => \%fields
	);

    return GeniResponse->Create( GENIRESPONSE_SUCCESS, \%result );
}

sub GetAuthorities($$)
{
    my ($type,$options) = @_;

    my @authorities = ();
    my @result = ();

    if( GeniAuthority->ListAll( \@authorities ) ) {
	return GeniResponse->Create( GENIRESPONSE_ERROR, undef,
				     "Could not retrieve authority list" );
    }

    foreach my $authority (@authorities) {
	next if( $authority->type() ne $type or $authority->disabled() );
	my %authdata = (
	    "SERVICE_URN" => $authority->urn(),
	    "SERVICE_URL" => $authority->url(),
	    "SERVICE_CERT" => $authority->cert(),
	    "SERVICE_NAME" => $authority->hrn(),
	    "SERVICE_DESCRIPTION" => $authority->GetCertificate()->DN()
	    );
	push( @result, \%authdata );
    }

    return GeniResponse->Create( GENIRESPONSE_SUCCESS, \@result );
}

#
# Return information about all aggregates associated with the Federation
#
# NB: This is an unprotected call, no client cert required.
#
# Arguments:
#  options: List of field names (from get_version) to be provided for each AM
# Return:
#  List of dictionaries of name/value pairs for each returned AM
#
sub lookup_aggregates($)
{
    my ($options) = @_;
    return GetAuthorities( "cm", $options );
}

#
# Return information about all MA’s associated with the Federation
#
# NB: This is an unprotected call, no client cert required.
#
# Arguments:
#  options: List of field names (from get_version) to be provided for each MA
# Return:
#  List of dictionaries of name/value pairs for each returned MA
#
sub lookup_member_authorities($)
{
    my ($options) = @_;
    return GetAuthorities( "ma", $options );
}

#
# Return information about all SA’s associated with the Federation
#
# NB: This is an unprotected call, no client cert required.
#
# Arguments:
#  options: List of field names (from get_version) to be provided for each SA
# Return:
#  List of dictionaries of name/value pairs for each returned SA
#
sub lookup_slice_authorities($)
{
    my ($options) = @_;
    return GetAuthorities( "sa", $options );
}

#
# Lookup the authorities for a given URNs
# There should be at most one (potentially none) per URN
#
# NB: This is an unprotected call, no client cert required.
#
# Arguments:
#  urns: URNs of entities for which the authority is requested
# Return: 
#  List of URL’s of Authorities corresponding, in order, to given URN’s
#
sub lookup_authorities_for_urns($)
{
    my ($urns) = @_;
    my @result = ();

    my %typemap = (
	"authority" => "root",
	"node" => "cm", # might change to "am" at some point
	"slice" => "sa",
	"sliver" => "cm", # might change to "am" at some point
	"user" => "sa" # will probably change to "ma" at some point
    );

    foreach my $urn (@{$urns}) {
	GeniHRN::IsValid( $urn ) or goto bad;

	my ($authority, $type, $id) = GeniHRN::Parse( $urn );

	exists( $typemap{$type} ) or goto bad;
	
	my $auth_name = GeniHRN::Generate( $authority, "authority",
					   $typemap{$type} );
	
	my $auth_obj = GeniAuthority->Lookup( $auth_name );

	$auth_obj or goto bad;

	push( @result, $auth_obj->url() );

	next;

      bad:
	push( @result, undef );
    }

    return GeniResponse->Create( GENIRESPONSE_SUCCESS, \@result );
}

#
# Return list of trust roots (certificates) associated with this CH.
# Often this is a concatenatation of the trust roots of the included
# authorities.
#
# NB: This is an unprotected call, no client cert required.
#
# Arguments:
#  None
# Return:
#  List of certificates representing trust roots of this CH.
#
sub get_trust_roots()
{
    my @result = ();
    local $/ = undef;

    while( <@prefix@/etc/genicacerts/*.pem> ) {
	local( *F, $/ );

	open( F, $_ ) or next;

	push( @result, <F> );
    }

    return GeniResponse->Create( GENIRESPONSE_SUCCESS, \@result );
}

# _Always_ make sure that this 1 is at the end of the file...
1;
