#!/usr/bin/perl -w
#
# Copyright (c) 2008-2011 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use XML::LibXML;
use Data::Dumper;

#
# Sign a GENI credential
# 
sub usage()
{
    print("Usage: signgenicred [-d] [-o file] [-c cert] <capfile> [<user>]\n");
    exit(-1);
}
my $optlist = "do:c:";
my $debug   = 0;
my $outfile;
my $capfile;
my $certificate;

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS	= "@TBOPSEMAIL@";
my $TBLOGS	= "@TBLOGSEMAIL@";
my $OURDOMAIN   = "@OURDOMAIN@";
my $CONTROL	= "@USERNODE@";
my $BOSSNODE	= "@BOSSNODE@";

#
# Load the Testbed support stuff.
#
use lib "@prefix@/lib";
use libaudit;
use libtestbed;
use GeniUtil();
#
# Turn off line buffering on output
#
$| = 1;

# Locals
my $USERDIR	= USERROOT();
my $SSLDIR      = "$TB/lib/ssl";
my $EMULAB_CERT = "$TB/etc/genisa.pem";
my $EMULAB_KEY  = "$TB/etc/genisa.pem";
my $SCHEMA      = "$TB/lib/protogeni/security/credential.xsd";
my $OPENSSL     = "/usr/bin/openssl";
my $XMLLINT     = "/usr/local/bin/xmllint";
my $XMLSEC1     = "/usr/local/bin/xmlsec1";
my $SAVEUID	= $UID;
my $tmpfile     = "/tmp/signcred$$";
my $certfile;
my $keyfile;
my $sigid;
my $deletefiles = 0;

#
# This is a template for the xmlsec library.
#
my $sigtmpl =
    "<Signature xml:id=\"%s\" >\n".
    " <SignedInfo>\n".
    "  <CanonicalizationMethod ".
    "     Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\"/>\n".
    "  <SignatureMethod ".
    "     Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"/>\n".
    "  <Reference URI=\"#%s\">\n".
    "    <Transforms>\n".
    "      <Transform ".
    "        Algorithm=\"http://www.w3.org/2000/09/xmldsig#".
    "enveloped-signature\" />\n".
    "    </Transforms>\n".
    "    <DigestMethod ".
    "       Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/>\n".
    "    <DigestValue></DigestValue>\n".
    "    </Reference>\n".
    " </SignedInfo>\n".
    " <SignatureValue />\n".
    " <KeyInfo>\n".
    "  <X509Data >\n".
    "   <X509SubjectName/>\n".
    "   <X509IssuerSerial/>\n".
    "   <X509Certificate/>\n".
    "  </X509Data>\n".
    "  <KeyValue />\n".
    " </KeyInfo>\n".
    "</Signature>\n";

#
# Untaint the path
#
$ENV{'PATH'} = "$TB/bin:$TB/sbin:/bin:/usr/bin:/usr/bin:/usr/sbin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Function prototypes
#
sub fatal($);
sub cleanup();

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"o"})) {
    $outfile = $options{"o"};
    
    if ($outfile =~ /^([-\w\.\/]+)$/) {
	$outfile = $1;
    }
    else {
	fatal("Tainted filename: $outfile");
    }
}
if (defined($options{"c"})) {
    $certificate = $options{"c"};
    
    if ($certificate =~ /^([-\w\.\/]+)$/) {
	$certificate = $1;
    }
    else {
	fatal("Tainted filename: $certificate");
    }
    fatal("$certificate does not exist or cannot be read.")
	if (! -r $certificate);
}
usage()
    if (!@ARGV);
$capfile = shift(@ARGV);
if ($capfile =~ /^([-\w\.\/]+)$/) {
    $capfile = $1;
}
else {
    fatal("Tainted filename: $capfile");
}

#
# This script is always audited. Mail is sent automatically upon exit.
#
if (0 && AuditStart(0)) {
    #
    # Parent exits normally
    #
    exit(0);
}

#
# Verify that the credential conforms to the schema. The wrinkle is that it
# might already be a signed credential and we just need to add another
# signature to it, but either way it should still pass the schema check.
#
my $xmlint_output = "";

open(TMP, "$XMLLINT -noout -schema $SCHEMA $capfile 2>&1 |")
    or fatal("Could not start $XMLLINT on $capfile");
while(<TMP>) {
    $xmlint_output .= $_;
}
if (!close(TMP)) {
    print STDERR $xmlint_output;
    system("/bin/cat $capfile");
    fatal("$capfile does not conform to schema $SCHEMA");
}

#
# Bring in the credential file so we can mess with it.
#
my $parser = XML::LibXML->new;
my $doc    = $parser->parse_file($capfile);
my $root   = $doc->documentElement();

#
# The certficate used to sign the credential is either the Emulab certificate
# or that of the user delegating the credential, or a certificate specified
# on the command line.
#
if (defined($certificate)) {
    $keyfile  = $certificate;
    $certfile = $certificate;
}
else {
    $keyfile  = $EMULAB_KEY;
    $certfile = $EMULAB_CERT;
}

#
# Find or create these two nodes.
#
my $credentials_node;
my $signatures_node;

#
# Check the root.
#
if ($root->nodeName eq "credential") {
    #
    # If its a credential then this is the first signing. We have to
    # create a new document that wraps the credential up and adds the
    # signing template (see above). When done, it will look like;
    #
    # <signed-credential>
    #  <original capfile>
    #  <signatures>
    #   <signature></signature>
    #  </signatures>
    # </signed-credential>
    #
    my $newroot       = XML::LibXML::Element->new('signed-credential');
    $newroot->setNamespace($GeniUtil::XSI_NS, "xsi", 0);
    $newroot->setAttributeNS($GeniUtil::XSI_NS, "noNamespaceSchemaLocation"
                           , $GeniUtil::CREDENTIAL_SCHEMA_LOCATION);
    $newroot->setAttributeNS($GeniUtil::XSI_NS, "schemaLocation"
                           , $GeniUtil::EXTENSIONS_NS . " " 
                           . $GeniUtil::EXTENSIONS_SCHEMA_LOCATION);

    $signatures_node  = XML::LibXML::Element->new('signatures');
    $credentials_node = $root;
    $newroot->addChild($root);
    $newroot->addChild($signatures_node);

    $root = $newroot;
    $doc->setDocumentElement($root);
    #print $root->toString(1) . "\n";
}
else {
    #
    # Must be consistent about namespaces or else the signature does
    # not verify later. 
    #
    $root->setNamespace($GeniUtil::XSI_NS, "xsi", 0);
    $root->setAttributeNS($GeniUtil::XSI_NS, "noNamespaceSchemaLocation"
			  , $GeniUtil::CREDENTIAL_SCHEMA_LOCATION);
    $root->setAttributeNS($GeniUtil::XSI_NS, "schemaLocation"
			  , $GeniUtil::EXTENSIONS_NS . " " 
			  . $GeniUtil::EXTENSIONS_SCHEMA_LOCATION);
    
    ($credentials_node) = $root->getElementsByTagName("credential");
    ($signatures_node)  = $root->getElementsByTagName("signatures");

    if (! (defined($credentials_node) && defined($signatures_node))) {
	fatal("Malformed signed credentials input");
    }
}

#
# We need the id of the toplevel credential so that we can stick
# it into the sig template above, in the References section. We
# also need to generate an id for the signature node so that we
# can find it and tell xmlsec about it.
#
my ($xmlid_attribute) = $credentials_node->attributes();
my $xmlid = $xmlid_attribute->getValue();
$sigid = "Sig_${xmlid}";
my $template = sprintf($sigtmpl, $sigid, $xmlid);

#
# Convert the template above into a document tree and add it to the
# signatures list.
#
my $tmpparser = XML::LibXML->new;
my $newdoc    = $tmpparser->parse_string($template);
my $sigroot   = $newdoc->documentElement();
$sigroot->setNamespace("http://www.w3.org/2000/09/xmldsig#");
$signatures_node->addChild($sigroot);
   
#
# So now we have a valid document that needs to be signed at the $sigid
# reference point. Must write this to a tmp file for xmlsec, and then
# use xmlsec to add the signature. 
#
# Paranoia.
unlink($tmpfile);
open(TMP, ">$tmpfile") or
    fatal("Could not open $tmpfile: $!");
print TMP $doc->toString(1) . "\n";
close(TMP);

# Fire up xmlsec and read back the results.
my $signedcred = "";

open(SEC, "$XMLSEC1 --sign --node-id $sigid ".
     "       --privkey-pem $keyfile,$certfile $tmpfile |")
    or fatal("Could not start $XMLSEC1 on $tmpfile");
while (<SEC>) {
    $signedcred .= $_;
}
if (!close(SEC)) {
    fatal("$XMLSEC1 failed on $tmpfile");
}

if (!defined($outfile)) {
    print $signedcred;
}
else {
    open(TMP, ">$outfile") or
	fatal("Could not open $outfile");
    print TMP $signedcred;
    close(TMP);
}
cleanup();
exit(0);

sub cleanup()
{
    unlink($tmpfile)
	if (-e $tmpfile && !$debug);
}

sub fatal($)
{
    my($mesg) = $_[0];
    cleanup();
    die("*** $0:\n".
	"    $mesg\n");
}
