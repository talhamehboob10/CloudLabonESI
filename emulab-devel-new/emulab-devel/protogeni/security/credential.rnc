#
# Copyright (c) 2008-2013 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#

# ProtoGENI credential and privilege specification. The key points:
#
# * A credential is a set of privileges or a Ticket, each with a flag
#   to indicate delegation is permitted.
# * A credential is signed and the signature included in the body of the
#   document.
# * To support delegation, a credential will include its parent, and that
#   blob will be signed. So, there will be multiple signatures in the
#   document, each with a reference to the credential it signs.
#
#default namespace = "http://www.protogeni.net/resources/credential/0.1"

namespace sig  = "http://www.w3.org/2000/09/xmldsig#"
datatypes xs   = "http://www.w3.org/2001/XMLSchema-datatypes"
anyelementbody = (attribute * {text} | text | element * {anyelementbody} )*

# This is where we get the definition of RSpec from
#include "../rspec/protogeni-rspec-common.rnc"

## Representation of a single privileges. 
PrivilegeSpec = element privilege {
	# Name of the privilege. 
	element name { xsd:string { minLength = "1" }},
	# Flag indicating this privilege can be delegated
        element can_delegate { xsd:boolean }
}

## A set of privileges.
PrivilegesSpec = element privileges {
	PrivilegeSpec*
}

## Backwards compat my original credential spec.
CapabilitySpec = element capability {
	# Name of the capability. 
	element name { xsd:string { minLength = "1" }},
	# Flag indicating this capability can be delegated
        element can_delegate { "0" | "1" }
}
## Backwards compat my original credential spec.
CapabilitiesSpec = element capabilities {
	CapabilitySpec*
}

## Define a stub for future ticket.
TicketSpec = element ticket {
        ## Can the ticket be delegated?
        element can_delegate { xsd:boolean },
        ## The ticket must be "cashed in" by this date 
        element redeem_before { xsd:dateTime },
        ## A desciption of the resources that are being promised
        # Note: What I really want to do here is reference RSpec as being
        # in a separate namespace. But, it's not clear to me how to do this,
        # so we basically just use by inclusion
	anyelementbody
}

## ABAC stuff. Not defined.
ABACSpec = element abac {
	anyelementbody
}

## A list of signatures.
signatures = element signatures {
    element sig:Signature { anyelementbody }+
}

## A credential granting privileges or a ticket.
credentials = element credential {
    ## The ID for signature referencing.
    attribute xml:id {xs:ID},
    ## The type of this credential. Currently a Privilege set or a Ticket.
    element type { "privilege" | "ticket" | "capability" | "speaksfor" | "abac"},
    ## A serial number.
    element serial { xsd:string },
    ## GID of the owner of this credential. 
    element owner_gid { xsd:string },
    ## URN of the owner. Not everyone can parse DER
    element owner_urn { xsd:string }?,
    ## GID of the target of this credential. 
    element target_gid { xsd:string },
    ## URN of the target.
    element target_urn { xsd:string }?,
    ## UUID of this credential
    element uuid { xsd:string },
    ## Expires on
    element expires { xsd:dateTime },
    ## Privileges or a ticket
    (PrivilegesSpec | TicketSpec | CapabilitiesSpec | ABACSpec),
    ## Optional Extensions
    element extensions { anyelementbody }*,
    ## Parent that delegated to us
    element parent { credentials }?
}

SignedCredential = element signed-credential {
    credentials,
    signatures?
}

start = SignedCredential


