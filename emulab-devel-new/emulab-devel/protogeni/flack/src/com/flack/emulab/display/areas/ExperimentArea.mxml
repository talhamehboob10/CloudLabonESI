<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) 2008-2013 University of Utah and the Flux Group.

{{{GENIPUBLIC-LICENSE

GENI Public License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and/or hardware specification (the "Work") to
deal in the Work without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Work, and to permit persons to whom the Work
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Work.

THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
IN THE WORK.

}}}

-->

<areas:AreaContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:areas="com.flack.shared.display.areas.*"
				   xmlns:components="com.flack.shared.display.components.*"
				   creationComplete="init()"
				   paddingBottom="2"
				   title="{_experiment.name}" xmlns:display="com.flack.emulab.display.*">
	<fx:Declarations>
		<s:RadioButtonGroup id="componentsAreaTypeGroup"
							change="componentsAreaTypeGroup_changeHandler(event)" />
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.flack.emulab.display.experimenter.IComponentsArea;
			import com.flack.emulab.display.experimenter.elabview.ElabinelabView;
			import com.flack.emulab.display.experimenter.graphview.ExperimentCanvas;
			import com.flack.emulab.display.experimenter.nsview.ExperimentNsView;
			import com.flack.emulab.resources.virtual.Experiment;
			import com.flack.emulab.resources.virtual.VirtualLink;
			import com.flack.emulab.resources.virtual.VirtualNode;
			import com.flack.emulab.tasks.groups.GetExperimentTaskGroup;
			import com.flack.emulab.tasks.process.GenerateNsTask;
			import com.flack.emulab.tasks.xmlrpc.experiment.EmulabExperimentEndExpTask;
			import com.flack.emulab.tasks.xmlrpc.experiment.EmulabExperimentRebootTask;
			import com.flack.emulab.tasks.xmlrpc.experiment.EmulabExperimentReloadTask;
			import com.flack.emulab.tasks.xmlrpc.experiment.EmulabExperimentSwapExpTask;
			import com.flack.shared.FlackEvent;
			import com.flack.shared.SharedMain;
			import com.flack.shared.display.areas.DocumentArea;
			import com.flack.shared.display.areas.LogMessagesRelatedToArea;
			import com.flack.shared.logging.LogMessage;
			import com.flack.shared.logging.LogMessageCollection;
			import com.flack.shared.tasks.TaskCollection;
			import com.flack.shared.tasks.TaskEvent;
			import com.flack.shared.utils.ImageUtil;
			
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.IVisualElement;
			import mx.events.CloseEvent;
			
			import spark.components.Button;
			import spark.primitives.Rect;
			
			public function get ComponentsArea():IComponentsArea
			{
				if(experimentComponentsArea != null && experimentComponentsArea.numElements == 1)
					return experimentComponentsArea.getElementAt(0) as IComponentsArea;
				else
					return null;
			}
			
			override public function get PendingChanges():Boolean
			{
				if(_experiment != null)
					return _experiment.UnsubmittedChanges;
				else
					return false;
			}
			
			[Bindable] 
			public var experimentMenuData:Array = [
				{
					label: "Preview NS File",
					icon: ImageUtil.previewIcon,
					action: previewNs
				},
				{
					label: "Last NS File",
					icon: ImageUtil.manifestIcon,
					action: viewNs
				},
				{
					label: "Logs",
					icon: ImageUtil.consoleIcon,
					action: viewLogs
				}
			];
			
			[Bindable]
			private var _experiment:Experiment;
			public function set experiment(value:Experiment):void
			{
				_experiment = value;
				if(initialized)
				{
					if(ComponentsArea == null || ComponentsArea.ExperimentEditing == null)
						loadGraphView();
					//if(_experiment.state.length > 0)
					//	dashboardViewstack.selectedChild = sliceView;
					
					updateExperimentChanging();
				}
			}
			public function get experiment():Experiment
			{
				return _experiment;
			}
			
			public function init():void
			{
				if(_experiment != null)
				{
					if(_experiment.elabinelab != null)
					{
						elabinelabRadiobutton.selected = true;
						loadElabinelabView();
					}
					else
					{
						graphRadiobutton.selected = true;
						loadGraphView();
					}
					updateExperimentChanging();
				}
				SharedMain.tasker.addEventListener(TaskEvent.CHILD_FINISHED, updateExperimentChanging);
				SharedMain.tasker.addEventListener(TaskEvent.CHILD_STARTED, updateExperimentChanging);
				SharedMain.sharedDispatcher.addEventListener(FlackEvent.CHANGED_EXPERIMENT, experimentChanged);
				SharedMain.logger.addEventListener(FlackEvent.CHANGED_LOG, logChanged);
				
				var msgs:LogMessageCollection = SharedMain.logger.Logs.getRelatedTo([experiment]).Important;
				if(msgs.length > 0)
					setLog(msgs.collection[msgs.length-1]);
			}
			
			/*
			override public function removeEvents():void
			{
			SharedMain.geniDispatcher.removeEventListener(GeniEvent.CHANGED_experiment, sliceChanged);
			SharedMain.tasker.removeEventListener(TaskEvent.CHILD_FINISHED, updateSliceChanging);
			SharedMain.tasker.removeEventListener(TaskEvent.CHILD_STARTED, updateSliceChanging);
			SharedMain.logger.removeEventListener(FlackEvent.CHANGED_LOG, logChanged);
			}
			*/
			
			public function experimentChanged(e:FlackEvent):void
			{
				var changedSlice:Experiment = e.changedObject as Experiment;
				if(_experiment == changedSlice)
					updateExperiment();
			}
			
			public function updateExperimentChanging(e:TaskEvent = null):void
			{
				var tasksNotFinished:TaskCollection = SharedMain.tasker.tasks.AllNotFinished;
				var stillWorking:Boolean = tasksNotFinished.getRelatedTo(_experiment).length > 0;
				if(!stillWorking && spinner.visible)
				{
					spinner.visible = false;
					spinner.stopSpin();
					optionsGroup.enabled = true;
					clearCanvasButton.enabled = true;
					submitButton.enabled = true;
					ComponentsArea.toggleEditable(true);
				}
				else if(stillWorking && !spinner.visible)
				{
					spinner.visible = true;
					spinner.startSpin();
					optionsGroup.enabled = false;
					clearCanvasButton.enabled = false;
					submitButton.enabled = false;
					ComponentsArea.toggleEditable(false);
				}
				// XXX toggle whether nodes can be deleted
			}
			
			public function updateExperiment():void
			{
				if(ComponentsArea != null)
					ComponentsArea.updateInterface();
				updateSliversInfo();
			}
			
			public function updateSliversInfo():void
			{
				endExperimentButton.enabled = _experiment.state.length > 0;
				swapOutExperimentButton.enabled = _experiment.state == Experiment.STATE_ACTIVE;
				refreshStatusButton.enabled = _experiment.state.length > 0;
			}
			
			public function logChanged(e:FlackEvent):void
			{
				if(e.action == FlackEvent.ACTION_CREATED)
				{
					var msg:LogMessage = e.changedObject as LogMessage;
					if(msg.relatedToAny([experiment]) && msg.importance == LogMessage.IMPORTANCE_HIGH)
						setLog(msg);
				}
			}
			
			public function setLog(msg:LogMessage):void
			{
				statusLabel.text = msg.ShortestTitle;
				statusLabel.toolTip = msg.ShortMessage;
				switch(msg.level)
				{
					case LogMessage.LEVEL_FAIL:
					case LogMessage.LEVEL_DIE:
						statusLabel.styleName = "failedStyle";
						break;
					case LogMessage.LEVEL_WARNING:
						statusLabel.styleName = "inprogressStyle";
						break;
					default:
						statusLabel.styleName = "unknownStyle";
				}
			}
			
			override public function cancelPendingChanges():void
			{
				experiment.resetToLast();
			}
			
			// Side bar
			
			public function submitExperiment():void
			{
				if(ExperimentWorking)
					return;
				if(experiment.nodes.length == 0)
				{
					Alert.show(
						"There are no resources to allocate. Add resources and then try again.",
						"Cannot allocate"
					);
					return;
				}
				if(!experiment.UnsubmittedChanges)
				{
					Alert.show(
						"There are no changes to the slice to submit.",
						"No changes"
					);
					return;
				}
				
				trySubmitExperiment();
			}
			
			public function trySubmitExperiment():void
			{
				if(ComponentsArea != null)
					ComponentsArea.clearStatus();
				
				//SharedMain.tasker.add(new SubmitSliceTaskGroup(slice));
			}
			
			public function regetExperiment():void
			{
				Alert.show(
					"Do you really want to clear and reload this experiment?",
					"Reload experiment?",
					Alert.YES|Alert.NO,
					this,
					function afterDecision(e:CloseEvent):void
					{
						if(e.detail == Alert.YES)
							tryRegetExperiment();
					}
				);
			}
			
			public function tryRegetExperiment():void
			{
				clearExperiment();
				SharedMain.tasker.add(new GetExperimentTaskGroup(_experiment));
			}
			
			// Slice canvas options
			
			public function tryClearExperiment():void
			{
				Alert.show(
					"Do you really want to clear the experiment?",
					"Confirm clear",
					Alert.YES|Alert.CANCEL,
					this,
					function clearSliceDecision(e:CloseEvent):void
					{
						if(e.detail == Alert.YES)
							clearExperiment();
					}
				);
			}
			
			public function clearExperiment():void
			{
				_experiment.removeAll();
				if(ComponentsArea != null)
					ComponentsArea.clear();
				SharedMain.sharedDispatcher.dispatchChanged(
					FlackEvent.CHANGED_EXPERIMENT,
					_experiment
				);
			}
			
			
			
			
			
			public function previewNs(event:* = null):void
			{
				var previewArea:DocumentArea = new DocumentArea();
				previewArea.title = "Preview NS file for " + _experiment.name;
				
				var createNsFile:GenerateNsTask = new GenerateNsTask(_experiment);
				createNsFile.start();
				previewArea.Document = createNsFile.data;
				
				previewArea.backgroundColor = backgroundColor;
				previewArea.titleColor = titleColor;
				openNext(previewArea);
			}
			
			public function viewNs(event:* = null):void
			{
				if(_experiment.nsfile.length == 0)
				{
					Alert.show(
						"There is no valid NS file for the experiment yet",
						"No NS file"
					);
					return;
				}
				
				var nsArea:DocumentArea = new DocumentArea();
				nsArea.title = "Last valid NS file for: " + _experiment.name;
				nsArea.Document = _experiment.nsfile;
				
				openNext(nsArea);
			}
			
			public function viewLogs(event:* = null):void
			{
				var logArea:LogMessagesRelatedToArea = new LogMessagesRelatedToArea();
				logArea.RelatedTo = [_experiment];
				logArea.title = "Logs for " + _experiment.name;
				logArea.backgroundColor = backgroundColor;
				logArea.titleColor = titleColor;
				openNext(logArea);
			}
			
			public function viewNode(node:VirtualNode):void
			{
				var nodeArea:VirtualNodeArea = new VirtualNodeArea();
				openNext(nodeArea);
				nodeArea.node = node;
			}
			
			public function viewLink(link:VirtualLink):void
			{
				var linkArea:VirtualLinkArea = new VirtualLinkArea();
				openNext(linkArea);
				linkArea.link = link;
			}
			
			public function endExperiment(event:* = null):void
			{
				if(experiment.state.length > 0)
				{
					Alert.show(
						"Do you really want to end the experiment?",
						"Confirm end",
						Alert.YES|Alert.NO,
						this,
						function afterDecision(e:CloseEvent):void
						{
							if(e.detail == Alert.YES)
								SharedMain.tasker.add(new EmulabExperimentEndExpTask(_experiment));
						}
					);
				}
			}
			
			public function swapInExperiment():void
			{
				if(ExperimentWorking)
					return;
				
				SharedMain.tasker.add(new EmulabExperimentSwapExpTask(_experiment, EmulabExperimentSwapExpTask.DIRECTION_IN));
			}
			
			public function swapOutExperiment():void
			{
				if(ExperimentWorking)
					return;
				
				Alert.show(
					"Continue stopping the slice?",
					"Confirm stop",
					Alert.YES|Alert.NO,
					FlexGlobals.topLevelApplication as Sprite,
					function chooseExpireFunction(e:CloseEvent):void
					{
						if(e.detail == Alert.YES)
							SharedMain.tasker.add(new EmulabExperimentSwapExpTask(_experiment, EmulabExperimentSwapExpTask.DIRECTION_OUT));
					}
				);
			}
			
			public function rebootExperiment():void
			{
				if(ExperimentWorking)
					return;
				
				Alert.show(
					"Continue rebooting the experiment?",
					"Confirm restart",
					Alert.YES|Alert.NO,
					FlexGlobals.topLevelApplication as Sprite,
					function chooseExpireFunction(e:CloseEvent):void
					{
						if(e.detail == Alert.YES)
							SharedMain.tasker.add(new EmulabExperimentRebootTask(_experiment));
					}
				);
			}
			
			public function reloadExperiment():void
			{
				if(ExperimentWorking)
					return;
				
				Alert.show(
					"Continue rebooting the experiment?",
					"Confirm restart",
					Alert.YES|Alert.NO,
					FlexGlobals.topLevelApplication as Sprite,
					function chooseExpireFunction(e:CloseEvent):void
					{
						if(e.detail == Alert.YES)
							SharedMain.tasker.add(new EmulabExperimentReloadTask(_experiment));
					}
				);
			}
			
			public function refreshStatus():void
			{
				if(experiment.state.length == 0)
				{
					Alert.show(
						"There are no resources allocated yet!",
						"Nothing to do"
					);
					return;
				}
				/*
				var refreshStatusTask:RefreshSliceStatusTaskGroup = new RefreshSliceStatusTaskGroup(slice, false);
				refreshStatusTask.forceRunNow = true;
				SharedMain.tasker.add(refreshStatusTask);
				*/
			}
			
			public function get ExperimentWorking():Boolean
			{
				if(SharedMain.tasker.tasks.AllNotFinished.getRelatedTo(_experiment).length > 0)
				{
					Alert.show(
						"There are tasks running on the experiment, please wait for them to complete and then try again",
						"Experiment busy"
					);
					return true;
				}
				return false;
			}
			
			public function loadGraphView():void
			{
				var currentArea:IComponentsArea = ComponentsArea;
				if(currentArea == null || !(currentArea is ExperimentCanvas))
				{
					currentArea = new ExperimentCanvas();
					(currentArea as ExperimentCanvas).host = this;
					experimentComponentsArea.removeAllElements();
					experimentComponentsArea.addElement(currentArea as IVisualElement);
					currentArea.loadOptions();
				}
				experimentComponentsArea.validateNow();
				currentArea.load(_experiment);
			}
			
			public function loadElabinelabView():void
			{
				var currentArea:IComponentsArea = ComponentsArea;
				if(currentArea == null || !(currentArea is ElabinelabView))
				{
					currentArea = new ElabinelabView();
					(currentArea as ElabinelabView).host = this;
					experimentComponentsArea.removeAllElements();
					experimentComponentsArea.addElement(currentArea as IVisualElement);
					currentArea.loadOptions();
				}
				experimentComponentsArea.validateNow();
				currentArea.load(_experiment);
			}
			
			public function loadNsView():void
			{
				var currentArea:IComponentsArea = ComponentsArea;
				if(currentArea == null || !(currentArea is ExperimentNsView))
				{
					currentArea = new ExperimentNsView();
					(currentArea as ExperimentNsView).host = this;
					experimentComponentsArea.removeAllElements();
					experimentComponentsArea.addElement(currentArea as IVisualElement);
					currentArea.loadOptions();
				}
				experimentComponentsArea.validateNow();
				currentArea.load(_experiment);
			}
			
			protected function componentsAreaTypeGroup_changeHandler(event:Event):void
			{
				if(elabinelabRadiobutton.selected)
					loadElabinelabView();
				else if(nsRadiobutton.selected)
					loadNsView();
				else
					loadGraphView();
			}
			
		]]>
	</fx:Script>
	<s:HGroup width="100%"
			  height="100%"
			  gap="2">
		<s:VGroup id="dashboard"
				  height="100%"
				  width="180"
				  gap="2">
			<s:ButtonBar dataProvider="{dashboardViewstack}"
						 requireSelection="true"
						 skinClass="com.flack.shared.display.skins.ButtonBarSkin"
						 width="100%"
						 height="28" />
			<mx:ViewStack id="dashboardViewstack"
						  width="100%"
						  height="100%">
				<s:NavigatorContent id="settingsView"
									width="100%"
									height="100%"
									toolTip="Resources"
									icon="{ImageUtil.settingsIcon}">
					<s:Scroller width="100%" height="100%">
						<s:VGroup width="100%"
								  gap="2"
								  paddingLeft="2" paddingRight="2">
							<s:HGroup width="100%"
									  height="26"
									  verticalAlign="middle">
								<s:Label width="100%"
										 text="{title}"
										 verticalAlign="middle"
										 fontSize="16"
										 fontWeight="bold"
										 paddingLeft="4" paddingTop="4" />
								<components:Spinner id="spinner"
													width="21"
													height="21"
													x="{(width / 2) - (spinner.width / 2)}"
													y="{(height / 2) - (spinner.height / 2)}"
													visible="false"
													includeInLayout="{spinner.visible}" />
								<components:MenuButton id="sliceMenuButton"
													   menuData="{experimentMenuData}"
													   label="View" />
							</s:HGroup>
							<s:VGroup id="normalExperimentOptionsVgroup" width="100%">
								<s:CheckBox id="useFirewallCheckBox"
											width="100%"
											label="Use firewall" />
								<s:VGroup id="firewallVgroup"
										  width="100%"
										  visible="{useFirewallCheckBox.selected}"
										  includeInLayout="{useFirewallCheckBox.selected}">
									<s:HGroup width="100%">
										<s:Label text="Type" />
										<s:ComboBox width="100%">
											<s:dataProvider>
												<s:ArrayList>
													<fx:String>ipfw2-vlan</fx:String>
												</s:ArrayList>
											</s:dataProvider>
										</s:ComboBox>
									</s:HGroup>
									<s:HGroup width="100%">
										<s:Label text="Style" />
										<s:ComboBox width="100%">
											<s:dataProvider>
												<s:ArrayList>
													<fx:String>basic</fx:String>
													<fx:String>closed</fx:String>
													<fx:String>open</fx:String>
												</s:ArrayList>
											</s:dataProvider>
										</s:ComboBox>
									</s:HGroup>
									<s:Label text="Rules" />
									<display:NumberValueVgroup height="120" />
								</s:VGroup>
								<s:Label text="Environmental Vars" />
								<display:NameValueVgroup height="120" />
							</s:VGroup>
							<s:VGroup id="extendedExperimentOptions" width="100%">
								<s:CheckBox label="Use end node shaping" />
								<s:CheckBox label="Force end node shaping" />
								<s:HGroup width="100%">
									<s:Label text="Routing" />
									<s:ComboBox id="routingComboBox"
												width="100%">
										<s:dataProvider>
											<s:ArrayList>
												<fx:String>Static</fx:String>
												<fx:String>Manual</fx:String>
												<fx:String>Session</fx:String>
											</s:ArrayList>
										</s:dataProvider>
									</s:ComboBox>
								</s:HGroup>
								<s:HGroup width="100%">
									<s:Label text="Jail OS" />
									<s:ComboBox id="jailOsComboBox"
												width="100%" />
								</s:HGroup>
								<s:HGroup width="100%">
									<s:Label text="Delay OS" />
									<s:ComboBox id="delayOsComboBox"
												width="100%" />
								</s:HGroup>
								<s:HGroup width="100%">
									<s:Label text="Sync Server" />
									<s:DropDownList id="syncServerDropDownList" width="100%" />
								</s:HGroup>
							</s:VGroup>
						</s:VGroup>
					</s:Scroller>
				</s:NavigatorContent>
			</mx:ViewStack>
			<s:HGroup width="100%"
					  verticalAlign="middle"
					  paddingLeft="2"
					  gap="2">
			</s:HGroup>
		</s:VGroup>
		<s:VGroup height="100%"
				  width="100%"
				  gap="2"
				  paddingRight="2">
			<s:HGroup width="100%"
					  paddingTop="2"
					  verticalAlign="middle"
					  id="topBar"
					  gap="4">
				<s:RadioButton id="graphRadiobutton" label="Draw"
							   group="{componentsAreaTypeGroup}" />
				<s:RadioButton id="elabinelabRadiobutton" label="Elab-in-Elab"
							   group="{componentsAreaTypeGroup}" />
				<s:RadioButton id="nsRadiobutton" label="NS"
							   group="{componentsAreaTypeGroup}" />
				<s:Rect width="8" />
				<s:HGroup id="optionsGroup" width="100%" />
				<components:ImageButton id="clearCanvasButton"
										toolTip="Clear the canvas"
										icon="{ImageUtil.eraseIcon}"
										click="tryClearExperiment()" />
				<components:ImageButton id="dockIcon"
										icon="{ImageUtil.windowIcon}"
										toolTip="Pop out to a window or in to the main window"
										click="host.Docked ? popOut() : dock()" />
			</s:HGroup>
			<s:Group width="100%"
					 height="100%"
					 id="experimentComponentsArea" />
		</s:VGroup>
	</s:HGroup>
	<s:Group width="100%">
		<s:Rect width="100%" height="100%">
			<s:fill><s:SolidColor color="0xCCCCCC" /></s:fill>
		</s:Rect>
		
		<s:HGroup width="100%"
				  verticalAlign="middle"
				  paddingLeft="2"
				  paddingRight="2"
				  paddingTop="2"
				  paddingBottom="2"
				  gap="2">
			<s:Button id="submitButton"
					  icon="{ImageUtil.actionIcon}"
					  label="Submit"
					  toolTip="Submit resources for allocation"
					  click="submitExperiment()" />
			<components:ImageButton id="refreshButton"
									toolTip="Reload experiment from scratch"
									icon="{ImageUtil.refreshIcon}"
									click="regetExperiment()" />
			<components:ImageButton id="endExperimentButton"
									label="End"
									toolTip="End the experiment"
									icon="{ImageUtil.deleteIcon}"
									styleName="failedStyle"
									click="endExperiment()" />
			<components:ImageButton id="swapOutExperimentButton"
									label="Swap out"
									toolTip="Swap out the experiment"
									icon="{ImageUtil.stopControlIcon}"
									click="swapOutExperiment()" />
			<components:ImageButton id="rebootExperimentButton"
									label="Reboot"
									enabled="{swapOutExperimentButton.enabled}"
									toolTip="Restart all slivers in the slice"
									icon="{ImageUtil.repeatControlIcon}"
									click="rebootExperiment()" />
			<components:ImageButton id="reloadExperimentButton"
									label="Reload"
									enabled="{swapOutExperimentButton.enabled}"
									toolTip="Restart all slivers in the slice"
									icon="{ImageUtil.repeatControlIcon}"
									click="reloadExperiment()" />
			<s:Label id="statusLabel" width="100%" paddingLeft="2" />
			<s:Button id="refreshStatusButton"
					  toolTip="Refresh the status on all slivers"
					  label="Get Status"
					  enabled="false"
					  click="refreshStatus()" />
		</s:HGroup>
	</s:Group>
</areas:AreaContent>
