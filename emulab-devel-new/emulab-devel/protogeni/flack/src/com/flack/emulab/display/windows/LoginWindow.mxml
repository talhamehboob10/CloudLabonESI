<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) 2008-2013 University of Utah and the Flux Group.

{{{GENIPUBLIC-LICENSE

GENI Public License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and/or hardware specification (the "Work") to
deal in the Work without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Work, and to permit persons to whom the Work
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Work.

THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
IN THE WORK.

}}}

-->

<windows:DefaultWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
						  xmlns:s="library://ns.adobe.com/flex/spark" 
						  xmlns:mx="library://ns.adobe.com/flex/mx"
						  xmlns:components="com.flack.shared.display.components.*"
						  title="Log in"
						  creationComplete="onCreationComplete();"
						  maxStartHeight="400"
						  maxStartWidth="700" xmlns:windows="com.flack.shared.display.windows.*">
	<components:layout>
		<s:VerticalLayout paddingTop="4" paddingBottom="4" />
	</components:layout>
	
	<fx:Script>
		<![CDATA[
			import com.flack.shared.FlackEvent;
			import com.flack.shared.SharedCache;
			import com.flack.shared.SharedMain;
			import com.flack.shared.resources.IdnUrn;
			import com.flack.shared.tasks.Task;
			import com.flack.shared.tasks.TaskEvent;
			import com.flack.shared.tasks.file.FileTask;
			import com.flack.shared.utils.DateUtil;
			import com.flack.shared.utils.ImageUtil;
			import com.flack.shared.utils.NetUtil;
			import com.hurlant.util.der.PEM;
			import com.mstrum.Asn1Field;
			import com.mstrum.DER;
			import com.mstrum.Oids;
			
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			
			[Bindable]
			public var cert:String = "";
			
			public function onCreationComplete():void
			{
				passwordField.text = SharedMain.user.password;
				rememberPasswordCheckbox.selected = passwordField.text.length>0;
			}
			
			private function get ValidPem():Boolean
			{
				return sslPem.text.indexOf("-----BEGIN RSA PRIVATE KEY-----") > -1 &&
					sslPem.text.indexOf("-----BEGIN CERTIFICATE-----") > -1;
			}
			
			
			// Certificate
			
			private const certLocation:String = "/getsslcert.php3";
			private const loginLocation:String = "/login.php3";
			
			private function tryParseCert():void
			{
				// If everything is there, deal with it
				if(ValidPem)
				{
					// Show the password box if a password is needed
					passwordGroup.visible = sslPem.text.indexOf("DEK-Info:") > -1;
					rememberUnencryptedCertCheckbox.visible = !passwordGroup.visible;
					
					// Try to get info from the cert
					try
					{
						var certArray:ByteArray = PEM.readCertIntoArray(this.sslPem.text);
						var cert:Asn1Field = DER.Parse(certArray);
						var subjAlt:Asn1Field = cert.getHolderFor(Oids.SUBJECT_ALT_NAME);
						var urnString:String = subjAlt.getValue();
						if(IdnUrn.isIdnUrn(urnString))
							setUserId(urnString);
						else
							throw new Error();
					}
					catch(e:Error)
					{
						if(passwordGroup.visible)
							this.detectedUrnLabel.text = "Please enter your private key passphrase below.";
						else
							this.detectedUrnLabel.text = "";
					}
					if(passwordGroup.visible)
						passwordField.setFocus();
					else
						this.okButton.setFocus();
				}
				else
				{
					rememberUnencryptedCertCheckbox.visible = false;
					passwordGroup.visible = false;
					this.okButton.setFocus();
				}
			}
			
			private function setUserId(idString:String):void
			{
				SharedMain.user.id = new IdnUrn(idString);
				this.detectedUrnLabel.text = "Hello, " + SharedMain.user.id.name + " from " + SharedMain.user.id.authority + ".";
				if(this.passwordGroup.visible)
					this.detectedUrnLabel.text += " Please enter your private key passphrase below.";
			}
			
			private function trySavePem(event:MouseEvent):void
			{
				var savePemTask:FileTask = new FileTask(sslPem.text);
				if(SharedMain.user.id.full.length > 0)
					savePemTask.fileName = SharedMain.user.id.name + ".pem";
				else
					savePemTask.fileName = "flackUser.pem";
				savePemTask.startOperation(event);
			}
			
			private function tryOpenPem(event:MouseEvent):void
			{
				var openPemTask:FileTask = new FileTask();
				openPemTask.addEventListener(TaskEvent.FINISHED, afterOpenPem);
				openPemTask.startOperation(event);
			}
			
			private function afterOpenPem(event:TaskEvent):void
			{
				if(event.task.Status == Task.STATUS_SUCCESS)
					sslPem.text = event.task.data;
				else if(event.task.Status != Task.STATUS_CANCELED)
					Alert.show("Failed to load PEM", "Error");
			}
			
			// Finish
			
			public function trySubmit():void
			{
				if(!ValidPem)
					Alert.show("You must supply a valid private key/certificate combination", "No SSL PEM given");
				else
					saveAndClose();
			}
			
			public function saveAndClose():void
			{
				if(SharedMain.user.setSecurity(passwordField.text, sslPem.text))
				{
					Alert.show("It appears that the password is incorrect, try again", "Incorrect password");
					return;
				}
				if(this.rememberPasswordCheckbox.selected)
					SharedCache.updateUserPassword(passwordField.text);
				else
					SharedCache.updateUserPassword("");
				if(!rememberUnencryptedCertCheckbox.visible || rememberUnencryptedCertCheckbox.selected)
					SharedCache.updateUserSslPem(sslPem.text);
				else
					SharedCache.updateUserSslPem("");
				SharedCache.save();
				
				//GeniMain.geniUniverse.loadAuthenticated();
				
				closeWindow();
			}
			
		]]>
	</fx:Script>
	
	<s:Label text="Your private key and certificate need to be entered below." paddingLeft="4" paddingRight="4" />
	<s:HGroup width="100%" verticalAlign="middle" paddingLeft="4" paddingRight="4">
		<components:ImageButton icon="{ImageUtil.saveIcon}"
								toolTip="Save to file"
								click="trySavePem(event)" />
		<components:ImageButton icon="{ImageUtil.openIcon}"
								toolTip="Open from file"
								click="tryOpenPem(event)" />
		<components:ImageButton icon="{ImageUtil.copyIcon}"
								toolTip="Copy to clipboard"
								click="System.setClipboard(sslPem.text)" />
	</s:HGroup>
	
	<s:TextArea id="sslPem"
				width="100%" height="100%"
				valueCommit="tryParseCert()"
				change="tryParseCert()" />
	<s:HGroup verticalAlign="middle" paddingLeft="4" paddingRight="4">
		<s:Label id="detectedUrnLabel" width="100%" />
		<s:CheckBox id="rememberUnencryptedCertCheckbox" label="Remember" visible="false" includeInLayout="{rememberUnencryptedCertCheckbox.visible}" />
	</s:HGroup>
	
	<s:HGroup id="passwordGroup" width="100%" paddingLeft="4" paddingRight="4" verticalAlign="middle" visible="false" includeInLayout="{passwordGroup.visible}">
		<s:Image source="{ImageUtil.keyIcon}" />
		<s:TextInput id="passwordField"
					 width="100%" 
					 enter="trySubmit();"
					 displayAsPassword="true"
					 prompt="Enter your passphrase"/>
		<s:CheckBox id="rememberPasswordCheckbox" label="Remember" />
	</s:HGroup>

	<components:controlBarLayout>
		<s:HorizontalLayout verticalAlign="middle" paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2" />
	</components:controlBarLayout>
	<components:controlBarContent>
		<s:Button id="okButton"
				  label="OK"
				  icon="{ImageUtil.authenticationIcon}"
				  height="24"
				  click="trySubmit();" />
		<s:Button label="Cancel"
				  icon="{ImageUtil.crossIcon}"
				  click="closeWindow()" />
	</components:controlBarContent>
	
</windows:DefaultWindow>
