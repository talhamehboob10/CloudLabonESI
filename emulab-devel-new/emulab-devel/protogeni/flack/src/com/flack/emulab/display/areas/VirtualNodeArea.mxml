<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) 2008-2013 University of Utah and the Flux Group.

{{{GENIPUBLIC-LICENSE

GENI Public License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and/or hardware specification (the "Work") to
deal in the Work without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Work, and to permit persons to whom the Work
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Work.

THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
IN THE WORK.

}}}

-->

<areas1:AreaContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="com.flack.shared.display.components.*"
		  xmlns:areas1="com.flack.shared.display.areas.*"
		  creationComplete="init()"
		  paddingBottom="2"
		  title="{node.name}">
	<fx:Declarations>
		<s:RadioButtonGroup id="boundGroup"
							valueCommit="boundGroup_valueCommitHandler(event)"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.flack.emulab.display.DisplayUtil;
			import com.flack.emulab.resources.physical.PhysicalNode;
			import com.flack.emulab.resources.virtual.VirtualInterfaceCollection;
			import com.flack.emulab.resources.virtual.VirtualLink;
			import com.flack.emulab.resources.virtual.VirtualLinkCollection;
			import com.flack.emulab.resources.virtual.VirtualNode;
			import com.flack.emulab.resources.virtual.VirtualNodeCollection;
			import com.flack.shared.FlackEvent;
			import com.flack.shared.SharedMain;
			import com.flack.shared.display.components.DataButton;
			import com.flack.shared.utils.ColorUtil;
			import com.flack.shared.utils.ImageUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			import spark.components.Button;
			import spark.primitives.Rect;
			
			[Bindable]
			public var node:VirtualNode = null;
			
			[Bindable]
			private var physicalNodes:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var hardwareForVirtual:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var diskImages:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var pipes:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var interfaces:ArrayCollection = new ArrayCollection();
			
			private function get SelectedBounded():Boolean
			{
				return boundRadiobutton.selected;
			}
			private function get SelectedBoundNode():PhysicalNode
			{
				return this.boundRadiobutton.selected ? boundDropDownList.selectedItem as PhysicalNode : null;
			}
			
			override public function get PendingChanges():Boolean
			{
				return okButton.enabled;
			}
			
			public function init():void
			{
				if(node != null)
				{
					load(node);
				}
			}
			
			public function load(n:VirtualNode):void
			{
				if(n == null)
					return;
				confirmCanCloseAnd(finishLoading, n);
			}
			private function finishLoading(n:VirtualNode):void
			{
				node = n;
				
				physicalNodes = new ArrayCollection();
				var nameSort:Sort = new Sort();
				var dataSortField:SortField = new SortField("name");
				nameSort.fields = [dataSortField];
				
				physicalNodes.sort = nameSort;
				
				// Build up lists
				
				if(initialized)
				{
					nameInput.text = node.name;
					backgroundColor = ColorUtil.colorsDark[node.experiment.manager.colorIdx];
					titleColor = ColorUtil.colorsLight[node.experiment.manager.colorIdx];
					
					if(node.physicalName.length > 0)
					{
						boundRadiobutton.selected = true;
						boundDropDownList.selectedItem = node.physicalName;
						loadBound();
					}
					else
					{
						unboundRadiobutton.selected = true;
						loadUnbound();
					}
					
					/*
					installVgroup.removeAllElements();
					if(node.services.installServices != null && node.services.installServices.length > 0)
					{
						for each(var installService:InstallService in node.services.installServices)
							addInstallService(installService);
					}
					executeVgroup.removeAllElements();
					if(node.services.executeServices != null && node.services.executeServices.length > 0)
					{
						for each(var executeService:ExecuteService in node.services.executeServices)
							addExecuteService(executeService);
					}
					interfaces = new ArrayCollection();
					for each(var iface:VirtualInterface in node.interfaces.collection)
					{
						interfaces.addItem(
							{
								source: iface,
								clientId: iface.clientId,
								macAddress: iface.macAddress,
								physicalName: iface.physicalId.name,
								ipaddress: iface.ip.address,
								ipnetmask: iface.ip.netmask,
								iptype: iface.ip.type
							}
						);
					}
					*/
					
					okButton.enabled = false;
				}
			}
			
			protected function boundDropDownList_valueCommitHandler(event:FlexEvent):void
			{
				boundRadiobutton.selected = true;
				loadBound();
				
				if(!okButton.enabled)
					okButton.enabled = node.physicalName.length == 0;
			}
			
			private function loadUnbound():void
			{
				
			}
			
			private function loadBound():void
			{
			}
			
			private function addInstallService():void
			{
				
			}
			
			private function addExecuteService():void
			{
				
			}
			
			protected function boundGroup_valueCommitHandler(event:FlexEvent):void
			{
				if(unboundRadiobutton.selected)
					loadUnbound();
				else
					loadBound();
				if(!okButton.enabled)
				{
					if(SelectedBounded)
						okButton.enabled = node.physicalName.length == 0;
					else
						okButton.enabled = node.physicalName.length > 0;
				}
			}
			
			public function fillLinksTo():void
			{
				if(linksVgroup == null || node == null)
					return;
				linksVgroup.removeAllElements();
				var connectedInterfaces:VirtualInterfaceCollection = node.interfaces.Links.Interfaces;
				var connectedNodes:VirtualNodeCollection = connectedInterfaces.Nodes;
				connectedNodes.remove(node);
				
				for each(var connectedNode:VirtualNode in connectedNodes.collection)
				{
					var connectedNodeButton:DataButton = DisplayUtil.getVirtualNodeButton(connectedNode, false);
					connectedNodeButton.addEventListener(MouseEvent.CLICK, gotoNode);
					linksVgroup.addElement(connectedNodeButton);
					
					var connectedLinks:VirtualLinkCollection = node.interfaces.Links.getConnectedToNode(connectedNode);
					for each(var connectedLink:VirtualLink in connectedLinks.collection)
					{
						var pointLinkHbox:HGroup = new HGroup();
						var space:Rect = new Rect();
						space.width = 16;
						pointLinkHbox.addElement(space);
						var connectedLinkButton:DataButton = DisplayUtil.getVirtualLinkButton(connectedLink, false);
						connectedLinkButton.addEventListener(MouseEvent.CLICK, gotoLink);
						pointLinkHbox.addElement(connectedLinkButton);
						linksVgroup.addElement(pointLinkHbox);
					}
				}
			}
			
			override public function cancelPendingChanges():void
			{
				finishLoading(node);
			}
			
			public function cancelAndClose():void
			{
				cancelPendingChanges();
				close();
			}
			
			public function saveAndClose():void
			{
				if(save())
					return;
				close();
			}
			
			// true = failed
			public function save():Boolean
			{
				// Make sure we HAVE a client id
				if(nameInput.text.length == 0)
				{
					Alert.show("Either choose an unbound node or choose a node to bind to.", "No bound node indicated");
					return true;
				}
				
				// Make sure the client_id is not taken
				if(!node.experiment.isIdUnique(node, nameInput.text))
				{
					Alert.show("Client ID '" + nameInput.text + "' is already in use, please choose a different client id");
					return true;
				}
				
				// Guarentee we have enough selected
				if(boundRadiobutton.selected && SelectedBoundNode == null)
				{
					Alert.show("Either choose an unbound node or choose a node to bind to.", "No bound node indicated");
					return true;
				}
				
				// Make sure we aren't trying to bind to a resource which cannot be bound to any more
				/*
				if(boundRadiobutton.selected && SelectedBoundNode != null && exclusiveCheckbox.selected && !SliverTypes.isVm(SelectedSliverType.name))
				{
					var boundNodes:VirtualNodeCollection = node.experiment.nodes.getBoundTo(SelectedBoundNode);
					if(boundNodes.length > 0)
					{
						for each(var boundNode:VirtualNode in boundNodes.collection)
						{
							if(boundNode != node)
							{
								Alert.show("The physical node being bound to is already bound on " + boundNode.clientId +", please choose a different node to bind to.");
								return true;
							}
						}
					}
				}
				*/
				// Start saving!
				
				node.name = nameInput.text;
				
				// Save changes based on binding
				/*
				if(unboundRadiobutton.selected)
				{
					if(!hardwareTypeCheckbox.selected)
						node.hardwareType.name = "";
					else
						node.hardwareType.name = hardwareList.selectedItem.name;
					node.physicalId.full = "";
				}
				else
				{
					node.hardwareType.name = "";
					node.physicalId.full = this.SelectedBoundNode.id.full;
				}
				*/
				
				// Save changes based on sliver type
				/*
				if(node.sliverType.name == SliverTypes.RAWPC_V2)
					node.sliverType.selectedImage = new DiskImage(diskImageText.text);
				else
					node.sliverType.selectedImage = null;
				
				node.services.installServices = null;
				node.services.executeServices = null;
				if(node.sliverType.name == SliverTypes.RAWPC_V2 || node.sliverType.name == SliverTypes.EMULAB_OPENVZ)
				{
					var serviceIdx:int;
					if(installVgroup.numElements > 0)
					{
						node.services.installServices = new Vector.<InstallService>();
						for(serviceIdx = 0; serviceIdx < installVgroup.numElements; serviceIdx++)
						{
							var installService:InstallService = (installVgroup.getElementAt(serviceIdx) as InstallServiceComponent).Service;
							if(installService.url.length > 0)
								node.services.installServices.push(installService);
						}
					}
					if(executeVgroup.numElements > 0)
					{
						node.services.executeServices = new Vector.<ExecuteService>();
						for(serviceIdx = 0; serviceIdx < executeVgroup.numElements; serviceIdx++)
						{
							var executeService:ExecuteService = (executeVgroup.getElementAt(serviceIdx) as ExecuteServiceComponent).Service;
							if(executeService.command.length > 0)
								node.services.executeServices.push(executeService);
						}
					}
					
				}
				
				// Save changes to interfaces
				for each(var ifaceObj:Object in interfaces)
				{
					var iface:VirtualInterface = ifaceObj.source;
					iface.clientId = ifaceObj.clientId;
					iface.ip.address = ifaceObj.ipaddress;
					iface.ip.netmask = ifaceObj.ipnetmask;
					iface.ip.type = ifaceObj.iptype;
				}
				*/
				
				node.unsubmittedChanges = true;
				
				SharedMain.sharedDispatcher.dispatchChanged(
					FlackEvent.CHANGED_EXPERIMENT,
					node.experiment
				);
				
				okButton.enabled = false;
				
				return false;
			}
			
			public function gotoNode(e:MouseEvent):void
			{
				var nodeContent:VirtualNodeArea = new VirtualNodeArea();
				nodeContent.load((e.target as DataButton).data);
				openNext(nodeContent);
			}
			
			public function gotoLink(e:MouseEvent):void
			{
				var linkContent:VirtualLinkArea = new VirtualLinkArea();
				linkContent.load((e.target as DataButton).data);
				openNext(linkContent);
			}
			
		]]>
	</fx:Script>
	
	<s:Group width="100%">
		<s:Rect width="100%" height="100%">
			<s:fill><s:SolidColor color="{backgroundColor}" /></s:fill>
		</s:Rect>
		
		<s:HGroup width="100%"
				  verticalAlign="middle"
				  paddingLeft="2"
				  paddingRight="2"
				  paddingTop="2"
				  paddingBottom="2"
				  gap="2">
			<s:TextInput id="nameInput"
						 width="100%"
						 fontWeight="bold"
						 fontSize="16"
						 restrict="a-zA-Z0-9\-"
						 toolTip="{node.name}"
						 change="if(!okButton.enabled) okButton.enabled = nameInput.text != node.name" />
			<components:ImageButton id="dockIcon"
									icon="{ImageUtil.windowIcon}"
									toolTip="Pop out to a window or in to the main window"
									click="host.Docked ? popOut() : dock()" />
		</s:HGroup>
		
	</s:Group>
	
	<s:ButtonBar dataProvider="{sectionViewstack}"
				 requireSelection="true"
				 skinClass="com.flack.shared.display.skins.ButtonBarSkin"
				 width="100%" />
	<mx:ViewStack id="sectionViewstack"
				  width="100%"
				  height="100%"
				  paddingTop="2"
				  paddingLeft="2"
				  paddingRight="2"
				  paddingBottom="2">
		<s:NavigatorContent icon="{ImageUtil.infoIcon}"
							toolTip="Basic"
							height="100%"
							width="100%">
			<s:VGroup height="100%"
					  width="100%"
					  gap="2">
				<s:HGroup width="100%"
						  gap="4">
					<s:VGroup width="60%"
							  gap="2">
						<s:Label text="Binding" fontWeight="bold" />
						<s:HGroup width="100%"
								  gap="2"
								  verticalAlign="middle"
								  id="unboundVgroup">
							<s:RadioButton id="unboundRadiobutton"
										   group="{boundGroup}"
										   label="Unbound" />
							<s:CheckBox id="hardwareTypeCheckbox" />
							<s:DropDownList id="hardwareList"
											toolTip="Type..."
											prompt="Type..."
											enabled="{!SelectedBounded}"
											requireSelection="{hardwareTypeCheckbox.selected}"
											labelField="name"
											dataProvider="{hardwareForVirtual}"
											width="100%" />
						</s:HGroup>
						<s:HGroup width="100%"
								  gap="2"
								  verticalAlign="middle"
								  id="boundVgroup">
							<s:RadioButton id="boundRadiobutton"
										   group="{boundGroup}"
										   label="Bound to" />
							<s:DropDownList id="boundDropDownList"
											dataProvider="{physicalNodes}"
											width="100%" 
											valueCommit="boundDropDownList_valueCommitHandler(event)"
											labelField="name" />
						</s:HGroup>
						
					</s:VGroup>
				</s:HGroup>
				<s:VGroup id="nodeOptionsVgroup"
						  width="100%"
						  height="100%"
						  gap="2">
					<s:VGroup id="diskImageGroup"
							  width="100%"
							  gap="2"
							  includeInLayout="{diskImageGroup.visible}">
						<s:HGroup width="100%"
								  gap="2"
								  verticalAlign="middle">
							<s:Label text="Disk Image"
									 fontWeight="bold" />
							<s:Rect />
							<s:DropDownList id="diskImageSelect"
											width="100%"
											prompt="Select image to override default"
											dataProvider="{diskImages}"
											labelField="description"
											change="diskImageText.text = diskImageSelect.selectedItem.id.full" />
						</s:HGroup>
						<s:TextInput id="diskImageText" width="100%"
									 prompt="Select image above, paste URN, or manually type OSID"
									 valueCommit="if(!okButton.enabled) okButton.enabled = node.os.length == 0 || diskImageText.text != node.os" />
					</s:VGroup>
					<s:HGroup width="100%"
							  height="100%"
							  gap="2"
							  id="servicesGroup">
						<s:VGroup id="installServicesVgroup"
								  width="50%"
								  height="100%"
								  gap="2">
							<s:HGroup width="100%"
									  gap="2"
									  verticalAlign="middle">
								<s:Label text="Install"
										 fontWeight="bold" />
								<s:Rect percentWidth="100" />
								<s:Button id="addInstallButton"
										  icon="{ImageUtil.addIcon}"
										  label="Add Install Service"
										  click="addInstallService()" />
							</s:HGroup>
							
							<s:Scroller width="100%" height="100%">
								<s:VGroup id="installVgroup"
										  width="100%"
										  paddingRight="2"
										  gap="2" />
							</s:Scroller>
						</s:VGroup>
						<s:VGroup id="executeServicesVgroup"
								  width="50%"
								  height="100%"
								  gap="2">
							<s:HGroup width="100%"
									  verticalAlign="middle"
									  gap="2">
								<s:Label text="Execute"
										 fontWeight="bold" />
								<s:Rect percentWidth="100" />
								<s:Button id="addExecuteButton"
										  icon="{ImageUtil.addIcon}"
										  label="Add Execute Service"
										  click="addExecuteService()" />
							</s:HGroup>
							<s:Scroller width="100%" height="100%">
								<s:VGroup id="executeVgroup"
										  width="100%"
										  paddingRight="2"
										  gap="2" />
							</s:Scroller>
						</s:VGroup>
					</s:HGroup>
				</s:VGroup>
			</s:VGroup>
		</s:NavigatorContent>
		<s:NavigatorContent icon="{ImageUtil.linkIcon}"
							toolTip="Interfaces and Links"
							height="100%"
							width="100%">
			<s:VGroup creationComplete="fillLinksTo();"
					  width="100%"
					  height="100%"
					  gap="2">
				<s:DataGrid id="interfaceGrid"
							width="100%"
							height="40%" 
							dataProvider="{interfaces}"
							rowHeight="24"
							editable="true">
					<s:columns>
						<s:ArrayList>
							<s:GridColumn dataField="physicalName"
										  headerText="Physical"
										  editable="false">
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer />
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							<s:GridColumn dataField="ipaddress"
										  headerText="IP">
								<s:itemEditor>
									<fx:Component>
										<s:DefaultGridItemEditor />
									</fx:Component>
								</s:itemEditor>
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer />
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
						</s:ArrayList> 
					</s:columns>
				</s:DataGrid>
				<s:Scroller width="100%"
							height="60%">
					<s:VGroup width="100%"
							  height="100%"
							  gap="2"
							  id="linksVgroup" />
				</s:Scroller>
			</s:VGroup>
		</s:NavigatorContent>
	</mx:ViewStack>
	
	<s:Group width="100%">
		<s:Rect width="100%" height="100%">
			<s:fill><s:SolidColor color="0xCCCCCC" /></s:fill>
		</s:Rect>
		
		<s:HGroup width="100%"
				  verticalAlign="middle"
				  paddingLeft="2"
				  paddingRight="2"
				  paddingTop="2"
				  paddingBottom="2"
				  gap="2">
			<s:Button id="okButton"
					  label="Apply"
					  enabled="false"
					  icon="{ImageUtil.availableIcon}"
					  click="saveAndClose();" />
			<s:Button id="cancelButton"
					  label="Cancel"
					  icon="{ImageUtil.cancelIcon}"
					  click="cancelAndClose();" />
		</s:HGroup>
	</s:Group>
</areas1:AreaContent>
