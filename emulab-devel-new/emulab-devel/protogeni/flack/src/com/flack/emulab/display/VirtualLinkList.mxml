<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) 2008-2013 University of Utah and the Flux Group.

{{{GENIPUBLIC-LICENSE

GENI Public License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and/or hardware specification (the "Work") to
deal in the Work without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Work, and to permit persons to whom the Work
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Work.

THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
IN THE WORK.

}}}

-->

<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  paddingTop="4"
		  paddingLeft="4">
	<fx:Script>
		<![CDATA[
			import com.flack.emulab.resources.virtual.Experiment;
			import com.flack.emulab.resources.virtual.ExperimentCollection;
			import com.flack.emulab.resources.virtual.VirtualLink;
			import com.flack.emulab.resources.virtual.VirtualLinkCollection;
			import com.flack.shared.FlackEvent;
			
			import mx.collections.ArrayCollection;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			
			public var links:VirtualLinkCollection;
			
			[Bindable]
			public var viewLinks:ArrayCollection;
			[Bindable]
			public var experiments:ArrayCollection;
			
			static public const SELECTED:String = "selected";
			
			public function load(group:VirtualLinkCollection):void
			{
				links = group;
					
				viewLinks = new ArrayCollection();
				for each(var link:VirtualLink in links.collection)
					viewLinks.addItem(link);

				var nameSort:Sort = new Sort();
				var dataSortField:SortField = new SortField("name");
				nameSort.fields = [dataSortField];
				
				viewLinks.sort = nameSort;
				viewLinks.refresh();
				
				if(links.length > 1)
				{
					// Slices
					experiments = new ArrayCollection();
					
					var groupSlices:ExperimentCollection = group.Experiments;
					limitBySliceGroup.visible =
						limitBySliceGroup.includeInLayout = groupSlices.length > 1;
					
					if(limitBySliceGroup.visible)
					{
						for each(var exp:Experiment in groupSlices.collection)
							experiments.addItem(exp);
					}
				}
				else
					visible = includeInLayout = false;
			}
			
			private function filter():void
			{
				var filteredLinks:VirtualLinkCollection = links;
				
				viewLinks.removeAll();
				for each(var link:VirtualLink in filteredLinks.collection)
					viewLinks.addItem(link);
				viewLinks.refresh();
			}
			
			private var lastSelected:int = -1;
			protected function list_mouseUpHandler(event:MouseEvent):void
			{
				if(lastSelected != list.selectedIndex)
				{
					lastSelected = list.selectedIndex;
					dispatchEvent(new FlackEvent(SELECTED, list.selectedItem, FlackEvent.ACTION_SELECTED));
				}
			}
			
		]]>
	</fx:Script>
	
	<s:HGroup verticalAlign="middle"
			  id="limitBySliceGroup"
			  width="100%"
			  gap="2"
			  toolTip="Select a slice to limit results to">
		<s:CheckBox id="sliceCheckbox"
					change="filter();" />
		<s:DropDownList id="slicesList"
						labelField="Name"
						width="100%"
						dataProvider="{experiments}"
						change="sliceCheckbox.selected = true; filter();"
						requireSelection="true" />
	</s:HGroup>
	
	<s:List id="list"
			width="100%"
			height="100%"
			horizontalScrollPolicy="auto"
			dataProvider="{viewLinks}"
			labelField="name"
			mouseUp="list_mouseUpHandler(event)" />
	
</s:VGroup>
