<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) 2008-2013 University of Utah and the Flux Group.

{{{GENIPUBLIC-LICENSE

GENI Public License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and/or hardware specification (the "Work") to
deal in the Work without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Work, and to permit persons to whom the Work
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Work.

THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
IN THE WORK.

}}}

-->

<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="com.flack.shared.display.components.*" 
		  width="100%"
		  gap="2"
		  verticalAlign="middle"
		  remove="cleanup()">
	
	<fx:Script>
		<![CDATA[
			import com.flack.shared.SharedMain;
			import com.flack.shared.tasks.Task;
			import com.flack.shared.tasks.TaskEvent;
			import com.flack.shared.utils.ImageUtil;
			
			import spark.components.VGroup;
			
			private var removeWhenFinished:Boolean;
			public var viewFunction:Function;
			
			[Bindable]
			private var _task:Task;
			public function get task():Task
			{
				return _task;
			}
			public function setTask(newTask:Task, removeWhenDone:Boolean = true):void
			{
				_task = newTask;
				removeWhenFinished = removeWhenDone;
				_task.addEventListener(TaskEvent.STATUS, taskStatusChanged);
				taskStatusChanged();
			}
			
			public function taskStatusChanged(event:TaskEvent = null):void
			{
				switch(_task.Status)
				{
					case Task.STATUS_NA:
					case Task.STATUS_DELAYED:
						nameLabel.styleName = "pausedStyle";
						break;
					case Task.STATUS_RUNNING:
						nameLabel.styleName = "inprogressStyle";
						break;
					case Task.STATUS_CANCELED:
					case Task.STATUS_FAILED:
						if(!removeWhenFinished)
						{
							if(cancelButton != null)
							{
								cancelButton.visible = cancelButton.includeInLayout = false;
								//removeElement(cancelButton);
							}
							nameLabel.styleName = "failedStyle";
						}
						break;
					case Task.STATUS_SUCCESS:
					default:
						if(removeWhenFinished)
							remove();
						else
						{
							if(cancelButton != null)
							{
								cancelButton.visible = cancelButton.includeInLayout = false;
								//removeElement(cancelButton);
							}
							if(_task.hasWarnings)
								nameLabel.styleName = "warningStyle";
							else
								nameLabel.styleName = "validStyle";
						}
						break;
				}
			}
			
			public function cleanup():void
			{
				if(_task != null)
				{
					_task.removeEventListener(TaskEvent.STATUS, taskStatusChanged);
					_task = null;
				}
			}
			
			public function remove():void
			{
				if(parent != null)
					(parent as VGroup).removeElement(this);
			}
			
			public function view():void
			{
				if(viewFunction == null)
					SharedMain.logger.view(_task);
				else
					viewFunction(_task);
			}
			
		]]>
	</fx:Script>

	<components:ImageButton id="cancelButton"
							icon="{ImageUtil.cancelIcon}"
							click="_task.cancel();" />
	<s:Button id="nameLabel"
			  label="{_task.Name}"
			  fontSize="10"
			  toolTip="{_task.description}"
			  click="view()" />
</s:HGroup>
