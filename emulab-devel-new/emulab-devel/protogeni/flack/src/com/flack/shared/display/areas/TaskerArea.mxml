<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) 2008-2013 University of Utah and the Flux Group.

{{{GENIPUBLIC-LICENSE

GENI Public License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and/or hardware specification (the "Work") to
deal in the Work without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Work, and to permit persons to whom the Work
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Work.

THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
IN THE WORK.

}}}

-->

<areas1:AreaContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="com.flack.shared.display.components.*"
		  xmlns:display="com.flack.geni.display.*"
		  xmlns:areas="com.flack.geni.display.areas.*"
		  creationComplete="init()"
		  title="Tasker"
		  paddingTop="2" xmlns:areas1="com.flack.shared.display.areas.*">
	<fx:Script>
		<![CDATA[
			import com.flack.shared.FlackEvent;
			import com.flack.shared.SharedMain;
			import com.flack.shared.display.TaskGroupPeek;
			import com.flack.shared.logging.LogMessage;
			import com.flack.shared.logging.LogMessageCollection;
			import com.flack.shared.tasks.TaskCollection;
			import com.flack.shared.tasks.TaskGroup;
			import com.flack.shared.tasks.file.FileTask;
			import com.flack.shared.utils.ImageUtil;
			
			import mx.collections.ArrayCollection;
			
			import spark.events.IndexChangeEvent;
			import spark.primitives.Rect;
			
			public function init():void
			{
				var newGroupTaskPeek:TaskGroupPeek = new TaskGroupPeek();
				//newGroupTaskPeek.viewFunction = viewTask;
				newGroupTaskPeek.setTask(SharedMain.tasker, false);
				tasksView.addElement(newGroupTaskPeek);
				
				/*var taskerView:TaskGroupView = new TaskGroupView();
				taskerView.task = SharedMain.tasker;
				tasksView.addElement(taskerView);*/
				viewingLogs = SharedMain.logger.Logs;
				for each(var msg:LogMessage in viewingLogs.collection)
				{
					//loggerView.addElement(ViewUtil.getLogMessageButton(msg));
					addMessageToView(msg, false);
				}
				list.validateNow();
				list.ensureIndexIsVisible(viewMsgs.length-1);
			}
			
			override public function initEvents():void
			{
				SharedMain.logger.addEventListener(FlackEvent.CHANGED_LOG, logEvent);
			}
			
			override public function removeEvents():void
			{
				SharedMain.logger.removeEventListener(FlackEvent.CHANGED_LOG, logEvent);
			}
			
			// Tasker and Logger
			private var viewingLogsFor:* = null;
			private var viewingLogs:LogMessageCollection = new LogMessageCollection();
			[Bindable]
			private var viewMsgs:ArrayCollection = new ArrayCollection();
			private function logEvent(event:FlackEvent):void
			{
				var msg:LogMessage = null;
				if(event.action == FlackEvent.ACTION_CREATED)
				{
					msg = event.changedObject as LogMessage;
					if(viewingLogsFor == null
						|| msg.relatedTo.indexOf(viewingLogsFor) != -1
						/*|| (
						(viewingLogsFor is TaskGroup) && msg.relatedTo.
						&& (viewingLogsFor as TaskGroup).AllTasks.collection.indexOf(msg.owner) > -1
						) XXX */
					)
					{
						viewingLogs.add(msg);
						addMessageToView(msg);
						//loggerView.addElement(ViewUtil.getLogMessageButton(msg));
					}
				}
				else if(event.action == FlackEvent.ACTION_SELECTED)
				{
					viewMsgs.removeAll();
					viewingLogsFor = event.changedObject;
					//loggerView.removeAllElements();
					if(viewingLogsFor == null)
					{
						viewingLogs = SharedMain.logger.Logs;
					}
					else
					{
						if(viewingLogsFor is TaskGroup)
						{
							var owners:Array = [];
							var ownedTasks:TaskCollection = (viewingLogsFor as TaskGroup).AllTasks;
							for each(var task:* in ownedTasks.collection)
								owners.push(task);
							viewingLogs = SharedMain.logger.Logs.getRelatedTo(owners);
						}
						else
							viewingLogs = SharedMain.logger.Logs.getRelatedTo([viewingLogsFor]);
					}
					
					for each(msg in viewingLogs.collection)
						addMessageToView(msg, false);
					list.validateNow();
					list.ensureIndexIsVisible(viewMsgs.length-1);
				}
			}
			
			public function refreshMessages():void
			{
				viewMsgs.removeAll();
				for each(var msg:LogMessage in viewingLogs.collection)
					addMessageToView(msg, false);
				list.validateNow();
				list.ensureIndexIsVisible(viewMsgs.length-1);
			}
			
			public function addMessageToView(msg:LogMessage, scrollToPosition:Boolean = true):void
			{
				switch(msg.level)
				{
					case LogMessage.LEVEL_INFO:
						if(!showInfoCheckbox.selected)
							return;
						break;
					case LogMessage.LEVEL_WARNING:
						if(!showWarningCheckbox.selected)
							return;
						break;
					case LogMessage.LEVEL_FAIL:
					case LogMessage.LEVEL_DIE:
						if(!showErrorCheckbox.selected)
							return;
						break;
				}
				viewMsgs.addItem(msg);
				if(scrollToPosition && list != null)
				{
					list.validateNow();
					list.ensureIndexIsVisible(viewMsgs.length-1);
				}
			}
			
			protected function list_changeHandler(event:IndexChangeEvent):void
			{
				var msgArea:LogMessageArea = new LogMessageArea();
				msgArea.Message = list.selectedItem as LogMessage;
				openNext(msgArea);
			}
			
			private function saveLogs(e:MouseEvent):void
			{
				var saveLogsTask:FileTask = new FileTask(viewingLogs.toString());
				saveLogsTask.fileName = "all_logs.txt";
				saveLogsTask.startOperation(e);
			}
			
		]]>
	</fx:Script>
	
	<mx:HDividedBox width="100%"
					height="100%">
		<s:VGroup height="100%"
				  width="30%"
				  gap="2"
				  minWidth="200">
			<s:Label text="Tasks"
					 fontWeight="bold"
					 fontSize="17" />
			<s:Scroller height="100%"
						width="100%">
				<s:VGroup id="tasksView"
						  height="100%"
						  width="100%"
						  gap="4" />
			</s:Scroller>
		</s:VGroup>
		<s:VGroup height="100%"
				  width="70%"
				  gap="2">
			<s:HGroup width="100%"
					  verticalAlign="middle"
					  paddingRight="2">
				<s:Label text="Logs"
						 fontWeight="bold"
						 fontSize="17" />
				<s:Rect percentWidth="100" />
				<s:Label text="Display level(s):"
						 fontWeight="bold" />
				<s:CheckBox id="showInfoCheckbox"
							label="Info"
							selected="true"
							valueCommit="refreshMessages()" />
				<s:CheckBox id="showWarningCheckbox"
							chromeColor="0xFFA500"
							label="Warning"
							selected="true"
							valueCommit="refreshMessages()" />
				<s:CheckBox id="showErrorCheckbox"
							chromeColor="0xFF0000"
							label="Error"
							selected="true"
							valueCommit="refreshMessages()" />
				<s:Button id="viewAllLogsButton"
						  label="View All"
						  click="SharedMain.logger.view(null)" />
				<s:Button id="saveLogsButton"
						  label="Save"
						  icon="{ImageUtil.saveIcon}"
						  click="saveLogs(event)" />
			</s:HGroup>
			
			<s:List width="100%"
					height="100%"
					id="list"
					horizontalScrollPolicy="auto"
					change="list_changeHandler(event)"
					dataProvider="{viewMsgs}"
					itemRenderer="com.flack.geni.display.LogMessageItemRenderer" />
		</s:VGroup>
	</mx:HDividedBox>
	
</areas1:AreaContent>
