<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) 2008-2013 University of Utah and the Flux Group.

{{{GENIPUBLIC-LICENSE

GENI Public License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and/or hardware specification (the "Work") to
deal in the Work without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Work, and to permit persons to whom the Work
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Work.

THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
IN THE WORK.

}}}

-->

<areas1:AreaContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="com.flack.shared.display.components.*"
		  xmlns:display="com.flack.geni.display.*"
		  xmlns:areas="com.flack.geni.display.areas.*"
		  paddingTop="2" xmlns:areas1="com.flack.shared.display.areas.*">
	<fx:Script>
		<![CDATA[
			import com.flack.shared.FlackEvent;
			import com.flack.shared.SharedMain;
			import com.flack.shared.display.components.DataButton;
			import com.flack.shared.logging.LogMessage;
			import com.flack.shared.logging.LogMessageCollection;
			import com.flack.shared.tasks.Task;
			import com.flack.shared.tasks.TaskEvent;
			import com.flack.shared.utils.ColorUtil;
			import com.flack.shared.utils.DateUtil;
			import com.flack.shared.utils.ImageUtil;
			
			import mx.collections.ArrayCollection;
			
			import spark.events.IndexChangeEvent;
			import spark.primitives.Rect;
			
			private var _timer:Timer;
			
			private var addedListeners:Boolean = false;
			
			[Bindable]
			private var statusColor:uint;
			[Bindable]
			private var stateColor:uint;
			
			private var msgs:LogMessageCollection;
			
			[Bindable]
			private var viewMsgs:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			public var _task:Task;
			public function get task():Task
			{
				return _task;
			}
			public function set task(newTask:Task):void
			{
				_task = newTask;
				title = _task.Name;
				taskStatusChanged();
				msgs = SharedMain.logger.Logs.getRelatedTo([_task]);
				for each(var msg:LogMessage in msgs.collection)
					addMessage(msg);
				initEvents();
			}
			
			override public function initEvents():void
			{
				if(_task != null && !addedListeners)
				{
					SharedMain.logger.addEventListener(FlackEvent.CHANGED_LOG, logEvent);
					_task.addEventListener(TaskEvent.STATUS, taskStatusChanged);
					addedListeners = true;
				}
			}
			
			override public function removeEvents():void
			{
				if(_timer != null)
				{
					_timer.reset();
					_timer.removeEventListener(TimerEvent.TIMER, onTimer);
					_timer = null;
				}
				if(_task != null)
				{
					_task.removeEventListener(TaskEvent.STATUS, taskStatusChanged);
					SharedMain.logger.removeEventListener(FlackEvent.CHANGED_LOG, logEvent);
					addedListeners = false;
					_task = null;
				}
			}
			
			public function setDuration(startTime:Date, endTime:Date):void
			{
				timeLabel.text = DateUtil.getTimeBetween(startTime, endTime);
			}
			
			public function onTimer(event:TimerEvent):void
			{
				setDuration(_task.startTime, new Date());
			}
			
			public function taskStatusChanged(event:TaskEvent = null):void
			{
				// Start the timer to get how long this has run
				if(_task.State == Task.STATE_ACTIVE && _timer == null)
				{
					_timer = new Timer(1000);
					_timer.addEventListener(TimerEvent.TIMER, onTimer);
					_timer.start();
				}
				else if(_task.State == Task.STATE_FINISHED)
				{
					if(_timer != null)
					{
						_timer.reset();
						_timer.removeEventListener(TimerEvent.TIMER, onTimer);
						_timer = null;
					}
					setDuration(_task.startTime, _task.endTime);
				}
				
				switch(_task.Status)
				{
					case Task.STATUS_SUCCESS:
						statusColor = ColorUtil.validDark;
						break;
					case Task.STATUS_FAILED:
						statusColor = ColorUtil.invalidDark;
						break;
					case Task.STATUS_DELAYED:
					case Task.STATUS_RUNNING:
						statusColor = ColorUtil.changingDark;
						break;
					default:
						statusColor = ColorUtil.unknownDark;
				}
				
				switch(_task.State)
				{
					case Task.STATE_ACTIVE:
						stateColor = ColorUtil.changingDark;
						break;
					case Task.STATE_FINISHED:
						stateColor = ColorUtil.validDark;
						break;
					default:
						stateColor = ColorUtil.unknownDark;
				}
			}
			
			public function addMessage(msg:LogMessage, scrollToPosition:Boolean = true):void
			{
				viewMsgs.addItem(msg);
				if(scrollToPosition && list != null)
				{
					list.validateNow();
					list.ensureIndexIsVisible(viewMsgs.length-1);
				}
			}
			
			public function messageButtonClicked(event:MouseEvent):void
			{
				var msgArea:LogMessageArea = new LogMessageArea();
				msgArea.Message = (event.target as DataButton).data as LogMessage;
				openNext(msgArea);
			}
			
			private function logEvent(event:FlackEvent):void
			{
				if(event.action == FlackEvent.ACTION_CREATED)
				{
					var msg:LogMessage = event.changedObject as LogMessage;
					if(msg.relatedToAny([_task]))
					{
						msgs.add(msg);
						if(list != null)
							addMessage(msg);
					}
				}
			}
			
			protected function list_changeHandler(event:IndexChangeEvent):void
			{
				var msgArea:LogMessageArea = new LogMessageArea();
				msgArea.Message = list.selectedItem as LogMessage;
				openNext(msgArea);
			}
			
		]]>
	</fx:Script>
	
	
	<s:Group width="100%">
		<s:Rect width="100%" height="100%">
			<s:fill><s:SolidColor color="{backgroundColor}" /></s:fill>
		</s:Rect>
		
		<s:HGroup width="100%"
				  verticalAlign="middle"
				  paddingLeft="2"
				  paddingRight="2"
				  paddingTop="2"
				  paddingBottom="2"
				  gap="2">
			<s:Label text="{title}"
					 toolTip="{_task.description}"
					 fontSize="17"
					 fontWeight="bold"
					 width="100%" />
			<components:ImageButton icon="{ImageUtil.cancelIcon}"
									click="_task.cancel();" />
			<components:ImageButton id="dockIcon"
									icon="{ImageUtil.windowIcon}"
									toolTip="Pop out to a window or in to the main window"
									click="host.Docked ? popOut() : dock()" />
			<components:ImageButton id="closeIcon"
									icon="{ImageUtil.crossIcon}"
									toolTip="Close"
									click="close()" />
		</s:HGroup>
	</s:Group>
	
	<s:HGroup paddingLeft="2"
			  paddingRight="2"
			  gap="2">
		<s:Label text="State" />
		<s:Label id="stateLabel"
				 color="{stateColor}"
				 text="{_task.State}"
				 fontWeight="bold" />
	</s:HGroup>
	<s:HGroup paddingLeft="2"
			  paddingRight="2"
			  gap="2">
		<s:Label text="Status" />
		<s:Label id="statusLabel"
				 color="{statusColor}"
				 text="{_task.Status}"
				 fontWeight="bold" />
	</s:HGroup>
	<s:HGroup paddingLeft="2"
			  paddingRight="2"
			  gap="2">
		<s:Label text="Message" />
		<s:Label id="messageLabel"
				 color="{statusColor}"
				 text="{_task.Message}"
				 right="0"
				 fontWeight="bold" />
	</s:HGroup>
	<s:HGroup paddingLeft="2"
			  paddingRight="2"
			  gap="2">
		<s:Label text="Time" />
		<s:Label id="timeLabel"
				 color="{statusColor}"
				 fontWeight="bold" />
	</s:HGroup>
	
	<s:List width="100%"
			height="100%"
			id="list"
			horizontalScrollPolicy="auto"
			change="list_changeHandler(event)"
			dataProvider="{viewMsgs}"
			itemRenderer="com.flack.geni.display.LogMessageItemRenderer" />
	
</areas1:AreaContent>
