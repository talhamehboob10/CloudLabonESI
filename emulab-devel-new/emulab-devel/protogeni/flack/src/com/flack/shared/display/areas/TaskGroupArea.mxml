<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) 2008-2013 University of Utah and the Flux Group.

{{{GENIPUBLIC-LICENSE

GENI Public License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and/or hardware specification (the "Work") to
deal in the Work without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Work, and to permit persons to whom the Work
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Work.

THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
IN THE WORK.

}}}

-->

<areas1:AreaContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="com.flack.shared.display.components.*"
		  xmlns:display="com.flack.geni.display.*"
		  xmlns:areas="com.flack.geni.display.areas.*"
		  paddingTop="2" xmlns:areas1="com.flack.shared.display.areas.*">
	<fx:Script>
		<![CDATA[
			import com.flack.shared.FlackEvent;
			import com.flack.shared.SharedMain;
			import com.flack.shared.display.TaskGroupView;
			import com.flack.shared.display.components.DataButton;
			import com.flack.shared.logging.LogMessage;
			import com.flack.shared.logging.LogMessageCollection;
			import com.flack.shared.tasks.Task;
			import com.flack.shared.tasks.TaskEvent;
			import com.flack.shared.tasks.TaskGroup;
			import com.flack.shared.utils.ColorUtil;
			import com.flack.shared.utils.ImageUtil;
			
			import mx.collections.ArrayCollection;
			
			import spark.events.IndexChangeEvent;
			import spark.primitives.Rect;
			
			private var addedListeners:Boolean = false;
			
			private var viewingLogsFor:* = null;
			private var viewingLogs:LogMessageCollection = new LogMessageCollection();
			
			[Bindable]
			private var viewMsgs:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			public var _taskGroup:TaskGroup;
			public function get taskGroup():TaskGroup
			{
				return _taskGroup;
			}
			public function set taskGroup(newTaskGroup:TaskGroup):void
			{
				_taskGroup = newTaskGroup;
				title = _taskGroup.Name;
				taskStatusChanged();
				
				// tasks
				var taskGroupView:TaskGroupView = new TaskGroupView();
				taskGroupView.task = newTaskGroup;
				tasksView.addElement(taskGroupView);
				
				// logs
				viewingLogs = SharedMain.logger.Logs.getRelatedTo(_taskGroup.AllTasks.AsArray);
				for each(var msg:LogMessage in viewingLogs.collection)
					addMessage(msg);
				
				initEvents();
			}
			
			override public function initEvents():void
			{
				if(_taskGroup != null && !addedListeners)
				{
					taskGroup.addEventListener(TaskEvent.STATUS, taskStatusChanged);
					SharedMain.logger.addEventListener(FlackEvent.CHANGED_LOG, logEvent);
					addedListeners = true;
				}
			}
			
			override public function removeEvents():void
			{
				if(_taskGroup != null)
				{
					_taskGroup.removeEventListener(TaskEvent.STATUS, taskStatusChanged);
					SharedMain.logger.removeEventListener(FlackEvent.CHANGED_LOG, logEvent);
					addedListeners = false;
					_taskGroup = null;
				}
			}
			
			public function taskStatusChanged(event:TaskEvent = null):void
			{
				switch(_taskGroup.Status)
				{
					case Task.STATUS_SUCCESS:
						titleColor = ColorUtil.validDark;
						break;
					case Task.STATUS_FAILED:
						titleColor = ColorUtil.invalidDark;
						break;
					case Task.STATUS_DELAYED:
					case Task.STATUS_RUNNING:
						titleColor = ColorUtil.changingDark;
						break;
					default:
						titleColor = ColorUtil.unknownDark;
				}
			}
			
			public function addMessage(msg:LogMessage, scrollToPosition:Boolean = true):void
			{
				viewMsgs.addItem(msg);
				if(scrollToPosition && list != null)
				{
					list.validateNow();
					list.ensureIndexIsVisible(viewMsgs.length-1);
				}
			}
			
			public function messageButtonClicked(event:MouseEvent):void
			{
				var msgArea:LogMessageArea = new LogMessageArea();
				msgArea.Message = (event.target as DataButton).data as LogMessage;
				openNext(msgArea);
			}
			
			private function logEvent(event:FlackEvent):void
			{
				var msg:LogMessage = null;
				if(event.action == FlackEvent.ACTION_CREATED)
				{
					msg = event.changedObject as LogMessage;
					if(viewingLogsFor == null || msg.relatedTo.indexOf(viewingLogsFor) != -1)
					{
						if(msg.relatedToAny(_taskGroup.AllTasks.AsArray))
						{
							viewingLogs.add(msg);
							if(list != null)
								addMessage(msg);
						}
					}
				}
				else if(event.action == FlackEvent.ACTION_SELECTED)
				{
					if(event.changedObject != null && (event.changedObject is Task) && !_taskGroup.AllTasks.contains(event.changedObject as Task))
						return;
					
					viewingLogsFor = event.changedObject;
					viewMsgs.removeAll();
					if(viewingLogsFor == null)
						viewingLogs = SharedMain.logger.Logs.getRelatedTo(_taskGroup.AllTasks.AsArray);
					else
					{
						if(viewingLogsFor is TaskGroup)
							viewingLogs = SharedMain.logger.Logs.getRelatedTo((viewingLogsFor as TaskGroup).AllTasks.AsArray);
						else
							viewingLogs = SharedMain.logger.Logs.getRelatedTo([viewingLogsFor]);
					}
					
					for each(msg in viewingLogs.collection)
						addMessage(msg);
				}
			}
			
			protected function list_changeHandler(event:IndexChangeEvent):void
			{
				var msgArea:LogMessageArea = new LogMessageArea();
				msgArea.Message = list.selectedItem as LogMessage;
				openNext(msgArea);
			}
			
		]]>
	</fx:Script>
	
	<s:Group width="100%">
		<s:Rect width="100%" height="100%">
			<s:fill><s:SolidColor color="{backgroundColor}" /></s:fill>
		</s:Rect>
		
		<s:HGroup width="100%"
				  verticalAlign="middle"
				  paddingLeft="2"
				  paddingRight="2"
				  paddingTop="2"
				  paddingBottom="2"
				  gap="2">
			<s:Label text="{title}"
					 toolTip="{_taskGroup.description}"
					 fontSize="17"
					 fontWeight="bold"
					 width="100%" />
			<components:ImageButton id="dockIcon"
									icon="{ImageUtil.windowIcon}"
									toolTip="Pop out to a window or in to the main window"
									click="host.Docked ? popOut() : dock()" />
			<components:ImageButton id="closeIcon"
									icon="{ImageUtil.crossIcon}"
									toolTip="Close"
									click="close()" />
		</s:HGroup>
	</s:Group>

	<mx:HDividedBox width="100%"
					height="100%">
		<s:VGroup height="100%"
				  width="60%"
				  gap="2">
			<s:HGroup gap="2">
				<s:Label text="Tasks" />
			</s:HGroup>
			<s:Scroller height="100%" width="100%">
				<s:VGroup id="tasksView"
						  height="100%"
						  width="100%"
						  gap="2" />
			</s:Scroller>
		</s:VGroup>
		<s:VGroup height="100%"
				  width="40%"
				  gap="2">
			<s:HGroup gap="2">
				<s:Label text="Logs" />
			</s:HGroup>
			<s:List width="100%"
					height="100%"
					id="list"
					horizontalScrollPolicy="auto"
					change="list_changeHandler(event)"
					dataProvider="{viewMsgs}"
					itemRenderer="com.flack.geni.display.LogMessageItemRenderer" />
		</s:VGroup>
	</mx:HDividedBox>
	
</areas1:AreaContent>
