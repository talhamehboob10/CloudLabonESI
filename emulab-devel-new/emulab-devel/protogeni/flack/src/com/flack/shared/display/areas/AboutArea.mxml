<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) 2008-2013 University of Utah and the Flux Group.

{{{GENIPUBLIC-LICENSE

GENI Public License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and/or hardware specification (the "Work") to
deal in the Work without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Work, and to permit persons to whom the Work
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Work.

THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
IN THE WORK.

}}}

-->

<areas1:AreaContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="com.flack.shared.display.components.*"
		  xmlns:display="com.flack.geni.display.*"
		  xmlns:areas="com.flack.geni.display.areas.*"
		  xmlns:areas1="com.flack.shared.display.areas.*"
		  title="About Flack {SharedMain.version}"
		  initialize="afterReady()"
		  horizontalAlign="center">
	<fx:Script>
		<![CDATA[
			import com.flack.geni.GeniCache;
			import com.flack.geni.GeniMain;
			import com.flack.geni.tasks.groups.GetCertBundlesTaskGroup;
			import com.flack.geni.tasks.tests.TestCcrTaskGroup;
			import com.flack.geni.tasks.tests.TestCombineMultipleTaskGroup;
			import com.flack.geni.tasks.tests.TestSliceFailureModesTaskGroup;
			import com.flack.geni.tasks.tests.TestSliceHistoryTaskGroup;
			import com.flack.geni.tasks.tests.TestSliceSuccessModesTaskGroup;
			import com.flack.shared.SharedCache;
			import com.flack.shared.SharedMain;
			import com.flack.shared.tasks.Task;
			import com.flack.shared.tasks.TaskEvent;
			import com.flack.shared.tasks.TaskGroup;
			import com.flack.shared.tasks.file.FileTask;
			import com.flack.shared.tasks.http.JsHttpTask;
			import com.flack.shared.utils.ImageUtil;
			import com.flack.shared.utils.NetUtil;
			import com.flack.shared.utils.ViewUtil;
			
			import mx.controls.Alert;
			
			[Bindable]
			private var memoryString:String;
			
			public function afterReady():void
			{
				memoryString = (System.totalMemoryNumber / 1048576).toFixed(2)
					           + " MB";
			}
			
			private function saveBundleToFile(event:MouseEvent):void
			{
				var savePublicKeyTask:FileTask =
					new FileTask(SharedMain.Bundle);
				savePublicKeyTask.startOperation(event);
			}
			
			private function loadBundleFromFile(event:MouseEvent):void
			{
				var loadBundleTask:FileTask = new FileTask();
				loadBundleTask.addEventListener(TaskEvent.FINISHED,
												afterLoadBundle);
				loadBundleTask.startOperation(event);
			}
			
			private function afterLoadBundle(event:TaskEvent):void
			{
				if(event.task.Status == Task.STATUS_SUCCESS)
				{
					SharedMain.Bundle = event.task.data;
				}
			}
			
			private function runTest(task:Task):void
			{
				task.forceRunNow = true;
				SharedMain.tasker.add(task);
				if(task is TaskGroup)
				{
					var taskGroupArea:TaskGroupArea = new TaskGroupArea();
					ViewUtil.viewContentInWindow(taskGroupArea);
					taskGroupArea.taskGroup = task as TaskGroup;
				}
				else
				{
					var taskArea:TaskArea = new TaskArea();
					ViewUtil.viewContentInWindow(taskArea);
					taskArea.task = task;
				}
			}
			
		]]>
	</fx:Script>

	<s:Image useHandCursor="true" buttonMode="true"
			 source="{ImageUtil.logoIcon}"
			 toolTip="Visit our website"
			 click="NetUtil.openWebsite('http://www.protogeni.net');" />
	<s:Label text="Work with ProtoGENI-federated resources" />
	<s:HGroup horizontalAlign="center">
		<s:Button label="Open the manual"
				  icon="{ImageUtil.helpIcon}"
				  click="NetUtil.openWebsite(GeniMain.manualUrl);" />
	</s:HGroup>
	
	<mx:TabNavigator width="100%"
					 height="100%"
					 paddingTop="2">
		<s:NavigatorContent label="System"
							width="100%"
							height="100%">
			<s:Scroller width="100%"
						height="100%">
				<s:HGroup width="100%"
						  height="100%"
						  horizontalAlign="center"
						  verticalAlign="middle">
					<s:VGroup horizontalAlign="right"
							  paddingBottom="2"
							  paddingLeft="2"
							  paddingRight="2"
							  paddingTop="2">
						<s:Label text="Flash Version" fontWeight="bold" />
						<s:Label text="Debug Support" fontWeight="bold" />
						<s:Label text="Memory" fontWeight="bold" />
						<s:Label text="System" fontWeight="bold" />
						<s:Label text="Screen" fontWeight="bold" />
					</s:VGroup>
					<s:VGroup horizontalAlign="left"
							  paddingBottom="2"
							  paddingLeft="2"
							  paddingRight="2"
							  paddingTop="2">
						<s:Label text="{Capabilities.version}" />
						<s:Label text="{Capabilities.isDebugger}" />
						<s:Label text="{memoryString}" />
						<s:Label text="{Capabilities.os} on {Capabilities.cpuArchitecture}" />
						<s:Label text="{Capabilities.screenResolutionX}x{Capabilities.screenResolutionY} @ {Capabilities.screenDPI} DPI with touchscreen type {Capabilities.touchscreenType}" />
					</s:VGroup>
				</s:HGroup>
			</s:Scroller>
		</s:NavigatorContent>
		<s:NavigatorContent label="Cache"
							width="100%"
							height="100%">
			<s:Scroller width="100%"
						height="100%">
				<s:VGroup width="100%"
						  height="100%"
						  horizontalAlign="center"
						  verticalAlign="middle"
						  paddingBottom="2"
						  paddingLeft="2"
						  paddingRight="2"
						  paddingTop="2">
					<s:Button label="Delete entire cache"
							  click="SharedCache.clear(); Alert.show('Deleted entire cache', 'Deleted');" />
					<s:Button label="Delete certificate bundle cache"
							  click="SharedCache.clearCertBundle(); Alert.show('Deleted certificate bundle cache', 'Deleted');" />
					<s:Button label="Delete user cache"
							  click="SharedCache.clearUser(); Alert.show('Deleted user cache', 'Deleted');" />
					<s:Button label="Delete manually added authorities"
							  click="GeniCache.clearManualAuthorities(); Alert.show('Deleted manually added authorities', 'Deleted');" />
					<s:Button label="Delete manually added managers"
							  click="GeniCache.clearManualManagers(); Alert.show('Deleted manually added managers', 'Deleted');" />
					<s:Button label="Delete default managers to list"
							  toolTip="Deletes the list of managers to get resources at by default and asks you next time which managers to list"
							  click="GeniCache.clearManagersToWatch(); Alert.show('Deleted list of default managers to get resources at', 'Deleted');" />
				</s:VGroup>
			</s:Scroller>
		</s:NavigatorContent>
		<s:NavigatorContent label="Acknowledgements"
							width="100%"
							height="100%">
			<s:Scroller width="100%"
						height="100%">
				<s:VGroup width="100%"
						  horizontalAlign="center"
						  verticalAlign="middle"
						  gap="0"
						  paddingBottom="2"
						  paddingLeft="2"
						  paddingRight="2"
						  paddingTop="2">
					<mx:LinkButton label="Forge JavaScript TLS"
								   toolTip="Copyright (c) 2009-2010 Digital Bazaar, Inc. All rights reserved."
								   height="24">
						<mx:click>navigateToURL(new URLRequest("https://github.com/digitalbazaar/forge"), "_blank");</mx:click>
					</mx:LinkButton>
					<mx:LinkButton label="Icons by Fatcow"
								   toolTip="Creative Commons Attribution 3.0 License"
								   height="24">
						<mx:click>navigateToURL(new URLRequest("http://www.fatcow.com/free-icons/index.bml"), "_blank");</mx:click>
					</mx:LinkButton>
					<mx:LinkButton label="XML-RPC (Matt Shaw &amp; Daniel Mclaren)"
								   toolTip="GNU Library or Lesser General Public License (LGPL)"
								   height="24">
						<mx:click>navigateToURL(new URLRequest("http://sf.net/projects/xmlrpcflash"), "_blank");</mx:click>
					</mx:LinkButton>
					<mx:LinkButton label="as3crypto (Henri Torgemane)"
								   toolTip="BSD License. Copyright (c) 2007 Henri Torgemane"
								   height="24">
						<mx:click>navigateToURL(new URLRequest("http://code.google.com/p/as3crypto/"), "_blank");</mx:click>
					</mx:LinkButton>
					<mx:LinkButton label="Location clusterer (Kelvin Luck)"
								   height="24">
						<mx:click>navigateToURL(new URLRequest("http://www.kelvinluck.com/2009/08/google-maps-for-flash-marker-clustering/"), "_blank");</mx:click>
					</mx:LinkButton>
					<mx:LinkButton label="Spinner (Jeremy Mitchell)"
								   height="24">
						<mx:click>navigateToURL(new URLRequest("http://blog.flexdevelopers.com/2011/03/using-flex-4-skins-states-to-disable.html"), "_blank");</mx:click>
					</mx:LinkButton>
					<mx:LinkButton label="Resizable window (Kevin Lin)"
								   height="24">
						<mx:click>navigateToURL(new URLRequest("http://flexponential.com/2010/01/10/resizable-titlewindow-in-flex-4/"), "_blank");</mx:click>
					</mx:LinkButton>
					<mx:LinkButton label="Adobe Systems Incorporated"
								   toolTip="DateUtil and skin bases copyright 2008 Adobe Systems Incorporated."
								   height="24">
						<mx:click>navigateToURL(new URLRequest("http://www.adobe.com/"), "_blank");</mx:click>
					</mx:LinkButton>
				</s:VGroup>
			</s:Scroller>
		</s:NavigatorContent>
		<s:NavigatorContent label="Trust Bundle"
							width="100%"
							height="100%">
			<s:VGroup width="100%"
					  height="100%"
					  gap="2">
				<s:HGroup paddingLeft="2"
						  gap="2">
					<s:Button icon="{ImageUtil.saveIcon}"
							  label="Save to file"
							  click="saveBundleToFile(event);" />
					<s:Button icon="{ImageUtil.copyIcon}"
							  label="Copy to clipboard"
							  click="System.setClipboard(SharedMain.Bundle)" />
					<s:Button icon="{ImageUtil.openIcon}"
							  label="Open trust bundle"
							  click="loadBundleFromFile(event)" />
					<s:Button icon="{ImageUtil.refreshIcon}"
							  label="Re-download trust bundle"
							  click="SharedMain.tasker.add(new GetCertBundlesTaskGroup())" />
				</s:HGroup>
				<s:TextArea width="100%"
							height="100%"
							text="{SharedMain.Bundle}"
							editable="false" />
			</s:VGroup>
			
		</s:NavigatorContent>
		<s:NavigatorContent label="Tests"
							width="100%"
							height="100%">
			<s:VGroup width="100%"
					  height="100%"
					  horizontalAlign="center"
					  verticalAlign="middle" clipAndEnableScrolling="true"
					  gap="2">
				<s:Button label="Throw error"
						  click="throw new Error('This was a test.')" />
				<s:Button label="Test Slice Success Modes"
						  click="runTest(new TestSliceSuccessModesTaskGroup())" />
				<s:Button label="Test Slice Failure Modes"
						  click="runTest(new TestSliceFailureModesTaskGroup())" />
				<s:Button label="Test Slice History"
						  click="runTest(new TestSliceHistoryTaskGroup())" />
				<s:Button label="Test CCR Tutorial"
						  click="runTest(new TestCcrTaskGroup())" />
				<s:Button label="Test Combine"
						  click="runTest(new TestCombineMultipleTaskGroup())" />
				<s:HGroup width="100%">
					<s:TextInput id="httpInput" width="100%" />
					<s:Button click="runTest(new JsHttpTask(httpInput.text))" />
				</s:HGroup>
				
			</s:VGroup>
			
		</s:NavigatorContent>
	</mx:TabNavigator>
	
</areas1:AreaContent>
