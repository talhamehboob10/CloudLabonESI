<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) 2008-2013 University of Utah and the Flux Group.

{{{GENIPUBLIC-LICENSE

GENI Public License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and/or hardware specification (the "Work") to
deal in the Work without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Work, and to permit persons to whom the Work
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Work.

THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
IN THE WORK.

}}}

-->

<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  width="100%"
		  height="100%" gap="2"
		  creationComplete="init()"
		  dragEnter="scroller1_dragEnterHandler(event)"
		  dragDrop="scroller1_dragDropHandler(event)" xmlns:components="com.flack.shared.display.components.*">
	<fx:Script>
		<![CDATA[
			import com.flack.geni.GeniMain;
			import com.flack.geni.display.DisplayUtil;
			import com.flack.geni.display.PhysicalNodeList;
			import com.flack.geni.display.areas.SliceArea;
			import com.flack.geni.display.mapping.GeniMapNodeMarker;
			import com.flack.geni.display.mapping.mapproviders.googlemapsprovider.GoogleMapLocationMarker;
			import com.flack.geni.resources.SliverTypeCollection;
			import com.flack.geni.resources.physical.PhysicalNodeCollection;
			import com.flack.geni.resources.sites.GeniManager;
			import com.flack.geni.resources.sites.GeniManagerCollection;
			import com.flack.geni.resources.sites.managers.SupportedSliverType;
			import com.flack.geni.resources.sites.managers.SupportedSliverTypeCollection;
			import com.flack.geni.resources.virt.LinkType;
			import com.flack.geni.resources.virt.VirtualLink;
			import com.flack.shared.FlackEvent;
			import com.flack.shared.SharedMain;
			import com.flack.shared.display.components.DataButton;
			import com.flack.shared.utils.ImageUtil;
			
			import mx.collections.ArrayList;
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			
			import spark.components.Button;
			import spark.components.DropDownList;
			import spark.components.HGroup;
			import spark.events.IndexChangeEvent;
			
			public var host:SliceArea;
			
			public function init():void
			{
				var addLanButton:DataButton = new DataButton(
					"LAN",
					"Add a LAN",
					ImageUtil.lanIcon,
					null,
					"virtualLan");
				var virtualLan:VirtualLink = new VirtualLink(null);
				virtualLan.clientId = "Lan";
				virtualLan.type.name = LinkType.LAN_V2;
				addLanButton.data = virtualLan;
				addLanButton.addEventListener(MouseEvent.CLICK, addVirtualLan);
				topGroup.addElementAt(addLanButton, 0);
				
				setView();
				SharedMain.sharedDispatcher.addEventListener(FlackEvent.CHANGED_MANAGERS, tryUpdateManagers);
				SharedMain.sharedDispatcher.addEventListener(FlackEvent.CHANGED_MANAGER, tryUpdateManagers);
			}
			
			public function destroy():void
			{
				SharedMain.sharedDispatcher.removeEventListener(FlackEvent.CHANGED_MANAGERS, tryUpdateManagers);
				SharedMain.sharedDispatcher.removeEventListener(FlackEvent.CHANGED_MANAGER, tryUpdateManagers);
			}
			
			public function tryUpdateManagers(e:FlackEvent):void
			{
				if(currentView == VIEW_MANAGERS)
				{
					setView(VIEW_MANAGERS);
				}
			}
			
			public function addVirtualLan(e:MouseEvent):void
			{
				host.ComponentsArea.addCloneOf(e.currentTarget.data);
			}
			
			// Side pane stuff
			public static const VIEW_MANAGERS:int = 0;
			public static const VIEW_MANAGER:int = 1;
			public static const VIEW_COLLECTION:int = 2;
			
			public var currentView:int = VIEW_MANAGERS;
			public function setView(type:int = VIEW_MANAGERS, data:* = null):void
			{
				switch(type)
				{
					case VIEW_MANAGERS:
						if(currentView != VIEW_MANAGERS)
							virtualGroup.removeAllElements();
						
						if(virtualGroup.numElements == 0)
						{
							var allTypes:SupportedSliverTypeCollection = GeniMain.geniUniverse.managers.SupportedSliverTypes;
							var allTypesList:ArrayList = new ArrayList();
							allTypesList.addItem("All types");
							for each(var s:SupportedSliverType in allTypes.collection)
								allTypesList.addItem(s.type.name);
							var sliverTypeList:DropDownList = new DropDownList();
							sliverTypeList.percentWidth = 100;
							sliverTypeList.dataProvider = allTypesList;
							sliverTypeList.selectedIndex = 0;
							sliverTypeList.addEventListener(IndexChangeEvent.CHANGE, sliverTypeDropdownlist_changeHandler);
							virtualGroup.addElement(sliverTypeList);
						}
						
						var viewManagers:GeniManagerCollection = GeniMain.geniUniverse.managers.Valid;
						
						// Keep manager info for managers already shown, remove any which are now non-existant
						var i:int;
						var managerItem:ManagerVirtualArea;
						for(i = 1; i < virtualGroup.numElements; i++)
						{
							managerItem = virtualGroup.getElementAt(i) as ManagerVirtualArea;
							if(!viewManagers.contains(managerItem.manager))
							{
								virtualGroup.removeElementAt(i);
								i--;
							}
							else
								viewManagers.remove(managerItem.manager);
						}
						
						// Add managers not already existing
						for each(var manager:GeniManager in viewManagers.collection)
						{
							var managerHrn:String = manager.hrn.toLowerCase();
							for(i = 1; i < virtualGroup.numElements; i++)
							{
								managerItem = virtualGroup.getElementAt(i) as ManagerVirtualArea;
								if(managerHrn < managerItem.manager.hrn.toLowerCase())
									break;
							}
							managerItem = new ManagerVirtualArea();
							managerItem.manager = manager;
							managerItem.host = this;
							virtualGroup.addElementAt(managerItem, i);
						}
						break;
					case VIEW_MANAGER:
						virtualGroup.removeAllElements();
						
						var selectedManager:GeniManager = data as GeniManager;
						
						var managerHgroup:HGroup = new HGroup();
						managerHgroup.percentWidth = 100;
						var managerToManagers:DataButton = backToManagerButton();
						managerHgroup.addElement(managerToManagers);
						var selectedManagerButton:Button = DisplayUtil.getGeniManagerButton(selectedManager);
						selectedManagerButton.percentWidth = 100;
						managerHgroup.addElement(selectedManagerButton);
						virtualGroup.addElement(managerHgroup);
						
						addNodeList(selectedManager.nodes);
						break;
					case VIEW_COLLECTION:
						virtualGroup.removeAllElements();
						
						var collectionHgroup:HGroup = new HGroup();
						collectionHgroup.percentWidth = 100;
						var collectionToManagers:DataButton = backToManagerButton();
						collectionHgroup.addElement(collectionToManagers);
						virtualGroup.addElement(collectionHgroup);
						
						addNodeList(data);
						break;
				}
				currentView = type;
			}
			
			public function backToManagerButton():DataButton
			{
				var backToManagersButton:DataButton = new DataButton("All", "View the list of all of the managers", ImageUtil.leftIcon);
				backToManagersButton.addEventListener(MouseEvent.CLICK, backToManagers);
				return backToManagersButton;
			}
			
			public function addNodeList(nodes:PhysicalNodeCollection):void
			{
				var nodeList:PhysicalNodeList = new PhysicalNodeList();
				nodeList.availableOnlyCheckBox.selected = true;
				nodeList.slicableCheckBox.selected = true;
				nodeList.load(nodes);
				nodeList.percentWidth = 100;
				nodeList.percentHeight = 100;
				virtualGroup.addElement(nodeList);
			}
			
			public function backToManagers(e:MouseEvent):void
			{
				setView();
			}
			
			protected function scroller1_dragEnterHandler(event:DragEvent):void
			{
				if (event.dragSource.hasFormat("manager") ||
					event.dragSource.hasFormat("physicalMarker") ||
					event.dragSource.hasFormat("physicalNodeCollection"))
				{
					DragManager.acceptDragDrop(event.target as UIComponent);
				}
			}
			
			protected function scroller1_dragDropHandler(event:DragEvent):void
			{
				if(event.dragSource.hasFormat("physicalMarker"))
				{
					var dragMarker:GeniMapNodeMarker = event.dragSource.dataForFormat('physicalMarker') as GeniMapNodeMarker;
					setView(VIEW_COLLECTION, dragMarker.Nodes);
				}
				else if(event.dragSource.hasFormat("manager"))
				{
					setView(VIEW_MANAGER, event.dragSource.dataForFormat('manager'));
				}
				else if(event.dragSource.hasFormat("physicalNodeCollection"))
				{
					var dragGroup:PhysicalNodeCollection = event.dragSource.dataForFormat('physicalNodeCollection') as PhysicalNodeCollection;
					setView(VIEW_COLLECTION, dragGroup);
				}
			}
			
			protected function sliverTypeDropdownlist_changeHandler(event:IndexChangeEvent):void
			{
				var sliverTypeList:DropDownList = event.target as DropDownList;
				var i:int = 0;
				if(event.newIndex == 0)
				{
					for(i = 1; i < virtualGroup.numElements; i++)
						(virtualGroup.getElementAt(i) as ManagerVirtualArea).reset();
				}
				else
				{
					var selectedSliverType:String = sliverTypeList.selectedItem;
					for(i = 1; i < virtualGroup.numElements; i++)
						(virtualGroup.getElementAt(i) as ManagerVirtualArea).setTo(selectedSliverType);
				}
			}
			
		]]>
	</fx:Script>
	<s:VGroup id="topGroup" horizontalAlign="right" width="100%" paddingRight="2" paddingLeft="2" />
	<components:DefaultLine percentWidth="100" />
	<s:Scroller width="100%" height="100%">
		<s:VGroup height="100%" width="100%" id="virtualGroup" paddingRight="2" paddingLeft="2" gap="2" />
	</s:Scroller>
</s:VGroup>
