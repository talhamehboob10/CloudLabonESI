<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) 2008-2013 University of Utah and the Flux Group.

{{{GENIPUBLIC-LICENSE

GENI Public License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and/or hardware specification (the "Work") to
deal in the Work without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Work, and to permit persons to whom the Work
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Work.

THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
IN THE WORK.

}}}

-->

<areas1:AreaContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="com.flack.shared.display.components.*"
		  xmlns:display="com.flack.geni.display.*"
		  xmlns:areas="com.flack.geni.display.areas.*"
		  xmlns:areas1="com.flack.shared.display.areas.*"
		  creationComplete="init()"
		  paddingBottom="2"
		  gap="0">
	<fx:Script>
		<![CDATA[
			import com.flack.geni.GeniMain;
			import com.flack.geni.display.DisplayUtil;
			import com.flack.geni.resources.GeniCollaborator;
			import com.flack.geni.resources.physical.PhysicalNode;
			import com.flack.geni.resources.sites.GeniAuthority;
			import com.flack.geni.resources.virt.Slice;
			import com.flack.geni.tasks.groups.GetUserTaskGroup;
			import com.flack.geni.tasks.xmlrpc.protogeni.sa.GetUserKeysSaTask;
			import com.flack.shared.FlackEvent;
			import com.flack.shared.SharedCache;
			import com.flack.shared.SharedMain;
			import com.flack.shared.display.areas.LogMessagesRelatedToArea;
			import com.flack.shared.display.components.ImageButton;
			import com.flack.shared.resources.IdnUrn;
			import com.flack.shared.tasks.Task;
			import com.flack.shared.tasks.TaskEvent;
			import com.flack.shared.tasks.file.FileTask;
			import com.flack.shared.utils.ImageUtil;
			import com.flack.shared.utils.MathUtil;
			import com.flack.shared.utils.NetUtil;
			
			import mx.collections.VectorCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import spark.components.Button;
			import spark.components.TextArea;
			import spark.primitives.Rect;
			
			[Bindable]
			public var node:PhysicalNode = null;
			
			[Bindable]
			private var nodeTypes:VectorCollection = null;
			
			[Bindable]
			private var authorities:VectorCollection = null;
			
			override public function get PendingChanges():Boolean
			{
				return okButton.enabled;
			}
			
			public function init():void
			{
				updateInfo();
			}
			
			override public function initEvents():void
			{
				SharedMain.sharedDispatcher.addEventListener(FlackEvent.CHANGED_USER, updateInfo);
				SharedMain.sharedDispatcher.addEventListener(FlackEvent.CHANGED_SLICE, updateInfo);
				SharedMain.sharedDispatcher.addEventListener(FlackEvent.CHANGED_SLICES, updateInfo);
				SharedMain.tasker.addEventListener(TaskEvent.CHILD_FINISHED, updateUserTasking);
				SharedMain.tasker.addEventListener(TaskEvent.CHILD_STARTED, updateUserTasking);
			}
			
			override public function removeEvents():void
			{
				SharedMain.sharedDispatcher.removeEventListener(FlackEvent.CHANGED_USER, updateInfo);
				SharedMain.sharedDispatcher.removeEventListener(FlackEvent.CHANGED_SLICE, updateInfo);
				SharedMain.sharedDispatcher.removeEventListener(FlackEvent.CHANGED_SLICES, updateInfo);
				SharedMain.tasker.removeEventListener(TaskEvent.CHILD_FINISHED, updateUserTasking);
				SharedMain.tasker.removeEventListener(TaskEvent.CHILD_STARTED, updateUserTasking);
			}
			
			public function updateUserTasking(e:TaskEvent = null):void
			{
				var working:Boolean = SharedMain.tasker.tasks.AllNotFinished.getRelatedTo(GeniMain.geniUniverse.user).length > 0
				if(!working && spinner.visible)
				{
					spinner.visible = false;
					spinner.stopSpin();
				}
				else if(working && !spinner.visible)
				{
					spinner.visible = true;
					spinner.startSpin();
				}
			}
			
			public function updateInfo(junk:FlackEvent = null):void
			{
				title = GeniMain.geniUniverse.user.id.name;
				if(title.length == 0)
					title = "User";
				
				updateAuthorities();
				updateKeys();
				updateUserTasking();
			}
			
			public function updateAuthorities():void
			{
				if(GeniMain.geniUniverse.user.authority != null)
				{
					authorities = new VectorCollection(GeniMain.geniUniverse.user.subAuthorities.collection);
					authorities.addItemAt(GeniMain.geniUniverse.user.authority, 0);
				}
			}
			
			public function updateKeys():void
			{
				if(keysVgroup != null)
				{
					keysVgroup.removeAllElements();
					for each(var k:String in GeniMain.geniUniverse.user.keys)
						addKeyTo(keysVgroup, k);
					collaboratorsVgroup.removeAllElements();
					for each(var collaborator:GeniCollaborator in GeniMain.geniUniverse.user.collaborators)
						addCollaborator(collaborator);
				}
			}
			
			// Save
			
			public function cancelAndClose():void
			{
				init();
				close();
			}
			
			public function saveAndClose():void
			{
				if(save())
					return;
				close();
			}
			
			public function save():Boolean
			{
				// Make sure the user has at least one key.
				if(CombinedKeys.length == 0)
				{
					Alert.show(
						"You must add a SSH key, otherwise you cannot access provisioned resources.",
						"User key missing.");
					return true;
				}
				
				// Make sure there aren't any duplicate collaborators.
				// Make suer there aren't any collaborators without valid urn.
				var testCollaboratorNames:Dictionary = new Dictionary();
				for(var checkCollaboratorIdx:int = 0; checkCollaboratorIdx < this.collaboratorsVgroup.numElements; checkCollaboratorIdx++)
				{
					var testCollaboratorGroup:Group = this.collaboratorsVgroup.getElementAt(collaboratorIdx) as Group;
					var testCollaboratorId:String = ((testCollaboratorGroup.getElementAt(checkCollaboratorIdx) as HGroup).getElementAt(0) as TextArea).text
					if (testCollaboratorNames[testCollaboratorId] != null) {
						Alert.show(
							"There is a duplicate collaborator, please consolodate into one or give a new id.",
							"Duplicate collaborator found");
						return true;
					}
					testCollaboratorNames[testCollaboratorId] = true;
					var testKeyExists:Boolean = false;
					for(var testCollaboratorKeyIdx:int = 1; testCollaboratorKeyIdx < testCollaboratorGroup.numElements; testCollaboratorKeyIdx++)
					{
						var testCollaboratorKey:String = ((testCollaboratorGroup.getElementAt(testCollaboratorKeyIdx) as HGroup).getElementAt(0) as TextArea).text;
						if(testCollaboratorKey.length == 0) continue;
						testKeyExists = true;
						break;
					}
					if (!testKeyExists) {
						Alert.show(
							"Collaborators must have a key set, please add a key for " + testCollaboratorId + ".",
							"Collaborator missing key");
						return true;
					}
				}
				
				// Save keys and collaborators
				if(this.keysVgroup != null)
				{
					GeniMain.geniUniverse.user.keys = new Vector.<String>();
					for(var userKeyIdx:int = 0; userKeyIdx < this.keysVgroup.numElements; userKeyIdx++)
					{
						var newUserKey:String = ((this.keysVgroup.getElementAt(userKeyIdx) as HGroup).getElementAt(0) as TextArea).text;
						if(newUserKey.length == 0) continue;
						if(GeniMain.geniUniverse.user.keys.indexOf(newUserKey) == -1)
							GeniMain.geniUniverse.user.keys.push(newUserKey);
					}
					GeniMain.geniUniverse.user.collaborators = new Vector.<GeniCollaborator>();
					for(var collaboratorIdx:int = 0; collaboratorIdx < this.collaboratorsVgroup.numElements; collaboratorIdx++)
					{
						var collaboratorGroup:Group = collaboratorsVgroup.getElementAt(collaboratorIdx) as Group;
						var newCollaborator:GeniCollaborator = new GeniCollaborator(((collaboratorGroup.getElementAt(0) as HGroup).getElementAt(0) as TextArea).text);
						for(var collaboratorKeyIdx:int = 1; collaboratorKeyIdx < collaboratorGroup.numElements; collaboratorKeyIdx++)
						{
							var newCollaboratorKey:String = ((collaboratorGroup.getElementAt(collaboratorKeyIdx) as HGroup).getElementAt(0) as TextArea).text;
							if(newCollaboratorKey.length == 0) continue;
							if(newCollaborator.keys.indexOf(newCollaboratorKey) == -1)
								newCollaborator.keys.push(newCollaboratorKey);
						}
						if(newCollaborator.keys.length > 0)
						{
							GeniMain.geniUniverse.user.collaborators.push(newCollaborator);
						}
					}
				}
				
				okButton.enabled = false;
				return false;
			}
			
			// Keys
			
			private function get CombinedKeys():String
			{
				var keyFile:String = "";
				for(var i:int = 0; i < keysVgroup.numElements; i++)
				{
					var keyHgroup:HGroup = keysVgroup.getElementAt(i) as HGroup;
					var key:String = (keyHgroup.getElementAt(0) as TextArea).text;
					if(key.length > 0)
						keyFile += key + "\n";
				}
				return keyFile;
			}
			
			private function addCollaborator(geniCollaborator:GeniCollaborator = null):void
			{
				var newCollaboratorVgroup:VGroup = new VGroup();
				newCollaboratorVgroup.percentWidth = 100;
				newCollaboratorVgroup.gap = 2;
				var newCollaboratorHeaderHgroup:HGroup = new HGroup();
				newCollaboratorHeaderHgroup.percentWidth = 100;
				var newCollaboratorUrnTextarea:TextArea = new TextArea();
				newCollaboratorUrnTextarea.percentWidth = 100;
				newCollaboratorUrnTextarea.setStyle("verticalScrollPolicy", "off");
				newCollaboratorUrnTextarea.prompt = "User urn";
				newCollaboratorUrnTextarea.addEventListener(
					FlexEvent.UPDATE_COMPLETE,
					function beforeShow(event:FlexEvent):void
					{
						newCollaboratorUrnTextarea.height = newCollaboratorUrnTextarea.scroller.viewport.contentHeight + 2
					}
				); // TODO add remove handler
				if(geniCollaborator != null) {
					newCollaboratorUrnTextarea.text = geniCollaborator.id.full;
				} else {
					newCollaboratorUrnTextarea.text = IdnUrn.makeFrom(GeniMain.geniUniverse.user.id.authority, "user", "user" + MathUtil.randomNumberBetween(0, 99999)).full;
				}
				newCollaboratorHeaderHgroup.addElement(newCollaboratorUrnTextarea);
				var newDeleteButton:ImageButton = new ImageButton();
				newDeleteButton.setStyle("icon", ImageUtil.deleteIcon);
				newDeleteButton.addEventListener(
					MouseEvent.CLICK,
					function removeMe(event:MouseEvent):void {
						event.currentTarget.parent.parent.parent.removeElement(event.currentTarget.parent.parent as DisplayObject);
						okButton.enabled = true;
					}
				); // TODO add remove handler
				newCollaboratorHeaderHgroup.addElement(newDeleteButton);
				var newOpenKeyButton:ImageButton = new ImageButton();
				newOpenKeyButton.setStyle("icon", ImageUtil.openIcon);
				newOpenKeyButton.toolTip = "Open a public SSH key from file";
				newOpenKeyButton.addEventListener(
					MouseEvent.CLICK,
					function addNewKey(event:MouseEvent):void {
						addKeyFromFileTo(event, event.currentTarget.parent.parent)
					}
				); // TODO add remove handler
				newCollaboratorHeaderHgroup.addElement(newOpenKeyButton);
				var newAddKeyButton:ImageButton = new ImageButton();
				newAddKeyButton.setStyle("icon", ImageUtil.addIcon);
				newAddKeyButton.toolTip = "Add a public SSH key";
				newAddKeyButton.addEventListener(
					MouseEvent.CLICK,
					function addNewKey(event:MouseEvent):void {
						addKeyTo(event.currentTarget.parent.parent);
						okButton.enabled = true;
					}
				); // TODO add remove handler
				newCollaboratorHeaderHgroup.addElement(newAddKeyButton);
				newCollaboratorVgroup.addElement(newCollaboratorHeaderHgroup);
				if(geniCollaborator != null) {
					for each(var geniCollaboratorKey:String in geniCollaborator.keys) {
						addKeyTo(newCollaboratorVgroup, geniCollaboratorKey);
					}
				}
				collaboratorsVgroup.addElement(newCollaboratorVgroup);
			}
			
			public function addKeyFromFileTo(event:MouseEvent, group:Group):void
			{
				groupToAddTo = group;
				var openPublicKeyTask:FileTask = new FileTask();
				openPublicKeyTask.addEventListener(TaskEvent.FINISHED, afterOpenKey);
				openPublicKeyTask.startOperation(event);
			}
			
			private var groupToAddTo:Group = null;
			private function afterOpenKey(event:TaskEvent):void
			{
				if(event.task.Status == Task.STATUS_SUCCESS)
				{
					addKeyTo(groupToAddTo, event.task.data as String);
					okButton.enabled = true;
				}
			}
			
			private function addKeyTo(group:Group, key:String = ""):void
			{
				var newKeyHgroup:HGroup = new HGroup();
				newKeyHgroup.percentWidth = 100;
				var newKeyTextarea:TextArea = new TextArea();
				newKeyTextarea.percentWidth = 100;
				newKeyTextarea.setStyle("verticalScrollPolicy", "off");
				newKeyTextarea.text = key;
				newKeyTextarea.prompt = "Please enter a public SSH key";
				newKeyTextarea.addEventListener(
					FlexEvent.UPDATE_COMPLETE,
					function beforeShow(event:FlexEvent):void
					{
						newKeyTextarea.height = newKeyTextarea.scroller.viewport.contentHeight + 2;
					}
				); // TODO add remove handler
				var newDeleteButton:ImageButton = new ImageButton();
				newDeleteButton.setStyle("icon", ImageUtil.deleteIcon);
				newDeleteButton.addEventListener(
					MouseEvent.CLICK,
					function removeMe(event:MouseEvent):void {
						event.currentTarget.parent.parent.removeElement(event.currentTarget.parent as DisplayObject);
						okButton.enabled = true;
					}
				); // TODO add remove handler
				newKeyHgroup.addElement(newKeyTextarea);
				newKeyHgroup.addElement(newDeleteButton);
				group.addElement(newKeyHgroup);
			}
			
			private function saveKeysToFile(event:MouseEvent):void
			{
				var savePublicKeyTask:FileTask = new FileTask(CombinedKeys);
				savePublicKeyTask.startOperation(event);
			}
			
			private function reloadKeys():void
			{
				if(SharedMain.tasker.tasks.AllNotFinished.getOfClass(GetUserKeysSaTask).length > 0)
				{
					Alert.show("Task to load keys is already running or pending");
					return;
				}
				
				var getKeysTask:GetUserKeysSaTask = new GetUserKeysSaTask(GeniMain.geniUniverse.user);
				getKeysTask.forceRunNow = true;
				SharedMain.tasker.add(getKeysTask);
			}
			
			public function viewLogs():void
			{
				var logArea:LogMessagesRelatedToArea = new LogMessagesRelatedToArea();
				logArea.RelatedTo = [GeniMain.geniUniverse.user];
				logArea.title = "Logs for " + GeniMain.geniUniverse.user.id.name;
				logArea.backgroundColor = backgroundColor;
				logArea.titleColor = titleColor;
				openNext(logArea);
			}
			
			protected function authoritiesList_valueCommitHandler(event:FlexEvent):void
			{
				if(authoritiesList.selectedItem != null)
					credentialTextarea.text = (authoritiesList.selectedItem as GeniAuthority).userCredential.Raw;
			}
			
		]]>
	</fx:Script>
	
	<s:Group width="100%">
		<s:Rect width="100%" height="100%">
			<s:fill><s:SolidColor color="{backgroundColor}" /></s:fill>
		</s:Rect>
		
		<s:HGroup width="100%"
				  verticalAlign="middle"
				  paddingLeft="2"
				  paddingRight="2"
				  paddingTop="2"
				  paddingBottom="2"
				  gap="2">
			<s:Label text="{title}"
					 color="{titleColor}"
					 id="nameLabel"
					 toolTip="{node.id.full}"
					 fontSize="17"
					 fontWeight="bold"
					 width="100%" />
			<components:Spinner id="spinner"
								width="21"
								height="21"
								x="{(width / 2) - (spinner.width / 2)}"
								y="{(height / 2) - (spinner.height / 2)}"
								visible="false" includeInLayout="{spinner.visible}" />
			<s:Button id="deleteCacheButton"
					  icon="{ImageUtil.deleteIcon}"
					  label="Remove"
					  toolTip="Remove all user data from cache"
					  click="SharedCache.clearUser(); Alert.show('User removed from cache', 'Deleted')" />
			<s:Button icon="{ImageUtil.refreshIcon}"
					  label="Reload all"
					  click="SharedMain.tasker.add(new GetUserTaskGroup(GeniMain.geniUniverse.user))" />
			<s:Button id="consoleButton"
					  icon="{ImageUtil.consoleIcon}"
					  label="Logs"
					  toolTip="View log messages in the console"
					  click="viewLogs()" />
			<components:ImageButton id="dockIcon"
									icon="{ImageUtil.windowIcon}"
									toolTip="Pop out to a window or in to the main window"
									click="host.Docked ? popOut() : dock()" />
			<components:ImageButton id="closeIcon"
									icon="{ImageUtil.crossIcon}"
									toolTip="Close"
									click="close()" />
		</s:HGroup>
		
	</s:Group>
	
	<s:ButtonBar dataProvider="{userViewstack}"
				 requireSelection="true"
				 skinClass="com.flack.shared.display.skins.ButtonBarSkin"
				 width="100%" />
	<mx:ViewStack id="userViewstack"
				  width="100%"
				  height="100%"
				  paddingTop="4">
		<s:NavigatorContent id="authoritiesView"
							width="100%"
							height="100%"
							label="Authorities"
							toolTip="Authorities"
							icon="{ImageUtil.userIcon}">
			<s:HGroup width="100%"
					  height="100%"
					  gap="2"
					  paddingLeft="2"
					  paddingRight="2">
				<s:List id="authoritiesList"
						dataProvider="{authorities}"
						labelField="name"
						height="100%"
						width="180"
						requireSelection="true"
						valueCommit="authoritiesList_valueCommitHandler(event)" />
				<s:VGroup width="100%"
						  height="100%">
					<s:Button label="Visit website"
							  icon="{ImageUtil.authorityIcon}"
							  click="NetUtil.openWebsite(NetUtil.tryGetBaseUrl((authoritiesList.selectedItem as GeniAuthority).url));" />
					<s:Label fontWeight="bold" text="User Credential" />
					<components:AdvancedTextArea id="credentialTextarea"
												 paddingLeft="2"
												 paddingBottom="2"
												 paddingRight="2"
												 width="100%"
												 height="100%" />
				</s:VGroup>
			</s:HGroup>
		</s:NavigatorContent>
		<s:NavigatorContent id="sslCertView"
							width="100%"
							height="100%"
							label="SSL Cert"
							toolTip="Certificate and private key used for secure communication"
							icon="{ImageUtil.sslIcon}">
			<components:AdvancedTextArea text="{GeniMain.geniUniverse.user.sslCert}"
										 paddingLeft="2"
										 paddingBottom="2"
										 paddingRight="2" />
		</s:NavigatorContent>
		<s:NavigatorContent id="keysView"
							width="100%"
							height="100%"
							label="SSH Keys"
							toolTip="Set of public keys added to resources for secure login"
							icon="{ImageUtil.keyIcon}">
			<s:HGroup height="100%"
					  width="100%"
					  gap="2"
					  paddingLeft="2"
					  creationComplete="updateKeys()">
				<s:VGroup width="50%" height="100%">
					<s:Label text="Private Key" fontSize="17" fontWeight="bold" />
					<s:Label text="If generated by the most current version of Emulab, load on your computer into a SSH agent to log into nodes"
							 width="100%"
							 maxDisplayedLines="2" />
					<components:AdvancedTextArea text="{GeniMain.geniUniverse.user.PrivateKey}" />
				</s:VGroup>
				<s:VGroup width="50%"
						  height="100%">
					<s:VGroup width="100%" height="50%">
						<s:Label text="Public Key(s)" fontSize="17" fontWeight="bold" />
						<s:Label text="Uploaded to allocated nodes to allow login with corresponding private keys." />
						<s:HGroup gap="2">
							<s:Button icon="{ImageUtil.refreshIcon}"
									  enabled="{GeniMain.geniUniverse.user.authority != null}"
									  label="Reload"
									  toolTip="Reloads the keys from the user's authority"
									  click="reloadKeys();" />
							<s:Button icon="{ImageUtil.saveIcon}"
									  label="Save all"
									  toolTip="Save all of the keys to one file"
									  click="saveKeysToFile(event);" />
							<s:Button icon="{ImageUtil.copyIcon}"
									  label="Copy all"
									  toolTip="Copy all of the keys to the clipboard"
									  click="System.setClipboard(CombinedKeys);" />
							<s:Button icon="{ImageUtil.openIcon}"
									  label="Open"
									  toolTip="Add a public key saved to file"
									  click="addKeyFromFileTo(event, keysVgroup);" />
							<s:Button icon="{ImageUtil.addIcon}"
									  label="Add"
									  toolTip="Add a public key"
									  click="addKeyTo(keysVgroup); okButton.enabled = true;" />
							<components:ImageButton icon="{ImageUtil.helpIcon}"
													toolTip="View directions on adding SSH keys"
													click="NetUtil.openWebsite(GeniMain.sshKeysSteps)" />
						</s:HGroup>
						<s:Scroller width="100%" height="100%">
							<s:VGroup width="100%"
									  id="keysVgroup"
									  paddingRight="2"
									  gap="2" />
						</s:Scroller>
					</s:VGroup>
					<s:VGroup width="100%" height="50%">
						<s:Label text="Collaborator(s)" fontSize="17" fontWeight="bold" />
						<s:Label text="Collaborator who will be given access to slice resources." />
						<s:HGroup gap="2">
							<s:Button icon="{ImageUtil.addIcon}"
									  label="Add collaborator"
									  toolTip="Add a new collaborator"
									  click="addCollaborator(); okButton.enabled = true;" /> 
						</s:HGroup>
						<s:Scroller width="100%" height="100%">
							<s:VGroup width="100%"
									  id="collaboratorsVgroup"
									  paddingRight="2"
									  gap="4" />
						</s:Scroller>
					</s:VGroup>
				</s:VGroup>
			</s:HGroup>
		</s:NavigatorContent>
	</mx:ViewStack>
	
	<s:Group width="100%">
		<s:Rect width="100%" height="100%">
			<s:fill><s:SolidColor color="0xCCCCCC" /></s:fill>
		</s:Rect>
		<s:HGroup width="100%"
				  verticalAlign="middle"
				  paddingLeft="2"
				  paddingRight="2"
				  paddingTop="2"
				  paddingBottom="2"
				  gap="2">
			<s:Button id="okButton"
					  label="Apply"
					  enabled="false"
					  icon="{ImageUtil.availableIcon}"
					  click="saveAndClose();" />
			<s:Button id="cancelButton"
					  label="Cancel"
					  icon="{ImageUtil.cancelIcon}"
					  click="cancelAndClose();" />
		</s:HGroup>
	</s:Group>
	
</areas1:AreaContent>
