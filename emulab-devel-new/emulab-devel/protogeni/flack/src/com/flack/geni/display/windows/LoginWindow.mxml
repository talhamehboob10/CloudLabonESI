<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) 2008-2013 University of Utah and the Flux Group.

{{{GENIPUBLIC-LICENSE

GENI Public License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and/or hardware specification (the "Work") to
deal in the Work without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Work, and to permit persons to whom the Work
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Work.

THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
IN THE WORK.

}}}

-->

<windows:DefaultWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
						  xmlns:s="library://ns.adobe.com/flex/spark" 
						  xmlns:mx="library://ns.adobe.com/flex/mx"
						  xmlns:components="com.flack.shared.display.components.*"
						  title="Log in"
						  creationComplete="onCreationComplete();"
						  maxStartHeight="400" maxStartWidth="700" xmlns:windows="com.flack.shared.display.windows.*">
	<windows:layout>
		<s:VerticalLayout paddingTop="4" paddingBottom="4" />
	</windows:layout>
	<fx:Declarations>
		<s:RadioButtonGroup id="credentialGroup" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.flack.geni.GeniMain;
			import com.flack.geni.display.DisplayUtil;
			import com.flack.geni.resources.docs.GeniCredential;
			import com.flack.geni.resources.sites.GeniAuthority;
			import com.flack.geni.resources.sites.authorities.ProtogeniSliceAuthority;
			import com.flack.geni.resources.virt.Slice;
			import com.flack.geni.tasks.http.PublicListAuthoritiesTask;
			import com.flack.shared.FlackEvent;
			import com.flack.shared.SharedCache;
			import com.flack.shared.SharedMain;
			import com.flack.shared.resources.IdnUrn;
			import com.flack.shared.tasks.Task;
			import com.flack.shared.tasks.TaskEvent;
			import com.flack.shared.tasks.file.FileTask;
			import com.flack.shared.utils.DateUtil;
			import com.flack.shared.utils.ImageUtil;
			import com.flack.shared.utils.NetUtil;
			import com.hurlant.util.der.PEM;
			import com.mstrum.Asn1Field;
			import com.mstrum.DER;
			import com.mstrum.Oids;
			
			import mx.collections.ArrayList;
			import mx.collections.VectorList;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			
			public function onCreationComplete():void
			{
				fillAuthorityList();
				
				selectedAuthority = GeniMain.geniUniverse.user.authority;
				authorities.selectedItem = GeniMain.geniUniverse.user.authority;
				sslPem.text = SharedMain.user.sslCert;
				
				SharedMain.sharedDispatcher.addEventListener(FlackEvent.CHANGED_AUTHORITIES, fillAuthorityList);
				
				passwordField.text = SharedMain.user.password;
				rememberPasswordCheckbox.selected = this.passwordField.text.length>0;
			}
			
			private function get ValidPem():Boolean
			{
				return sslPem.text.indexOf("-----BEGIN RSA PRIVATE KEY-----") > -1 &&
					sslPem.text.indexOf("-----BEGIN CERTIFICATE-----") > -1;
			}
			
			// Authorities
			
			[Bindable]
			private var selectedAuthority:GeniAuthority;
			
			[Bindable]
			private var authorityList:VectorList;
			private function fillAuthorityList(junk:* = null):void
			{
				// Create List
				authorityList = new VectorList(GeniMain.geniUniverse.authorities.collection);
					
				// Set to user's
				if(SharedMain.user.id != null)
					setUserAuthority();
				if(GeniMain.geniUniverse.user.authority != null)
				{
					selectedAuthority = GeniMain.geniUniverse.user.authority;
					authorities.selectedItem = GeniMain.geniUniverse.user.authority;
				}
			}
			
			private function setUserAuthority():void
			{
				for each(var sa:ProtogeniSliceAuthority in GeniMain.geniUniverse.authorities.collection)
				{
					if(sa.id.authority == SharedMain.user.id.authority)
					{
						selectedAuthority = sa;
						GeniMain.geniUniverse.user.authority = sa;
						authorities.selectedItem = sa;
						return;
					}
				}
			}
			
			// Certificate
			
			private const certLocation:String = "/protogeni/getsslcert.php3";
			private const loginLocation:String = "/login.php3";
			
			private var certLoader:URLLoader;
			
			private function tryDownloadCertificate():void
			{
				if(selectedAuthority == null)
					Alert.show("Please select your slice authority", "Select authority");
				else
					doDownloadCertificate(NetUtil.tryGetBaseUrl(selectedAuthority.url) + certLocation);
			}
			
			public function doDownloadCertificate(url:String):void
			{
				NetUtil.checkLoadCrossDomain(url);
				
				var request:URLRequest = new URLRequest(url); 
				certLoader = new URLLoader();
				certLoader.addEventListener(Event.COMPLETE, completeHandler);
				certLoader.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
				certLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
				try
				{
					spinner.visible = true;
					spinner.startSpin();
					
					certLoader.load(request);
				}
				catch (e:Error)
				{
					spinner.visible = false;
					spinner.stopSpin();
				}
			}
			private function completeHandler(event:Event):void
			{
				if(certLoader.data != null && (certLoader.data as String).indexOf("-----BEGIN RSA PRIVATE KEY-----") != -1)
					sslPem.text = certLoader.data;
				else
					askToLogin();
				spinner.visible = false;
				spinner.stopSpin();
			}
				
			private function securityErrorHandler(event:Event):void
			{
				askToLogin();
			}
			
			private function ioErrorHandler(event:IOErrorEvent):void
			{
				askToLogin();
			}
			
			private function askToLogin():void
			{
				spinner.visible = false;
				spinner.stopSpin();
				
				Alert.show("You must be logged in on the authority's website in order to automatically retrieve your SSL Cert."+
					" Visit the login page? After login, come back here and try again.",
					"Visit login page?",
					Alert.YES|Alert.NO,
					FlexGlobals.topLevelApplication as Sprite, 
					function handleAction(e:CloseEvent):void {
						if(e.detail == Alert.YES)
							NetUtil.openWebsite(NetUtil.tryGetBaseUrl(selectedAuthority.url) + loginLocation);
					});
			}
			
			private function tryParseCert():void
			{
				// If everything is there, deal with it
				if(ValidPem)
				{
					// Show the password box if a password is needed
					passwordGroup.visible = sslPem.text.indexOf("DEK-Info:") > -1;
					rememberUnencryptedCertCheckbox.visible = !passwordGroup.visible;
					
					// Try to get info from the cert
					try
					{
						var certArray:ByteArray = PEM.readCertIntoArray(this.sslPem.text);
						var cert:Asn1Field = DER.Parse(certArray);
						var subjAlt:Asn1Field = cert.getHolderFor(Oids.SUBJECT_ALT_NAME);
						var urnString:String = subjAlt.getValue();
						if(IdnUrn.isIdnUrn(urnString))
							setUserId(urnString);
						else
							throw new Error();
					}
					catch(e:Error)
					{
						if(passwordGroup.visible)
							this.enterPasswordLabel.text = "Please enter your private key passphrase below.";
						else
							this.enterPasswordLabel.text = "";
					}
					if(passwordGroup.visible)
						passwordField.setFocus();
					else
						okButton.setFocus();
				}
				else
				{
					rememberUnencryptedCertCheckbox.visible = false;
					passwordGroup.visible = false;
					this.okButton.setFocus();
				}
			}
			
			private function setUserId(idString:String):void
			{
				SharedMain.user.id = new IdnUrn(idString);
				detectedUrnLabel.text = "Hello, " + SharedMain.user.id.name + " from " + SharedMain.user.id.authority + ".";
				if(this.passwordGroup.visible)
					this.enterPasswordLabel.text += " Please enter your private key passphrase below.";
				setUserAuthority();
			}
			
			private function trySavePem(event:MouseEvent):void
			{
				var savePemTask:FileTask = new FileTask(sslPem.text);
				if(SharedMain.user.id.full.length > 0)
					savePemTask.fileName = SharedMain.user.id.name + ".pem";
				else
					savePemTask.fileName = "flackUser.pem";
				savePemTask.startOperation(event);
			}
			
			private function tryOpenPem(event:MouseEvent):void
			{
				var openPemTask:FileTask = new FileTask();
				openPemTask.addEventListener(TaskEvent.FINISHED, afterOpenPem);
				openPemTask.startOperation(event);
			}
			
			private function afterOpenPem(event:TaskEvent):void
			{
				if(event.task.Status == Task.STATUS_SUCCESS)
					sslPem.text = event.task.data;
				else if(event.task.Status != Task.STATUS_CANCELED)
					Alert.show("Failed to load PEM", "Error");
			}
			
			// Credential
			
			public var useCredential:GeniCredential;
			
			public function tryOpenCredential(event:MouseEvent):void
			{
				Alert.show("If you are trying to load a key/certificate, cancel and click the open button at the top of the login window. " +
					"Continue to load a user/slice credential for use after authenticating with your key/certificate?",
					"Confirm",
					Alert.YES|Alert.CANCEL,
					this,
					function afterSelected(e:CloseEvent):void
					{
						if(e.detail == Alert.YES)
						{
							openCredential(event);
						}
					});
			}
			
			public function openCredential(event:MouseEvent):void
			{
				var openCredentialTask:FileTask = new FileTask();
				openCredentialTask.addEventListener(TaskEvent.FINISHED, afterOpenCredential);
				openCredentialTask.startOperation(event);
			}
			
			private function afterOpenCredential(event:TaskEvent):void
			{
				if(event.task.Status == Task.STATUS_SUCCESS)
				{
					try
					{
						var credentialString:String = event.task.data;
						useCredential = new GeniCredential(event.task.data);
						if(useCredential.Xml == null)
						{
							dontUseCredential("Not valid XML. Make sure you are selecting a valid credential file, not a key/certificate file.");
							return;
						}
						
						if(useCredential.type == GeniCredential.TYPE_UNKNOWN)
						{
							dontUseCredential(
								"Flack can't determine if the given file is a user or slice credential." +
								" Check to make sure you are loading a valid credential.");
							return;
						}
						
						SharedMain.user.id = useCredential.getIdWithType(IdnUrn.TYPE_USER);
						if(SharedMain.user.id == null)
						{
							dontUseCredential(
								"Flack can't find the user id in the provided file.");
							return;
						}
						
						var expires:Date = useCredential.Expires;
						if(expires == null)
						{
							dontUseCredential(
								"Could not find expire time." +
								" Make sure you are selecting a valid credential file, not a key/certificate file.");
							return;
						}
						else if(expires < new Date())
						{
							dontUseCredential(
								"The credential has expired " + DateUtil.getTimeBetween(expires, new Date()) +
								" ago, please select a credential which hasn't expired.");
							return;
						}
						
						// Credential is ready to be used!
						if(useCredential.type == GeniCredential.TYPE_SLICE)
						{
							useCredentialLabel.text = "Slice credential loaded for " + useCredential.getIdWithType(IdnUrn.TYPE_SLICE).name;
							useCredentialRadiobutton.selected = true;
						}
						else if(useCredential.type == GeniCredential.TYPE_USER)
						{
							useCredentialLabel.text = "User credential loaded for " + useCredential.getIdWithType(IdnUrn.TYPE_USER).name;
							useCredentialRadiobutton.selected = true;
						}
						else
						{
							dontUseCredential("Credential does not appear to be for a slice or user.");
							return;
						}
					}
					catch(e:Error)
					{
						dontUseCredential();
					}
				}
				else if(event.task.Status != Task.STATUS_CANCELED)
				{
					dontUseCredential("Credential failed to load");
				}
			}
			
			private function dontUseCredential(errorMsg:String = ""):void
			{
				useCredential = null;
				useCredentialLabel.text = "";
				if(errorMsg.length > 0)
					Alert.show(errorMsg, "Error");
			}
			
			// Finish
			
			public function trySubmit():void
			{
				if(!ValidPem)
					Alert.show("You must supply a valid private key/certificate combination", "No SSL PEM given");
				else
					saveAndClose();
			}
			
			public function saveAndClose():void
			{
				if(SharedMain.user.setSecurity(sslPem.text, passwordField.text))
				{
					Alert.show("It appears that the password is incorrect, try again", "Incorrect password");
					return;
				}
				if(this.rememberPasswordCheckbox.selected)
					SharedCache.updateUserPassword(passwordField.text);
				else
					SharedCache.updateUserPassword("");
				if(!rememberUnencryptedCertCheckbox.visible || rememberUnencryptedCertCheckbox.selected)
					SharedCache.updateUserSslPem(sslPem.text);
				else
					SharedCache.updateUserSslPem("");
				SharedCache.save();
				
				// Emulab
				if(useCredentialRadiobutton.selected)
				{
					if(useCredential == null)
					{
						Alert.show(
							"You haven't selected a valid credential." +
							" Either select the option to get a user credential or select a valid credential from file.",
							"No credential selected");
						return;
					}
					
					GeniMain.geniUniverse.user.authority = null;
					GeniMain.geniUniverse.user.credential = useCredential;
					// Add the slice if using a slice credential
					if(useCredential.type == GeniCredential.TYPE_SLICE)
					{
						var useSlice:Slice = new Slice(useCredential.getIdWithType(IdnUrn.TYPE_SLICE).full);
						useSlice.creator = GeniMain.geniUniverse.user;
						useSlice.expires = useCredential.Expires;
						useSlice.hrn = useSlice.id.name;
						GeniMain.geniUniverse.user.slices.add(useSlice);
						
						SharedMain.sharedDispatcher.dispatchChanged(
							FlackEvent.CHANGED_SLICE,
							useSlice,
							FlackEvent.ACTION_CREATED
						);
						SharedMain.sharedDispatcher.dispatchChanged(
							FlackEvent.CHANGED_SLICES,
							useSlice,
							FlackEvent.ACTION_ADDED
						);
					}
				}
				else
				{
					GeniMain.geniUniverse.user.credential = null;
					GeniMain.geniUniverse.user.authority = selectedAuthority;
				}
				
				GeniMain.geniUniverse.loadAuthenticated();
				
				closeWindow();
			}
			
		]]>
	</fx:Script>
	
	<s:HGroup width="100%" verticalAlign="middle" paddingLeft="4" paddingRight="4">
		<s:Label text="Your private key and certificate need to be entered below." paddingLeft="4" width="100%" />
		<s:Button icon="{ImageUtil.helpIcon}"
				  chromeColor="#56A5EC"
				  label="Need help?"
				  click="NetUtil.openWebsite(GeniMain.tutorialLoginUrl);" />
	</s:HGroup>
	<s:HGroup width="100%" verticalAlign="middle" paddingLeft="4" paddingRight="4">
		<components:ImageButton icon="{ImageUtil.saveIcon}"
								toolTip="Save to file"
								click="trySavePem(event)" />
		<components:ImageButton icon="{ImageUtil.openIcon}"
								toolTip="Open from file"
								click="tryOpenPem(event)" />
		<components:ImageButton icon="{ImageUtil.copyIcon}"
								toolTip="Copy to clipboard"
								click="System.setClipboard(sslPem.text)" />
		<components:Spinner id="spinner"
							width="21"
							height="21"
							x="{(width / 2) - (spinner.width / 2)}"
							y="{(height / 2) - (spinner.height / 2)}"
							visible="false" />
		<s:Button label="Download"
				  enabled="{selectedAuthority.workingCertGet}"
				  icon="{ImageUtil.sslIcon}"
				  click="tryDownloadCertificate();" />
		<s:Label text="from" />
		<s:DropDownList id="authorities"
						labelField="name"
						width="100%"
						prompt="Select authority..."
						dataProvider="{authorityList}"
						selectedItem="@{selectedAuthority}" />
		<s:Button label="Refresh"
				  icon="{ImageUtil.refreshIcon}"
				  click="SharedMain.tasker.add(new PublicListAuthoritiesTask())" />		
		<s:Button label="Add"
				  icon="{ImageUtil.addIcon}"
				  click="DisplayUtil.viewAddAuthorityWindow()" />
	</s:HGroup>
	
	<s:TextArea id="sslPem"
				width="100%" height="100%"
				valueCommit="tryParseCert()"
				change="tryParseCert()" />
	<s:HGroup verticalAlign="middle" paddingLeft="4" paddingRight="4">
		<s:Label id="detectedUrnLabel" />
		<s:Label id="enterPasswordLabel" width="100%" />
		<s:CheckBox id="rememberUnencryptedCertCheckbox" label="Remember" visible="false" includeInLayout="{rememberUnencryptedCertCheckbox.visible}" />
	</s:HGroup>
	
	<s:HGroup id="passwordGroup"
			  width="100%"
			  paddingLeft="4"
			  paddingRight="4"
			  verticalAlign="middle"
			  visible="false"
			  includeInLayout="{passwordGroup.visible}">
		<s:Image source="{ImageUtil.keyIcon}" />
		<s:TextInput id="passwordField"
					 width="100%" 
					 enter="trySubmit();"
					 displayAsPassword="true"
					 prompt="Enter your passphrase"/>
		<s:CheckBox id="rememberPasswordCheckbox" label="Remember" />
	</s:HGroup>
	
	<s:HGroup verticalAlign="middle" paddingLeft="4" paddingRight="4">
		<s:Label text="Load GENI credential from" />
		<s:RadioButton id="getCredentialRadiobutton"
					   groupName="credentialGroup"
					   label="Slice Authority"
					   selected="true" />
		<s:RadioButton id="useCredentialRadiobutton"
					   groupName="credentialGroup"
					   label="File" />
		<components:ImageButton icon="{ImageUtil.openIcon}"
								id="openCredentialButton"
								click="tryOpenCredential(event);" />
		<s:Label id="useCredentialLabel" styleName="validStyle" fontWeight="bold" />
	</s:HGroup>

	<windows:controlBarLayout>
		<s:HorizontalLayout verticalAlign="middle" paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2" />
	</windows:controlBarLayout>
	<windows:controlBarContent>
		<s:Button id="okButton"
				  label="OK"
				  icon="{ImageUtil.authenticationIcon}"
				  height="24"
				  click="trySubmit();" />
		<s:Button label="Cancel"
				  icon="{ImageUtil.crossIcon}"
				  click="closeWindow()" />
	</windows:controlBarContent>
</windows:DefaultWindow>
