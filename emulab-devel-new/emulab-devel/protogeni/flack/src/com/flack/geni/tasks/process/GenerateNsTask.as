/*
 * Copyright (c) 2008-2013 University of Utah and the Flux Group.
 * 
 * {{{GENIPUBLIC-LICENSE
 * 
 * GENI Public License
 * 
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and/or hardware specification (the "Work") to
 * deal in the Work without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Work, and to permit persons to whom the Work
 * is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Work.
 * 
 * THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
 * IN THE WORK.
 * 
 * }}}
 */

package com.flack.geni.tasks.process
{
	import com.flack.geni.plugins.emulab.EmulabOpenVzSliverType;
	import com.flack.geni.plugins.emulab.RawPcSliverType;
	import com.flack.geni.resources.SliverTypes;
	import com.flack.geni.resources.virt.ExecuteService;
	import com.flack.geni.resources.virt.InstallService;
	import com.flack.geni.resources.virt.LinkType;
	import com.flack.geni.resources.virt.AggregateSliver;
	import com.flack.geni.resources.virt.VirtualInterface;
	import com.flack.geni.resources.virt.VirtualInterfaceCollection;
	import com.flack.geni.resources.virt.VirtualLink;
	import com.flack.geni.resources.virt.VirtualLinkCollection;
	import com.flack.geni.resources.virt.VirtualNode;
	import com.flack.geni.resources.virt.VirtualNodeCollection;
	import com.flack.shared.SharedMain;
	import com.flack.shared.tasks.Task;
	
	/**
	 * Generates a request NS document for the slice using the slice's settings
	 * 
	 * @author mstrum
	 * 
	 */
	public final class GenerateNsTask extends Task
	{
		public var sliver:AggregateSliver;
		public var nsDocument:String = "";
		
		/**
		 * 
		 * @param newSliver Sliver to generare NS file for
		 * 
		 */
		public function GenerateNsTask(newSliver:AggregateSliver)
		{
			super(
				"Generate NS Document",
				"Generates a NS document for a sliver",
				"",
				null,
				0,
				0,
				false,
				[newSliver, newSliver.slice]);
			sliver = newSliver;
		}
		
		override protected function runStart():void
		{
			nsDocument = "# Generated by Flack " + SharedMain.version + "\n\n";
			nsDocument += "source tb_compat.tcl\nset ns [new Simulator]\n\n\n\n";
			
			nsDocument += "# Nodes #\n\n";
			var nodes:VirtualNodeCollection = sliver.Nodes;
			for each(var node:VirtualNode in nodes.collection)
			{
				if(node.sliverType.name != RawPcSliverType.TYPE_RAWPC_V1
					&& node.sliverType.name != RawPcSliverType.TYPE_RAWPC_V2
					&& node.sliverType.name != EmulabOpenVzSliverType.TYPE_EMULABOPENVZ)
				{
					nsDocument += "# Skipped '"+node.clientId+"' which was unsupported sliver type '"+node.sliverType.name+"'\n";
					continue;
				}
				
				nsDocument += "# "+node.clientId+"\n";
				nsDocument += "set "+node.clientId+" [$ns node]\n";
				if(node.physicalId.full.length > 0)
					nsDocument += "tb-fix-node $"+node.clientId+" "+node.physicalId.name+"\n";
				if(node.hardwareType.name.length > 0)
					nsDocument += "tb-set-hardware $"+node.clientId+" "+node.hardwareType.name+"\n";
				if(node.sliverType.name == EmulabOpenVzSliverType.TYPE_EMULABOPENVZ)
				{
					nsDocument += "tb-set-hardware $"+node.clientId+" pcvm\n";
					nsDocument += "tb-set-node-os $"+node.clientId+" OPENVZ-STD\n";
				}
				if(node.sliverType.selectedImage != null && node.sliverType.selectedImage.id.full.length > 0)
					nsDocument += "tb-set-node-os $"+node.clientId+" "+node.sliverType.selectedImage.Osid+"\n";
				
				if(node.services.executeServices != null && node.services.executeServices.length > 0)
				{
					for each(var executeService:ExecuteService in node.services.executeServices)
						nsDocument += "tb-set-node-startcmd $"+node.clientId+" \""+executeService.command+"\"\n";
				}
				if(node.services.installServices != null && node.services.installServices.length > 0)
				{
					var installs:String = "";
					for each(var installService:InstallService in node.services.installServices)
						installs += installService.installPath + " " + installService.url + " ";
					nsDocument += "tb-set-node-tarfiles $"+node.clientId+" " + installs + "\n";
				}
				nsDocument += "\n";
			}
			
			nsDocument += "\n# Links #\n\n";
			var links:VirtualLinkCollection = sliver.Links;
			for each(var link:VirtualLink in links.collection)
			{
				if(link.type.name != LinkType.LAN_V1 && link.type.name != LinkType.LAN_V2)
				{
					nsDocument += "# Skipped '"+link.clientId+"' which was unsupported type '"+link.type.name+"'\n";
					continue;
				}
				
				var interfaces:VirtualInterfaceCollection = link.interfaceRefs.Interfaces;
				var nsCapacity:Number = link.Capacity ? link.Capacity : 100000;
				nsDocument += "# "+link.clientId+"\n";
				var connectedNodesList:String = "";
				var connectedNodes:VirtualNodeCollection = link.interfaceRefs.Interfaces.Nodes;
				for each(var connectedNode:VirtualNode in connectedNodes.collection)
					connectedNodesList += "$"+connectedNode.clientId+" ";
				nsDocument += "set "+link.clientId+" [$ns ";
				if(!link.Simplex )
				{
					nsDocument += "make-lan \""+connectedNodesList+"\" "+nsCapacity+"kb "+link.Latency+"ms]";
					if(link.PacketLoss > 0)
						nsDocument += "tb-set-lan-loss $"+link.clientId+" "+link.PacketLoss+"\n";
					for each(var lanInterface:VirtualInterface in interfaces.collection)
					{
						if(lanInterface.ip.address.length > 0)
							nsDocument += "tb-set-ip-lan $"+lanInterface.Owner.clientId+" $"+link.clientId+" \""+lanInterface.ip.address+"\"\n";
					}
				}
				else
				{
					nsDocument += "duplex-link "+connectedNodesList+nsCapacity+"kb "+link.Latency+"ms DropTail]\n";
					if(link.PacketLoss > 0)
						nsDocument += "tb-set-link-loss $"+link.clientId+" "+link.PacketLoss+"\n";
					for each(var nonlanInterface:VirtualInterface in interfaces.collection)
					{
						if(nonlanInterface.ip.address.length > 0)
							nsDocument += "tb-set-ip-link $"+nonlanInterface.Owner.clientId+" $"+link.clientId+" \""+nonlanInterface.ip.address+"\"\n";
					}
				}
				
				if(interfaces.length > 0 && interfaces.collection[0].ip.netmask.length > 0)
					nsDocument += "tb-set-netmask $"+link.clientId+" \""+interfaces.collection[0].ip.netmask+"\"\n";
				
				nsDocument += "\n";
			}
			
			nsDocument += "\n\n# Turn on static routing.\n$ns rtproto Static";
			nsDocument += "\n\n# Run the simulation\n$ns run";
			
			data = nsDocument;
				
			super.afterComplete(false);
		}
	}
}