<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) 2008-2013 University of Utah and the Flux Group.

{{{GENIPUBLIC-LICENSE

GENI Public License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and/or hardware specification (the "Work") to
deal in the Work without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Work, and to permit persons to whom the Work
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Work.

THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
IN THE WORK.

}}}

-->

<areas1:AreaContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="com.flack.shared.display.components.*"
		  xmlns:display="com.flack.geni.display.*"
		  xmlns:areas="com.flack.geni.display.areas.*"
		  creationComplete="init()"
		  paddingBottom="2" xmlns:areas1="com.flack.shared.display.areas.*">
	<fx:Script>
		<![CDATA[
			import com.flack.geni.display.DisplayUtil;
			import com.flack.geni.resources.physical.HardwareType;
			import com.flack.geni.resources.physical.PhysicalInterface;
			import com.flack.geni.resources.physical.PhysicalInterfaceCollection;
			import com.flack.geni.resources.physical.PhysicalLink;
			import com.flack.geni.resources.physical.PhysicalLinkCollection;
			import com.flack.geni.resources.physical.PhysicalNode;
			import com.flack.geni.resources.physical.PhysicalNodeCollection;
			import com.flack.geni.resources.sites.GeniManager;
			import com.flack.shared.display.areas.DocumentArea;
			import com.flack.shared.display.components.DataButton;
			import com.flack.shared.utils.ColorUtil;
			import com.flack.shared.utils.ImageUtil;
			import com.flack.shared.utils.NetUtil;
			import com.flack.shared.utils.StringUtil;
			import com.flack.shared.utils.ViewUtil;
			
			import mx.collections.ArrayCollection;
			
			import spark.components.Button;
			import spark.primitives.Rect;
			
			[Bindable]
			public var node:PhysicalNode = null;
			
			[Bindable]
			private var nodeTypes:ArrayCollection = null;
			
			public function init():void
			{
				if(node != null)
					load(node);
			}
			
			public function load(n:PhysicalNode):void
			{
				if(n == null)
					return;
				node = n;
				title = node.name;
				backgroundColor = ColorUtil.colorsDark[node.manager.colorIdx];
				titleColor = ColorUtil.colorsLight[node.manager.colorIdx];
				if(initialized)
				{
					imgAvailable.source = ViewUtil.assignIcon(n.available);
					if(n.available)
						imgAvailable.toolTip = "Available";
					else
						imgAvailable.toolTip = "Not available";
					
					if(n.exclusive)
					{
						imgExclusive.source = ImageUtil.exclusiveIcon;
						imgExclusive.toolTip = "Exclusive";
					}
					else
					{
						imgExclusive.source = ImageUtil.sharedIcon;
						imgExclusive.toolTip = "Not exclusive";
					}
					
					loadCharacteristics();
					
					nodeTypes = new ArrayCollection();
					for each(var nt:HardwareType in node.hardwareTypes.collection)
						nodeTypes.addItem(nt);
					
					loadHierarchy();
					
					sliverTypesControl.load(node.sliverTypes);
					
					loadPhysicalLinks();
				}
			}
			
			public function loadCharacteristics():void
			{
				characteristicsVgroup.removeAllElements();
				if(node.cpuSpeed > 0)
				{
					characteristicsVgroup.addElement(ViewUtil.getLabel("CPU", true));
					characteristicsVgroup.addElement(ViewUtil.getLabel(StringUtil.mhzToString(node.cpuSpeed)));
				}
				if(node.ramSize > 0)
				{
					characteristicsVgroup.addElement(ViewUtil.getLabel("RAM", true));
					characteristicsVgroup.addElement(ViewUtil.getLabel(StringUtil.mbToString(node.ramSize)));
				}
			}
			
			public function loadHierarchy():void
			{
				if(hierarchyVbox != null)
				{
					hierarchyVbox.removeAllElements();
					
					// Manager
					var managerHbox:HGroup = new HGroup();
					managerHbox.verticalAlign = "middle";
					managerHbox.gap = 4;
					managerHbox.addElement(ViewUtil.getLabel("Hosted on"));
					var managerButton:DataButton = DisplayUtil.getGeniManagerButton(node.manager as GeniManager, false);
					managerButton.addEventListener(MouseEvent.CLICK, viewManager);
					managerHbox.addElement(managerButton);
					hierarchyVbox.addElement(managerHbox);
					
					// Parent node info
					if(node.subNodeOf != null)
					{
						var parentNodeHbox:HGroup = new HGroup();
						parentNodeHbox.verticalAlign = "middle";
						parentNodeHbox.gap = 4;
						parentNodeHbox.addElement(ViewUtil.getLabel("Subnode of"));
						var parentButton:DataButton = DisplayUtil.getPhysicalNodeButton(node.subNodeOf, false);
						parentButton.addEventListener(MouseEvent.CLICK, viewNode);
						parentNodeHbox.addElement(parentButton);
						hierarchyVbox.addElement(parentNodeHbox);
					}
					
					// Child node info
					if(node.subNodes != null && node.subNodes.length > 0)
					{
						var subNodesLabel:Label = new Label();
						hierarchyVbox.addElement(subNodesLabel);
						subNodesLabel.text = "Subnodes:";
						for each(var subNode:PhysicalNode in node.subNodes)
						{
							var childButton:DataButton = DisplayUtil.getPhysicalNodeButton(subNode, false);
							childButton.addEventListener(MouseEvent.CLICK, viewNode);
							hierarchyVbox.addElement(childButton);
						}
					}
				}
			}
			
			public function loadPhysicalLinks():void
			{
				if(interfacesLinkToGroup != null)
				{
					interfacesLinkToGroup.removeAllElements();
					interfacesGroup.removeAllElements();
					
					var interfacesButton:DataButton = DisplayUtil.getPhysicalInterfaceCollectionButton(node.interfaces, false)
					interfacesButton.addEventListener(MouseEvent.CLICK, viewInterfaces);
					interfacesGroup.addElement(interfacesButton);
					interfacesGroup.addElement(ViewUtil.getLabel("connected with", true));
					
					var allLinks:PhysicalLinkCollection = node.Links;
					var linksButton:DataButton = DisplayUtil.getPhysicalLinkCollectionButton(allLinks, false);
					linksButton.addEventListener(MouseEvent.CLICK, viewLinks);
					interfacesGroup.addElement(linksButton);
					
					var connectedNodes:PhysicalNodeCollection = node.ConnectedNodes;
					if(connectedNodes.length > 0)
					{
						var nodesButton:DataButton = DisplayUtil.getPhysicalNodeCollectionButton(connectedNodes, false);
						nodesButton.addEventListener(MouseEvent.CLICK, viewNodes);
						interfacesGroup.addElement(nodesButton);
						
						for each(var n:PhysicalNode in connectedNodes.collection)
						{
							var nodeButton:DataButton = DisplayUtil.getPhysicalNodeButton(n, false);
							nodeButton.addEventListener(MouseEvent.CLICK, viewNode);
							interfacesLinkToGroup.addElement(nodeButton);
							
							var connectedLinks:PhysicalLinkCollection = n.getLinksWith(node);
							for each(var l:PhysicalLink in connectedLinks.collection)
							{
								var startInterface:PhysicalInterface;
								var endInterface:PhysicalInterface;
								for each(var testInterface:PhysicalInterface in l.interfaces.collection)
								{
									if(testInterface.owner == n)
										endInterface = testInterface;
									if(testInterface.owner == node)
										startInterface = testInterface;
								}
								
								var linkHbox:HGroup = new HGroup();
								var space:Rect = new Rect();
								space.width = 16;
								linkHbox.addElement(space);
								
								var linkButton:DataButton = DisplayUtil.getPhysicalLinkButton(l, false);
								linkButton.addEventListener(MouseEvent.CLICK, viewLink);
								linkButton.label = NetUtil.kbsToString(l.Capacity) + " (" + startInterface.id.name + " -> " + endInterface.id.name + ")";
								linkHbox.addElement(linkButton);
								
								interfacesLinkToGroup.addElement(linkHbox);
							}
						}
					}
				}
			}
			
			public function viewComponentRspec():void
			{
				var rspecArea:DocumentArea = new DocumentArea();
				rspecArea.Document = node.advertisement;
				rspecArea.title = "Advertisement for " + node.name;
				rspecArea.backgroundColor = backgroundColor;
				rspecArea.titleColor = titleColor;
				openNext(rspecArea);
			}
			
			public function viewLink(e:MouseEvent):void
			{
				viewLinkArea((e.target as DataButton).data as PhysicalLink);
			}
			
			public function viewLinkArea(l:PhysicalLink):void
			{
				var linkArea:PhysicalLinkArea = new PhysicalLinkArea();
				linkArea.load(l);
				openNext(linkArea);
			}
			
			public function viewLinks(e:MouseEvent):void
			{
				var l:PhysicalLinkCollection = (e.target as DataButton).data as PhysicalLinkCollection;
				if(l.length == 1)
				{
					viewLinkArea(l.collection[0]);
					return;
				}
				var linksArea:PhysicalLinkCollectionArea = new PhysicalLinkCollectionArea();
				linksArea.Links = l;
				openNext(linksArea);
			}
			
			public function viewNode(e:MouseEvent):void
			{
				viewNodeArea((e.target as DataButton).data as PhysicalNode);
			}
			
			public function viewNodeArea(n:PhysicalNode):void
			{
				var nodeArea:PhysicalNodeArea = new PhysicalNodeArea();
				nodeArea.load(n);
				openNext(nodeArea);
			}
			
			public function viewNodes(e:MouseEvent):void
			{
				var n:PhysicalNodeCollection = (e.target as DataButton).data as PhysicalNodeCollection;
				if(n.length == 1)
				{
					viewNodeArea(n.collection[0]);
					return;
				}
				var nodesArea:PhysicalNodeCollectionArea = new PhysicalNodeCollectionArea();
				nodesArea.Nodes = n;
				openNext(nodesArea);
			}
			
			public function viewManager(e:MouseEvent):void
			{
				var m:GeniManager = (e.target as DataButton).data as GeniManager;
				var managerArea:ManagerArea = new ManagerArea();
				managerArea.load(m);
				openNext(managerArea);
			}
			
			public function viewInterfaces(e:MouseEvent):void
			{
				var interfaces:PhysicalInterfaceCollection = (e.target as DataButton).data as PhysicalInterfaceCollection;
				if(interfaces.length == 1)
				{
					viewInterfaceArea(interfaces.collection[0]);
					return;
				}
				var interfacesArea:PhysicalInterfaceCollectionArea = new PhysicalInterfaceCollectionArea();
				interfacesArea.Interfaces = interfaces;
				openNext(interfacesArea);
			}
			
			public function viewInterfaceArea(ni:PhysicalInterface):void
			{
				var interfaceArea:PhysicalInterfaceArea = new PhysicalInterfaceArea();
				interfaceArea.load(ni);
				openNext(interfaceArea);
			}
			
		]]>
	</fx:Script>
	
	<s:Group width="100%">
		<s:Rect width="100%" height="100%">
			<s:fill><s:SolidColor color="{backgroundColor}" /></s:fill>
		</s:Rect>
		
		<s:HGroup width="100%"
				  verticalAlign="middle"
				  paddingLeft="2"
				  paddingRight="2"
				  paddingTop="2"
				  paddingBottom="2"
				  gap="2">
			<s:Image id="imgAvailable" />
			<s:Image id="imgExclusive" />
			<s:Label text="{title}"
					 color="{titleColor}"
					 id="nameLabel"
					 toolTip="{node.id.full}"
					 fontSize="17"
					 fontWeight="bold"
					 width="100%" />
			<s:Button id="componentButton"
					  icon="{ImageUtil.advertisementIcon}"
					  label="View RSPEC"
					  toolTip="View Advertisement RSPEC"
					  click="viewComponentRspec()" />
			<components:ImageButton id="dockIcon"
									icon="{ImageUtil.windowIcon}"
									toolTip="Pop out to a window or in to the main window"
									click="host.Docked ? popOut() : dock()" />
			<components:ImageButton id="closeIcon"
									icon="{ImageUtil.crossIcon}"
									toolTip="Close"
									click="close()" />
		</s:HGroup>
		
	</s:Group>
	
	<s:VGroup height="100%"
			  width="100%"
			  paddingRight="2"
			  paddingLeft="2"
			  gap="2">
		<s:HGroup width="100%"
				  gap="2">
			<s:VGroup id="characteristicsVgroup"
					  gap="2" />
			<s:Label text="Types" fontWeight="bold" />
			<s:List id="typeList" dataProvider="{nodeTypes}" labelField="name" height="68" />
			<s:VGroup width="100%"
					  gap="2">
				<s:Label text="Hierarchy" fontWeight="bold"/>
				<s:VGroup width="100%"
						  height="100%"
						  gap="2"
						  id="hierarchyVbox" />
			</s:VGroup>
		</s:HGroup>
		
		<display:SliverTypesControl id="sliverTypesControl" />
		
		<s:HGroup width="100%"
				  height="100%"
				  gap="2">
			<s:VGroup id="interfacesGroup"
					  gap="2" />
			<s:Scroller width="100%"
						height="100%">
				<s:VGroup id="interfacesLinkToGroup"
						  width="100%"
						  height="100%"
						  gap="2" />
			</s:Scroller>
		</s:HGroup>
	</s:VGroup>
	
</areas1:AreaContent>
