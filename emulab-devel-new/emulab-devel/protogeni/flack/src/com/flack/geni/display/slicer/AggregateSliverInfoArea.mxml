<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) 2008-2013 University of Utah and the Flux Group.

{{{GENIPUBLIC-LICENSE

GENI Public License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and/or hardware specification (the "Work") to
deal in the Work without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Work, and to permit persons to whom the Work
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Work.

THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
IN THE WORK.

}}}

-->

<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="com.flack.shared.display.components.*"
		  width="100%"
		  gap="2"
		  creationComplete="init()"
		  remove="cleanup()">
	<fx:Script>
		<![CDATA[
			import com.flack.geni.display.areas.SliceArea;
			import com.flack.geni.resources.virt.AggregateSliver;
			import com.flack.geni.resources.virt.Slice;
			import com.flack.geni.resources.virt.Sliver;
			import com.flack.geni.tasks.xmlrpc.am.DeleteTask;
			import com.flack.geni.tasks.xmlrpc.am.PerformOperationalActionTask;
			import com.flack.geni.tasks.xmlrpc.am.StatusTask;
			import com.flack.geni.tasks.xmlrpc.protogeni.cm.DeleteSliverCmTask;
			import com.flack.geni.tasks.xmlrpc.protogeni.cm.RestartSliverCmTask;
			import com.flack.geni.tasks.xmlrpc.protogeni.cm.SliverStatusCmTask;
			import com.flack.geni.tasks.xmlrpc.protogeni.cm.StartSliverCmTask;
			import com.flack.geni.tasks.xmlrpc.protogeni.cm.StopSliverCmTask;
			import com.flack.shared.FlackEvent;
			import com.flack.shared.SharedMain;
			import com.flack.shared.display.areas.DocumentArea;
			import com.flack.shared.display.areas.LogMessagesRelatedToArea;
			import com.flack.shared.logging.LogMessage;
			import com.flack.shared.logging.LogMessageCollection;
			import com.flack.shared.resources.sites.ApiDetails;
			import com.flack.shared.tasks.SerialTaskGroup;
			import com.flack.shared.tasks.Task;
			import com.flack.shared.tasks.TaskCollection;
			import com.flack.shared.tasks.TaskEvent;
			import com.flack.shared.utils.ColorUtil;
			import com.flack.shared.utils.ImageUtil;
			
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.MenuEvent;
			
			import spark.components.BorderContainer;
			
			[Bindable]
			public var aggregateSliver:AggregateSliver;
			
			[Bindable]
			public var host:SliceArea;
			
			[Bindable]
			public var backColor:uint;
			[Bindable]
			public var frontColor:uint;
			
			public var actionMenuData:Array = [
				{label: "View logs", icon: ImageUtil.consoleIcon, action: viewLogs},
				{label: "View Manifest", icon: ImageUtil.manifestIcon, action: viewManifest},
				{label: "Get status", icon: ImageUtil.refreshIcon, action: tryRefreshStatus},
				{label: "Delete", icon: ImageUtil.deleteIcon, action: tryDelete}
			];
				
			public function init():void
			{
				SharedMain.tasker.addEventListener(TaskEvent.CHILD_FINISHED, taskChanged);
				SharedMain.tasker.addEventListener(TaskEvent.CHILD_STARTED, taskChanged);
				SharedMain.logger.addEventListener(FlackEvent.CHANGED_LOG, logChanged);
				SharedMain.sharedDispatcher.addEventListener(FlackEvent.CHANGED_SLICE, sliceChanged);
				
				setSpinner();
				setStatus();
				
				backColor = ColorUtil.colorsDark[aggregateSliver.manager.colorIdx];
				frontColor = ColorUtil.colorsLight[aggregateSliver.manager.colorIdx];
				
				var msgs:LogMessageCollection = SharedMain.logger.Logs.getRelatedTo([aggregateSliver]).Important;
				if(msgs.length > 0)
					setLog(msgs.collection[msgs.length-1]);
				
				if(aggregateSliver.manager.api.type == ApiDetails.API_PROTOGENI)
				{
					switch(aggregateSliver.manager.api.level)
					{
						case ApiDetails.LEVEL_FULL:
							actionMenuData.push({label: "Start", icon: ImageUtil.playControlIcon, action: tryStart});
							actionMenuData.push({label: "Stop", icon: ImageUtil.stopControlIcon, action: tryStop});
						case ApiDetails.LEVEL_MINIMAL:
							actionMenuData.push({label: "Restart", icon: ImageUtil.repeatControlIcon, action: tryRestart});
					}
				}
				else if(aggregateSliver.manager.api.type == ApiDetails.API_GENIAM && aggregateSliver.manager.api.version >= 3)
				{
					actionMenuData.push({label: "Start", icon: ImageUtil.playControlIcon, action: tryStart});
					actionMenuData.push({label: "Stop", icon: ImageUtil.stopControlIcon, action: tryStop});
					actionMenuData.push({label: "Restart", icon: ImageUtil.repeatControlIcon, action: tryRestart});
				}
				actionMenuButton.dataProvider = actionMenuData;
			}
			
			public function cleanup():void
			{
				SharedMain.tasker.removeEventListener(TaskEvent.CHILD_FINISHED, taskChanged);
				SharedMain.tasker.removeEventListener(TaskEvent.CHILD_STARTED, taskChanged);
				SharedMain.sharedDispatcher.removeEventListener(FlackEvent.CHANGED_SLICE, sliceChanged);
				SharedMain.logger.removeEventListener(FlackEvent.CHANGED_LOG, logChanged);
			}
			
			public function taskChanged(e:TaskEvent = null):void
			{
				setSpinner();
			}
			
			public function sliceChanged(e:FlackEvent):void
			{
				var changedSlice:Slice = e.changedObject as Slice;
				if(aggregateSliver.slice == changedSlice)
					setStatus();
			}
			
			public function setSpinner():void
			{
				var notFinished:TaskCollection = SharedMain.tasker.tasks.NotFinished.All.NotFinished;
				var stillWorking:Boolean = notFinished.getRelatedTo(aggregateSliver).length > 0;
				if(!stillWorking && spinner.visible)
				{
					spinner.visible = false;
					spinner.stopSpin();
				}
				else if(stillWorking && !spinner.visible)
				{
					spinner.visible = true;
					spinner.startSpin();
				}
			}
			
			public function setStatus():void
			{
				if(Sliver.isAllocated(aggregateSliver.AllocationState))
				{
					switch(aggregateSliver.AllocationState)
					{
						case Sliver.ALLOCATION_PROVISIONED:
							switch(aggregateSliver.OperationalState)
							{
								case Sliver.OPERATIONAL_READY:
									actionMenuButton.styleName = "validStyle";
									break;
								case Sliver.OPERATIONAL_FAILED:
									actionMenuButton.styleName = "failedStyle";
									break;
								case Sliver.MIXED_CHANGING:
								case Sliver.OPERATIONAL_STOPPING:
								case Sliver.OPERATIONAL_READY_BUSY:
								case Sliver.OPERATIONAL_CONFIGURING:
									actionMenuButton.styleName = "inprogressStyle";
									break;
								case Sliver.MIXED_FINISHED:
								case Sliver.OPERATIONAL_NOTREADY:
									actionMenuButton.styleName = "pausedStyle";
									break;
								default:
									actionMenuButton.styleName = "unknownStyle";
							}
							break;
						case Sliver.ALLOCATION_ALLOCATED:
						case Sliver.ALLOCATION_UPDATING:
						case Sliver.MIXED_PROVISIONED:
						case Sliver.MIXED_ALLOCATED:
						case Sliver.MIXED_UNALLOCATED:
						case Sliver.MIXED_UPDATING:
							actionMenuButton.styleName = "inprogressStyle";
							break;
						default:
							actionMenuButton.styleName = "unknownStyle";
					}
				}
				else
					actionMenuButton.styleName = "unknownStyle";
			}
			
			public function logChanged(e:FlackEvent):void
			{
				if(e.action == FlackEvent.ACTION_CREATED)
				{
					var msg:LogMessage = e.changedObject as LogMessage;
					if(msg.relatedToAny([aggregateSliver]) && msg.importance == LogMessage.IMPORTANCE_HIGH)
						setLog(msg);
				}
			}
			
			public function setLog(msg:LogMessage):void
			{
				statusLabel.text = msg.ShortestTitle;
				statusLabel.toolTip = msg.ShortMessage;
				switch(msg.level)
				{
					case LogMessage.LEVEL_FAIL:
					case LogMessage.LEVEL_DIE:
						statusLabel.styleName = "failedStyle";
						break;
					case LogMessage.LEVEL_WARNING:
						statusLabel.styleName = "inprogressStyle";
						break;
					default:
						statusLabel.styleName = "unknownStyle";
				}
			}
			
			public function viewManifest():void
			{
				if(!Sliver.isAllocated(aggregateSliver.AllocationState))
				{
					Alert.show("No resources have been allocated, so there is no manifest to view.", "Cannot view manifest");
					return;
				}
				
				var credentialArea:DocumentArea = new DocumentArea();
				credentialArea.Document = aggregateSliver.manifest.document;
				credentialArea.title =  "Manifest for sliver on " + aggregateSliver.manager.hrn;
				credentialArea.backgroundColor = ColorUtil.colorsDark[aggregateSliver.manager.colorIdx];
				credentialArea.titleColor = ColorUtil.colorsLight[aggregateSliver.manager.colorIdx];
				host.openNext(credentialArea);
			}
			
			public function viewLogs():void
			{
				var logArea:LogMessagesRelatedToArea = new LogMessagesRelatedToArea();
				logArea.RelatedTo = [aggregateSliver];
				logArea.title = "Logs for " + aggregateSliver.manager.hrn;
				logArea.backgroundColor = ColorUtil.colorsDark[aggregateSliver.manager.colorIdx];
				logArea.titleColor = ColorUtil.colorsLight[aggregateSliver.manager.colorIdx];
				host.openNext(logArea);
			}
			
			private var action:Function;
			protected function actionMenuButton_itemClickHandler(event:MenuEvent):void
			{
				action = event.item.action;
				action();
				actionMenuButton.setStyle("icon", event.item.icon);
				actionMenuButton.toolTip = event.item.label;
			}
			
			private function tryRefreshStatus():void
			{
				if(!Sliver.isAllocated(aggregateSliver.AllocationState))
				{
					Alert.show("No resources to check status", "Cannot check status");
					return;
				}
				var task:Task = null;
				if(aggregateSliver.manager.api.type == ApiDetails.API_GENIAM)
					task = new StatusTask(aggregateSliver, false);
				else
					task = new SliverStatusCmTask(aggregateSliver, false);
				task.forceRunNow = true;
				SharedMain.tasker.add(task);
			}
			
			private function tryDelete():void
			{
				if(!Sliver.isAllocated(aggregateSliver.AllocationState))
				{
					Alert.show("No resources to delete", "Cannot delete");
					return;
				}
				
				var unfinished:TaskCollection = SharedMain.tasker.tasks.AllNotFinished;
				if(unfinished.getRelatedTo(aggregateSliver).length > 0)
				{
					Alert.show(
						"There are tasks running on the sliver, cancel them and delete?",
						"Continue deleting?",
						Alert.YES|Alert.NO,
						FlexGlobals.topLevelApplication as Sprite,
						function afterChoice(e:CloseEvent):void
						{
							if(e.detail == Alert.YES)
							{
								SharedMain.tasker.cancelUncompletedTasksRelatedTo(aggregateSliver);
								runDelete();
							}
						}
					);
				}
				else
				{
					Alert.show(
						"Continue deleting the sliver on " + aggregateSliver.manager.hrn + " on slice " + aggregateSliver.slice.Name,
						"Continue deleting?",
						Alert.YES|Alert.NO,
						FlexGlobals.topLevelApplication as Sprite,
						function afterChoice(e:CloseEvent):void
						{
							if(e.detail == Alert.YES)
							{
								runDelete();
							}
						}
					);
				}
			}
			
			private function runDelete():void
			{
				var task:Task = null;
				if(aggregateSliver.manager.api.type == ApiDetails.API_GENIAM)
					task = new DeleteTask(aggregateSliver);
				else
					task = new DeleteSliverCmTask(aggregateSliver);
				task.forceRunNow = true;
				SharedMain.tasker.add(task);
			}
			
			private function tryStart():void
			{
				if(!Sliver.isAllocated(aggregateSliver.AllocationState))
				{
					Alert.show("No resources to start", "Cannot start");
					return;
				}
				var unfinished:TaskCollection = SharedMain.tasker.tasks.AllNotFinished;
				if(unfinished.getRelatedTo(aggregateSliver).length > 0)
				{
					Alert.show("There are tasks running on the aggregate, please wait for them to complete and try again.", "Aggregate is running tasks");
					return;
				}
				var taskGroup:SerialTaskGroup = new SerialTaskGroup(
					"Start aggregate at " + aggregateSliver.manager.hrn + " on slice " + aggregateSliver.slice.Name
				);
				if(aggregateSliver.manager.api.type == ApiDetails.API_PROTOGENI)
				{
					taskGroup.add(new StartSliverCmTask(aggregateSliver));
					taskGroup.add(new SliverStatusCmTask(aggregateSliver));
				}
				else
				{
					taskGroup.add(new PerformOperationalActionTask(aggregateSliver, PerformOperationalActionTask.ACTION_START));
					taskGroup.add(new StatusTask(aggregateSliver));
				}
				taskGroup.tasks.collection[1].delay = 10;
				taskGroup.forceRunNow = true;
				SharedMain.tasker.add(taskGroup);
			}
			
			private function tryStop():void
			{
				if(!Sliver.isAllocated(aggregateSliver.AllocationState))
				{
					Alert.show("No resources to stop", "Cannot stop");
					return;
				}
				var unfinished:TaskCollection = SharedMain.tasker.tasks.AllNotFinished;
				if(unfinished.getRelatedTo(aggregateSliver).length > 0)
				{
					Alert.show("There are tasks running on the sliver, please wait for them to complete and try again.", "Sliver is running tasks");
					return;
				}
				var taskGroup:SerialTaskGroup = new SerialTaskGroup(
					"Stop sliver at " + aggregateSliver.manager.hrn + " on slice " + aggregateSliver.slice.Name
				);
				if(aggregateSliver.manager.api.type == ApiDetails.API_PROTOGENI)
				{
					taskGroup.add(new StopSliverCmTask(aggregateSliver));
					taskGroup.add(new SliverStatusCmTask(aggregateSliver));
				}
				else
				{
					taskGroup.add(new PerformOperationalActionTask(aggregateSliver, PerformOperationalActionTask.ACTION_STOP));
					taskGroup.add(new StatusTask(aggregateSliver));
				}
				taskGroup.tasks.collection[1].delay = 10;
				taskGroup.forceRunNow = true;
				SharedMain.tasker.add(taskGroup);
			}
			
			private function tryRestart():void
			{
				if(!Sliver.isAllocated(aggregateSliver.AllocationState))
				{
					Alert.show("No resources to restart", "Cannot restart");
					return;
				}
				var unfinished:TaskCollection = SharedMain.tasker.tasks.AllNotFinished;
				if(unfinished.getRelatedTo(aggregateSliver).length > 0)
				{
					Alert.show("There are tasks running on the sliver, please wait for them to complete and try again.", "Sliver is running tasks");
					return;
				}
				var taskGroup:SerialTaskGroup = new SerialTaskGroup(
					"Restart sliver at " + aggregateSliver.manager.hrn + " on slice " + aggregateSliver.slice.Name
				);
				if(aggregateSliver.manager.api.type == ApiDetails.API_PROTOGENI)
				{
					taskGroup.add(new RestartSliverCmTask(aggregateSliver));
					taskGroup.add(new SliverStatusCmTask(aggregateSliver));
				}
				else
				{
					taskGroup.add(new PerformOperationalActionTask(aggregateSliver, PerformOperationalActionTask.ACTION_RESTART));
					taskGroup.add(new StatusTask(aggregateSliver));
				}
				taskGroup.tasks.collection[1].delay = 10;
				taskGroup.forceRunNow = true;
				SharedMain.tasker.add(taskGroup);
			}
				
		]]>
	</fx:Script>
	<s:BorderContainer id="sliverContainer"
					   height="30"
					   width="100%"
					   backgroundColor="{backColor}">
		<s:HGroup height="100%"
				  width="100%"
				  gap="2"
				  verticalAlign="middle"
				  paddingBottom="2"
				  paddingLeft="2"
				  paddingRight="2"
				  paddingTop="2">
			<s:Label text="{aggregateSliver.manager.hrn}"
					 width="100%"
					 maxDisplayedLines="1"
					 color="{frontColor}" />
			<components:Spinner id="spinner"
								width="18"
								height="18"
								x="{(width / 2) - (spinner.width / 2)}"
								y="{(height / 2) - (spinner.height / 2)}"
								visible="false"
								includeInLayout="{spinner.visible}" />
			<mx:PopUpMenuButton id="actionMenuButton"
								height="24" width="46"
								label=""
								showRoot="true"
								itemClick="actionMenuButton_itemClickHandler(event)" />
		</s:HGroup>
	</s:BorderContainer>
	<s:Label id="statusLabel" width="100%" paddingLeft="2" />
	<components:DefaultLine percentWidth="100" lineColor="{backColor}" />
</s:VGroup>
