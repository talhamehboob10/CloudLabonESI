<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) 2008-2013 University of Utah and the Flux Group.

{{{GENIPUBLIC-LICENSE

GENI Public License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and/or hardware specification (the "Work") to
deal in the Work without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Work, and to permit persons to whom the Work
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Work.

THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
IN THE WORK.

}}}

-->

<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  dragDrop="dragEnterHandler(event)"
		  dragEnter="dragEnterHandler(event)"
		  gap="2">
	<fx:Declarations>
		<s:RadioButtonGroup id="exclusiveRadiobuttongroup"
							change="exclusiveCheckbox.selected = true; filter();" />
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.flack.geni.display.mapping.mapproviders.googlemapsprovider.GoogleMapLocationMarker;
			import com.flack.geni.resources.physical.HardwareType;
			import com.flack.geni.resources.physical.HardwareTypeCollection;
			import com.flack.geni.resources.sites.GeniManager;
			import com.flack.geni.resources.sites.GeniManagerCollection;
			import com.flack.geni.resources.virt.Slice;
			import com.flack.geni.resources.virt.SliceCollection;
			import com.flack.geni.resources.virt.VirtualNode;
			import com.flack.geni.resources.virt.VirtualNodeCollection;
			import com.flack.shared.FlackEvent;
			
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			import spark.events.TextOperationEvent;
			
			public var nodes:VirtualNodeCollection;
			
			[Bindable]
			public var viewCollection:VirtualNodeCollection;
			[Bindable]
			public var viewNodes:ArrayCollection;
			
			[Bindable]
			public var nodeTypes:ArrayCollection;
			
			[Bindable]
			public var managers:ArrayCollection;
			
			[Bindable]
			public var slices:ArrayCollection;
			
			static public const SELECTED:String = "selected";
			static public const FILTERED:String = "filtered";
			//static public const CLICKED:String = "clicked";
			
			public function load(group:VirtualNodeCollection):void
			{
				nodes = group;
				viewCollection = group;
				
				viewNodes = new ArrayCollection();
				for each(var node:VirtualNode in group.collection)
					viewNodes.addItem(node);
				
				var nameSort:Sort = new Sort();
				var dataSortField:SortField = new SortField("clientId");
				nameSort.fields = [dataSortField];
				
				viewNodes.sort = nameSort;
				viewNodes.refresh();
				
				// Types
				nodeTypes = new ArrayCollection();
				var groupTypes:HardwareTypeCollection = group.PhysicalNodes.HardwareTypes;
				for each(var nodeType:HardwareType in groupTypes.collection)
					nodeTypes.addItem(nodeType);
				
				limitByTypeGroup.visible =
					limitByTypeGroup.includeInLayout = nodeTypes.length > 1;
				
				if(nodeTypes.length > 0) {
					if(nodeTypes.contains("pc") != -1)
						typesList.selectedIndex = nodeTypes.getItemIndex("pc");
					else
						typesList.selectedIndex = 0;
				}
				
				// Managers
				managers = new ArrayCollection();
				
				var groupManagers:GeniManagerCollection = group.Managers;
				limitByManagerGroup.visible =
					limitByManagerGroup.includeInLayout = groupManagers.length > 1;
				
				if(limitByManagerGroup.visible)
				{
					for each(var manager:GeniManager in groupManagers.collection)
						managers.addItem(manager);
				}
				
				// Slices
				slices = new ArrayCollection();
				
				var groupSlices:SliceCollection = group.Slices;
				limitBySliceGroup.visible =
					limitBySliceGroup.includeInLayout = groupSlices.length > 1;
				
				if(limitBySliceGroup.visible)
				{
					for each(var slice:Slice in groupSlices.collection)
						slices.addItem(slice);
				}
				
				// Property filters
				limitByCpuGroup.visible = limitByCpuGroup.includeInLayout = group.PhysicalNodes.getByMinimumCpuSpeed(1).length > 0;
				limitByRamGroup.visible = limitByRamGroup.includeInLayout = group.PhysicalNodes.getByMinimumRamSize(1).length > 0;
				
				filter();
			}
			
			private function filter():void
			{
				var filteredNodes:VirtualNodeCollection = nodes;
				
				if(managerCheckbox.selected)
					filteredNodes = filteredNodes.getByManager(managersList.selectedItem);
				
				if(typeCheckbox.selected)
					filteredNodes = filteredNodes.getByPhysicalNodes(filteredNodes.PhysicalNodes.getByHardwareType(typesList.selectedItem.name));
				
				if(exclusiveCheckbox.selected)
				{
					if(exclusiveRadiobutton.selected)
						filteredNodes = filteredNodes.Exclusive;
					else
						filteredNodes = filteredNodes.Shared;
				}
				
				if(cpuCheckbox.selected)
					filteredNodes = filteredNodes.getByPhysicalNodes(filteredNodes.PhysicalNodes.getByMinimumCpuSpeed(int(cpuList.selectedItem.value)));
				
				if(ramCheckbox.selected)
					filteredNodes = filteredNodes.getByPhysicalNodes(filteredNodes.PhysicalNodes.getByMinimumRamSize(int(ramList.selectedItem.value)));
				
				if(searchField.text.length > 0)
					filteredNodes = nodes.searchNodesByClientId(searchField.text);
				
				viewCollection = filteredNodes;
				dispatchEvent(new FlackEvent(FILTERED));
				
				viewNodes.removeAll();
				for each(var node:VirtualNode in filteredNodes.collection)
					viewNodes.addItem(node);
				viewNodes.refresh();
			}
			
			/*protected function selectedItem(event:IndexChangeEvent = null):void
			{
				dispatchEvent(new GeniEvent(SELECTED, list.selectedItem, GeniEvent.ACTION_SELECTED));
			}*/
			
			/*protected function clickedItem(event:MouseEvent):void
			{
				dispatchEvent(new GeniEvent(CLICKED, list.selectedItem, GeniEvent.ACTION_SELECTED));
			}*/
			
			protected function dragEnterHandler(event:DragEvent):void
			{
				if (event.dragSource.hasFormat("virtualMarker") ||
					event.dragSource.hasFormat("virtualNodeCollection"))
				{
					DragManager.acceptDragDrop(event.target as UIComponent);
				}
			}
			
			protected function dragDropHandler(event:DragEvent):void
			{
				if(event.dragSource.hasFormat("virtualMarker"))
					load((event.dragSource.dataForFormat('virtualMarker') as GoogleMapLocationMarker).nodes);
				else if(event.dragSource.hasFormat("virtualNodeCollection"))
					load(event.dragSource.dataForFormat('virtualNodeCollection') as VirtualNodeCollection);
			}
			
			protected function searchField_changeHandler(event:TextOperationEvent):void
			{
				filter();
			}
			
			private var lastSelected:int = -1;
			protected function list_mouseUpHandler(event:MouseEvent):void
			{
				if(lastSelected != list.selectedIndex)
				{
					lastSelected = list.selectedIndex;
					dispatchEvent(new FlackEvent(SELECTED, list.selectedItem, FlackEvent.ACTION_SELECTED));
				}
			}
			
		]]>
	</fx:Script>
	
	<s:VGroup width="100%" paddingLeft="2" paddingRight="2" gap="2">
		
		<s:TextInput id="searchField"
					 prompt="Find by name..."
					 toolTip="Type part of the name of a node to limit results"
					 width="100%"
					 change="searchField_changeHandler(event)" />
		
		<s:HGroup verticalAlign="middle"
				  id="limitBySliceGroup"
				  width="100%"
				  gap="2"
				  toolTip="Select a slice to limit results to">
			<s:CheckBox id="sliceCheckbox"
						change="filter();" />
			<s:DropDownList id="slicesList"
							labelField="Name"
							width="100%"
							dataProvider="{slices}"
							change="sliceCheckbox.selected = true; filter();"
							requireSelection="true" />
		</s:HGroup>
		
		<s:HGroup verticalAlign="middle"
				  id="limitByExclusiveGroup"
				  width="100%"
				  gap="2"
				  toolTip="Limit nodes based on if they are exclusive or shared">
			<s:CheckBox id="exclusiveCheckbox"
						change="filter();" />
			<s:RadioButton label="Exclusive"
						   id="exclusiveRadiobutton"
						   group="{exclusiveRadiobuttongroup}"
						   selected="true" />
			<s:RadioButton label="Shared"
						   id="sharedRadiobutton"
						   group="{exclusiveRadiobuttongroup}" />
		</s:HGroup>
		
		<s:HGroup verticalAlign="middle"
				  id="limitByManagerGroup"
				  width="100%"
				  gap="2"
				  toolTip="Select a manager to limit results to">
			<s:CheckBox id="managerCheckbox"
						change="filter();" />
			<s:DropDownList id="managersList"
							labelField="hrn"
							width="100%"
							dataProvider="{managers}"
							change="managerCheckbox.selected = true; filter();"
							requireSelection="true" />
		</s:HGroup>
		
		<s:HGroup verticalAlign="middle"
				  id="limitByTypeGroup"
				  width="100%"
				  gap="2"
				  toolTip="Select a type to limit results to">
			<s:CheckBox id="typeCheckbox"
						change="filter();" />
			<s:DropDownList id="typesList"
							width="100%"
							dataProvider="{nodeTypes}"
							labelField="name"
							requireSelection="true"
							change="typeCheckbox.selected = true; filter();" />
		</s:HGroup>
		
		<s:HGroup verticalAlign="middle"
				  id="limitByCpuGroup"
				  width="100%"
				  gap="2"
				  toolTip="Limit results to nodes based on CPU speed">
			<s:CheckBox id="cpuCheckbox"
						change="filter();" />
			<s:Label text="CPU >=" />
			<s:DropDownList id="cpuList"
							labelField="name"
							width="100%"
							change="cpuCheckbox.selected = true; filter();"
							requireSelection="true">
				<s:ArrayCollection>
					<fx:Object name="3 Ghz" value="3000" />
					<fx:Object name="2 Ghz" value="2000" />
					<fx:Object name="1 Ghz" value="1000" />
				</s:ArrayCollection>
			</s:DropDownList>
		</s:HGroup>
		
		<s:HGroup verticalAlign="middle"
				  id="limitByRamGroup"
				  width="100%"
				  gap="2"
				  toolTip="Limit results to nodes based on memory size">
			<s:CheckBox id="ramCheckbox"
						change="filter();" />
			<s:Label text="RAM >=" />
			<s:DropDownList id="ramList"
							labelField="name"
							width="100%"
							change="ramCheckbox.selected = true; filter();"
							requireSelection="true">
				<s:ArrayCollection>
					<fx:Object name="12 GB" value="12288" />
					<fx:Object name="8 GB" value="8192" />
					<fx:Object name="4 GB" value="4096" />
					<fx:Object name="2 GB" value="2048" />
				</s:ArrayCollection>
			</s:DropDownList>
		</s:HGroup>
	</s:VGroup>
	
	<s:List width="100%"
			height="100%"
			id="list"
			horizontalScrollPolicy="auto"
			dataProvider="{viewNodes}"
			itemRenderer="com.flack.geni.display.VirtualNodeItemRenderer"
			mouseUp="list_mouseUpHandler(event)" />
	
</s:VGroup>
