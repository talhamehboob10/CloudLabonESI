<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) 2008-2013 University of Utah and the Flux Group.

{{{GENIPUBLIC-LICENSE

GENI Public License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and/or hardware specification (the "Work") to
deal in the Work without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Work, and to permit persons to whom the Work
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Work.

THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
IN THE WORK.

}}}

-->

<!--

VirtualNode for use on the slice canvas

-->

<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="com.flack.shared.display.components.*"
		  toolTip="{link.clientId}"
		  initialize="ensureInside();"
		  gap="4"
		  paddingLeft="0"
		  paddingTop="0"
		  paddingRight="0"
		  paddingBottom="0">
	<fx:Script>
		<![CDATA[
			import com.flack.geni.resources.virt.VirtualComponent;
			import com.flack.geni.resources.virt.VirtualLink;
			import com.flack.geni.resources.virt.VirtualNode;
			import com.flack.shared.utils.ColorUtil;
			import com.flack.shared.utils.ImageUtil;
			import com.flack.shared.utils.NetUtil;
			import com.flack.shared.utils.StringUtil;
			
			import flash.filters.GlowFilter;
			
			public function setFilters(newFilters:Array):void
			{
				linkContainer.filters = newFilters;
			}
			
			[Bindable]
			public var editable:Boolean = true;
			
			public var canvasLink:CanvasLink;
			
			[Bindable]
			public var labelColor:uint;
			[Bindable]
			public var labelBackgroundColor:uint;
			
			[Bindable]
			private var link:VirtualLink;
			public function set Link(newLink:VirtualLink):void
			{
				link = newLink;
				var viewExtra:Boolean = false;
				if(link.Capacity)
				{
					viewExtra = true;
					capacityLabel.text = NetUtil.kbsToString(link.Capacity);
					capacityLabel.visible = capacityLabel.includeInLayout = true;
				}
				else
					capacityLabel.visible = capacityLabel.includeInLayout = false;
				if(link.PacketLoss)
				{
					viewExtra = true;
					packetLossLabel.text = int(link.PacketLoss*100) + "% Loss";
					packetLossLabel.visible = packetLossLabel.includeInLayout = true;
				}
				else
					packetLossLabel.visible = packetLossLabel.includeInLayout = false;
				if(link.Latency)
				{
					viewExtra = true;
					delayLabel.text = link.Latency + " ms";
					delayLabel.visible = delayLabel.includeInLayout = true;
				}
				else
					delayLabel.visible = delayLabel.includeInLayout = false;
				extraGroup.visible = extraGroup.includeInLayout = viewExtra;
				
				if(x == 0 && y == 0 && link.interfaceRefs.length == 0)
				{
					link.flackInfo.x = 0;
					link.flackInfo.y = 0;
					setLocation(-1, -1);
				}
			}
			public function get Link():VirtualLink
			{
				return link;
			}
			
			public function ensureInside(point:Point = null):void
			{
				var newX:Number = point == null ? x : point.x;
				var newY:Number = point == null ? y : point.y;
				// right edge
				if(parentDocument.width > 0 && (x + width) > parentDocument.width)
					newX = parentDocument.width - width;
				// bottom edge
				if(parentDocument.height > 0 && (y + height) > parentDocument.height)
					newY = parentDocument.height - height;
				// left edge
				if(x < 0)
					newX = 0;
				// top edge
				if(y < 0)
					newY = 0;
				move(newX, newY);
			}
			
			override public function move(x:Number, y:Number):void
			{
				if(link != null && link.flackInfo.x != -1)
				{
					// Don't consider moving a change
					//if(x != node.flackInfo.x || y != node.flackInfo.y)
					//	node.unsubmittedChanges = true;
					link.flackInfo.x = x;
					link.flackInfo.y = y;
				}
				if(x > -1 && y > -1)
					super.move(x, y);
			}
			
			public function showInfo(event:MouseEvent = null):void
			{
				if(event != null)
					event.stopImmediatePropagation();
				canvasLink.canvas.host.viewLink(canvasLink.link);
				canvasLink.canvas.hoveredOverItem = this;
			}
			
			public function remove(event:MouseEvent = null):void
			{
				if(event != null)
					event.stopImmediatePropagation();
				canvasLink.canvas.removeCanvasLink(canvasLink);
			}
			
			public function removeFromCanvas():void
			{
				canvasLink.canvas.removeElement(this);
			}
			
			public function setLocation(newX:Number = -1, newY:Number = -1):void
			{
				var finalPoint:Point = new Point(newX, newY);
				if(newX == -1)
					finalPoint.x = Math.round(Math.random() * (parentDocument.width-60));
				if(newY == -1)
					finalPoint.y = Math.round(Math.random() * (parentDocument.height-28));
				
				// Make sure this is within bounds
				ensureInside(finalPoint);
			}
			
			public function get MiddlePoint():Point
			{
				return new Point(MiddleX, MiddleY);
			}
			
			public function get MiddleX():Number
			{
				return x + linkContainer.width/2;
			}
			
			public function get MiddleY():Number
			{
				return y + height/2;
			}
			
			public function get ContainerWidth():Number
			{
				return linkContainer.width;
			}
			
			public function get ContainerHeight():Number
			{
				return linkContainer.height;
			}
			
			protected function bordercontainer1_mouseDownHandler(event:MouseEvent):void
			{
				canvasLink.canvas.draggingItem = canvasLink;
				(canvasLink.canvas as SliceCanvas).setElementIndex(this, canvasLink.canvas.numElements-1);
			}
			
			protected function bordercontainer1_rollOverHandler(event:MouseEvent):void
			{
				linkContainer.filters = [new GlowFilter(0x000000)];
				canvasLink.setFilters([new GlowFilter(0x000000)]);
				canvasLink.canvas.hoveredOverItem = canvasLink;
			}
			
			protected function bordercontainer1_rollOutHandler(event:MouseEvent):void
			{
				linkContainer.filters = [];
				canvasLink.setFilters([]);
				canvasLink.canvas.hoveredOverItem = null;
			}
		]]>
	</fx:Script>
	
	<s:BorderContainer id="linkContainer"
					   buttonMode="true"
					   useHandCursor="true"
					   cornerRadius="14"
					   height="28"
					   borderStyle="solid"
					   borderColor="{labelBackgroundColor}"
					   backgroundColor="{labelBackgroundColor}"
					   mouseDown="bordercontainer1_mouseDownHandler(event)"
					   rollOver="bordercontainer1_rollOverHandler(event)"
					   rollOut="bordercontainer1_rollOutHandler(event)">
		<s:layout>
			<s:HorizontalLayout paddingBottom="0"
								paddingLeft="6"
								paddingRight="6"
								paddingTop="0"
								gap="2"
								verticalAlign="middle" />
		</s:layout>
		<components:ImageButton id="removeButton"
								icon="{ImageUtil.crossIcon}"
								enabled="{editable}"
								click="remove(event)"
								mouseDown="event.stopImmediatePropagation();" />
		<s:Label id="nameLabel"
				 text="{link.clientId}"
				 fontSize="10"
				 height="100%"
				 verticalAlign="middle"
				 textAlign="center"
				 color="{labelColor}"
				 backgroundColor="{labelBackgroundColor}"
				 maxDisplayedLines="1" />
		<components:ImageButton id="infoButton"
								icon="{ImageUtil.infoIcon}"
								click="showInfo(event)" mouseDown="event.stopImmediatePropagation();" />
	</s:BorderContainer>
	<s:VGroup id="extraGroup" gap="2" visible="false" includeInLayout="false">
		<s:Label id="capacityLabel" fontSize="10" visible="false" includeInLayout="false" />
		<s:Label id="packetLossLabel" fontSize="10" visible="false" includeInLayout="false" />
		<s:Label id="delayLabel" fontSize="10" visible="false" includeInLayout="false" />
	</s:VGroup>
</s:HGroup>
