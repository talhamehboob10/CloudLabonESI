<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) 2008-2013 University of Utah and the Flux Group.

{{{GENIPUBLIC-LICENSE

GENI Public License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and/or hardware specification (the "Work") to
deal in the Work without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Work, and to permit persons to whom the Work
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Work.

THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
IN THE WORK.

}}}

-->

<tilemap:TilemapComponent xmlns:fx="http://ns.adobe.com/mxml/2009" 
						  xmlns:s="library://ns.adobe.com/flex/spark" 
						  xmlns:mx="library://ns.adobe.com/flex/mx"
						  xmlns:tilemap="com.mapquest.tilemap.*"
						  implements="com.flack.geni.display.mapping.GeniMap"
						  creationComplete="init()"
						  zoomend="tilemapcomponent1_zoomendHandler(event)"
						  key="Fmjtd%7Cluu22h6yn9%2C7n%3Do5-h02n1"
						  height="100%"
						  width="100%">
	<fx:Script>
		<![CDATA[
			import com.flack.geni.GeniMain;
			import com.flack.geni.display.mapping.GeniMapLink;
			import com.flack.geni.display.mapping.GeniMapNodeMarker;
			import com.flack.geni.display.mapping.LatitudeLongitude;
			import com.flack.geni.display.mapping.LatitudeLongitudeBounds;
			import com.flack.geni.resources.physical.PhysicalLocationCollection;
			import com.mapquest.LatLng;
			import com.mapquest.tilemap.IShape;
			import com.mapquest.tilemap.RectLL;
			import com.mapquest.tilemap.TileMapEvent;
			import com.mapquest.tilemap.controls.inputdevice.MouseWheelZoomControl;
			import com.mapquest.tilemap.controls.shadymeadow.SMLargeZoomControl;
			
			public function init():void
			{
				//set map's center and zoom
				setCenter(new LatLng(38,-97),4);
				
				//add controls
				addControl(new SMLargeZoomControl);
				//addControl(new SMViewControl);
				addControl(new MouseWheelZoomControl);
			}
			
			public function get Ready():Boolean
			{
				return initialized;
			}
			
			public function panToPoint(center:LatitudeLongitude):void
			{
				super.panToLatLng(new LatLng(center.latitude, center.longitude));
			}
			
			public function getZoomLevel():Number
			{
				return zoomLevel;
			}
			
			public function zoomToFit(bounds:LatitudeLongitudeBounds):void
			{
				super.zoomToRect(new RectLL(new LatLng(bounds.north, bounds.west), new LatLng(bounds.south, bounds.east)));
			}
			
			public function clearAllOverlays():void
			{
				removeShapes();
			}
			
			public function getNewNodeMarker(newLocations:PhysicalLocationCollection, newNodes:*):GeniMapNodeMarker
			{
				return new MapquestMapNodeMarker(newLocations, newNodes);
			}
			
			public function getNewLink(connectedNodes:Vector.<GeniMapNodeMarker>):GeniMapLink
			{
				return new MapquestMapLink(connectedNodes);
			}
			
			public function addNodeMarker(marker:GeniMapNodeMarker):void
			{
				addShape(marker as IShape);
			}
			
			public function addLink(temp:GeniMapLink):void
			{
				var link:MapquestMapLink = temp as MapquestMapLink;
				link.generateLabels();
				addShape(link.polyline);
				//for each(var addNewLabel:GoogleTooltipOverlay in link.labels)
				//	addOverlay(addNewLabel);
			}
			
			public function removeNodeMarker(marker:GeniMapNodeMarker):void
			{
				removeShape(marker as IShape);
			}
			
			public function removeLink(geniLink:GeniMapLink):void
			{
				var link:MapquestMapLink = geniLink as MapquestMapLink;
				removeShape(link.polyline);
				/*
				for each(var l:GoogleTooltipOverlay in link.labels)
				{
					removeOverlay(l);
					l.destroy();
				}
				*/
			}
			
			protected function tilemapcomponent1_zoomendHandler(event:TileMapEvent):void
			{
				GeniMain.mapper.drawMap();
			}
			
		]]>
	</fx:Script>
</tilemap:TilemapComponent>
