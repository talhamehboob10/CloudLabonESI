<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) 2008-2013 University of Utah and the Flux Group.

{{{GENIPUBLIC-LICENSE

GENI Public License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and/or hardware specification (the "Work") to
deal in the Work without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Work, and to permit persons to whom the Work
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Work.

THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
IN THE WORK.

}}}

-->

<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="com.flack.shared.display.components.*"
		  xmlns:display="com.flack.geni.display.*"
		  width="100%"
		  gap="2"
		  maxHeight="240"
		  creationComplete="init()"
		  remove="destroy()">
	<fx:Declarations>
		<s:RadioButtonGroup id="sliceRadiogroup" change="sliceSelected(event)" />
	</fx:Declarations>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace components "com.geni.view.components.*";
		
		.authenticatedStyle {
			chromeColor: #33FF33;
			color: 006600;
		}
		
		.unauthenticatedStyle {
			chromeColor: #F08080;
			color: #990000;
		}
		
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import com.flack.geni.GeniMain;
			import com.flack.geni.display.areas.GeniUserArea;
			import com.flack.geni.display.areas.SliceArea;
			import com.flack.geni.resources.sites.GeniAuthority;
			import com.flack.geni.resources.virt.Slice;
			import com.flack.geni.tasks.groups.GetUserTaskGroup;
			import com.flack.shared.FlackEvent;
			import com.flack.shared.SharedMain;
			import com.flack.shared.display.components.ImageButton;
			import com.flack.shared.utils.ImageUtil;
			
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			
			public function init():void
			{
				SharedMain.sharedDispatcher.addEventListener(FlackEvent.CHANGED_SLICES, tryUpdateSlices);
				SharedMain.sharedDispatcher.addEventListener(FlackEvent.CHANGED_SLICE, tryUpdateSlices);
				SharedMain.sharedDispatcher.addEventListener(FlackEvent.CHANGED_USER, tryUpdateUser);
			}
			
			public function destroy():void
			{
				SharedMain.sharedDispatcher.removeEventListener(FlackEvent.CHANGED_SLICES, tryUpdateSlices);
				SharedMain.sharedDispatcher.removeEventListener(FlackEvent.CHANGED_SLICE, tryUpdateSlices);
				SharedMain.sharedDispatcher.removeEventListener(FlackEvent.CHANGED_USER, tryUpdateUser);
			}
			
			public function tryUpdateUser(e:FlackEvent = null):void
			{
				if(userButton.styleName != "authenticatedStyle"
					&& GeniMain.geniUniverse.user.CertificateSetUp
					&& (GeniMain.geniUniverse.user.HasCredential || (GeniMain.geniUniverse.user.authority != null && GeniMain.geniUniverse.user.authority.type == GeniAuthority.TYPE_EMULAB)))
				{
					userButton.label = GeniMain.geniUniverse.user.id.name;
					userButton.toolTip = "View and edit user";
					userButton.setStyle("icon", ImageUtil.userIcon);
					userButton.styleName = "authenticatedStyle";
				}
			}
			
			public function openUser():void
			{
				if(!(GeniMain.geniUniverse.user.CertificateSetUp && (GeniMain.geniUniverse.user.HasCredential || (GeniMain.geniUniverse.user.authority != null && GeniMain.geniUniverse.user.authority.type == GeniAuthority.TYPE_EMULAB))))
					GeniMain.geniUniverse.login();
				else
					FlexGlobals.topLevelApplication.viewContent(new GeniUserArea());
			}
			
			public function tryUpdateSlices(e:FlackEvent):void
			{
				userItems.removeAllElements();
				for each(var s:Slice in GeniMain.geniUniverse.user.slices.collection)
				{
					var newSliceItem:SliceItem = new SliceItem();
					newSliceItem.slice = s;
					newSliceItem.radioGroup = sliceRadiogroup;
					newSliceItem.showCheckbox = mineOnlyCheckbox;
					userItems.addElement(newSliceItem);
				}
				
				if(e.changedObject != null
					&& e.changedObject is Slice
					&& e.action == FlackEvent.ACTION_NEW)
				{
					var sliceArea:SliceArea = new SliceArea();
					FlexGlobals.topLevelApplication.viewContent(sliceArea);
					sliceArea.slice = e.changedObject as Slice;
					//DisplayUtil.viewSlice(e.changedObject as Slice);
				}
			}
			
			private var selectedSlice:Slice = null;
			public function sliceSelected(e:Event):void
			{
				if(sliceRadiogroup.selection == allUserResourcesRadiobutton)
					selectedSlice = null;
				else
					selectedSlice = sliceRadiogroup.selectedValue as Slice;
				GeniMain.mapper.changeUserResources(true, selectedSlice);
			}
			
			public function tryReloadUser():void
			{
				if(SharedMain.tasker.tasks.AllNotFinished.getOfClass(GetUserTaskGroup).length > 0)
				{
					Alert.show("There is already a task running or waiting to run to load user information");
					return;
				}
				var reloadUser:GetUserTaskGroup = new GetUserTaskGroup(GeniMain.geniUniverse.user);
				reloadUser.forceRunNow = true;
				reloadUser.forceSerial = false;
				SharedMain.tasker.add(reloadUser);
			}
			
		]]>
	</fx:Script>
	<s:Button id="userButton"
			  icon="{ImageUtil.noUserIcon}"
			  styleName="unauthenticatedStyle"
			  width="100%"
			  label="Log in"
			  toolTip="Log in to access user data"
			  click="openUser()" />
	<components:DefaultLine percentWidth="100"
							lineThickness="2" />
	<s:HGroup width="100%"
			  verticalAlign="middle"
			  gap="2">
		<components:ImageButton icon="{ImageUtil.refreshIcon}"
								enabled="{sliceCreateGroup.enabled}"
								toolTip="Reload user information and slices"
								click="tryReloadUser()" />
		<s:Label text="Slices"
				 fontSize="14"
				 width="100%"
				 fontWeight="bold" />
		<display:CreateSliceControl id="sliceCreateGroup"
									enabled="false" />
	</s:HGroup>
	
	<s:Button id="listButton"
			  width="100%" chromeColor="0x27C427"
			  height="32"
			  visible="{GeniMain.viewList}"
			  includeInLayout="{GeniMain.viewList}"
			  label="Tutorial examples" />
	
	<s:CheckBox id="mineOnlyCheckbox"
				enabled="{sliceCreateGroup.enabled}"
				selected="false"
				label="Show"
				toolTip="Show only user resources on the map"
				valueCommit="GeniMain.mapper.changeUserResources(mineOnlyCheckbox.selected, selectedSlice);" />
	<s:RadioButton id="allUserResourcesRadiobutton"
				   enabled="{mineOnlyCheckbox.selected}"
				   group="{sliceRadiogroup}"
				   label="All"
				   toolTip="View all user resources"
				   selected="true" />
	<s:Scroller height="100%" width="100%">
		<s:VGroup width="100%"
				  id="userItems"
				  gap="2"
				  paddingRight="2" />
	</s:Scroller>
	
</s:VGroup>
