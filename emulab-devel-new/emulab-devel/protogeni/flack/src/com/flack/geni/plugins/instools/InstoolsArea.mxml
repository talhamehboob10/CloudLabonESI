<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) 2008-2013 University of Utah and the Flux Group.
Copyright (c) 2011-2012 University of Kentucky.

{{{GENIPUBLIC-LICENSE

GENI Public License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and/or hardware specification (the "Work") to
deal in the Work without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Work, and to permit persons to whom the Work
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Work.

THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
IN THE WORK.

}}}

-->

<plugins:PluginArea xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx"
					xmlns:plugins="com.flack.geni.plugins.*"
					Title="INSTOOLS"
					initialize="init()"
					remove="destroy()">
	<fx:Declarations>
		<s:RadioButtonGroup id="mcTypeGroup" />
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.flack.geni.resources.virt.AggregateSliver;
			import com.flack.geni.resources.virt.Sliver;
			import com.flack.shared.FlackEvent;
			import com.flack.shared.SharedMain;
			import com.flack.shared.utils.ImageUtil;
			import com.flack.shared.utils.NetUtil;
			
			public function init():void
			{
				SharedMain.sharedDispatcher.addEventListener(FlackEvent.CHANGED_SLICE, tryUpdate);
				update();
			}
			
			public function destroy():void
			{
				SharedMain.sharedDispatcher.removeEventListener(FlackEvent.CHANGED_SLICE, tryUpdate);
			}
			
			public function tryUpdate(e:FlackEvent):void
			{
				if(e.changedObject == slice)
				{
					update();
				}
			}
			
			public function update():void
			{
				// Allow instrumentize if slice is ready
				//HACK
				var status:String = slice.OperationalState;
				switch(status)
				{
					case Sliver.OPERATIONAL_READY:
						instrumentizeButton.enabled = true;
						break;
					default:
						instrumentizeButton.enabled = false;
				}
				
				// Allow portal if ready
				var details:SliceInstoolsDetails = Instools.instrumentizeDetails[slice.id.full];
				gotoPortalButton.enabled = details != null && details.hasAnyPortal();
			}
			
			// enable instrumentize after slice is created
			//  - check OS?
			//  - check manager?
			
			// successfully instrumentized w/portal, show button
			
			public function tryInstrumentize():void
			{
				var useStableINSTOOLS:Boolean;
				if (versionINSTOOLSDropdownlist.selectedItem == "Stable")
					useStableINSTOOLS = true;
				else
					useStableINSTOOLS = false;
				Instools.instrumentizeSlice(slice, true, versionDropdownlist.selectedItem, useVirtualMcsRadiobutton.selected, false, useStableINSTOOLS);
				host.dashboardViewstack.selectedChild = host.sliceView;
			}
		]]>
	</fx:Script>
	
	<s:Button id="tutorialButton"
			  width="100%"
			  height="32"
			  label="Read Tutorial"
			  toolTip="Read the tutorial about how to use INSTOOLS"
			  icon="{ImageUtil.helpIcon}"
			  click="NetUtil.openWebsite('http://www.netlab.uky.edu/p/instools/')" />
	
	<s:Rect />
	
	<s:Button id="instrumentizeButton"
			  width="100%"
			  height="32"
			  label="Instrumentize"
			  enabled="false"
			  toolTip="Instrumentize experiment with INSTOOLS"
			  icon="{ImageUtil.lightningIcon}"
			  click="tryInstrumentize()" />
	
	<s:VGroup width="100%">
		<s:HGroup width="100%" verticalAlign="middle">
			<s:Label text="INSTOOLS APIv" />
			<s:DropDownList id="versionDropdownlist" width="100%" requireSelection="true">
				<s:ArrayCollection>
					<!-- <fx:Number>1</fx:Number> -->
					<fx:Number>2</fx:Number>
				</s:ArrayCollection>
			</s:DropDownList>
		</s:HGroup>
		<s:HGroup width="100%" verticalAlign="middle">
			<s:Label text="INSTOOLSv" />
			<s:DropDownList id="versionINSTOOLSDropdownlist" width="100%" requireSelection="true">
				<s:ArrayCollection>
					<fx:String>Stable</fx:String>
					<fx:String>Devel</fx:String>
				</s:ArrayCollection>
			</s:DropDownList>
		</s:HGroup>
		<s:HGroup width="100%" verticalAlign="middle">
			<s:RadioButton id="useVirtualMcsRadiobutton" label="Virtual MCs" selected="true" />
			<s:RadioButton id="useRawMcsRadiobutton" label="Raw MCs" />
		</s:HGroup>
		
	</s:VGroup>
	
	<s:Rect />
	
	<s:Button id="gotoPortalButton"
			  width="100%"
			  height="32"
			  label="Go to portal"
			  enabled="false"
			  toolTip="Go to portal to see instrumentized data"
			  icon="{ImageUtil.barchartIcon}"
			  click="Instools.goToPortal(slice)" />
	
</plugins:PluginArea>
