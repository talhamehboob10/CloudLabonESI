<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) 2008-2013 University of Utah and the Flux Group.

{{{GENIPUBLIC-LICENSE

GENI Public License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and/or hardware specification (the "Work") to
deal in the Work without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Work, and to permit persons to whom the Work
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Work.

THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
IN THE WORK.

}}}

-->

<areas1:AreaContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="com.flack.shared.display.components.*"
		  xmlns:display="com.flack.geni.display.*"
		  xmlns:areas="com.flack.geni.display.areas.*"
		  xmlns:slicer="com.flack.geni.display.slicer.*"
		  xmlns:areas1="com.flack.shared.display.areas.*"
		  creationComplete="init()"
		  paddingBottom="2"
		  title="{_slice.Name}">
	<fx:Declarations>
		<s:RadioButtonGroup id="componentsAreaTypeGroup" change="componentsAreaTypeGroup_changeHandler(event)" />
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.flack.geni.GeniMain;
			import com.flack.geni.display.DisplayUtil;
			import com.flack.geni.display.slicer.IComponentsArea;
			import com.flack.geni.display.slicer.ImportSliceWindow;
			import com.flack.geni.display.slicer.graphview.SliceCanvas;
			import com.flack.geni.display.slicer.listview.SliceList;
			import com.flack.geni.plugins.Plugin;
			import com.flack.geni.plugins.PluginArea;
			import com.flack.geni.resources.sites.GeniManager;
			import com.flack.geni.resources.sites.GeniManagerCollection;
			import com.flack.geni.resources.virt.AggregateSliver;
			import com.flack.geni.resources.virt.AggregateSliverCollection;
			import com.flack.geni.resources.virt.Slice;
			import com.flack.geni.resources.virt.SliceCollection;
			import com.flack.geni.resources.virt.Sliver;
			import com.flack.geni.resources.virt.VirtualLink;
			import com.flack.geni.resources.virt.VirtualNode;
			import com.flack.geni.resources.virt.extensions.SliceFlackInfo;
			import com.flack.geni.tasks.groups.slice.DeleteAggregateSliversTaskGroup;
			import com.flack.geni.tasks.groups.slice.DescribeSlicesTaskGroup;
			import com.flack.geni.tasks.groups.slice.ImportSliceTaskGroup;
			import com.flack.geni.tasks.groups.slice.RefreshSliceStatusTaskGroup;
			import com.flack.geni.tasks.groups.slice.RenewSliceTaskGroup;
			import com.flack.geni.tasks.groups.slice.RestartSliceTaskGroup;
			import com.flack.geni.tasks.groups.slice.RevertToManifestsTaskGroup;
			import com.flack.geni.tasks.groups.slice.StartSliceTaskGroup;
			import com.flack.geni.tasks.groups.slice.StopSliceTaskGroup;
			import com.flack.geni.tasks.groups.slice.SubmitSliceTaskGroup;
			import com.flack.geni.tasks.process.GenerateNsTask;
			import com.flack.geni.tasks.process.GenerateRequestManifestTask;
			import com.flack.shared.FlackEvent;
			import com.flack.shared.SharedMain;
			import com.flack.shared.display.areas.DocumentArea;
			import com.flack.shared.display.areas.DocumentsArea;
			import com.flack.shared.display.areas.LogMessagesRelatedToArea;
			import com.flack.shared.display.windows.TextInputWindow;
			import com.flack.shared.resources.docs.RspecVersion;
			import com.flack.shared.resources.docs.RspecVersionCollection;
			import com.flack.shared.resources.sites.FlackManager;
			import com.flack.shared.tasks.Task;
			import com.flack.shared.tasks.TaskCollection;
			import com.flack.shared.tasks.TaskEvent;
			import com.flack.shared.tasks.file.FileTask;
			import com.flack.shared.tasks.http.HttpTask;
			import com.flack.shared.utils.DateUtil;
			import com.flack.shared.utils.ImageUtil;
			import com.flack.shared.utils.ViewUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.IVisualElement;
			import mx.events.CloseEvent;
			
			import spark.components.Button;
			import spark.primitives.Rect;
			
			public function get ComponentsArea():IComponentsArea
			{
				if(sliceComponentsArea != null && sliceComponentsArea.numElements == 1)
					return sliceComponentsArea.getElementAt(0) as IComponentsArea;
				else
					return null;
			}
			
			override public function get PendingChanges():Boolean
			{
				if(_slice != null)
					return _slice.UnsubmittedChanges;
				else
					return false;
			}
			
			[Bindable]
			private var usableRspecVersions:ArrayCollection;
			
			[Bindable] 
			public var importMenuData:Array = [
				{
					label: "Import from file",
					icon: ImageUtil.openIcon,
					action: importFromFile
				},
				{
					label: "Import from clipboard",
					icon: ImageUtil.pasteIcon,
					action: importFromClipboard
				}, 
				{
					label: "Import from the web",
					icon: ImageUtil.worldIcon,
					action: importFromWeb
				}, 
				{
					label: "Import from example",
					icon: ImageUtil.extensionsIcon,
					action: importFromExample
				}
			];
			
			[Bindable] 
			public var deleteMenuData:Array = [
				{
					label: "Delete at used managers",
					icon: ImageUtil.deleteIcon,
					action: deleteSlice
				},
				{
					label: "Delete everywhere",
					icon: ImageUtil.deleteIcon,
					action: deleteSliceEverywhere
				}
			];
			
			[Bindable] 
			public var sliceMenuData:Array = [
				{
					label: "Preview request document(s)",
					icon: ImageUtil.previewIcon,
					action: previewRspec
				},
				{
					label: "Original request document(s)",
					icon: ImageUtil.previewIcon,
					action: viewOriginalRspec
				}, 
				{
					label: "Manifest document(s)",
					icon: ImageUtil.manifestIcon,
					action: viewManifests
				}, 
				{
					label: "SSH Keys & Collaborators",
					icon: ImageUtil.keyIcon,
					action: viewKeys
				},
				{
					label: "Logs",
					icon: ImageUtil.consoleIcon,
					action: viewLogs
				}, 
				{
					label: "Logins",
					icon: ImageUtil.hostnameIcon,
					action: viewLogin
				}, 
				{
					label: "Credential",
					icon: ImageUtil.credentialIcon,
					action: viewCredential
				}
			];
			
			[Bindable]
			private var _slice:Slice;
			public function set slice(value:Slice):void
			{
				_slice = value;
				if(initialized)
				{
					if(ComponentsArea == null || ComponentsArea.SliceEditing == null)
						loadComponentsAreaFor(_slice);
					if(Sliver.isAllocated(_slice.AllocationState))
						dashboardViewstack.selectedChild = sliceView;
					updateSliceHistory();
					
					updateSliceChanging();
					updateSliceVersion();
				}
			}
			public function get slice():Slice
			{
				return _slice;
			}
			
			private var _timer:Timer;
			public function onTimer(event:TimerEvent):void
			{
				updateSliversExpires();
			}
			public function initTimer():void
			{
				_timer = new Timer(1000);
				_timer.addEventListener(TimerEvent.TIMER, onTimer);
				_timer.start();
			}
			public function destroyTimer():void
			{
				if(_timer != null)
				{
					_timer.reset();
					_timer.removeEventListener(TimerEvent.TIMER, onTimer);
					_timer = null;
				}
			}
			
			public function loadComponentsAreaFor(s:Slice):void
			{
				var currentArea:IComponentsArea = ComponentsArea;
				if(s.flackInfo.view == SliceFlackInfo.VIEW_GRAPH)
				{
					graphRadiobutton.selected = true;
					if(currentArea == null || !(currentArea is SliceCanvas))
					{
						currentArea = new SliceCanvas();
						(currentArea as SliceCanvas).host = this;
						sliceComponentsArea.removeAllElements();
						sliceComponentsArea.addElement(currentArea as IVisualElement);
					}
				}
				else
				{
					listRadiobutton.selected = true;
					if(currentArea == null || !(currentArea is SliceList))
					{
						currentArea = new SliceList();
						(currentArea as SliceList).host = this;
						sliceComponentsArea.removeAllElements();
						sliceComponentsArea.addElement(currentArea as IVisualElement);
					}
				}
				sliceComponentsArea.validateNow();
				currentArea.load(_slice);
			}
			
			[Bindable]
			public var plugins:ArrayCollection;
			
			public function init():void
			{
				usableRspecVersions = new ArrayCollection();
				for each(var v:RspecVersion in GeniMain.usableRspecVersions.collection)
					usableRspecVersions.addItem(v);
				plugins = new ArrayCollection();
				for each(var plugin:Plugin in GeniMain.plugins)
				{
					var pluginArea:PluginArea = plugin.Area;
					if(pluginArea != null)
					{
						pluginArea.HostSlice = _slice;
						pluginArea.host = this;
						plugins.addItem(pluginArea);
					}
				}
				if(_slice != null)
				{
					loadComponentsAreaFor(_slice);
					if(Sliver.isAllocated(_slice.AllocationState))
						dashboardViewstack.selectedChild = sliceView;
					updateSliceChanging();
					updateSliceHistory();
					updateSliceVersion();
				}
				SharedMain.tasker.addEventListener(TaskEvent.CHILD_FINISHED, updateSliceChanging);
				SharedMain.tasker.addEventListener(TaskEvent.CHILD_STARTED, updateSliceChanging);
				SharedMain.sharedDispatcher.addEventListener(FlackEvent.CHANGED_SLICE, sliceChanged);
			}
			
			override public function initEvents():void
			{
				initTimer();
			}
			
			override public function removeEvents():void
			{
				destroyTimer();
			}
			
			public function sliceChanged(e:FlackEvent):void
			{
				var changedSlice:Slice = e.changedObject as Slice;
				if(_slice == changedSlice)
					updateSlice();
			}
			
			public function updateSliceChanging(e:TaskEvent = null):void
			{
				var tasksNotFinished:TaskCollection = SharedMain.tasker.tasks.AllNotFinished;
				var stillWorking:Boolean = tasksNotFinished.getRelatedTo(_slice).length > 0;
				if(!stillWorking && spinner.visible)
				{
					spinner.visible = false;
					spinner.stopSpin();
					importMenuButton.enabled = true;
					clearCanvasButton.enabled = true;
					cloneButton.enabled = true;
					submitButton.enabled = true;
					ComponentsArea.toggleEditable(true);
				}
				else if(stillWorking && !spinner.visible)
				{
					spinner.visible = true;
					spinner.startSpin();
					importMenuButton.enabled = false;
					clearCanvasButton.enabled = false;
					cloneButton.enabled = false;
					submitButton.enabled = false;
					ComponentsArea.toggleEditable(false);
				}
				updateSliceHistory();
			}
			
			public function updateSlice():void
			{
				if(ComponentsArea != null)
					ComponentsArea.updateInterface();
				var workingSliceTasks:TaskCollection = SharedMain.tasker.tasks.AllNotFinished.getRelatedTo(_slice);
				if(workingSliceTasks.length > 0 && dashboardViewstack.selectedChild != sliceView)
				{
					if(workingSliceTasks.getOfClass(DescribeSlicesTaskGroup).length == 0 || Sliver.isAllocated(_slice.AllocationState))
					{
//						dashboardViewstack.selectedChild = sliceView;
						validateNow();
					}
				}
				updateSliversInfo();
				updateSliceHistory();
				updateSliceVersion();
			}
			
			public function updateSliceVersion():void
			{
				usableRspecVersions = new ArrayCollection();
				var possibleRspecVersions:RspecVersionCollection = new RspecVersionCollection();
				var usedManagers:GeniManagerCollection = _slice.nodes.Managers;
				var first:Boolean = true;
				for each(var usedManager:GeniManager in usedManagers.collection)
				{
					if(first)
					{
						for each(var usedManagerVersion:RspecVersion in usedManager.inputRspecVersions.collection)
						{
							var possibleRspecVersion:RspecVersion = GeniMain.usableRspecVersions.get(usedManagerVersion.type, usedManagerVersion.version);
							if(possibleRspecVersion != null && !usableRspecVersions.contains(possibleRspecVersion))
								usableRspecVersions.addItem(possibleRspecVersion);
						}
						first = false;
					}
					else
					{
						for (var i:int = 0; i < usableRspecVersions.length; i++)
						{
							var existing:RspecVersion = usableRspecVersions.getItemAt(i) as RspecVersion;
							if(usedManager.inputRspecVersions.get(existing.type, existing.version) == null)
							{
								usableRspecVersions.removeItemAt(i);
								i--;
							}
						}
					}
				}
				
				if(_slice != null && _slice.useInputRspecInfo != null)
					outputRspecDropdownlist.selectedItem = GeniMain.usableRspecVersions.get(_slice.useInputRspecInfo.type, _slice.useInputRspecInfo.version);
				else
					outputRspecDropdownlist.selectedItem = GeniMain.usableRspecVersions.MaxVersion;
			}
			
			public function updateSliceHistory():void
			{
				undoButton.enabled = !spinner.visible && _slice.CanGoBack;
				redoButton.enabled = !spinner.visible && _slice.CanGoForward;
				
				undoButton.toolTip = "Undo"
				if(undoButton.enabled)
				{
					if(_slice.history.stateName.length > 0)
						undoButton.toolTip += " ("+_slice.history.stateName+")";
				}
				
				redoButton.toolTip = "Redo";
				if(redoButton.enabled)
					redoButton.toolTip += " ("+_slice.history.states[_slice.history.backIndex+1].note+")";
			}
			
			public function updateSliversInfo():void
			{
				// Make sure the slivers info area has been drawn.
				if(expiresLabel != null)
				{
					startSliceButton.enabled  = Sliver.isAllocated(_slice.AllocationState);
					refreshStatusButton.enabled = Sliver.isAllocated(_slice.AllocationState);
					
					updateSliversExpires()
				}
			}
			
			public function updateSliversExpires():void
			{
				// Make sure the slivers info area has been drawn.
				if(expiresLabel != null)
				{
					if(_slice != null && slice.expires != null)
					{
						var hoursRemaining:uint = (_slice.EarliestExpiration.time - (new Date()).time)/3600000;
						if(hoursRemaining < 1)
							expiresLabel.styleName = "failedStyle";
						else if(hoursRemaining < 3)
							expiresLabel.styleName = "inprogressStyle";
						else
							expiresLabel.styleName = "validStyle";
						expiresLabel.text = DateUtil.getTimeUntil(_slice.EarliestExpiration, true);
						renewSliceButton.enabled = true;
						renewLengthDropdownlist.enabled = true;
					}
					else
					{
						expiresLabel.text = "";
						expiresLabel.styleName = "unknownStyle";
						renewSliceButton.enabled = false;
						renewLengthDropdownlist.enabled = false;
					}
				}
			}
			
			override public function cancelPendingChanges():void
			{
				var revert:RevertToManifestsTaskGroup = new RevertToManifestsTaskGroup(slice);
				revert.forceRunNow = true;
				SharedMain.tasker.add(revert);
			}
			
			// Side bar
			
			public function submitSlice():void
			{
				if(SliceWorking)
					return;
				if(slice.nodes.length == 0)
				{
					Alert.show(
						"There are no resources to allocate. Add resources and then try again.",
						"Cannot allocate"
					);
					return;
				}
				if(!slice.UnsubmittedChanges)
				{
					Alert.show(
						"There are no changes to the slice to submit.",
						"No changes"
					);
					return;
				}
				// if slice task is happenning, wait...
				if(GeniMain.geniUniverse.user.keys.length == 0)
				{
					Alert.show(
						"You don't have any public keys to use when logging in to your nodes.  Would you like to add any public keys?",
						"No public keys",
						Alert.YES|Alert.NO|Alert.CANCEL,
						FlexGlobals.topLevelApplication as Sprite,
						function choiceHandler(event:CloseEvent):void
						{
							if(event.detail == Alert.YES)
								DisplayUtil.viewUser();
							else if(event.detail == Alert.NO)
								trySubmitSlice();
						});
					return;
				}
				
				trySubmitSlice();
			}
			
			public function trySubmitSlice():void
			{
				if(ComponentsArea != null)
					ComponentsArea.clearStatus();
				dashboardViewstack.selectedChild = sliceView;
				SharedMain.tasker.add(new SubmitSliceTaskGroup(slice));
			}
			
			public function regetSlice():void
			{
				Alert.show(
					"Do you want to clear the canvas and refetch manifests for this slice?",
					"Reload slice?",
					Alert.YES|Alert.NO,
					this,
					function afterDecision(e:CloseEvent):void
					{
						if(e.detail == Alert.YES)
							tryRegetSlice();
					}
				);
			}
			
			public function tryRegetSlice():void
			{
				clearSlice();
				var sliceCollection:SliceCollection = new SliceCollection();
				sliceCollection.add(slice);
				SharedMain.tasker.add(new DescribeSlicesTaskGroup(sliceCollection, true));
			}
			
			// Slice canvas options
			
			public function tryClearSlice():void
			{
				if(slice.nodes.length > 0)
				{
					Alert.show(
						"Do you really want to clear the slice?",
						"Confirm clear",
						Alert.YES|Alert.CANCEL,
						this,
						function clearSliceDecision(e:CloseEvent):void
						{
							if(e.detail == Alert.YES)
								clearSlice();
						}
					);
				}
			}
			
			public function clearSlice():void
			{
				slice.removeComponents();
				slice.aggregateSlivers.cleanup();
				slice.history.clear();
				if(ComponentsArea != null)
					ComponentsArea.clear();
				if(sliversPane != null)
					sliversPane.clear();
				SharedMain.sharedDispatcher.dispatchChanged(
					FlackEvent.CHANGED_SLICE,
					slice
				);
				//updateSlice();
				//updateSliversInfo();
			}
			
			public function importFromExample(event:* = null):void
			{
				if(SliceWorking)
					return;
				
				var examplesArea:ExampleSlicesArea = new ExampleSlicesArea();
				examplesArea.slice = _slice;
				ViewUtil.viewContentInWindow(examplesArea);
			}
			
			public function importFromClipboard(event:* = null):void
			{
				if(SliceWorking)
					return;
				
				var importWindow:ImportSliceWindow = new ImportSliceWindow();
				importWindow.slice = slice;
				importWindow.showWindow();
			}
			
			public function importFromFile(event:* = null):void
			{
				if(SliceWorking)
					return;
				
				var importFile:FileTask = new FileTask();
				importFile.addEventListener(TaskEvent.FINISHED, tryImportFromFile);
				importFile.startOperation(event);
			}
			
			public function tryImportFromFile(event:TaskEvent):void
			{
				if(event.task.Status == Task.STATUS_SUCCESS)
					importFromString(event.task.data);
			}
			
			public function importFromWeb(event:* = null):void
			{
				if(SliceWorking)
					return;
				
				var getUrlWindow:TextInputWindow = new TextInputWindow();
				getUrlWindow.title = "Please enter the full URL for the RSPEC";
				getUrlWindow.Text = "http://";
				getUrlWindow.showWindow(true);
				getUrlWindow.onSuccess = tryImportFromWeb;
			}
			
			public function tryImportFromWeb(url:String = ""):void
			{
				if(url.length == 0)
					importFromWeb();
				else
				{
					var importRspec:HttpTask = new HttpTask(url, "Import RSPEC from URL", "Imports a RSPEC from file");
					importRspec.addEventListener(TaskEvent.FINISHED, finishedDownloadingRspec);
					importRspec.start();
				}
			}
			
			public function finishedDownloadingRspec(finishedEvent:TaskEvent):void
			{
				if(finishedEvent.task.Status == Task.STATUS_SUCCESS)
					importFromString(finishedEvent.task.data);
			}
			
			public function importFromString(rspec:String):void
			{
				var importRspec:ImportSliceTaskGroup = new ImportSliceTaskGroup(
					slice,
					rspec,
					null,
					true
				);
				importRspec.start();
			}
			
			public function tryCloneSelected():void
			{
				if(ComponentsArea != null)
				{
					if(ComponentsArea.SelectedNode != null)
					{
						cloneSelected();
					}
					else
						Alert.show(
							"You must select a node to create a clone",
							"No node selected"
						);
				}
			}
			
			public function cloneSelected():void
			{
				if(ComponentsArea != null && ComponentsArea.SelectedNode != null)
				{
					slice.pushState();
					
					slice.history.stateName = "Cloned " + ComponentsArea.SelectedNode.clientId;
					
					slice.nodes.add(ComponentsArea.SelectedNode.UnboundCloneFor(_slice));
					ComponentsArea.updateInterface();
					
					// Make sure everyone knows the slice history changed
					SharedMain.sharedDispatcher.dispatchChanged(
						FlackEvent.CHANGED_SLICE,
						slice
					);
				}
			}
			
			// Preview the RSPEC that would be sent if the changes were submitted.
			public function previewRspec(event:* = null):void
			{
				var previewArea:DocumentsArea = new DocumentsArea();
				previewArea.title = "Preview Request RSPEC for " + slice.Name;
				_slice.ensureSliversExist();
				var createSliceRspec:GenerateRequestManifestTask = new GenerateRequestManifestTask(slice, true, false, false);
				createSliceRspec.start();
				previewArea.addDocument("Unified Request RSPEC", createSliceRspec.resultRspec.document);
				
				for each(var sliver:AggregateSliver in _slice.aggregateSlivers.collection)
				{
					var createSliverNs:GenerateNsTask = new GenerateNsTask(sliver);
					createSliverNs.start();
					previewArea.addDocument("NS for " + sliver.manager.hrn, createSliverNs.nsDocument);
				}
				
				previewArea.backgroundColor = backgroundColor;
				previewArea.titleColor = titleColor;
				openNext(previewArea);
			}
			
			// Not really for viewing manifests, but viewing the request as it was originally sent. For example,
			// a node that was bound but originally unbound will be output as unbound.
			public function viewOriginalRspec(event:* = null):void
			{
				if(!Sliver.isAllocated(_slice.AllocationState))
				{
					previewRspec();
					Alert.show("The slice hasn't been submitted yet, showing you the preview RSPEC.");
					return;
				}
				var previewArea:DocumentsArea = new DocumentsArea();
				previewArea.title = "Original Request RSPEC for " + slice.Name;
				_slice.ensureSliversExist();
				var createSliceRspec:GenerateRequestManifestTask = new GenerateRequestManifestTask(slice, false, false, false, true);
				createSliceRspec.start();
				previewArea.addDocument("Unified Request RSPEC", createSliceRspec.resultRspec.document);
				
				for each(var sliver:AggregateSliver in _slice.aggregateSlivers.collection)
				{
					var createSliverNs:GenerateNsTask = new GenerateNsTask(sliver);
					createSliverNs.start();
					previewArea.addDocument("NS for " + sliver.manager.hrn, createSliverNs.nsDocument);
				}
				
				previewArea.backgroundColor = backgroundColor;
				previewArea.titleColor = titleColor;
				openNext(previewArea);
			}
			
			public function viewCredential(event:* = null):void
			{
				var credentialArea:DocumentArea = new DocumentArea();
				credentialArea.Document = slice.credential.Raw;
				credentialArea.title =  "Credential for " + slice.Name;
				credentialArea.backgroundColor = backgroundColor;
				credentialArea.titleColor = titleColor;
				openNext(credentialArea);
			}
			
			public function viewManifests(event:* = null):void
			{
				if(!Sliver.isAllocated(_slice.AllocationState))
				{
					previewRspec();
					Alert.show("The slice hasn't been submitted yet");
					return;
				}
				
				var manifestsArea:DocumentsArea = new DocumentsArea();
				manifestsArea.title = "Last valid manifest RSPEC(s) for: " + slice.hrn;
				
				for each(var s:AggregateSliver in slice.aggregateSlivers.collection)
					manifestsArea.addDocument(s.manager.hrn, Sliver.isAllocated(s.AllocationState) ? s.manifest.document : "No manifest");
				
				openNext(manifestsArea);
			}
			
			public function viewLogs(event:* = null):void
			{
				var logArea:LogMessagesRelatedToArea = new LogMessagesRelatedToArea();
				logArea.RelatedTo = [slice];
				logArea.title = "Logs for " + slice.Name;
				logArea.backgroundColor = backgroundColor;
				logArea.titleColor = titleColor;
				openNext(logArea);
			}
			
			public function viewNode(node:VirtualNode):void
			{
				var nodeArea:VirtualNodeArea = new VirtualNodeArea();
				nodeArea.node = node;
				openNext(nodeArea);
				// Hack for now, ensuring nothing has changed
				nodeArea.cancelPendingChanges();
			}
			
			public function viewLink(link:VirtualLink):void
			{
				var linkArea:VirtualLinkArea = new VirtualLinkArea();
				linkArea.link = link;
				openNext(linkArea);
				// Hack for now, ensuring nothing has changed
				linkArea.cancelPendingChanges();
			}
			
			public function viewKeys(event:* = null):void
			{
				var subarea:GeniUserArea = new GeniUserArea();
				openNext(subarea);
				subarea.userViewstack.selectedChild = subarea.keysView;
			}
			
			public function extendSlice():void
			{
				if(SliceWorking)
					return;
				
				var dateExpires:Date = slice.EarliestExpiration;
				if(dateExpires != null)
				{
					var newDate:Date = new Date(dateExpires.time + Number(renewLengthDropdownlist.selectedItem.value)*60*60*1000);
					
					Alert.show(
						"Extend slice and sliver expirations until " + DateUtil.getTimeUntil(newDate) + " from now?",
						"Exend?",
						Alert.YES|Alert.NO,
						FlexGlobals.topLevelApplication as Sprite,
						function chooseExpireFunction(e:CloseEvent):void
						{
							if(e.detail == Alert.YES)
								SharedMain.tasker.add(new RenewSliceTaskGroup(slice, newDate));
						}
					);
				}
			}
			
			public function deleteSlice(event:* = null):void
			{
				if(Sliver.isAllocated(slice.AllocationState))
				{
					Alert.show(
						"Do you really want to deallocate all resources in the slice?",
						"Confirm deallocation",
						Alert.YES|Alert.NO,
						this,
						function afterDecision(e:CloseEvent):void
						{
							if(e.detail == Alert.YES)
							{
								SharedMain.tasker.add(new DeleteAggregateSliversTaskGroup(slice.aggregateSlivers, false));
							}
						}
					);
				}
				else
				{
					Alert.show(
						"It doesn't appear like there are allocated resources. Run deallocate at all loaded managers?",
						"No known allocated resources",
						Alert.YES|Alert.NO,
						this,
						function afterDecision(e:CloseEvent):void
						{
							if(e.detail == Alert.YES)
								doDeleteSliceEverywhere();
						}
					);
				}
			}
			
			public function deleteSliceEverywhere(event:* = null):void
			{
				Alert.show(
					"Do you really want to run deallocation at all loaded managers?",
					"Deallocate resources?",
					Alert.YES|Alert.NO,
					this,
					function afterDecision(e:CloseEvent):void
					{
						if(e.detail == Alert.YES)
							doDeleteSliceEverywhere();
					}
				);
				
			}
			
			public function doDeleteSliceEverywhere():void
			{
				var allManagerSlivers:AggregateSliverCollection = new AggregateSliverCollection();
				for each(var manager:GeniManager in GeniMain.geniUniverse.managers.collection)
				{
					if(manager.Status == FlackManager.STATUS_VALID)
						allManagerSlivers.add(new AggregateSliver(_slice, manager));
				}
				SharedMain.tasker.add(new DeleteAggregateSliversTaskGroup(allManagerSlivers, false, false));
			}
			
			public function startSlice():void
			{
				if(SliceWorking)
					return;
				
				SharedMain.tasker.add(new StartSliceTaskGroup(slice));
			}
			
			public function stopSlice():void
			{
				if(SliceWorking)
					return;
				
				Alert.show(
					"Continue stopping the slice?",
					"Confirm stop",
					Alert.YES|Alert.NO,
					FlexGlobals.topLevelApplication as Sprite,
					function chooseExpireFunction(e:CloseEvent):void
					{
						if(e.detail == Alert.YES)
							SharedMain.tasker.add(new StopSliceTaskGroup(slice));
					}
				);
			}
			
			public function restartSlice():void
			{
				if(SliceWorking)
					return;
				
				Alert.show(
					"Continue restarting the slice?",
					"Confirm restart",
					Alert.YES|Alert.NO,
					FlexGlobals.topLevelApplication as Sprite,
					function chooseExpireFunction(e:CloseEvent):void
					{
						if(e.detail == Alert.YES)
							SharedMain.tasker.add(new RestartSliceTaskGroup(slice));
					}
				);
			}
			
			public function refreshStatus():void
			{
				if(!Sliver.isAllocated(slice.AllocationState))
				{
					Alert.show(
						"There are no resources allocated yet!",
						"Nothing to do"
					);
					return;
				}
				var refreshStatusTask:RefreshSliceStatusTaskGroup = new RefreshSliceStatusTaskGroup(slice, false);
				refreshStatusTask.forceRunNow = true;
				SharedMain.tasker.add(refreshStatusTask);
			}
			
			public function get SliceWorking():Boolean
			{
				if(SharedMain.tasker.tasks.AllNotFinished.getRelatedTo(_slice).length > 0)
				{
					Alert.show(
						"There are tasks running on the slice, please wait for them to complete and then try again",
						"Slice busy"
					);
					return true;
				}
				return false;
			}
			
			protected function componentsAreaTypeGroup_changeHandler(event:Event):void
			{
				if(listRadiobutton.selected && slice.flackInfo.view != SliceFlackInfo.VIEW_LIST)
				{
					_slice.flackInfo.view = SliceFlackInfo.VIEW_LIST;
					loadComponentsAreaFor(_slice);
				}
				else if(graphRadiobutton.selected && slice.flackInfo.view != SliceFlackInfo.VIEW_GRAPH)
				{
					_slice.flackInfo.view = SliceFlackInfo.VIEW_GRAPH;
					loadComponentsAreaFor(_slice);
				}
			}
			
			public function tryUndo():void
			{
				if(_slice.CanGoBack)
				{
					var componentsArea:IComponentsArea = ComponentsArea;
					if(componentsArea != null)
						componentsArea.SelectedNode = null;
					_slice.backState();
				}
				else
					Alert.show(
						"There is no history to undo",
						"Nothing to do"
					);
			}
			
			public function tryRedo():void
			{
				if(_slice.history.states.length > _slice.history.backIndex+1)
				{
					var componentsArea:IComponentsArea = ComponentsArea;
					if(componentsArea != null)
						componentsArea.SelectedNode = null;
					_slice.forwardState();
				}
				else
					Alert.show(
						"There is no history to redo",
						"Nothing to do"
					);
			}
			
			public function viewLogin(event:* = null):void
			{
				if(!Sliver.isAllocated(_slice.AllocationState))
				{
					Alert.show(
						"No resources allocated yet!",
						"Nothing to do"
					);
					return;
				}
				var loginsArea:SliceLoginsArea = new SliceLoginsArea();
				loginsArea.Slice = _slice;
				openNext(loginsArea);
			}
			
		]]>
	</fx:Script>
	
	<s:HGroup width="100%"
			  height="100%"
			  gap="2">
		<s:VGroup id="dashboard"
				  height="100%"
				  width="220"
				  gap="2">
			<s:HGroup width="100%"
					  height="26"
					  verticalAlign="middle">
				<s:Label width="100%"
						 text="{title}"
						 verticalAlign="middle"
						 fontSize="16"
						 fontWeight="bold"
						 maxDisplayedLines="1"
						 paddingLeft="4" paddingTop="4" />
				<components:Spinner id="spinner"
									width="21"
									height="21"
									x="{(width / 2) - (spinner.width / 2)}"
									y="{(height / 2) - (spinner.height / 2)}"
									visible="false" includeInLayout="{spinner.visible}" />
				
				<components:MenuButton id="sliceMenuButton"
									   toolTip="Delete resources from the slice"
									   menuData="{sliceMenuData}"
									   label="View" />
			</s:HGroup>
			<s:ButtonBar dataProvider="{dashboardViewstack}"
						 requireSelection="true"
						 skinClass="com.flack.shared.display.skins.ButtonBarSkin"
						 width="100%" />
			<mx:ViewStack id="dashboardViewstack"
						  width="100%"
						  height="100%">
				<s:NavigatorContent id="resourcesView"
									width="100%"
									height="100%"
									toolTip="Resources"
									icon="{ImageUtil.resourcesIcon}">
					<slicer:ManagersVirtualPane host="{this}" />
				</s:NavigatorContent>
				<s:NavigatorContent id="sliceView"
									width="100%"
									height="100%"
									toolTip="Slice"
									icon="{ImageUtil.settingsIcon}">
					<s:VGroup height="100%"
							  width="100%"
							  creationComplete="updateSliversInfo();"
							  gap="2"
							  paddingLeft="2">
						<s:HGroup width="100%"
								  verticalAlign="middle"
								  gap="2">
							<s:Button id="gotoAddResourcesButton"
									  toolTip="Open the pane to add resources to the canvas."
									  label="Add Resources"
									  click="dashboardViewstack.selectedChild = resourcesView" />
							<s:Spacer width="100%" />
							<s:Button id="refreshStatusButton"
									  toolTip="Refresh the status on all slivers"
									  label="Get Status"
									  enabled="false"
									  click="refreshStatus()" />
						</s:HGroup>
						<slicer:AggregateSliversPane id="sliversPane"
											slice="{_slice}"
											host="{this}" />
						<s:HGroup width="100%"
								  verticalAlign="middle"
								  gap="2">
							<components:MenuButton id="deleteMenuButton"
												   width="100%"
												   toolTip="Delete resources from the slice"
												   menuData="{deleteMenuData}"
												   styleName="failedStyle"
												   icon="{ImageUtil.deleteIcon}"
												   iconPlacement="left"
												   label="Delete" />
							<components:ImageButton id="startSliceButton"
													toolTip="Start all slivers in the slice"
													icon="{ImageUtil.playControlIcon}"
													click="startSlice()" />
							<components:ImageButton id="stopSliceButton"
													toolTip="Stop all slivers in the slice"
													enabled="{startSliceButton.enabled}"
													icon="{ImageUtil.stopControlIcon}"
													click="stopSlice()" />
							<components:ImageButton id="restartSliceButton"
													enabled="{startSliceButton.enabled}"
													toolTip="Restart all slivers in the slice"
													icon="{ImageUtil.repeatControlIcon}"
													click="restartSlice()" />
						</s:HGroup>
						<s:HGroup id="renewGroup"
								  width="100%"
								  verticalAlign="middle"
								  gap="2">
							<s:Label id="expiresLabel"
									 toolTip="Time left until soonest expiration" />
							<s:Button id="renewSliceButton"
									  label="Extend"
									  toolTip="Extend the expire time for the slice/slivers"
									  click="extendSlice()" />
							<s:DropDownList id="renewLengthDropdownlist"
											toolTip="Amount of time to add"
											width="100%"
											enabled="{renewSliceButton.enabled}"
											requireSelection="true"
											labelField="label">
								<s:dataProvider>
									<s:ArrayList>
										<fx:Object label="2 Hours" value="2" />
										<fx:Object label="6 Hours" value="6" />
										<fx:Object label="1 Day" value="24" />
										<fx:Object label="3 Days" value="72" />
									</s:ArrayList>
								</s:dataProvider>
							</s:DropDownList>
						</s:HGroup>
					</s:VGroup>
				</s:NavigatorContent>
				<s:NavigatorContent id="pluginView"
									width="100%"
									height="100%"
									toolTip="Plugins"
									icon="{ImageUtil.pluginIcon}">
					<s:VGroup height="100%"
							  width="100%"
							  paddingLeft="2"
							  gap="2">
						<s:DropDownList id="pluginList"
										width="100%"
										requireSelection="true"
										labelField="Title"
										dataProvider="{plugins}"
										valueCommit="pluginGroup.removeAllElements(); pluginGroup.addElement(pluginList.selectedItem);">
						</s:DropDownList>
						<s:Group id="pluginGroup"
								 width="100%"
								 height="100%" />
					</s:VGroup>
				</s:NavigatorContent>
			</mx:ViewStack>
			<s:HGroup width="100%"
					  verticalAlign="middle"
					  paddingLeft="2"
					  gap="2">
				<s:Button id="submitButton"
						  width="100%"
						  icon="{ImageUtil.actionIcon}"
						  label="Submit" toolTip="Submit resources for allocation"
						  click="submitSlice()" />
				<components:ImageButton id="refreshButton"
										toolTip="Reload slice from scratch"
										icon="{ImageUtil.refreshIcon}"
										click="regetSlice()" />
			</s:HGroup>
		</s:VGroup>
		<s:VGroup height="100%"
				  width="100%"
				  gap="2"
				  paddingRight="2">
			<s:HGroup width="100%"
					  paddingTop="2"
					  verticalAlign="middle"
					  gap="2">
				<s:RadioButton id="graphRadiobutton"
							   group="{componentsAreaTypeGroup}" />
				<s:Image source="{ImageUtil.graphIcon}"
						 toolTip="View the slice as a graph" />
				<s:RadioButton id="listRadiobutton"
							   group="{componentsAreaTypeGroup}" />
				<s:Image source="{ImageUtil.listIcon}"
						 toolTip="View the slice as a list" />
				<s:Rect />
				<components:ImageButton id="clearCanvasButton"
										toolTip="Clear the canvas"
										icon="{ImageUtil.eraseIcon}"
										click="tryClearSlice()" />
				<s:Rect />
				<components:MenuButton id="importMenuButton"
									   toolTip="Import from..."
									   menuData="{importMenuData}"
									   label="Import" />
				<s:Rect />
				<components:ImageButton icon="{ImageUtil.undoIcon}"
										id="undoButton"
										toolTip="Undo"
										click="tryUndo()" />
				<components:ImageButton icon="{ImageUtil.redoIcon}"
										id="redoButton"
										toolTip="Redo"
										click="tryRedo()" />
				<s:Rect />
				<components:ImageButton icon="{ImageUtil.cloneIcon}"
										id="cloneButton"
										toolTip="Clone the selected node"
										click="tryCloneSelected()" />
				<s:Label text="Output" />
				<s:DropDownList id="outputRspecDropdownlist"
								requireSelection="true"
								width="80"
								dataProvider="{usableRspecVersions}"
								labelField="ShortString"
								change="_slice.useInputRspecInfo = outputRspecDropdownlist.selectedItem;">
				</s:DropDownList>
				<s:HGroup id="extraArea" width="100%" />
				<components:ImageButton id="dockIcon"
										icon="{ImageUtil.windowIcon}"
										toolTip="Pop out to a window or in to the main window"
										click="host.Docked ? popOut() : dock()" />
				<components:ImageButton id="closeIcon"
										icon="{ImageUtil.crossIcon}"
										toolTip="Close"
										click="close()" />
			</s:HGroup>
			<s:Group width="100%"
					 height="100%"
					 id="sliceComponentsArea" />
		</s:VGroup>
	</s:HGroup>
	
</areas1:AreaContent>
