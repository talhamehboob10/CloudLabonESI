<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) 2008-2013 University of Utah and the Flux Group.

{{{GENIPUBLIC-LICENSE

GENI Public License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and/or hardware specification (the "Work") to
deal in the Work without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Work, and to permit persons to whom the Work
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Work.

THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
IN THE WORK.

}}}

-->

<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   width="100%" height="100%"
				   borderStyle="solid"
				   styleName="normalCanvasStyle"
				   implements="com.flack.geni.display.slicer.IComponentsArea"
				   dragEnter="bordercontainer1_dragEnterHandler(event)"
				   dragDrop="bordercontainer1_dragDropHandler(event)">
	<s:layout>
		<s:HorizontalLayout paddingBottom="4"
							paddingLeft="4"
							paddingRight="4"
							paddingTop="4"
							gap="4" />
	</s:layout>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		
		.normalCanvasStyle {
			borderColor: #CDC2C2;
			backgroundColor: #F6F6F6;
		}
		
		.inprogressCanvasStyle {
			borderColor: #B2B300;
			backgroundColor: #FEFF80;
		}
		
		.failedCanvasStyle {
			borderColor: red;
			backgroundColor: #FFD9D9;
		}
		
		.pausedCanvasStyle {
			borderColor: FF6600;
			backgroundColor: #FEB380;
		}
		
		.validCanvasStyle {
			borderColor: green;
			backgroundColor: #CCFFCC;
		}
		
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import com.flack.geni.display.areas.SliceArea;
			import com.flack.geni.resources.physical.PhysicalNode;
			import com.flack.geni.resources.sites.GeniManager;
			import com.flack.geni.resources.virt.Slice;
			import com.flack.geni.resources.virt.Sliver;
			import com.flack.geni.resources.virt.VirtualComponent;
			import com.flack.geni.resources.virt.VirtualLink;
			import com.flack.geni.resources.virt.VirtualLinkCollection;
			import com.flack.geni.resources.virt.VirtualNode;
			import com.flack.geni.resources.virt.VirtualNodeCollection;
			import com.flack.shared.FlackEvent;
			import com.flack.shared.SharedMain;
			
			import flash.filters.DropShadowFilter;
			
			import mx.controls.Alert;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			
			import spark.components.List;
			
			public var host:SliceArea;
			
			private var editable:Boolean = true;
			
			[Bindable]
			private var slice:Slice;
			public function get SliceEditing():Slice
			{
				return slice;
			}
			public function set SliceEditing(s:Slice):void
			{
				slice = s;
			}
			
			/**
			 * Loads a slice into the canvas
			 */
			public function load(newSlice:Slice):void
			{
				clear();
				slice = newSlice;
				
				updateInterface();
			}
			
			/**
			 * Remove all of the resources except the slice
			 */
			public function clear():void
			{
				nodesVgroup.removeAllElements();
				linksVgroup.removeAllElements();
				styleName = "normalCanvasStyle";
				selectedItem = null;
			}
			
			public function updateInterface():void
			{
				var sliceNodes:VirtualNodeCollection = new VirtualNodeCollection(slice.nodes.collection);
				var i:int;
				// Remove old nodes and nodes already drawn
				for(i = 0; i < nodesVgroup.numElements; i++)
				{
					var listNode:ListNode = nodesVgroup.getElementAt(i) as ListNode;
					if(!sliceNodes.contains(listNode.Node))
					{
						nodesVgroup.removeElementAt(i);
						i--;
					}
					else
					{
						listNode.editable = editable;
						sliceNodes.remove(listNode.Node);
					}
				}
				// Add new nodes
				for each(var node:VirtualNode in sliceNodes.collection)
				{
					var newListNode:ListNode = new ListNode();
					newListNode.list = this;
					newListNode.editable = editable;
					nodesVgroup.addElement(newListNode);
					newListNode.Node = node;
				}
				
				var sliceLinks:VirtualLinkCollection = new VirtualLinkCollection(slice.links.collection);
				// Remove old links and links already drawn
				for(i = 0; i < linksVgroup.numElements; i++)
				{
					var listLink:ListLink = linksVgroup.getElementAt(i) as ListLink;
					if(!sliceLinks.contains(listLink.Link))
					{
						linksVgroup.removeElementAt(i);
						i--;
					}
					else
					{
						listLink.editable = editable;
						sliceLinks.remove(listLink.Link);
					}
				}
				// Add new links
				for each(var link:VirtualLink in slice.links.collection)
				{
					var newListLink:ListLink = new ListLink();
					newListLink.list = this;
					newListLink.editable = editable;
					linksVgroup.addElement(newListLink);
					newListLink.Link = link;
				}

				switch(slice.AllocationState)
				{
					case Sliver.ALLOCATION_PROVISIONED:
						switch(slice.OperationalState)
						{
							case Sliver.OPERATIONAL_READY:
								styleName = "validCanvasStyle";
								break;
							case Sliver.OPERATIONAL_FAILED:
								styleName = "failedCanvasStyle";
								break;
							case Sliver.MIXED_CHANGING:
							case Sliver.OPERATIONAL_CONFIGURING:
								styleName = "inprogressCanvasStyle";
								break;
							case Sliver.MIXED_FINISHED:
							case Sliver.OPERATIONAL_NOTREADY:
								styleName = "pausedCanvasStyle";
								break;
							default:
								styleName = "normalCanvasStyle";
						}
						break;
					case Sliver.ALLOCATION_ALLOCATED:
					case Sliver.ALLOCATION_UPDATING:
					case Sliver.MIXED_ALLOCATED:
					case Sliver.MIXED_UNALLOCATED:
					case Sliver.MIXED_PROVISIONED:
					case Sliver.MIXED_UPDATING:
						styleName = "inprogressCanvasStyle";
						break;
					default:
						styleName = "normalCanvasStyle";
				}
			}
			
			public function clearStatus():void
			{
				styleName = "normalCanvasStyle";
			}
			
			private var selectedItem:DisplayObject;
			private function set SelectedItem(value:*):void
			{
				if(selectedItem != null)
					selectedItem.filters = [];
				selectedItem = value;
				if(value != null)
					selectedItem.filters = [new DropShadowFilter()];
			}
			private function get SelectedItem():*
			{
				return selectedItem;
			}
			public function set SelectedNode(n:VirtualNode):void
			{
				for(var i:int = 0; i < nodesVgroup.numElements; i++)
				{
					var listNode:ListNode = nodesVgroup.getElementAt(i) as ListNode;
					if(listNode.Node == n)
					{
						SelectedItem = listNode;
						return;
					}
				}
			}
			public function get SelectedNode():VirtualNode
			{
				if(selectedItem != null && selectedItem is ListNode)
				{
					return (selectedItem as ListNode).Node;
				}
				else
					return null;
			}
			
			/**
			 * Does absolutely everything to add a physical node.  This is what should be called outside of SliceCanvas.
			 */
			public function addPhysicalNode(pn:PhysicalNode):void
			{
				if(!editable)
				{
					Alert.show("Canvas is not editable currently, most likely due to operations being performed");
					return;
				}
				if(!pn.available)
					return;
				if(pn.subNodeOf != null && !pn.subNodeOf.available)
					return;
				var existingNodes:VirtualNodeCollection = slice.nodes.getBoundTo(pn);
				if(existingNodes.length > 0)
				{
					if(!existingNodes.collection[0].Vm)
						return;
				}
				
				// make sure this can happen...
				var newVirtualNode:VirtualNode = new VirtualNode(slice,pn.manager as GeniManager);
				newVirtualNode.Physical = pn;
				newVirtualNode.flackInfo.unbound = false;
				
				slice.pushState();
				
				slice.history.stateName = "Added " + newVirtualNode.clientId;
				slice.nodes.add(newVirtualNode);
				
				if(pn.subNodeOf != null)
				{
					var newSuperVirtualNode:VirtualNode = new VirtualNode(slice,pn.subNodeOf.manager as GeniManager);
					newSuperVirtualNode.Physical = pn.subNodeOf;
					newSuperVirtualNode.flackInfo.unbound = false;
					newVirtualNode.superNode = newSuperVirtualNode;
					if(newSuperVirtualNode.subNodes == null)
						newSuperVirtualNode.subNodes = new VirtualNodeCollection();
					newSuperVirtualNode.subNodes.add(newVirtualNode);
					slice.nodes.add(newSuperVirtualNode);
				}
				
				updateInterface();
				
				// Make sure everyone knows the slice history changed
				SharedMain.sharedDispatcher.dispatchChanged(
					FlackEvent.CHANGED_SLICE,
					slice
				);
			}
			
			/**
			 * Adds a basic unbound node like the one given
			 * 
			 * If outside of SliceCanvas, use addVirtualNode.
			 */
			public function addCloneOf(virtualComponent:VirtualComponent):void
			{
				if(!editable)
				{
					Alert.show("Canvas is not editable currently, most likely due to operations being performed");
					return;
				}
				
				if(virtualComponent is VirtualNode)
				{
					var nvn:VirtualNode = (virtualComponent as VirtualNode).UnboundCloneFor(slice);
					
					slice.pushState();
					slice.history.stateName = "Added " + nvn.clientId
					slice.nodes.add(nvn);
					
					updateInterface();
					
					// Make sure everyone knows the slice history changed
					SharedMain.sharedDispatcher.dispatchChanged(
						FlackEvent.CHANGED_SLICE,
						slice
					);
				}
				else if(virtualComponent is VirtualLink)
				{
					Alert.show("LANs are not supported in this view");
				}
			}
			
			/**
			 * Removes a slice node
			 */
			public function removeListNode(listNode:ListNode):void
			{
				listNode.Node.removeFromSlice();
				updateInterface();
			}
			
			public function removeListLink(listLink:ListLink):void
			{
				listLink.Link.removeFromSlice();
				updateInterface();
			}
			
			// Drag
			
			private var dropItem:* = null;
			protected function bordercontainer1_dragEnterHandler(event:DragEvent):void
			{
				dropItem = null;
				// Dragging a physical node?
				if(event.dragInitiator is List && (event.dragInitiator as List).selectedItem is PhysicalNode)
					dropItem = (event.dragInitiator as List).selectedItem;
				else if(event.dragSource.hasFormat("physicalNode"))
					dropItem = event.dragSource.dataForFormat("physicalNode");
				else if(event.dragSource.hasFormat("virtualNode"))
					dropItem = event.dragSource.dataForFormat("virtualNode");
				if(dropItem != null)
				{
					if(dropItem is PhysicalNode)
					{
						var dropNode:PhysicalNode = dropItem as PhysicalNode;
						if(!dropNode.available)
							return;
						if(dropNode.subNodeOf != null && !dropNode.subNodeOf.available)
							return;
						var existingNodes:VirtualNodeCollection = slice.nodes.getBoundTo(dropNode);
						if(existingNodes.length > 0)
						{
							if(!existingNodes.collection[0].Vm)
								return;
						}
					}
					else if(dropItem is VirtualNode)
					{
						var dropVirtNode:VirtualNode = dropItem as VirtualNode;
						dropVirtNode.slice = slice;
					}
					DragManager.acceptDragDrop(SliceList(event.currentTarget));
				}
			}
			
			protected function bordercontainer1_dragDropHandler(event:DragEvent):void
			{
				if(dropItem != null)
				{
					if(dropItem is PhysicalNode)
						addPhysicalNode(dropItem);
					else if(dropItem is VirtualNode)
						addCloneOf(dropItem);
				}
			}
			
			public function toggleEditable(isEditable:Boolean):void
			{
				editable = isEditable;
				updateInterface();
			}
			
		]]>
	</fx:Script>
	<s:VGroup width="50%" height="100%" horizontalAlign="center">
		<s:Label text="Nodes" fontWeight="bold" />
		<s:Scroller width="100%" height="100%">
			<s:VGroup id="nodesVgroup" width="100%" height="100%" paddingRight="2" paddingBottom="2" />
		</s:Scroller>
	</s:VGroup>
	<s:VGroup width="50%" height="100%" horizontalAlign="center">
		<s:Label text="Links" fontWeight="bold" />
		<s:Scroller width="100%" height="100%">
			<s:VGroup id="linksVgroup" width="100%" height="100%" paddingRight="2" paddingBottom="2" />
		</s:Scroller>
	</s:VGroup>
</s:BorderContainer>
