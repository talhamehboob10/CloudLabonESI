<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) 2008-2013 University of Utah and the Flux Group.

{{{GENIPUBLIC-LICENSE

GENI Public License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and/or hardware specification (the "Work") to
deal in the Work without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Work, and to permit persons to whom the Work
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Work.

THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
IN THE WORK.

}}}

-->

<maps:Map xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:maps="com.google.maps.*"
		  implements="com.flack.geni.display.mapping.GeniMap"
		  height="100%" width="100%"
		  preinitialize="mappreinit()"
		  mapevent_mappreinitialize="onMapPreinitialize(event)"
		  mapevent_mapready="onMapReady(event)"
		  sensor="false"
		  ssl="true"
		  key="ABQIAAAAJfmFhYY_qvxp3r-UM7Zc6hTB6_C890sYLVE2xLEMoJ5sXdYx3RRb6pmMtDdaUQ3__5QzPrMwWmy1pg">
	
	<fx:Script>
		<![CDATA[
			import com.flack.geni.GeniMain;
			import com.flack.geni.display.mapping.GeniMapLink;
			import com.flack.geni.display.mapping.GeniMapNodeMarker;
			import com.flack.geni.display.mapping.LatitudeLongitude;
			import com.flack.geni.display.mapping.LatitudeLongitudeBounds;
			import com.flack.geni.resources.physical.PhysicalLocationCollection;
			import com.flack.shared.utils.NetUtil;
			import com.google.maps.LatLng;
			import com.google.maps.LatLngBounds;
			import com.google.maps.MapOptions;
			import com.google.maps.MapZoomEvent;
			import com.google.maps.PaneId;
			import com.google.maps.StyledMapType;
			import com.google.maps.StyledMapTypeOptions;
			import com.google.maps.controls.NavigationControl;
			import com.google.maps.interfaces.IOverlay;
			import com.google.maps.interfaces.IPane;
			import com.google.maps.interfaces.IPaneManager;
			import com.google.maps.styles.MapTypeStyle;
			import com.google.maps.styles.MapTypeStyleElementType;
			import com.google.maps.styles.MapTypeStyleFeatureType;
			import com.google.maps.styles.MapTypeStyleRule;
			
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			
			public var ready:Boolean = false;
			public var linkPane:IPane;
			
			public function get Ready():Boolean
			{
				return ready;
			}
			
			private function onMapPreinitialize(event:Event):void
			{
				var myStyles:Array = [
					new MapTypeStyle(MapTypeStyleFeatureType.POI,
						MapTypeStyleElementType.ALL,
						[MapTypeStyleRule.visibility("off")]),
					new MapTypeStyle(MapTypeStyleFeatureType.ROAD,
						MapTypeStyleElementType.ALL,
						[MapTypeStyleRule.lightness(60)])
				];
				
				var myStyledMapOptions:StyledMapTypeOptions = new StyledMapTypeOptions({name: 'Flack', alt: 'Flack'});
				var myStyleType:StyledMapType = new StyledMapType(myStyles, myStyledMapOptions);
				
				var myMapOptions:MapOptions = new MapOptions();
				myMapOptions.zoom = 4;
				myMapOptions.center = new LatLng(38,-97);
				myMapOptions.mapTypes = [myStyleType];
				myMapOptions.mapType = myStyleType;
				//myMapOptions.mapType = MapType.PHYSICAL_MAP_TYPE;
				setInitOptions(myMapOptions);
			}
			
			private function setkey():void
			{
				// Force a key
				if(GeniMain.MapKey.length > 0)
					key = GeniMain.MapKey;
					// else detect a key from our default list
				else if(NetUtil.runningFromWebsite())
				{
					var url:String = mx.core.FlexGlobals.topLevelApplication.url;
					var domain:String = NetUtil.tryGetBaseUrl(url);
					
					switch(domain) {
						/*
						case "https://users.emulab.net":
							key = "ABQIAAAAJfmFhYY_qvxp3r-UM7Zc6hRvSZn5G9iDjkMHpAGYHc8v1OnErBT5Vzf3wT7WhxaP7ouXIub2R00Wxg";
							//key = "ABQIAAAAJfmFhYY_qvxp3r-UM7Zc6hTB6_C890sYLVE2xLEMoJ5sXdYx3RRb6pmMtDdaUQ3__5QzPrMwWmy1pg";
							break;
						case "https://boss.emulab.net":
							key = "ABQIAAAAJfmFhYY_qvxp3r-UM7Zc6hTJAI3wyjNM51iUcfoH5qR3p3QFHBQ_Ukk2jOVwrIST7TsKH0dxYswnyg";
							break;
						case "https://www.emulab.net":
							key = "ABQIAAAAJfmFhYY_qvxp3r-UM7Zc6hTs-lXJm7muGCxX8DXwkteJsQ0kTxQBr46PQguVO7zD3fj3JMteHHpVDg";
							break;
						case "https://www.uky.emulab.net":
							key = "ABQIAAAAJfmFhYY_qvxp3r-UM7Zc6hQ2ZMGWUBvfKOB0aFzbVnVtbMaqVhSmf6d5al1xSqOayWNOMqU861NJ8w";
							break;
						*/
						case "https://www.protogeni.net":
							key = "ABQIAAAAJfmFhYY_qvxp3r-UM7Zc6hRNcqKgyvlELbhgjE5kl-gFNsMkyxTLoim3vJsPX9zTdq5dy1yGCfLGqw";
							break;
						default:
							Alert.show("It looks like the Google Maps key for the domain Flack is running on wasn't found.  Map functionality won't work until the correct key is added to the binary or as a HTML parameter (see help documentation).", "Google Maps key not found");
					}
				}
			}
			
			private function mappreinit():void
			{
				//setkey();
			}
			
			private function onMapReady(event:Event):void
			{
				addControl(new NavigationControl());
				addControl(new GoogleZoomToAllControl());
				enableScrollWheelZoom();
				enableContinuousZoom();
				
				// Create a new pane lying immediately below the marker pane.
				var manager:IPaneManager = this.getPaneManager();
				var markerPane:IPane = manager.getPaneById(PaneId.PANE_MARKER);
				var markerIndex:int = manager.getPaneIndex(markerPane);
				linkPane = manager.createPane(2);
				
				addEventListener(MapZoomEvent.ZOOM_CHANGED, afterMove);
				
				ready = true;
				GeniMain.mapper.drawMap();
			}
			
			private function afterMove(evt:MapZoomEvent):void
			{
				GeniMain.mapper.drawMap();
			}
			
			public function resetZoom():void
			{
				var temp:LatitudeLongitudeBounds = GeniMain.mapper.getBounds();
				var bounds:LatLngBounds = new LatLngBounds(new LatLng(temp.south, temp.west), new LatLng(temp.north, temp.east));
				if(bounds != null) {
					var bzl:Number  = getBoundsZoomLevel(bounds);
					if(getZoom() != bzl)
						setZoom(bzl);
					this.panTo( bounds.getCenter() );
				}
				else
					setDefaultZoom();
			}
			
			public function setDefaultZoom():void
			{
				setZoom(4);
				panTo(new LatLng(38,-97));
			}
			
			public function panToPoint(center:LatitudeLongitude):void
			{
				panTo(new LatLng(center.latitude, center.longitude));
			}
			
			public function getZoomLevel():Number
			{
				return getZoom();
			}
			
			public function zoomToFit(bounds:LatitudeLongitudeBounds):void
			{
				setZoom(
					getBoundsZoomLevel(
						new LatLngBounds(
							new LatLng(
								bounds.south,
								bounds.west
							),
							new LatLng(
								bounds.north,
								bounds.east
							)
						)
					)
				);
			}
			
			public function clearAllOverlays():void
			{
				clearOverlays();
			}
			
			public function getNewNodeMarker(newLocations:PhysicalLocationCollection, newNodes:*):GeniMapNodeMarker
			{
				return new GoogleMapLocationMarker(newLocations, newNodes);
			}
			
			public function getNewLink(connectedNodes:Vector.<GeniMapNodeMarker>):GeniMapLink
			{
				return new GoogleMapLink(connectedNodes);
			}
			
			public function addNodeMarker(marker:GeniMapNodeMarker):void
			{
				addOverlay(marker as IOverlay);
			}
			
			public function addLink(temp:GeniMapLink):void
			{
				var link:GoogleMapLink = temp as GoogleMapLink;
				link.generateLabels();
				addOverlay(link.polyline);
				for each(var addNewLabel:GoogleTooltipOverlay in link.labels)
					addOverlay(addNewLabel);
			}
			
			public function removeNodeMarker(marker:GeniMapNodeMarker):void
			{
				removeOverlay(marker as GoogleMapLocationMarker);
			}
			
			public function removeLink(geniLink:GeniMapLink):void
			{
				var link:GoogleMapLink = geniLink as GoogleMapLink;
				removeOverlay(link.polyline);
				for each(var l:GoogleTooltipOverlay in link.labels)
				{
					removeOverlay(l);
					l.destroy();
				}
			}
			
		]]>
	</fx:Script>
</maps:Map>
