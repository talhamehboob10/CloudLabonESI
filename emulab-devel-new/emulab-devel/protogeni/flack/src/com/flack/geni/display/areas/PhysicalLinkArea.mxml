<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) 2008-2013 University of Utah and the Flux Group.

{{{GENIPUBLIC-LICENSE

GENI Public License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and/or hardware specification (the "Work") to
deal in the Work without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Work, and to permit persons to whom the Work
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Work.

THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
IN THE WORK.

}}}

-->

<areas1:AreaContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:areas="com.flack.geni.display.areas.*"
		  xmlns:components="com.flack.shared.display.components.*"
		  creationComplete="init()"
		  paddingBottom="2" xmlns:areas1="com.flack.shared.display.areas.*">
	<fx:Script>
		<![CDATA[
			import com.flack.geni.display.DisplayUtil;
			import com.flack.geni.resources.Property;
			import com.flack.geni.resources.physical.PhysicalInterface;
			import com.flack.geni.resources.physical.PhysicalInterfaceCollection;
			import com.flack.geni.resources.physical.PhysicalLink;
			import com.flack.geni.resources.physical.PhysicalNode;
			import com.flack.geni.resources.physical.PhysicalNodeCollection;
			import com.flack.shared.display.areas.DocumentArea;
			import com.flack.shared.display.components.DataButton;
			import com.flack.shared.utils.ColorUtil;
			import com.flack.shared.utils.ImageUtil;
			import com.flack.shared.utils.ViewUtil;
			
			import mx.collections.ArrayCollection;
			
			[Bindable]
			public var link:PhysicalLink;
			
			[Bindable]
			public var linkTypes:ArrayCollection;
			[Bindable]
			public var properties:ArrayCollection;
			
			public function init():void
			{
				if(link != null)
					load(link);
			}
			
			public function load(l:PhysicalLink):void {
				
				link = l;
				title = link.name;
				backgroundColor = ColorUtil.colorsDark[link.manager.colorIdx];
				titleColor = ColorUtil.colorsLight[link.manager.colorIdx];
				if(visible)
				{
					linkTypes = new ArrayCollection();
					for each(var linkType:String in link.linkTypes)
						linkTypes.addItem(linkType);
					
					loadPhysicalLinks();
					
					properties = new ArrayCollection();
					for each(var property:Property in link.properties.collection)
						properties.addItem(property);
				}
			}
			
			public function loadPhysicalLinks():void
			{
				if(interfacesLinkToGroup != null)
				{
					interfacesLinkToGroup.removeAllElements();
					interfacesGroup.removeAllElements();
					
					var interfacesButton:DataButton = DisplayUtil.getPhysicalInterfaceCollectionButton(link.interfaces, false);
					interfacesButton.addEventListener(MouseEvent.CLICK, viewInterfaces);
					interfacesGroup.addElement(interfacesButton);
					interfacesGroup.addElement(ViewUtil.getLabel("connected with", true));
					
					var connectedNodes:PhysicalNodeCollection = link.interfaces.Nodes;
					if(connectedNodes.length > 0)
					{
						var nodesButton:DataButton = DisplayUtil.getPhysicalNodeCollectionButton(connectedNodes, false);
						nodesButton.addEventListener(MouseEvent.CLICK, viewNodes);
						interfacesGroup.addElement(nodesButton);
						
						for each(var iface:PhysicalInterface in link.interfaces.collection)
						{
							var nodeButton:DataButton = DisplayUtil.getPhysicalNodeButton(iface.owner, false);
							nodeButton.addEventListener(MouseEvent.CLICK, viewNode);
							interfacesLinkToGroup.addElement(nodeButton);
							
							var linkHbox:HGroup = new HGroup();
							var space:Rect = new Rect();
							space.width = 16;
							linkHbox.addElement(space);
							var interfaceButton:DataButton = DisplayUtil.getPhysicalInterfaceButton(iface, false);
							interfaceButton.addEventListener(MouseEvent.CLICK, viewInterface);
							linkHbox.addElement(interfaceButton);
							interfacesLinkToGroup.addElement(linkHbox);
						}
					}
				}
			}
			
			public function viewRspec():void
			{
				var rspecArea:DocumentArea = new DocumentArea();
				rspecArea.Document = link.advertisement;
				rspecArea.title = "Advertisement for " + link.name;
				rspecArea.backgroundColor = backgroundColor;
				rspecArea.titleColor = titleColor;
				openNext(rspecArea);
			}
			
			public function viewNode(e:MouseEvent):void
			{
				var n:PhysicalNode = (e.target as DataButton).data as PhysicalNode;
				var nodeArea:PhysicalNodeArea = new PhysicalNodeArea();
				nodeArea.load(n);
				openNext(nodeArea);
			}
			
			public function viewNodes(e:MouseEvent):void
			{
				var n:PhysicalNodeCollection = (e.target as DataButton).data as PhysicalNodeCollection;
				var nodesArea:PhysicalNodeCollectionArea = new PhysicalNodeCollectionArea();
				nodesArea.Nodes = n;
				openNext(nodesArea);
			}
			
			public function viewInterfaces(e:MouseEvent):void
			{
				var interfacesArea:PhysicalInterfaceCollectionArea = new PhysicalInterfaceCollectionArea();
				interfacesArea.Interfaces = (e.target as DataButton).data as PhysicalInterfaceCollection;
				openNext(interfacesArea);
			}
			
			public function viewInterface(e:MouseEvent):void
			{
				var interfaceArea:PhysicalInterfaceArea = new PhysicalInterfaceArea();
				interfaceArea.load((e.target as DataButton).data as PhysicalInterface);
				openNext(interfaceArea);
			}
			
		]]>
	</fx:Script>
	
	<s:Group width="100%">
		<s:Rect width="100%" height="100%">
			<s:fill><s:SolidColor color="{backgroundColor}" /></s:fill>
		</s:Rect>
		
		<s:HGroup width="100%"
				  verticalAlign="middle"
				  paddingLeft="2"
				  paddingRight="2"
				  paddingTop="2"
				  paddingBottom="2"
				  gap="2">
			<s:Image id="imgAvailable" />
			<s:Image id="imgExclusive" />
			<s:Label text="{title}"
					 color="{titleColor}"
					 id="nameLabel"
					 toolTip="{link.id.full}"
					 fontSize="17"
					 fontWeight="bold"
					 width="100%" />
			<s:Button id="componentButton"
					  icon="{ImageUtil.advertisementIcon}"
					  label="View RSPEC"
					  toolTip="View Advertisement RSPEC"
					  click="viewRspec()" />
			<components:ImageButton id="dockIcon"
									icon="{ImageUtil.windowIcon}"
									toolTip="Pop out to a window or in to the main window"
									click="host.Docked ? popOut() : dock()" />
			<components:ImageButton id="closeIcon"
									icon="{ImageUtil.crossIcon}"
									toolTip="Close"
									click="close()" />
		</s:HGroup>
	</s:Group>
	
	<s:VGroup paddingRight="2"
			  paddingLeft="2"
			  width="100%"
			  height="100%"
			  gap="2">
		<s:HGroup height="50%"
				  width="100%"
				  gap="2">
			<s:VGroup height="100%"
					  gap="2">
				<s:Label text="Types"
						 fontWeight="bold"/>
				<s:List id="typesList"
						dataProvider="{linkTypes}" />
			</s:VGroup>
			<s:HGroup width="100%"
					  height="100%"
					  gap="2">
				<s:VGroup id="interfacesGroup"
						  gap="2" />
				<s:Scroller width="100%"
							height="100%">
					<s:VGroup id="interfacesLinkToGroup"
							  width="100%"
							  height="100%"
							  gap="2" />
				</s:Scroller>
			</s:HGroup>
		</s:HGroup>
		<s:DataGrid id="propertyGrid"
					width="100%"
					height="50%" 
					dataProvider="{properties}"
					rowHeight="24"
					editable="false">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn headerText="Property">
						<s:itemRenderer>
							<fx:Component>
								<s:GridItemRenderer>
									<fx:Script>
										<![CDATA[
											import com.flack.shared.utils.ImageUtil;
										]]>
									</fx:Script>
									<s:HGroup height="100%" verticalAlign="middle" paddingLeft="2">
										<s:Label text="{data.source.id.name}" />
										<s:BitmapImage source="{ImageUtil.rightIcon}" />
										<s:Label text="{data.destination.id.name}" />
									</s:HGroup>
								</s:GridItemRenderer>
							</fx:Component>
						</s:itemRenderer>
					</s:GridColumn>
					<s:GridColumn dataField="CapacityDescription"
								  headerText="Capacity" />
					<s:GridColumn dataField="LatencyDescription" 
								  headerText="Latency" />
					<s:GridColumn dataField="PacketLossDescription" 
								  headerText="Loss" />
				</s:ArrayList> 
			</s:columns>
		</s:DataGrid> 
	</s:VGroup>
	
</areas1:AreaContent>
