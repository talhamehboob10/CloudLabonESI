<?xml version="1.0" encoding="utf-8"?>

<!--

Copyright (c) 2008-2013 University of Utah and the Flux Group.

{{{GENIPUBLIC-LICENSE

GENI Public License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and/or hardware specification (the "Work") to
deal in the Work without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Work, and to permit persons to whom the Work
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Work.

THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
IN THE WORK.

}}}

-->

<sharedareas:AreaContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="com.flack.shared.display.components.*"
		  xmlns:display="com.flack.geni.display.*"
		  xmlns:areas="com.flack.geni.display.areas.*"
		  xmlns:sharedareas="com.flack.shared.display.areas.*"
		  creationComplete="init()"
		  paddingBottom="2"
		  title="{node.clientId}" >
	<fx:Declarations>
		<s:RadioButtonGroup id="boundGroup"
							valueCommit="boundGroup_valueCommitHandler(event)"/>
		<s:RadioButtonGroup id="diskSourceGroup" change="okButton.enabled = true" />
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.flack.geni.GeniMain;
			import com.flack.geni.display.DisplayUtil;
			import com.flack.geni.display.slicer.ExecuteServiceComponent;
			import com.flack.geni.display.slicer.InstallServiceComponent;
			import com.flack.geni.plugins.SliverTypePart;
			import com.flack.geni.resources.DiskImage;
			import com.flack.geni.resources.Extensions;
			import com.flack.geni.resources.SliverType;
			import com.flack.geni.resources.physical.HardwareType;
			import com.flack.geni.resources.physical.HardwareTypeCollection;
			import com.flack.geni.resources.physical.PhysicalNode;
			import com.flack.geni.resources.physical.PhysicalNodeCollection;
			import com.flack.geni.resources.sites.GeniManager;
			import com.flack.geni.resources.sites.managers.SupportedSliverType;
			import com.flack.geni.resources.sites.managers.SupportedSliverTypeCollection;
			import com.flack.geni.resources.virt.ExecuteService;
			import com.flack.geni.resources.virt.InstallService;
			import com.flack.geni.resources.virt.LoginService;
			import com.flack.geni.resources.virt.Sliver;
			import com.flack.geni.resources.virt.VirtualInterface;
			import com.flack.geni.resources.virt.VirtualInterfaceCollection;
			import com.flack.geni.resources.virt.VirtualLink;
			import com.flack.geni.resources.virt.VirtualLinkCollection;
			import com.flack.geni.resources.virt.VirtualNode;
			import com.flack.geni.resources.virt.VirtualNodeCollection;
			import com.flack.geni.tasks.groups.ListImagesTaskGroup;
			import com.flack.geni.tasks.xmlrpc.protogeni.cm.CreateImageCmTask;
			import com.flack.geni.tasks.xmlrpc.am.CreateImageTask;
			import com.flack.shared.FlackEvent;
			import com.flack.shared.SharedMain;
			import com.flack.shared.display.areas.DocumentArea;
			import com.flack.shared.display.components.DataButton;
			import com.flack.shared.display.windows.TextInputWindow;
			import com.flack.shared.resources.sites.FlackManager;
			import com.flack.shared.resources.sites.ApiDetails;
			import com.flack.shared.utils.ColorUtil;
			import com.flack.shared.utils.ImageUtil;
			import com.flack.shared.utils.NetUtil;
			
			import mx.collections.ArrayCollection;
			import mx.collections.VectorCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			import spark.components.Button;
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			import spark.primitives.Rect;
			
			[Bindable]
			public var node:VirtualNode = null;
			
			[Bindable]
			private var managers:VectorCollection = new VectorCollection();
			[Bindable]
			private var physicalNodes:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var sliverTypes:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var hardwareForVirtual:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var diskImageUsers:VectorCollection = new VectorCollection();
			[Bindable]
			private var userDiskImages:VectorCollection = new VectorCollection();
			[Bindable]
			private var diskImages:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var interfaces:ArrayCollection = new ArrayCollection();
			
			private function get SelectedManager():GeniManager
			{
				return managerList.selectedItem as GeniManager;
			}
			private function get SelectedBounded():Boolean
			{
				return boundRadiobutton.selected;
			}
			private function get SelectedBoundNode():PhysicalNode
			{
				return this.boundRadiobutton.selected ? boundDropDownList.selectedItem as PhysicalNode : null;
			}
			private function get SelectedSliverType():SliverType
			{
				return sliverTypeDropDownList.selectedItem as SliverType;
			}
			
			override public function get PendingChanges():Boolean
			{
				return okButton.enabled;
			}
			
			public function init():void
			{
				if(node != null)
					load(node);
				SharedMain.sharedDispatcher.addEventListener(FlackEvent.CHANGED_USERDISKIMAGES, loadUserDiskImageStuff);
			}
			
			public function load(n:VirtualNode):void
			{
				if(n == null)
					return;
				confirmCanCloseAnd(finishLoading, n);
			}
			private function finishLoading(n:VirtualNode):void
			{
				node = n;
				
				physicalNodes = new ArrayCollection();
				var nameSort:Sort = new Sort();
				var dataSortField:SortField = new SortField("name");
				nameSort.fields = [dataSortField];
				
				physicalNodes.sort = nameSort;
				
				// Build up lists
				managers = new VectorCollection(GeniMain.geniUniverse.managers.getByStatus(FlackManager.STATUS_VALID).collection);
				
				if(initialized)
				{
					clientIdInput.text = node.clientId;
					backgroundColor = ColorUtil.colorsDark[node.manager.colorIdx];
					titleColor = ColorUtil.colorsLight[node.manager.colorIdx];
					errorButton.visible = node.error.length > 0;
					manifestButton.visible = node.manifest.length>0;
					loadDiskImageUsers();
					if(node.allocationState != Sliver.ALLOCATION_UNALLOCATED)
					{
						statusImage.visible = true;
						switch(node.allocationState)
						{
							case Sliver.ALLOCATION_PROVISIONED:
								switch(node.operationalState)
								{
									case Sliver.OPERATIONAL_READY:
										statusImage.source = ImageUtil.flagGreenIcon;
										break;
									case Sliver.OPERATIONAL_FAILED:
										this.statusImage.source = ImageUtil.flagRedIcon;
										break;
									case Sliver.OPERATIONAL_CONFIGURING:
									case Sliver.OPERATIONAL_NOTREADY:
									case Sliver.OPERATIONAL_STOPPING:
										statusImage.source = ImageUtil.flagYellowIcon;
										break;
									default:
										statusImage.visible = false;
								}
								break;
							case Sliver.ALLOCATION_ALLOCATED:
							case Sliver.ALLOCATION_UPDATING:
								statusImage.source = ImageUtil.flagYellowIcon;
								break;
							default:
								statusImage.visible = false;
						}
					}
					var defaultLogin : LoginService = node.services.getDefaultLogin();
					if(defaultLogin != null)
					{
						loginGroup.visible = true;
						usernameText.text = defaultLogin.username;
						hostnameText.text = defaultLogin.FullHostname;
						visitButton.toolTip = "Click to launch http://" + defaultLogin.hostname;
						sshButton.toolTip = "Click to launch ssh://" + defaultLogin.FullLogin;
					}
					
					managerList.selectedItem = node.manager;
					if(node.physicalId != null && node.physicalId.full.length > 0)
					{
						boundRadiobutton.selected = true;
						boundDropDownList.selectedItem = node.Physical;
						loadBound();
					}
					else
					{
						unboundRadiobutton.selected = true;
						loadUnbound();
					}
					exclusiveCheckbox.selected = node.exclusive;
					
					if(node.sliverType.selectedImage != null)
					{
						if(node.sliverType.selectedImage.url.length > 0)
						{
							diskImageUrlCheckbox.selected = true;
							diskImageText.text = node.sliverType.selectedImage.url;
						}
						else
						{
							diskImageNameCheckbox.selected = true;
							diskImageText.text = node.sliverType.selectedImage.id.full;
						}
						diskImageVersionText.text = node.sliverType.selectedImage.version;
					}
					else
					{
						diskImageText.text = "";
						diskImageVersionText.text = "";
					}
					
					if(node.manager.type == GeniManager.TYPE_PROTOGENI && Sliver.isAllocated(node.allocationState))
						createImageButton.visible = true;
					
					installVgroup.removeAllElements();
					if(node.services.installServices != null && node.services.installServices.length > 0)
					{
						for each(var installService:InstallService in node.services.installServices)
							addInstallService(installService);
					}
					executeVgroup.removeAllElements();
					if(node.services.executeServices != null && node.services.executeServices.length > 0)
					{
						for each(var executeService:ExecuteService in node.services.executeServices)
							addExecuteService(executeService);
					}
					interfaces = new ArrayCollection();
					for each(var iface:VirtualInterface in node.interfaces.collection)
					{
						interfaces.addItem(
							{
								source: iface,
								clientId: iface.clientId,
								macAddress: iface.macAddress,
								binding: {physicalId: iface.physicalId.full, bound: iface.bound},
								ipaddress: iface.ip.address,
								ipnetmask: iface.ip.netmask,
								iptype: iface.ip.type
							}
						);
					}
					
					okButton.enabled = false;
				}
			}
			
			private function loadUserDiskImageStuff(e:FlackEvent):void
			{
				if(e.changedObject != null)
				{
					loadDiskImageUsers(e.changedObject as String);
					loadUserDiskImages(e.changedObject as String);
				}
				else
				{
					loadDiskImageUsers();
					loadUserDiskImages();
				}
			}
			
			public function loadDiskImageUsers(selectedUser:String = ""):void
			{
				diskImageUsers = new VectorCollection(GeniMain.geniUniverse.userDiskImages.Creators);
				diskImageUsers.addItem("");
				if(selectedUser.length > 0)
					diskImageUserSelect.selectedItem = selectedUser;
			}
			
			public function loadUserDiskImages(selectedUser:String = ""):void
			{
				if(selectedUser.length > 0)
				{
					userDiskImages = new VectorCollection(
						GeniMain.geniUniverse.userDiskImages.getByCreator(selectedUser).collection);
				}
				else if(diskImageUserSelect.selectedItem != null
					&& diskImageUserSelect.selectedItem.length > 0)
				{
					userDiskImages = new VectorCollection(
						GeniMain.geniUniverse.userDiskImages.getByCreator(
							diskImageUserSelect.selectedItem as String).collection);
				} else {
					userDiskImages = new VectorCollection();
				}
			}
			
			public function initExtensions():void
			{
				extensionsTextarea.text = node.extensions.toString();
			}
			
			public function visitHost():void
			{
				if(node.services.loginServices.length > 0)
				{
					NetUtil.openWebsite("http://" + node.services.loginServices[0].hostname);
				}
			}
			
			public function openSsh():void
			{
				var defaultLogin : LoginService = node.services.getDefaultLogin();
				if(defaultLogin != null)
				{
					NetUtil.openWebsite("ssh://" + defaultLogin.FullLogin);
				}
			}
			
			public function viewManifest():void
			{
				var manifestArea:DocumentArea = new DocumentArea();
				manifestArea.Document = node.manifest;
				manifestArea.title = "Manifest RSPEC for " + node.clientId;
				openNext(manifestArea);
			}
			
			protected function managerList_valueCommitHandler(event:FlexEvent):void
			{
				physicalNodes.removeAll();
				hardwareForVirtual.removeAll();
				if(SelectedManager != null)
				{
					backgroundColor = ColorUtil.colorsDark[SelectedManager.colorIdx];
					var selectableNodes:PhysicalNodeCollection = SelectedManager.nodes.Available;
					for each(var phyNode:PhysicalNode in selectableNodes.collection)
						physicalNodes.addItem(phyNode);
					if(node.Physical != null && SelectedManager == node.Physical.manager)
					{
						if(!physicalNodes.contains(node.Physical))
							physicalNodes.addItem(node.Physical);
						boundDropDownList.selectedItem = node.Physical;
					}
					
					physicalNodes.refresh();
					
					var hardwareTypes:HardwareTypeCollection = SelectedManager.nodes.HardwareTypes;
					var selectHardwareType:String = "";
					if(node != null && !node.Bound)
						selectHardwareType = node.hardwareType.name;
					for each(var hardwareType:HardwareType in hardwareTypes.collection)
					{
						hardwareForVirtual.addItem(hardwareType);
						if(selectHardwareType.length > 0 && hardwareType.name == selectHardwareType)
							hardwareList.selectedItem = hardwareType;
					}
					
					unboundVgroup.enabled = SelectedManager.supportedSliverTypes.SupportsUnbound;
					if(SelectedManager != node.manager)
					{
						if(unboundVgroup.enabled)
						{
							unboundRadiobutton.selected = true;
							loadUnbound();
						}
						else
						{
							boundRadiobutton.selected = true;
						}
					}
					if(!okButton.enabled)
						okButton.enabled = SelectedManager != node.manager;
				}
			}
			
			protected function boundDropDownList_valueCommitHandler(event:FlexEvent):void
			{
				boundRadiobutton.selected = true;
				loadBound();
				
				if(!okButton.enabled)
					okButton.enabled = node.Bound != true;
			}
			
			private function loadUnbound():void
			{
				sliverTypes.removeAll();
				if(SelectedManager != null)
				{
					var unboundTypes:SupportedSliverTypeCollection = SelectedManager.supportedSliverTypes.Unbound;
					for each(var supportedType:SupportedSliverType in unboundTypes.collection)
					{
						sliverTypes.addItem(supportedType.type);
						if(supportedType.type.name == node.sliverType.name)
							sliverTypeDropDownList.selectedItem = supportedType.type;
					}
					
					if(sliverTypeDropDownList.selectedItem == null)
						sliverTypeDropDownList.selectedIndex = 0;
				}
				exclusiveCheckbox.enabled = node.Bound;
			}
			
			private function loadBound():void
			{
				sliverTypes.removeAll();
				if(SelectedBoundNode != null)
				{
					exclusiveCheckbox.selected = SelectedBoundNode.exclusive;
					
					for each(var sliverType:SliverType in SelectedBoundNode.sliverTypes.collection)
					{
						sliverTypes.addItem(sliverType);
						if(node.sliverType.name == sliverType.name)
							sliverTypeDropDownList.selectedItem = sliverType;
					}
					
					if(SelectedBoundNode.sliverTypes.getByName(node.sliverType.name) == null)
					{
						sliverTypes.addItem(node.sliverType);
						sliverTypeDropDownList.selectedItem = node.sliverType;
					}
					
					if(sliverTypeDropDownList.selectedItem == null)
						sliverTypeDropDownList.selectedIndex = 0;
				}
				
				exclusiveCheckbox.enabled = false;
			}
			
			protected function sliverTypeDropDownList_valueCommitHandler(event:FlexEvent):void
			{
				if(SelectedSliverType != null)
				{
					var supportedType:SupportedSliverType = SelectedManager.supportedSliverTypes.getByNameOrDefault(SelectedSliverType.name);
					
					//exclusiveCheckbox.enabled = supportedType.supportsExclusive && supportedType.supportsShared;
					diskImageGroup.visible = supportedType.supportsDiskImage || SelectedSliverType.diskImages.length > 0;
					if(diskImageGroup.visible)
					{
						diskImages.removeAll();
						for each(var diskImage:DiskImage in SelectedSliverType.diskImages.collection)
						{
							diskImages.addItem(diskImage);
							if(diskImage.id.full == this.diskImageText.text)
								diskImageSelect.selectedItem = diskImage;
						}
					}
					executeServicesVgroup.visible = supportedType.supportsExecuteService;
					installServicesVgroup.visible = supportedType.supportsInstallService;
					if(supportedType.supportsExclusive && !supportedType.supportsShared)
					{
						exclusiveCheckbox.enabled = false;
						exclusiveCheckbox.selected = true;
					}
					else if(supportedType.supportsShared && !supportedType.supportsExclusive)
					{
						exclusiveCheckbox.enabled = false;
						exclusiveCheckbox.selected = false;
					}
					else
					{
						exclusiveCheckbox.enabled = !SelectedBounded;
					}
					
					if(SelectedSliverType.sliverTypeSpecific != null)
					{
						var part:SliverTypePart = SelectedSliverType.sliverTypeSpecific.Part;
						if(part != null)
						{
							// If a different part is loaded, clear it.
							if(extraView.numElements == 1 &&
								flash.utils.getQualifiedClassName(extraView.getElementAt(0)) != flash.utils.getQualifiedClassName(part))
							{
								extraView.removeAllElements();
							}
							if(extraView.numElements == 0)
							{
								part.host = this;
								extraView.addElement(part);
								part.initTo(SelectedSliverType);
							}
							extraView.visible = true;
						}
						else
						{
							extraView.removeAllElements();
							extraView.visible = false;
						}
					}
					else
					{
						extraView.removeAllElements();
						extraView.visible = false;
					}
					
					if(!okButton.enabled)
						okButton.enabled = SelectedSliverType.name != node.sliverType.name;
				}
			}
			
			protected function hardwareList_valueCommitHandler(event:FlexEvent):void
			{
				hardwareTypeCheckbox.selected = hardwareList.selectedItem != null;
				if(!okButton.enabled)
					okButton.enabled = node.hardwareType.name != hardwareList.selectedItem;
			}
			
			protected function boundGroup_valueCommitHandler(event:FlexEvent):void
			{
				if(unboundRadiobutton.selected)
					loadUnbound();
				else
					loadBound();
				if(!okButton.enabled)
				{
					if(SelectedBounded)
						okButton.enabled = node.physicalId.full.length == 0;
					else
						okButton.enabled = node.physicalId.full.length > 0;
				}
			}
			
			private function addInstallService(installService:InstallService = null):void
			{
				var newInstallComponent:InstallServiceComponent = new InstallServiceComponent();
				if(installService != null)
				{
					newInstallComponent.url = installService.url;
					newInstallComponent.path = installService.installPath;
				}
				newInstallComponent.onChange = markEdited;
				installVgroup.addElement(newInstallComponent);
				if(!okButton.enabled)
					okButton.enabled = true;
			}
			
			private function addExecuteService(executeService:ExecuteService = null):void
			{
				var newExecuteComponent:ExecuteServiceComponent = new ExecuteServiceComponent();
				if(executeService != null)
				{
					newExecuteComponent.cmd = executeService.command;
					newExecuteComponent.shell = executeService.shell;
				}
				newExecuteComponent.onChange = markEdited;
				executeVgroup.addElement(newExecuteComponent);
				if(!okButton.enabled)
					okButton.enabled = true;
			}
			
			public function markEdited():void
			{
				if(!okButton.enabled)
					okButton.enabled = true;
			}
			
			public function fillLinksTo():void
			{
				if(linksVgroup == null || node == null)
					return;
				
				routableControlIpCheckbox.selected = node.emulabRoutableControlIp;
				
				linksVgroup.removeAllElements();
				var connectedInterfaces:VirtualInterfaceCollection = node.interfaces.Links.Interfaces;
				var connectedNodes:VirtualNodeCollection = connectedInterfaces.Nodes;
				connectedNodes.remove(node);
				
				for each(var connectedNode:VirtualNode in connectedNodes.collection)
				{
					var connectedNodeButton:DataButton = DisplayUtil.getVirtualNodeButton(connectedNode, false);
					connectedNodeButton.addEventListener(MouseEvent.CLICK, gotoNode);
					linksVgroup.addElement(connectedNodeButton);
					
					var connectedLinks:VirtualLinkCollection = node.interfaces.Links.getConnectedToNode(connectedNode);
					for each(var connectedLink:VirtualLink in connectedLinks.collection)
					{
						var pointLinkHbox:HGroup = new HGroup();
						var space:Rect = new Rect();
						space.width = 16;
						pointLinkHbox.addElement(space);
						var connectedLinkButton:DataButton = DisplayUtil.getVirtualLinkButton(connectedLink, false);
						connectedLinkButton.addEventListener(MouseEvent.CLICK, gotoLink);
						pointLinkHbox.addElement(connectedLinkButton);
						linksVgroup.addElement(pointLinkHbox);
					}
				}
			}
			
			override public function cancelPendingChanges():void
			{
				finishLoading(node);
			}
			
			public function cancelAndClose():void
			{
				cancelPendingChanges();
				close();
			}
			
			public function saveAndClose():void
			{
				if(save())
					return;
				close();
			}
			
			// true = failed
			public function save():Boolean
			{
				// Make sure we HAVE a client id
				if(clientIdInput.text.length == 0)
				{
					Alert.show(
						"Either choose an unbound node or choose a node to bind to.",
						"No bound node indicated");
					return true;
				}
				
				// Make sure the client_id is not taken
				if(!node.slice.isIdUnique(node, clientIdInput.text)) {
					Alert.show("Client ID '" + clientIdInput.text + "' is already in use, please choose a different client id");
					return true;
				}
				
				// Guarentee we have enough selected
				if(boundRadiobutton.selected && SelectedBoundNode == null)
				{
					Alert.show("Either choose an unbound node or choose a node to bind to.", "No bound node indicated");
					return true;
				}
				
				// Make sure we aren't trying to bind to a resource which cannot be bound to any more
				if(boundRadiobutton.selected
					&& SelectedBoundNode != null
					&& exclusiveCheckbox.selected
					&& !SelectedManager.supportedSliverTypes.getByNameOrDefault(SelectedSliverType.name).supportsShared)
				{
					var boundNodes:VirtualNodeCollection = node.slice.nodes.getBoundTo(SelectedBoundNode);
					if(boundNodes.length > 0)
					{
						for each(var boundNode:VirtualNode in boundNodes.collection)
						{
							if(boundNode != node)
							{
								Alert.show("The physical node being bound to is already bound on " + boundNode.clientId +", please choose a different node to bind to.");
								return true;
							}
						}
					}
				}
				
				// Make sure we can use the sliver_type
				if(SelectedSliverType.sliverTypeSpecific != null && !SelectedSliverType.sliverTypeSpecific.canAdd(node))
					return true;
				
				// Make sure extensions are valid
				var newNodeExtensions:Extensions = null;
				if(extensionsTextarea != null)
				{
					try
					{
						newNodeExtensions = Extensions.buildFromChildren(new XML("<blah>"+extensionsTextarea.text+"</blah>").children(), []);
					}
					catch(e:Error)
					{
						if(e.errorID == 1063)
							Alert.show("Prefixes must have namespaces declared. If they are, check that the XML is valid.");
						else
							Alert.show("There was a problem parsing the extensions XML, please make sure the XML is valid.");
						return true;
					}
				}
				
				// Start saving!
				
				node.slice.pushState();
				node.slice.history.stateName = "Edited " + node.clientId;
				
				if(newNodeExtensions != null)
					node.extensions = newNodeExtensions;
				
				node.clientId = clientIdInput.text;
				
				if(SelectedManager != node.manager)
					node.switchTo(SelectedManager);
				
				// Save changes based on binding
				if(unboundRadiobutton.selected)
				{
					if(!hardwareTypeCheckbox.selected)
						node.hardwareType.name = "";
					else
						node.hardwareType.name = hardwareList.selectedItem.name;
					node.physicalId.full = "";
					node.flackInfo.unbound = true;
				}
				else
				{
					node.hardwareType.name = "";
					var boundId:String = SelectedBoundNode.id.full;
					if(node.physicalId.full != boundId)
						node.flackInfo.unbound = false;
					node.physicalId.full = boundId;
				}
				
				node.exclusive = exclusiveCheckbox.selected;
				node.services.installServices = null;
				node.services.executeServices = null;
				node.sliverType.selectedImage = null;
				if(SelectedSliverType != null)
				{
					var selectedType:SupportedSliverType = SelectedManager.supportedSliverTypes.getByNameOrDefault(SelectedSliverType.name);
					node.sliverType.name = SelectedSliverType.name;
					
					if(diskImageText.visible && diskImageText.text.length > 0)
					{
						if(diskImageUrlCheckbox.selected)
							node.sliverType.selectedImage = new DiskImage("", "", diskImageVersionText.text, "", false, diskImageText.text);
						else
							node.sliverType.selectedImage = new DiskImage(diskImageText.text, "", diskImageVersionText.text);
					}
					var serviceIdx:int;
					if(selectedType.supportsInstallService)
					{
						if(installVgroup.numElements > 0)
						{
							node.services.installServices = new Vector.<InstallService>();
							for(serviceIdx = 0; serviceIdx < installVgroup.numElements; serviceIdx++)
							{
								var installService:InstallService = (installVgroup.getElementAt(serviceIdx) as InstallServiceComponent).Service;
								if(installService.url.length > 0)
									node.services.installServices.push(installService);
							}
						}
					}
					if(selectedType.supportsExecuteService)
					{
						if(executeVgroup.numElements > 0)
						{
							node.services.executeServices = new Vector.<ExecuteService>();
							for(serviceIdx = 0; serviceIdx < executeVgroup.numElements; serviceIdx++)
							{
								var executeService:ExecuteService = (executeVgroup.getElementAt(serviceIdx) as ExecuteServiceComponent).Service;
								if(executeService.command.length > 0)
									node.services.executeServices.push(executeService);
							}
						}
					}
					if(extraView.numElements == 1)
						(extraView.getElementAt(0) as SliverTypePart).saveTo(node);
				}
				else
				{
					node.sliverType.name = "";
					node.sliverType.selectedImage = null;
				}
				
				// Save changes to interfaces
				for each(var ifaceObj:Object in interfaces)
				{
					var iface:VirtualInterface = ifaceObj.source;
					iface.clientId = ifaceObj.clientId;
					iface.ip.bound = iface.ip.address != ifaceObj.ipaddress;
					iface.ip.address = ifaceObj.ipaddress;
					iface.bound = ifaceObj.binding.bound;
					iface.physicalId.full = ifaceObj.binding.physicalId;
					iface.ip.netmask = ifaceObj.ipnetmask;
					iface.ip.type = ifaceObj.iptype;
				}
				
				if(routableControlIpCheckbox != null)
					node.emulabRoutableControlIp = routableControlIpCheckbox.selected;
				
				node.unsubmittedChanges = true;
				
				SharedMain.sharedDispatcher.dispatchChanged(
					FlackEvent.CHANGED_SLICE,
					node.slice
				);
				
				okButton.enabled = false;
				
				return false;
			}
			
			public function gotoNode(e:MouseEvent):void
			{
				var nodeContent:VirtualNodeArea = new VirtualNodeArea();
				nodeContent.load((e.target as DataButton).data);
				openNext(nodeContent);
			}
			
			public function gotoLink(e:MouseEvent):void
			{
				var linkContent:VirtualLinkArea = new VirtualLinkArea();
				linkContent.load((e.target as DataButton).data);
				openNext(linkContent);
			}
			
			protected function createImageButton_clickHandler(event:MouseEvent):void
			{
				var promptForImageNameWindow:TextInputWindow = new TextInputWindow();
				promptForImageNameWindow.onSuccess = userChoseImageName;
				promptForImageNameWindow.title = "Please enter a name for the disk image.";
				promptForImageNameWindow.showWindow();
				promptForImageNameWindow.valueTextinput.restrict = "a-zA-Z0-9";
			}
			
			public function userChoseImageName(newName:String):void
			{
				if (node.manager.api.type == ApiDetails.API_GENIAM)
				{
					var amTask:CreateImageTask = new CreateImageTask(node, newName, diskImageGlobalCheckbox.selected);
					amTask.forceRunNow = true;
					SharedMain.tasker.add(amTask);
				}
				else if (node.manager.api.type == ApiDetails.API_PROTOGENI)
				{
					var cmTask:CreateImageCmTask = new CreateImageCmTask(node, newName, diskImageGlobalCheckbox.selected);
					cmTask.forceRunNow = true;
					SharedMain.tasker.add(cmTask);
				}
			}
			
			protected function diskImageText_changeHandler(event:Event):void
			{
				if(!okButton.enabled)
				{
					okButton.enabled = node.sliverType.selectedImage == null
										|| diskImageText.text != node.sliverType.selectedImage.id.full;
				}
			}
			
			private function diskImageUserDisplay(obj:Object):String
			{
				if(obj.length == 0)
					return "Add user and list disk images";
				return obj as String;
			}
			
			protected function diskImageUserSelect_changeHandler(event:IndexChangeEvent):void
			{
				if(diskImageUserSelect.selectedItem == null)
					return;
				if(diskImageUserSelect.selectedItem.length == 0) {
					SharedMain.tasker.add(new ListImagesTaskGroup());
					diskImageUserSelect.selectedIndex = -1;
				} else {
					loadUserDiskImages();
				}
			}
			
			protected function userDiskImageSelect_changeHandler(event:IndexChangeEvent):void
			{
				var selectedImage:DiskImage = userDiskImageSelect.selectedItem as DiskImage;
				if(selectedImage.id.authority == this.SelectedManager.id.authority)
				{
					diskImageText.text = selectedImage.id.full;
					diskSourceGroup.selection = diskImageNameCheckbox;
				}
				else
				{
					diskImageText.text = selectedImage.url;
					diskSourceGroup.selection = diskImageUrlCheckbox;
				}
			}
			
		]]>
	</fx:Script>
	
	<s:Group width="100%">
		<s:Rect width="100%" height="100%">
			<s:fill><s:SolidColor color="{backgroundColor}" /></s:fill>
		</s:Rect>
		
		<s:HGroup width="100%"
				  verticalAlign="middle"
				  paddingLeft="2"
				  paddingRight="2"
				  paddingTop="2"
				  paddingBottom="2"
				  gap="2">
			<s:TextInput id="clientIdInput"
						 width="100%"
						 fontWeight="bold"
						 fontSize="16"
						 restrict="a-zA-Z0-9\-"
						 maxChars="16"
						 toolTip="{node.clientId}"
						 change="if(!okButton.enabled) okButton.enabled = clientIdInput.text != node.clientId" />
			<s:Image id="statusImage"
					 visible="false" includeInLayout="{statusImage.visible}"
					 toolTip="Allocation: {node.allocationState}, Operational: {node.operationalState}" />
			<components:ImageButton id="errorButton"
									visible="false"
									includeInLayout="{errorButton.visible}"
									click="Alert.show(node.error,'Error Message')" />
			<s:Button id="manifestButton"
					  icon="{ImageUtil.manifestIcon}"
					  visible="false"
					  includeInLayout="{manifestButton.visible}"
					  label="View Manifest"
					  toolTip="View Manifest RSPEC"
					  click="viewManifest()" />
			<components:ImageButton id="dockIcon"
									icon="{ImageUtil.windowIcon}"
									toolTip="Pop out to a window or in to the main window"
									click="host.Docked ? popOut() : dock()" />
			<components:ImageButton id="closeIcon"
									icon="{ImageUtil.crossIcon}"
									toolTip="Close"
									click="close()" />
		</s:HGroup>
		
	</s:Group>
	
	<s:HGroup id="loginGroup"
			  width="100%"
			  verticalAlign="middle"
			  visible="false"
			  horizontalAlign="center"
			  paddingTop="2"
			  paddingLeft="2"
			  paddingRight="2"
			  paddingBottom="2"
			  gap="2"
			  includeInLayout="{loginGroup.visible}">
		<s:Label text="Username" fontWeight="bold" />
		<mx:Label id="usernameText" selectable="true" />
		<s:Label text="Hostname" fontWeight="bold" />
		<mx:Label id="hostnameText" selectable="true" />
		<s:Button id="visitButton" label="Visit" click="visitHost()" />
		<s:Button id="sshButton" label="SSH" click="openSsh()" />
	</s:HGroup>
	
	<s:ButtonBar dataProvider="{sectionViewstack}"
				 requireSelection="true"
				 skinClass="com.flack.shared.display.skins.ButtonBarSkin"
				 width="100%" />
	<mx:ViewStack id="sectionViewstack"
				  width="100%"
				  height="100%"
				  paddingTop="2"
				  paddingLeft="2"
				  paddingRight="2"
				  paddingBottom="2">
		<s:NavigatorContent icon="{ImageUtil.infoIcon}"
							toolTip="Basic"
							height="100%"
							width="100%">
			<s:VGroup height="100%"
					  width="100%"
					  gap="2">
				<s:HGroup width="100%"
						  gap="4">
					<s:VGroup width="20%"
							  gap="2">
						<s:Label text="Manager" fontWeight="bold" />
						<s:HGroup width="100%">
							<s:DropDownList id="managerList"
											toolTip="Select a manager..."
											prompt="Select a manager..."
											width="100%"
											labelField="hrn"
											dataProvider="{managers}"
											valueCommit="managerList_valueCommitHandler(event)" />
							<components:ImageButton id="viewManagerButton"
													icon="{ImageUtil.infoIcon}"
													click="DisplayUtil.viewManager(managerList.selectedItem)" />
						</s:HGroup>
					</s:VGroup>
					
					<s:VGroup width="60%"
							  gap="2">
						<s:Label text="Binding" fontWeight="bold" />
						<s:HGroup width="100%"
								  gap="2"
								  verticalAlign="middle"
								  id="unboundVgroup">
							<s:RadioButton id="unboundRadiobutton"
										   group="{boundGroup}"
										   label="Unbound" />
							<s:CheckBox id="hardwareTypeCheckbox" />
							<s:DropDownList id="hardwareList"
											toolTip="Type..."
											prompt="Type..."
											enabled="{!SelectedBounded}"
											requireSelection="{hardwareTypeCheckbox.selected}"
											labelField="name"
											valueCommit="hardwareList_valueCommitHandler(event)"
											dataProvider="{hardwareForVirtual}"
											width="100%" />
						</s:HGroup>
						<s:HGroup width="100%"
								  gap="2"
								  verticalAlign="middle"
								  id="boundVgroup">
							<s:RadioButton id="boundRadiobutton"
										   group="{boundGroup}"
										   label="Bound to" />
							<s:DropDownList id="boundDropDownList"
											dataProvider="{physicalNodes}"
											width="100%" 
											valueCommit="boundDropDownList_valueCommitHandler(event)"
											change="if(!okButton.enabled) okButton.enabled = true;"
											labelField="name" />
							<components:ImageButton id="viewPhysicalNode"
													icon="{ImageUtil.infoIcon}"
													enabled="{boundDropDownList.selectedItem != null}"
													click="DisplayUtil.viewPhysicalNode(boundDropDownList.selectedItem)" />
						</s:HGroup>
						
					</s:VGroup>
					<s:VGroup width="20%"
							  gap="2">
						<s:Label text="Sliver Type"
								 fontWeight="bold" />
						<s:DropDownList id="sliverTypeDropDownList"
										dataProvider="{sliverTypes}"
										width="100%"
										labelField="name"
										valueCommit="sliverTypeDropDownList_valueCommitHandler(event)" />
						<s:CheckBox id="exclusiveCheckbox"
									valueCommit="if(!okButton.enabled) okButton.enabled = exclusiveCheckbox.selected != node.exclusive"
									label="Exclusive?" />
					</s:VGroup>
				</s:HGroup>
				<components:DefaultLine percentWidth="100" />
				<s:VGroup id="diskImageGroup"
						  width="100%"
						  gap="2"
						  verticalAlign="top"
						  includeInLayout="{diskImageGroup.visible}">
					<s:HGroup width="100%"
							  gap="2"
							  verticalAlign="middle">
						<s:Label text="Disk Image"
								 fontWeight="bold" />
						<s:Rect />
						<s:VGroup width="100%">
							<s:DropDownList id="diskImageSelect"
											width="100%"
											prompt="Select advertised image"
											dataProvider="{diskImages}"
											labelField="description"
											change="diskImageText.text = diskImageSelect.selectedItem.id.full; diskImageNameCheckbox.selected = true;" />
							<s:HGroup width="100%">
								<s:DropDownList id="diskImageUserSelect"
												width="100%"
												prompt="Select a user for user-created disk images"
												dataProvider="{diskImageUsers}"
												labelFunction="diskImageUserDisplay"
												change="diskImageUserSelect_changeHandler(event)" />
								<s:DropDownList id="userDiskImageSelect"
												width="100%"
												prompt="Select user-created disk image"
												dataProvider="{userDiskImages}"
												labelField="description"
												change="userDiskImageSelect_changeHandler(event)" />
							</s:HGroup>
							
						</s:VGroup>
						<s:Rect />
						<s:Button id="createImageButton"
								  visible="false"
								  includeInLayout="{createImageButton.visible}"
								  label="Create image"
								  click="createImageButton_clickHandler(event)" />
						<s:CheckBox id="diskImageGlobalCheckbox"
									label="Global"
									toolTip="Allow other users to use this image?"
									selected="true"
									visible="{createImageButton.visible}"
									includeInLayout="{diskImageGlobalCheckbox.visible}" />
					</s:HGroup>
					<s:HGroup width="100%"
							  gap="2">
						<s:RadioButton id="diskImageNameCheckbox"
									   group="{diskSourceGroup}"
									   selected="true"
									   label="Name"
									   toolTip="Name for images available on this manager." />
						<s:RadioButton id="diskImageUrlCheckbox"
									   group="{diskSourceGroup}"
									   label="URL"
									   toolTip="URL for images from a different manager." />
						<s:TextInput id="diskImageText"
									 width="100%"
									 prompt="Select image above, paste URN, or manually type OSID"
									 change="diskImageText_changeHandler(event)"
									 valueCommit="diskImageText_changeHandler(event)" />
					</s:HGroup>
					<s:HGroup width="100%"
							  verticalAlign="middle"
							  gap="2">
						<s:Label text="Version" />
						<s:TextInput id="diskImageVersionText"
									 width="100%"
									 prompt="If required, give a disk image version."
									 change="if(!okButton.enabled) okButton.enabled = exclusiveCheckbox.selected != node.exclusive" />
					</s:HGroup>
				</s:VGroup>
				<components:DefaultLine percentWidth="100" />
				<s:HGroup width="100%"
						  height="100%"
						  gap="2"
						  id="servicesGroup"
						  visible="{installServicesVgroup.visible || executeServicesVgroup.visible}"
						  includeInLayout="{servicesGroup.visible}">
					<s:VGroup id="installServicesVgroup"
							  width="100%"
							  height="100%"
							  gap="2"
							  includeInLayout="{installServicesVgroup.visible}">
						<s:HGroup width="100%"
								  gap="2"
								  verticalAlign="middle">
							<s:Label text="Install"
									 fontWeight="bold" />
							<s:Rect percentWidth="100" />
							<s:Button id="addInstallButton"
									  icon="{ImageUtil.addIcon}"
									  label="Add Install Service"
									  click="addInstallService()" />
						</s:HGroup>
						
						<s:Scroller width="100%" height="100%">
							<s:VGroup id="installVgroup"
									  width="100%"
									  paddingRight="2"
									  gap="2" />
						</s:Scroller>
					</s:VGroup>
					<s:VGroup id="executeServicesVgroup"
							  width="100%"
							  height="100%"
							  gap="2"
							  includeInLayout="{executeServicesVgroup.visible}">
						<s:HGroup width="100%"
								  verticalAlign="middle"
								  gap="2">
							<s:Label text="Execute"
									 fontWeight="bold" />
							<s:Rect percentWidth="100" />
							<s:Button id="addExecuteButton"
									  icon="{ImageUtil.addIcon}"
									  label="Add Execute Service"
									  click="addExecuteService()" />
						</s:HGroup>
						<s:Scroller width="100%" height="100%">
							<s:VGroup id="executeVgroup"
									  width="100%"
									  paddingRight="2"
									  gap="2" />
						</s:Scroller>
					</s:VGroup>
				</s:HGroup>
				<s:VGroup id="extraView"
						  width="100%"
						  height="100%"
						  includeInLayout="{extraView.visible}" />
			</s:VGroup>
		</s:NavigatorContent>
		<s:NavigatorContent icon="{ImageUtil.linkIcon}"
							toolTip="Interfaces and Links"
							height="100%"
							width="100%">
			<s:VGroup creationComplete="fillLinksTo();"
					  width="100%"
					  height="100%"
					  gap="2">
				<s:DataGrid id="interfaceGrid"
							width="100%"
							height="40%" 
							dataProvider="{interfaces}"
							rowHeight="24"
							editable="true"
							gridItemEditorSessionSave="okButton.enabled = true">
					<s:columns>
						<s:ArrayList>
							<s:GridColumn dataField="clientId"
										  headerText="Interface">
								<s:itemEditor>
									<fx:Component>
										<s:DefaultGridItemEditor />
									</fx:Component>
								</s:itemEditor>
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer />
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							<s:GridColumn dataField="binding"
										  headerText="Physical">
								<s:itemRenderer>
									<fx:Component>
										<display:VirtualBoundInterfaceGridRenderer />
									</fx:Component>
								</s:itemRenderer>
								<s:itemEditor>
									<fx:Component>
										<display:VirtualBoundInterfaceEditor />
									</fx:Component>
								</s:itemEditor>
							</s:GridColumn>
							<s:GridColumn dataField="macAddress"
										  headerText="MAC"
										  editable="false">
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer />
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							<s:GridColumn dataField="ipaddress"
										  headerText="IP">
								<s:itemEditor>
									<fx:Component>
										<s:DefaultGridItemEditor />
									</fx:Component>
								</s:itemEditor>
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer />
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							<s:GridColumn dataField="ipnetmask" 
										  headerText="Mask">
								<s:itemEditor>
									<fx:Component>
										<s:DefaultGridItemEditor />
									</fx:Component>
								</s:itemEditor>
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer />
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							<s:GridColumn dataField="iptype" 
										  headerText="Type">
								<s:itemEditor>
									<fx:Component>
										<s:DefaultGridItemEditor />
									</fx:Component>
								</s:itemEditor>
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer />
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
						</s:ArrayList> 
					</s:columns>
				</s:DataGrid>
				<s:CheckBox id="routableControlIpCheckbox"
							label="Routable Control IP (Emulab only)"
							change="okButton.enabled = true" />
				<s:Scroller width="100%"
							height="60%">
					<s:VGroup width="100%"
							  height="100%"
							  gap="2"
							  id="linksVgroup" />
				</s:Scroller>
			</s:VGroup>
		</s:NavigatorContent>
		<s:NavigatorContent icon="{ImageUtil.extensionsIcon}"
							toolTip="Extensions"
							height="100%"
							width="100%">
			<s:VGroup width="100%"
					  height="100%"
					  gap="2"
					  creationComplete="initExtensions()">
				<s:Label text="ALL Namespace declarations MUST be included for new extensions pasted below." />
				<s:TextArea id="extensionsTextarea"
							width="100%"
							height="100%" />
			</s:VGroup>
		</s:NavigatorContent>
	</mx:ViewStack>
	
	<s:Group width="100%">
		<s:Rect width="100%" height="100%">
			<s:fill><s:SolidColor color="0xCCCCCC" /></s:fill>
		</s:Rect>
		
		<s:HGroup width="100%"
				  verticalAlign="middle"
				  paddingLeft="2"
				  paddingRight="2"
				  paddingTop="2"
				  paddingBottom="2"
				  gap="2">
			<s:Button id="okButton"
					  label="Apply"
					  enabled="false"
					  icon="{ImageUtil.availableIcon}"
					  click="saveAndClose();" />
			<s:Button id="cancelButton"
					  label="Cancel"
					  icon="{ImageUtil.cancelIcon}"
					  click="cancelAndClose();" />
		</s:HGroup>
	</s:Group>
</sharedareas:AreaContent>
