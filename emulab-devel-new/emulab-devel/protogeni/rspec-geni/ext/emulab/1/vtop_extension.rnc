#
# EMULAB-COPYRIGHT
# Copyright (c) 2010 University of Utah and the Flux Group.
# All rights reserved.
#

#
# Description of Emulab-specific extensions for a virtual topology
#
namespace emulab = "http://www.protogeni.net/resources/rspec/ext/emulab/1"

#
# We include the common topology extension specification schema, 
#
include "top_extension.rnc"

## Provides hints to assign regarding the physical node to which this
## virtual node should be mapped
HintToSpec = element emulab:hint_to { attribute value { text } }?

## "Legacy" assign node flags - will be replaced with properties, and in some
## cases, explicit links
NodeFlagSpec =
    ## Indicates that virtual links must either all be trivial (loopback), or
    ## none of them must be. Possibly expressible with properties?
    element emulab:disallow_trivial_mix { empty }?

## "Legacy" link flags used by assign. Will be replaced by properties
LinkFlagSpec = 
    ## Indicates that it is not okay to use a delay node to artificially
    ## shape/delay traffic for this link. Replace by using type system.
    element emulab:nodelay { empty }? &

    ## Indicates whether it is okay to multiplex this link with other virtual
    ## links onto the same physical link (old name: emulated) Probably replace
    ## by using the type system (ie. have an 'Ethernet' type that can only
    ## hold one slot,  and an 'Ethernet-tagged' type that can hold more).
    element emulab:multiplex_ok { empty }? &

    ## Indicates whether it is okay to satisfy this link with a trivial
    ## (loopback) link. Replace using type system.
    element emulab:trivial_ok { empty }?

## Gives the name of the interface that must be used to satisfy the source
## of this link - note that the interface name is given, not the node name
FixedInterfaceSpec = 
	element emulab:fixedinterface { attribute name { text } } 

## Specify a virtual class - assign allows you to define classes for virtual
## nodes, and specify that all nodes using that class should, or must, be
## assigned to physical nodes of the same type
VclassSpec = element emulab:vclass {
    ## Name of the virtual class
    attribute name { text } &
    ## Specify whether the vclass is hard (ie. all nodes *must* be of the same
    ## type) or soft (ie. violating it is allowed, but penalize)
    attribute weight { "hard" | xsd:float { minInclusive = "0.0" } } &
    ## The physical types associated with this vclass
    element emulab:physical_type { attribute name { text } }+
}

# Information about the virtual node in the nodes table assigned to a
# particular node.
VnodeSpec = element emulab:vnode { attribute name { text } }

start = HintToSpec | NodeFlagSpec | LinkFlagSpec | VclassSpec 
      		   | FixedInterfaceSpec | VnodeSpec

