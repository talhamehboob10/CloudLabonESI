#
# Utah changes to speed up mountd updates in the presence of 2000+ entries
# in the exports file. This includes doing incremental updates to the kernel
# export info (as opposed to completely removing the info and then putting
# it all in again), caching of "--maproot=root" credentials, and some stats
# collection and reporting. N.B. I have only ever tested these changes with
# NFSv3 and I doubt very much they will work with v4! 
#
#   cd /usr/src/usr.sbin
#   sudo patch -p0 < patchfile
#

diff -Nur mountd.orig/Makefile mountd/Makefile
--- mountd.orig/Makefile	2020-11-23 08:14:25.261385000 -0700
+++ mountd/Makefile	2021-07-25 16:10:50.435201000 -0600
@@ -9,6 +9,9 @@
 CFLAGS+= -I${MOUNT}
 WARNS?= 2
 
+# Emulab-specific CFLAGS
+CFLAGS+= -DCACHE_ROOT_CRED # -g # -pg -O0 # -DDEBUG
+
 .PATH: ${MOUNT}
 
 LIBADD=	util
diff -Nur mountd.orig/mountd.c mountd/mountd.c
--- mountd.orig/mountd.c	2020-11-23 08:14:25.259043000 -0700
+++ mountd/mountd.c	2021-07-25 16:24:36.642313000 -0600
@@ -3439,6 +3439,15 @@
 	struct group *gr;
 	gid_t groups[XU_NGROUPS + 1];
 	int ngroups;
+#ifdef CACHE_ROOT_CRED
+	/*
+	 * Cache credential for -maproot=root, which is common and
+	 * typically does not change. This really matters when you have
+	 * thousands of export lines with -maproot=root. Otherwise you
+	 * burn up half your time stat()ing /etc/nsswitch.conf.
+	 */
+	static struct xucred rootcred;
+#endif
 
 	cr->cr_version = XUCRED_VERSION;
 	/*
@@ -3465,6 +3474,12 @@
 			syslog(LOG_ERR, "unknown user: %s", name);
 			return;
 		}
+#ifdef CACHE_ROOT_CRED
+		if (pw->pw_uid == 0 && rootcred.cr_ngroups > 0) {
+			*cr = rootcred;
+			return;
+		}
+#endif
 		cr->cr_uid = pw->pw_uid;
 		ngroups = XU_NGROUPS + 1;
 		if (getgrouplist(pw->pw_name, pw->pw_gid, groups, &ngroups)) {
@@ -3487,6 +3502,19 @@
 			for (cnt = 1; cnt < cr->cr_ngroups; cnt++)
 				cr->cr_groups[cnt] = groups[cnt];
 		}
+#ifdef CACHE_ROOT_CRED
+		if (cr->cr_uid == 0) {
+			rootcred = *cr;
+			if (debug) {
+				fprintf(stderr, "caching root credentials: %d",
+					rootcred.cr_uid);
+				for (cnt = 0; cnt < rootcred.cr_ngroups; cnt++)
+					fprintf(stderr, "/%d",
+						rootcred.cr_groups[cnt]);
+				fprintf(stderr, "\n");
+			}
+		}
+#endif
 		return;
 	}
 	/*
@@ -3697,7 +3725,7 @@
 		}
 		cp++;
 	}
-	if (lstat(dirp, &sb) < 0 || !S_ISDIR(sb.st_mode))
+	if (ret && (lstat(dirp, &sb) < 0 || !S_ISDIR(sb.st_mode)))
 		ret = 0;
 	return (ret);
 }
