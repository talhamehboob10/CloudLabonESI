#!/usr/bin/perl -wT
#
# Copyright (c) 2005, 2006, 2007, 2008 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;
use Fcntl ':flock';

#
# Add a user to the wiki on ops. Also allow update of password.
#
sub usage()
{
    print STDOUT "Usage: addwikiuser [-u] <uid>\n";
    exit(-1);
}
my $optlist = "ud";
my $update  = 0;
my $debug   = 0;

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";
my $CONTROL     = "@USERNODE@";
my $BOSSNODE	= "@BOSSNODE@";
my $WIKISUPPORT = @WIKISUPPORT@;
my $SSH         = "$TB/bin/sshtb";
my $WIKIPROXY   = "$TB/sbin/wikiproxy";
my $lockfile    = "/var/tmp/testbed_wikiuser_lockfile";

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/usr/bin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Load the Testbed support stuff. 
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;
use User;

# Protos
sub fatal($);

#
# We don't want to run this script unless its the real version.
#
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be setuid! Maybe its a development version?\n");
}

#
# This script is setuid, so please do not run it as root. Hard to track
# what has happened.
# 
if ($UID == 0) {
    die("*** $0:\n".
	"    Please do not run this as root! Its already setuid!\n");
}

#
# If no wiki support, just exit. 
#
if (! $WIKISUPPORT) {
    print "WIKI support is not enabled. Exit ...\n";
    exit(0);
}

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"u"})) {
    $update = 1;
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (@ARGV != 1) {
    usage();
}
my $user = $ARGV[0];

#
# Untaint args.
#
if ($user =~ /^([-\w]+)$/) {
    $user = $1;
}
else {
    die("Bad data in user: $user.");
}

# Map target user to object.
my $target_user = User->Lookup($user);
if (! defined($target_user)) {
    fatal("$user does not exist!");
}

#
# We need to serialize this script to avoid a trashed map file. Use
# a dummy file in /var/tmp, opened for writing and flock'ed. 
#
if (1) {
    open(LOCK, ">>$lockfile") || fatal("Couldn't open $lockfile\n");
    $count = 0;
    if (flock(LOCK, LOCK_EX|LOCK_NB) == 0) {
	#
	# If we don't get it the first time, we wait for:
	# 1) The lock to become free, in which case we do our thing
	# 2) The time on the lock to change, in which case we wait for that process
	#    to finish
	#
	my $oldlocktime = (stat(LOCK))[9];
	my $gotlock = 0;
	while (1) {
	    print "Another exports update in progress, ".
		"waiting for it to finish\n";
	    if (flock(LOCK, LOCK_EX|LOCK_NB) != 0) {
		# OK, got the lock, we can do what we're supposed to
		$gotlock = 1;
		last;
	    }
	    $locktime = (stat(LOCK))[9];
	    if ($locktime != $oldlocktime) {
		$oldlocktime = $locktime;
		last;
	    }
	    if ($count++ > 20)  {
		fatal("Could not get the lock after a long time!\n");
	    }
	    sleep(1);
	}

	$count = 0;
	#
	# If we didn't get the lock, wait for the processes that did to finish
	#
	if (!$gotlock) {
	    while (1) {
		if ((stat(LOCK))[9] != $oldlocktime) {
		    exit(0);
		}
		if (flock(LOCK, LOCK_EX|LOCK_NB) != 0) {
		    close(LOCK);
		    exit(0);
		}
		if ($count++ > 30)  {
		    fatal("Process with the lock did not finish ".
			  "after a long time!\n");
		}
		sleep(1); 
	    }
	}
    }
}

#
# Perl-style touch(1)
#
my $now = time;
utime $now, $now, $lockfile;

#
# This script always does the right thing, so no permission checks.
# In fact, all it does it call over to ops to run a script over there.
# Note that adduser will just update the password if the user already
# exist in the wiki. 
#

#
# Look in the DB to see if there is already a wikiname defined. If
# we use that. Otherwise have to form one from the user name. Ick.
#
my $wikiname  = $target_user->wikiname();
my $usr_name  = $target_user->name();
my $usr_email = $target_user->email();
my $usr_pswd  = $target_user->pswd();

if (!defined($wikiname)) {
    # In update mode, do nothing if no wikiname.
    exit(0)
	if ($update);
    
    my @tokens = split(/\s+|-/, $usr_name);

    #
    # Build a wikiname from the tokens. Lowercase each token, then
    # captialize it, then run them all together. Oh, get rid of any
    # non alphanum characters.
    #
    $wikiname = "";

    foreach my $token (@tokens) {
	$token = ucfirst(lc($token));
	$token =~ s/\.//g;
	$wikiname .= $token;
    }

    #
    # Check to make sure the wikiname does not violate the wikirules!
    # If it does, just skip. User will have to plug in a new name.
    #
    if (! ($wikiname =~ /^[A-Z]+[a-z]+[A-Z]+[A-Za-z0-9]*$/)) {
	fatal("Bad WikiName: $wikiname. Not setting up account");
    }

    #
    # Make sure that no other user has the same wikiname.
    #
    fatal("The wikiname for $user ($wikiname) is already in use!")
	if (User->LookupByWikiName($wikiname));

    print "Selecting wikiname '$wikiname' for user $user\n";

    my %update_args = ("wikiname" => $wikiname);

    fatal("Could not update wikiname for $target_user")
	if ($target_user->Update(\%update_args) != 0);
}

#
# For ssh.
#
$UID = $EUID;

if ($CONTROL ne $BOSSNODE) {
    my $optarg = ($debug ? "-d" : "");
	
    if ($update) {
	print "Updating $user wiki info on $CONTROL.\n";
    }
    else {
	print "Adding user $user to the wiki on $CONTROL.\n";
    }

    # shell escape.
    $usr_pswd  =~ s/\$/\\\$/g;
    $usr_pswd  =~ s/\*/\\\*/g;

    if (system("$SSH -host $CONTROL $WIKIPROXY ".
	       "  $optarg adduser $user $wikiname '$usr_pswd'")) {
	fatal("$WIKIPROXY failed on $CONTROL!");
    }
}
exit(0);

sub fatal($)
{
    my($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}
