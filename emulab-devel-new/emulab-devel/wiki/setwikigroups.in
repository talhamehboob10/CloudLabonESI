#!/usr/bin/perl -wT
#
# Copyright (c) 2005, 2006, 2007 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;

#
# Set the wiki groups for a user. Currently we just do the projects.
#
sub usage()
{
    print STDOUT "Usage: setwikigroups <uid>\n";
    exit(-1);
}
my $optlist = "d";
my $debug   = 0;
my @glist   = ();

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";
my $CONTROL     = "@USERNODE@";
my $BOSSNODE	= "@BOSSNODE@";
my $WIKISUPPORT = @WIKISUPPORT@;
my $SSH         = "$TB/bin/sshtb";
my $WIKIPROXY   = "$TB/sbin/wikiproxy";

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/usr/bin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Load the Testbed support stuff. 
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;
use User;

# Protos
sub fatal($);

#
# We don't want to run this script unless its the real version.
#
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be setuid! Maybe its a development version?\n");
}

#
# This script is setuid, so please do not run it as root. Hard to track
# what has happened.
# 
if ($UID == 0) {
    die("*** $0:\n".
	"    Please do not run this as root! Its already setuid!\n");
}

#
# If no wiki support, just exit. 
#
if (! $WIKISUPPORT) {
    print "WIKI support is not enabled. Exit ...\n";
    exit(0);
}

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (@ARGV != 1) {
    usage();
}
my $user = $ARGV[0];

#
# Untaint args.
#
if ($user =~ /^([-\w]+)$/) {
    $user = $1;
}
else {
    die("Bad data in user: $user.");
}

# Map target user to object.
my $target_user = User->Lookup($user);
if (! defined($target_user)) {
    fatal("$user does not exist!");
}
my $uid_idx = $target_user->uid_idx();

#
# This script always does the right thing, so no permission checks.
# In fact, all it does is call over to ops to run a script over there.
# Note that adduser will just update the password if the user already
# exist in the wiki. 
#
my $query_result =
    DBQueryFatal("select p.pid,g.wikiname,p.trust from group_membership as p ".
		 "left join groups as g on g.pid=p.pid and g.gid=p.gid ".
		 "where uid_idx='$uid_idx' and p.pid=g.gid and trust!='none'");

while (my ($pid,$wikiname,$trust) = $query_result->fetchrow_array()) {
    if (!defined($wikiname)) {
	print "There is no wikiname defined in the DB for project $pid!\n";
	next;
    }
    push(@glist, $wikiname);

    #
    # Add to the root group for the project if proj/group root.
    # This root project name is hardwired in the wikiproxy. Sorry.
    #
    if ($trust eq "project_root" || $trust eq "group_root") {
	push(@glist, "${wikiname}Root");
    }
}

my $wikiname = $target_user->wikiname();
if (!defined($wikiname)) {
    print "There is no wikiname defined in the DB. ".
	"Must not have a wiki account!\n";
    exit(0);
}

if ($target_user->admin()) {
    push(@glist, "TWikiAdmin");
}
exit(0)
    if (! @glist);

#
# For ssh.
#
$UID = $EUID;

if ($CONTROL ne $BOSSNODE) {
    my $optarg = ($debug ? "-d" : "");
	
    print "Setting wikigroups for $user on $CONTROL.\n";

    if (system("$SSH -host $CONTROL $WIKIPROXY ".
	       "  $optarg setgroups $wikiname @glist")) {
	fatal("$WIKIPROXY failed on $CONTROL!");
    }
}
exit(0);

sub fatal($)
{
    my($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}
