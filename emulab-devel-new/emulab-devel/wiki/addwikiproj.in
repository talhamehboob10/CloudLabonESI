#!/usr/bin/perl -wT
#
# Copyright (c) 2005, 2006 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;

#
# Add a project to the wiki on ops.
#
sub usage()
{
    print STDOUT "Usage: addwikiproj <pid>\n";
    exit(-1);
}
my $optlist = "d";
my $debug   = 0;

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";
my $CONTROL     = "@USERNODE@";
my $BOSSNODE	= "@BOSSNODE@";
my $WIKISUPPORT = @WIKISUPPORT@;
my $SSH         = "$TB/bin/sshtb";
my $WIKIPROXY   = "$TB/sbin/wikiproxy";

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/usr/bin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Load the Testbed support stuff. 
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;

# Protos
sub fatal($);

#
# We don't want to run this script unless its the real version.
#
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be setuid! Maybe its a development version?\n");
}

#
# This script is setuid, so please do not run it as root. Hard to track
# what has happened.
# 
if ($UID == 0) {
    die("*** $0:\n".
	"    Please do not run this as root! Its already setuid!\n");
}

#
# If no wiki support, just exit. 
#
if (! $WIKISUPPORT) {
    print "WIKI support is not enabled. Exit ...\n";
    exit(0);
}

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (@ARGV != 1) {
    usage();
}
my $pid = $ARGV[0];

#
# Untaint args.
#
if ($pid =~ /^([-\w]+)$/) {
    $pid = $1;
}
else {
    die("Bad data in pid: $pid");
}

#
# This script always does the right thing, so no permission checks.
# In fact, all it does it call over to ops to run a script over there.
# Note that the proxy will just update the password if the user already
# exist in the wiki. 
#
# Look in the DB to see if there is already a wikiname defined. If
# we use that. Otherwise have to form one from the pid. Ick.
#
my $query_result =
    DBQueryFatal("select wikiname from groups where pid='$pid' and pid=gid");

if (!$query_result->numrows) {
    fatal("No such pid $pid in the DB!");
}
my ($wikiname) = $query_result->fetchrow_array();

if (!defined($wikiname)) {
    #
    # The wikirules for web names are slightly easier to deal with.
    # Note that there will also be a *Group name created from the token.
    #
    $wikiname = ucfirst($pid);

    if ($wikiname =~ /[-_]/) {
	my @tokens = split(/[-_]/, $wikiname);

	$wikiname = "";

	#
	# Make sure the first letter of each token is a caps.
	# 
	foreach my $token (@tokens) {
	    $wikiname .= ucfirst($token);
	}
    }

    #
    # Check to make sure the wikiname does not violate the wikirules!
    # If it does, just skip. User will have to plug in a new name.
    #
    if (! ($wikiname =~ /^[A-Z]+[A-Za-z0-9]*$/)) {
	print "Bad WikiName for Project $pid: $wikiname\n";
	next;
    }

    #
    # We are not likely to get dups for a project name, but make sure
    # anyway.
    #
    $query_result =
	DBQueryFatal("select pid from groups ".
		     "where wikiname='$wikiname'");

    if ($query_result->numrows) {
	fatal("The wikiname for project $pid ($wikiname) is already in use!");
    }
    print "Selecting wikiname '$wikiname' for project $pid\n";

    DBQueryFatal("update groups set wikiname='$wikiname' ".
		 "where pid='$pid' and pid=gid");
}

#
# For ssh.
#
$UID = $EUID;

if ($CONTROL ne $BOSSNODE) {
    my $optarg = ($debug ? "-d" : "");
	
    print "Adding project $pid to the wiki on $CONTROL.\n";

    if (system("$SSH -host $CONTROL $WIKIPROXY ".
	       "  $optarg addproject $pid $wikiname")) {
	fatal("$WIKIPROXY failed on $CONTROL!");
    }
}
exit(0);

sub fatal($)
{
    my($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}
