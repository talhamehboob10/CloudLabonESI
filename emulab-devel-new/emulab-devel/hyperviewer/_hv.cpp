/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.21
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};                                                    
#endif


#include "Python.h"

/*************************************************************** -*- c -*-
 * python/precommon.swg
 *
 * Rename all exported symbols from common.swg, to avoid symbol
 * clashes if multiple interpreters are included
 *
 ************************************************************************/

#define SWIG_TypeRegister    SWIG_Python_TypeRegister
#define SWIG_TypeCheck       SWIG_Python_TypeCheck
#define SWIG_TypeCast        SWIG_Python_TypeCast
#define SWIG_TypeDynamicCast SWIG_Python_TypeDynamicCast
#define SWIG_TypeName        SWIG_Python_TypeName
#define SWIG_TypeQuery       SWIG_Python_TypeQuery
#define SWIG_TypeClientData  SWIG_Python_TypeClientData
#define SWIG_PackData        SWIG_Python_PackData 
#define SWIG_UnpackData      SWIG_Python_UnpackData 


/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if defined(_MSC_VER) || defined(__GNUC__)
#    if defined(STATIC_LINKED)
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) extern a
#    else
#      define SWIGEXPORT(a) __declspec(dllexport) a
#      define SWIGIMPORT(a) extern a
#    endif
#  else
#    if defined(__BORLANDC__)
#      define SWIGEXPORT(a) a _export
#      define SWIGIMPORT(a) a _export
#    else
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) a
#    endif
#  endif
#else
#  define SWIGEXPORT(a) a
#  define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#  define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#  define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(const char *)     SWIG_TypeName(const swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);
SWIGIMPORT(char *)           SWIG_PackData(char *, void *, int);
SWIGIMPORT(char *)           SWIG_UnpackData(char *, void *, int);

#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti) {
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
  l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) {
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/* Return the name associated with this type */
SWIGRUNTIME(const char *)
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata == clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = swig_type_list;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0))
          SWIG_TypeClientData(tc,clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  int i;
  unsigned char *u = (unsigned char *) ptr;
  register unsigned char uu;
  for (i = 0; i < sz; i++,u++) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  int i;
  for (i = 0; i < sz; i++, u++) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

#endif

#ifdef __cplusplus
}
#endif

/***********************************************************************
 * python.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#include "Python.h"

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Flags for pointer conversion */

#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

/* Exception handling in wrappers */
#define SWIG_fail   goto fail

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags) \
  SWIG_Python_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags) \
  SWIG_Python_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags) \
  SWIG_Python_MustGetPtr(p, type, argnum, flags)

/* Python-specific SWIG API */
#define SWIG_newvarlink() \
  SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr) \
  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags) \
  SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type) \
  SWIG_Python_NewPackedObj(ptr, sz, type)
#define SWIG_InstallConstants(d, constants) \
  SWIG_Python_InstallConstants(d, constants)

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(int)               SWIG_Python_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGIMPORT(PyObject *)        SWIG_Python_NewPointerObj(void *, swig_type_info *,int own);
SWIGIMPORT(void *)            SWIG_Python_MustGetPtr(PyObject *, swig_type_info *, int, int);
SWIGIMPORT(PyObject *)        SWIG_Python_newvarlink(void);
SWIGIMPORT(void)              SWIG_Python_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGIMPORT(int)               SWIG_Python_ConvertPacked(PyObject *, void *, int sz, swig_type_info *, int);
SWIGIMPORT(PyObject *)        SWIG_Python_NewPackedObj(void *, int sz, swig_type_info *);
SWIGIMPORT(void)              SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]);

#else

/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

statichere PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,
  (char *)"swigvarlink",              /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */
SWIGRUNTIME(PyObject *)
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGRUNTIME(void)
SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c = 0;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;

  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }
#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  *ptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto cobject;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
      if (newref) { Py_DECREF(obj); }
      return 0;
    } else {
      if (newref) { Py_DECREF(obj); }
      goto type_error;
    }
  }
  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (newref) { Py_DECREF(obj); }
#endif

#ifdef SWIG_COBJECT_TYPES
cobject:
#endif

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,(void*) *ptr);
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
    PyObject *zero = PyInt_FromLong(0);
    PyObject_SetAttrString(pyobj,(char*)"thisown",zero);
    Py_DECREF(zero);
  }
  return 0;

type_error:
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty && c) {
      char *temp = (char *) malloc(64+strlen(ty->name)+strlen(c));
      sprintf(temp,"Type error. Got %s, expected %s", c, ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME(void *)
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  SWIG_Python_ConvertPtr(obj, &result, ty, flags | SWIG_POINTER_EXCEPTION);
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME(int)
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c = 0;

  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:

  if (flags) {
    if (ty && c) {
      char *temp = (char *) malloc(64+strlen(ty->name)+strlen(c));
      sprintf(temp,"Type error. Got %s, expected %s", c, ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Create a new pointer object */
SWIGRUNTIME(PyObject *)
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, (char *) type->name, NULL);
#else
  {
    char result[1024];
    char *r = result;
    *(r++) = '_';
    r = SWIG_PackData(r,&ptr,sizeof(void *));
    strcpy(r,type->name);
    robj = PyString_FromString(result);
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
        PyObject *n = PyInt_FromLong(1);
        PyObject_SetAttrString(inst,(char*)"thisown",n);
        Py_DECREF(n);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME(PyObject *)
SWIG_Python_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return PyString_FromString(result);
}

/* Install Constants */
SWIGRUNTIME(void)
SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      obj = PyString_FromString((char *) constants[i].pvalue);
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
      break;
    case SWIG_PY_BINARY:
      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

#endif

/* Contract support */

#define SWIG_contract_assert(expr, msg) if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else

#ifdef __cplusplus
}
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_f_r_q_const__string_int_int__void swig_types[0] 
#define  SWIGTYPE_p_f_int__void swig_types[1] 
#define  SWIGTYPE_p_timeval swig_types[2] 
#define  SWIGTYPE_p_HypGraph swig_types[3] 
#define  SWIGTYPE_p_HypView swig_types[4] 
#define  SWIGTYPE_p_p_char swig_types[5] 
#define  SWIGTYPE_p_string swig_types[6] 
#define  SWIGTYPE_p_istream swig_types[7] 
static swig_type_info *swig_types[9];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _hv.so
  ------------------------------------------------*/
#define SWIG_init    init_hv

#define SWIG_name    "_hv"

//
// Copyright (c) 2004 University of Utah and the Flux Group.
// 
// {{{EMULAB-LICENSE
// 
// This file is part of the Emulab network testbed software.
// 
// This file is free software: you can redistribute it and/or modify it
// under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
// 
// This file is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
// License for more details.
// 
// You should have received a copy of the GNU Affero General Public License
// along with this file.  If not, see <http://www.gnu.org/licenses/>.
// 
// }}}
//

#include <string>
NAMESPACEHACK

#include "HypView.h"

extern HypView *hvMain(int,char *[],void *,int,int);
extern void hvKill(HypView *);
extern int hvReadFile(char *,int,int);
extern char const *getSelected();
extern char *getGraphCenter();

#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


static void SWIG_exception_(int code, const char *msg) {
  switch(code) {
  case SWIG_MemoryError:
    PyErr_SetString(PyExc_MemoryError,msg);
    break;
  case SWIG_IOError:
    PyErr_SetString(PyExc_IOError,msg);
    break;
  case SWIG_RuntimeError:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  case SWIG_IndexError:
    PyErr_SetString(PyExc_IndexError,msg);
    break;
  case SWIG_TypeError:
    PyErr_SetString(PyExc_TypeError,msg);
    break;
  case SWIG_DivisionByZero:
    PyErr_SetString(PyExc_ZeroDivisionError,msg);
    break;
  case SWIG_OverflowError:
    PyErr_SetString(PyExc_OverflowError,msg);
    break;
  case SWIG_SyntaxError:
    PyErr_SetString(PyExc_SyntaxError,msg);
    break;
  case SWIG_ValueError:
    PyErr_SetString(PyExc_ValueError,msg);
    break;
  case SWIG_SystemError:
    PyErr_SetString(PyExc_SystemError,msg);
    break;
  default:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  }
}

#define SWIG_exception(a,b) { SWIG_exception_(a,b); SWIG_fail; }


#include <string>

extern void selectCB(std::string const &,int,int);
#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_hvMain(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    char **arg2 ;
    void *arg3 = (void *) 0 ;
    int arg4 ;
    int arg5 ;
    HypView *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOii:hvMain",&obj0,&obj1,&arg4,&arg5)) goto fail;
    {
        /* Check if is a list */
        if (PyList_Check(obj0)) {
            int i;
            arg1 = PyList_Size(obj0);
            arg2 = (char **) malloc((arg1/*size*/+1)*sizeof(char *));
            for (i = 0; i < arg1; i++) {
                PyObject *o = PyList_GetItem(obj0,i);
                if (PyString_Check(o))
                arg2[i] = PyString_AsString(PyList_GetItem(obj0,i));
                else {
                    PyErr_SetString(PyExc_TypeError,"list must contain strings");
                    free(arg2);
                    return NULL;
                }
            }
            arg2[i] = 0;
        } else {
            PyErr_SetString(PyExc_TypeError,"not a list");
            return NULL;
        }
    }
    if ((SWIG_ConvertPtr(obj1,(void **) &arg3, 0, SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (HypView *)hvMain(arg1,arg2,arg3,arg4,arg5);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_HypView, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hvKill(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hvKill",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    hvKill(arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hvReadFile(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    int arg2 ;
    int arg3 ;
    int result;
    
    if(!PyArg_ParseTuple(args,(char *)"sii:hvReadFile",&arg1,&arg2,&arg3)) goto fail;
    result = (int)hvReadFile(arg1,arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_getSelected(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *result;
    
    if(!PyArg_ParseTuple(args,(char *)":getSelected")) goto fail;
    result = (char *)getSelected();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_getGraphCenter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *result;
    
    if(!PyArg_ParseTuple(args,(char *)":getGraphCenter")) goto fail;
    result = (char *)getGraphCenter();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_selectCB(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::string *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    std::string temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:selectCB",&obj0,&arg2,&arg3)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = std::string(PyString_AsString(obj0),
            PyString_Size(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    selectCB((std::string const &)*arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_HypView(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_HypView")) goto fail;
    result = (HypView *)new HypView();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_HypView, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_afterRealize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HypView_afterRealize",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->afterRealize();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_HypView(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_HypView",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_enumerateSubtree(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    std::string *arg2 = 0 ;
    char **result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HypView_enumerateSubtree",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1),
            PyString_Size(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (char **)(arg1)->enumerateSubtree((std::string const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_p_char, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_flashLink(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    int result;
    std::string temp2 ;
    std::string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:HypView_flashLink",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1),
            PyString_Size(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = std::string(PyString_AsString(obj2),
            PyString_Size(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (int)(arg1)->flashLink((std::string const &)*arg2,(std::string const &)*arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_getCenter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HypView_getCenter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->getCenter();
    
    {
        string * resultptr;
        resultptr = new string((string &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_string, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_gotoNode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 ;
    int result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi:HypView_gotoNode",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1),
            PyString_Size(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (int)(arg1)->gotoNode((std::string const &)*arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_gotoCenterNode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:HypView_gotoCenterNode",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->gotoCenterNode(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_gotoPickPoint(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:HypView_gotoPickPoint",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->gotoPickPoint(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_newLayout(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HypView_newLayout",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1),
            PyString_Size(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->newLayout((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_saveGraph(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HypView_saveGraph",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1),
            PyString_Size(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (int)(arg1)->saveGraph((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setCurrentCenter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HypView_setCurrentCenter",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1),
            PyString_Size(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->setCurrentCenter((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setGraphCenter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HypView_setGraphCenter",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1),
            PyString_Size(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->setGraphCenter((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_getGraphCenter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HypView_getGraphCenter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->getGraphCenter();
    
    {
        string * resultptr;
        resultptr = new string((string &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_string, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setGraph(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    istream *arg2 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HypView_setGraph",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_istream,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (int)(arg1)->setGraph(*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_initGraph(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    string *arg2 = 0 ;
    int arg3 ;
    string *arg4 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOiO:HypView_initGraph",&obj0,&obj1,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg4 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (int)(arg1)->initGraph(*arg2,arg3,*arg4);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setDisableGroup(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    int arg2 ;
    std::string *arg3 = 0 ;
    bool arg4 ;
    int result;
    std::string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiOO:HypView_setDisableGroup",&obj0,&arg2,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj2)) {
            temp3 = std::string(PyString_AsString(obj2),
            PyString_Size(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    arg4 = PyInt_AsLong(obj3) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    result = (int)(arg1)->setDisableGroup(arg2,(std::string const &)*arg3,arg4);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setGroupKey(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:HypView_setGroupKey",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setGroupKey(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setSelected(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:HypView_setSelected",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1),
            PyString_Size(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    arg3 = PyInt_AsLong(obj2) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->setSelected((std::string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setSelectedSubtree(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:HypView_setSelectedSubtree",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1),
            PyString_Size(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    arg3 = PyInt_AsLong(obj2) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->setSelectedSubtree((std::string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_addLink(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    int result;
    std::string temp2 ;
    std::string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:HypView_addLink",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1),
            PyString_Size(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = std::string(PyString_AsString(obj2),
            PyString_Size(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (int)(arg1)->addLink((std::string const &)*arg2,(std::string const &)*arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_addNode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    int result;
    std::string temp2 ;
    std::string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:HypView_addNode",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1),
            PyString_Size(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = std::string(PyString_AsString(obj2),
            PyString_Size(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (int)(arg1)->addNode((std::string const &)*arg2,(std::string const &)*arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_getChildCount(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HypView_getChildCount",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1),
            PyString_Size(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (int)(arg1)->getChildCount((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_getDrawLink(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    int result;
    std::string temp2 ;
    std::string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:HypView_getDrawLink",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1),
            PyString_Size(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = std::string(PyString_AsString(obj2),
            PyString_Size(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (int)(arg1)->getDrawLink((std::string const &)*arg2,(std::string const &)*arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_getDrawNode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HypView_getDrawNode",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1),
            PyString_Size(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (int)(arg1)->getDrawNode((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_getIncomingCount(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HypView_getIncomingCount",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1),
            PyString_Size(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (int)(arg1)->getIncomingCount((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_getOutgoingCount(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HypView_getOutgoingCount",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1),
            PyString_Size(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (int)(arg1)->getOutgoingCount((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_resetColorLink(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    int result;
    std::string temp2 ;
    std::string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:HypView_resetColorLink",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1),
            PyString_Size(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = std::string(PyString_AsString(obj2),
            PyString_Size(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (int)(arg1)->resetColorLink((std::string const &)*arg2,(std::string const &)*arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setLinkPolicy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:HypView_setLinkPolicy",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setLinkPolicy(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setColorGroup(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    int arg2 ;
    std::string *arg3 = 0 ;
    float arg4 ;
    float arg5 ;
    float arg6 ;
    std::string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiOfff:HypView_setColorGroup",&obj0,&arg2,&obj2,&arg4,&arg5,&arg6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj2)) {
            temp3 = std::string(PyString_AsString(obj2),
            PyString_Size(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->setColorGroup(arg2,(std::string const &)*arg3,arg4,arg5,arg6);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setColorLink(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    float arg4 ;
    float arg5 ;
    float arg6 ;
    int result;
    std::string temp2 ;
    std::string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOfff:HypView_setColorLink",&obj0,&obj1,&obj2,&arg4,&arg5,&arg6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1),
            PyString_Size(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = std::string(PyString_AsString(obj2),
            PyString_Size(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (int)(arg1)->setColorLink((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setDrawBackFrom(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    int arg4 ;
    int result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOi:HypView_setDrawBackFrom",&obj0,&obj1,&obj2,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1),
            PyString_Size(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    arg3 = PyInt_AsLong(obj2) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    result = (int)(arg1)->setDrawBackFrom((std::string const &)*arg2,arg3,arg4);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setDrawBackTo(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    int arg4 ;
    int result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOi:HypView_setDrawBackTo",&obj0,&obj1,&obj2,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1),
            PyString_Size(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    arg3 = PyInt_AsLong(obj2) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    result = (int)(arg1)->setDrawBackTo((std::string const &)*arg2,arg3,arg4);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setDrawLink(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    bool arg4 ;
    int result;
    std::string temp2 ;
    std::string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:HypView_setDrawLink",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1),
            PyString_Size(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = std::string(PyString_AsString(obj2),
            PyString_Size(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    arg4 = PyInt_AsLong(obj3) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    result = (int)(arg1)->setDrawLink((std::string const &)*arg2,(std::string const &)*arg3,arg4);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setDrawLinks(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HypView_setDrawLinks",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->setDrawLinks(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setDrawNode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    int result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:HypView_setDrawNode",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1),
            PyString_Size(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    arg3 = PyInt_AsLong(obj2) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    result = (int)(arg1)->setDrawNode((std::string const &)*arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setDrawNodes(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HypView_setDrawNodes",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->setDrawNodes(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setNegativeHide(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HypView_setNegativeHide",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->setNegativeHide(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setNodeGroup(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 ;
    std::string *arg4 = 0 ;
    std::string temp2 ;
    std::string temp4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOiO:HypView_setNodeGroup",&obj0,&obj1,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1),
            PyString_Size(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        if (PyString_Check(obj3)) {
            temp4 = std::string(PyString_AsString(obj3),
            PyString_Size(obj3));
            arg4 = &temp4;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->setNodeGroup((std::string const &)*arg2,arg3,(std::string const &)*arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_bindCallback(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:HypView_bindCallback",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->bindCallback(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_drawFrame(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HypView_drawFrame",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->drawFrame();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_idle__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HypView_idle",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->idle(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_idle__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HypView_idle",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->idle();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_idle(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_HypView, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_HypView_idle__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_HypView, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_HypView_idle__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'HypView_idle'");
    return NULL;
}


static PyObject *_wrap_HypView_motion(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oiiii:HypView_motion",&obj0,&arg2,&arg3,&arg4,&arg5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->motion(arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_mouse(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oiiiiii:HypView_mouse",&obj0,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->mouse(arg2,arg3,arg4,arg5,arg6,arg7);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_passive(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oiiii:HypView_passive",&obj0,&arg2,&arg3,&arg4,&arg5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->passive(arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_redraw(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HypView_redraw",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->redraw();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_reshape(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:HypView_reshape",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->reshape(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setHiliteCallback(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    void (*arg2)(string const &,int,int) = (void (*)(string const &,int,int)) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HypView_setHiliteCallback",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_f_r_q_const__string_int_int__void,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setHiliteCallback(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setLabelToRight(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HypView_setLabelToRight",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->setLabelToRight(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setPickCallback(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    void (*arg2)(string const &,int,int) = (void (*)(string const &,int,int)) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HypView_setPickCallback",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_f_r_q_const__string_int_int__void,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setPickCallback(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setFrameEndCallback(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    void (*arg2)(int) = (void (*)(int)) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HypView_setFrameEndCallback",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_f_int__void,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setFrameEndCallback(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_addSpanPolicy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:HypView_addSpanPolicy",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->addSpanPolicy(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_clearSpanPolicy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HypView_clearSpanPolicy",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->clearSpanPolicy();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_getDynamicFrameTime(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    timeval result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HypView_getDynamicFrameTime",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->getDynamicFrameTime();
    
    {
        timeval * resultptr;
        resultptr = new timeval((timeval &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_timeval, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_getIdleFrameTime(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    timeval result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HypView_getIdleFrameTime",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->getIdleFrameTime();
    
    {
        timeval * resultptr;
        resultptr = new timeval((timeval &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_timeval, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_getPickFrameTime(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    timeval result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HypView_getPickFrameTime",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->getPickFrameTime();
    
    {
        timeval * resultptr;
        resultptr = new timeval((timeval &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_timeval, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_getCenterShow(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HypView_getCenterShow",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->getCenterShow();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_getCenterLargest(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HypView_getCenterLargest",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->getCenterLargest();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_getEdgeSize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HypView_getEdgeSize",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)(arg1)->getEdgeSize();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_getGenerationNodeLimit(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HypView_getGenerationNodeLimit",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->getGenerationNodeLimit();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_getGenerationLinkLimit(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HypView_getGenerationLinkLimit",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->getGenerationLinkLimit();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_getGotoStepSize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HypView_getGotoStepSize",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)(arg1)->getGotoStepSize();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_getLabels(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HypView_getLabels",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->getLabels();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_getLabelSize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HypView_getLabelSize",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)(arg1)->getLabelSize();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_getLabelFont(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HypView_getLabelFont",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *)(arg1)->getLabelFont();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_getLeafRad(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HypView_getLeafRad",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)(arg1)->getLeafRad();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_getMaxLength(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HypView_getMaxLength",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)(arg1)->getMaxLength();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_getMotionCull(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HypView_getMotionCull",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->getMotionCull();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_getNegativeHide(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HypView_getNegativeHide",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->getNegativeHide();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_getPassiveCull(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HypView_getPassiveCull",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->getPassiveCull();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_getSphere(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HypView_getSphere",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->getSphere();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_getSpanPolicy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HypView_getSpanPolicy",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->getSpanPolicy();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_getTossEvents(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HypView_getTossEvents",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->getTossEvents();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setCenterLargest(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HypView_setCenterLargest",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->setCenterLargest(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setCenterShow(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HypView_setCenterShow",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->setCenterShow(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setEdgeSize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:HypView_setEdgeSize",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setEdgeSize(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setGenerationNodeLimit(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:HypView_setGenerationNodeLimit",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setGenerationNodeLimit(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setGenerationLinkLimit(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:HypView_setGenerationLinkLimit",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setGenerationLinkLimit(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setGotoStepSize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:HypView_setGotoStepSize",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setGotoStepSize(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setKeepAspect(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HypView_setKeepAspect",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->setKeepAspect(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setLabels(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:HypView_setLabels",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setLabels(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setLabelSize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:HypView_setLabelSize",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setLabelSize(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setLabelFont(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HypView_setLabelFont",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1),
            PyString_Size(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->setLabelFont((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setLeafRad(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:HypView_setLeafRad",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setLeafRad(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setMaxLength(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:HypView_setMaxLength",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setMaxLength(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setMotionCull(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:HypView_setMotionCull",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setMotionCull(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setPassiveCull(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:HypView_setPassiveCull",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setPassiveCull(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setSphere(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HypView_setSphere",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->setSphere(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setTossEvents(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HypView_setTossEvents",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->setTossEvents(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setDynamicFrameTime(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    timeval arg2 ;
    timeval *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HypView_setDynamicFrameTime",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_timeval,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    (arg1)->setDynamicFrameTime(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setIdleFrameTime(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    timeval arg2 ;
    timeval *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HypView_setIdleFrameTime",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_timeval,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    (arg1)->setIdleFrameTime(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setPickFrameTime(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    timeval arg2 ;
    timeval *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HypView_setPickFrameTime",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_timeval,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    (arg1)->setPickFrameTime(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setColorBackground(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Offf:HypView_setColorBackground",&obj0,&arg2,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setColorBackground(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setColorHilite(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Offf:HypView_setColorHilite",&obj0,&arg2,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setColorHilite(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setColorLabel(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Offf:HypView_setColorLabel",&obj0,&arg2,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setColorLabel(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setColorLinkFrom(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Offf:HypView_setColorLinkFrom",&obj0,&arg2,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setColorLinkFrom(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setColorLinkTo(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Offf:HypView_setColorLinkTo",&obj0,&arg2,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setColorLinkTo(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setColorSelect(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Offf:HypView_setColorSelect",&obj0,&arg2,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setColorSelect(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_setColorSphere(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Offf:HypView_setColorSphere",&obj0,&arg2,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setColorSphere(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HypView_getHypGraph(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HypView *arg1 = (HypView *) 0 ;
    HypGraph *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HypView_getHypGraph",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HypView,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (HypGraph *)(arg1)->getHypGraph();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_HypGraph, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * HypView_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_HypView, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyMethodDef SwigMethods[] = {
	 { (char *)"hvMain", _wrap_hvMain, METH_VARARGS },
	 { (char *)"hvKill", _wrap_hvKill, METH_VARARGS },
	 { (char *)"hvReadFile", _wrap_hvReadFile, METH_VARARGS },
	 { (char *)"getSelected", _wrap_getSelected, METH_VARARGS },
	 { (char *)"getGraphCenter", _wrap_getGraphCenter, METH_VARARGS },
	 { (char *)"selectCB", _wrap_selectCB, METH_VARARGS },
	 { (char *)"new_HypView", _wrap_new_HypView, METH_VARARGS },
	 { (char *)"HypView_afterRealize", _wrap_HypView_afterRealize, METH_VARARGS },
	 { (char *)"delete_HypView", _wrap_delete_HypView, METH_VARARGS },
	 { (char *)"HypView_enumerateSubtree", _wrap_HypView_enumerateSubtree, METH_VARARGS },
	 { (char *)"HypView_flashLink", _wrap_HypView_flashLink, METH_VARARGS },
	 { (char *)"HypView_getCenter", _wrap_HypView_getCenter, METH_VARARGS },
	 { (char *)"HypView_gotoNode", _wrap_HypView_gotoNode, METH_VARARGS },
	 { (char *)"HypView_gotoCenterNode", _wrap_HypView_gotoCenterNode, METH_VARARGS },
	 { (char *)"HypView_gotoPickPoint", _wrap_HypView_gotoPickPoint, METH_VARARGS },
	 { (char *)"HypView_newLayout", _wrap_HypView_newLayout, METH_VARARGS },
	 { (char *)"HypView_saveGraph", _wrap_HypView_saveGraph, METH_VARARGS },
	 { (char *)"HypView_setCurrentCenter", _wrap_HypView_setCurrentCenter, METH_VARARGS },
	 { (char *)"HypView_setGraphCenter", _wrap_HypView_setGraphCenter, METH_VARARGS },
	 { (char *)"HypView_getGraphCenter", _wrap_HypView_getGraphCenter, METH_VARARGS },
	 { (char *)"HypView_setGraph", _wrap_HypView_setGraph, METH_VARARGS },
	 { (char *)"HypView_initGraph", _wrap_HypView_initGraph, METH_VARARGS },
	 { (char *)"HypView_setDisableGroup", _wrap_HypView_setDisableGroup, METH_VARARGS },
	 { (char *)"HypView_setGroupKey", _wrap_HypView_setGroupKey, METH_VARARGS },
	 { (char *)"HypView_setSelected", _wrap_HypView_setSelected, METH_VARARGS },
	 { (char *)"HypView_setSelectedSubtree", _wrap_HypView_setSelectedSubtree, METH_VARARGS },
	 { (char *)"HypView_addLink", _wrap_HypView_addLink, METH_VARARGS },
	 { (char *)"HypView_addNode", _wrap_HypView_addNode, METH_VARARGS },
	 { (char *)"HypView_getChildCount", _wrap_HypView_getChildCount, METH_VARARGS },
	 { (char *)"HypView_getDrawLink", _wrap_HypView_getDrawLink, METH_VARARGS },
	 { (char *)"HypView_getDrawNode", _wrap_HypView_getDrawNode, METH_VARARGS },
	 { (char *)"HypView_getIncomingCount", _wrap_HypView_getIncomingCount, METH_VARARGS },
	 { (char *)"HypView_getOutgoingCount", _wrap_HypView_getOutgoingCount, METH_VARARGS },
	 { (char *)"HypView_resetColorLink", _wrap_HypView_resetColorLink, METH_VARARGS },
	 { (char *)"HypView_setLinkPolicy", _wrap_HypView_setLinkPolicy, METH_VARARGS },
	 { (char *)"HypView_setColorGroup", _wrap_HypView_setColorGroup, METH_VARARGS },
	 { (char *)"HypView_setColorLink", _wrap_HypView_setColorLink, METH_VARARGS },
	 { (char *)"HypView_setDrawBackFrom", _wrap_HypView_setDrawBackFrom, METH_VARARGS },
	 { (char *)"HypView_setDrawBackTo", _wrap_HypView_setDrawBackTo, METH_VARARGS },
	 { (char *)"HypView_setDrawLink", _wrap_HypView_setDrawLink, METH_VARARGS },
	 { (char *)"HypView_setDrawLinks", _wrap_HypView_setDrawLinks, METH_VARARGS },
	 { (char *)"HypView_setDrawNode", _wrap_HypView_setDrawNode, METH_VARARGS },
	 { (char *)"HypView_setDrawNodes", _wrap_HypView_setDrawNodes, METH_VARARGS },
	 { (char *)"HypView_setNegativeHide", _wrap_HypView_setNegativeHide, METH_VARARGS },
	 { (char *)"HypView_setNodeGroup", _wrap_HypView_setNodeGroup, METH_VARARGS },
	 { (char *)"HypView_bindCallback", _wrap_HypView_bindCallback, METH_VARARGS },
	 { (char *)"HypView_drawFrame", _wrap_HypView_drawFrame, METH_VARARGS },
	 { (char *)"HypView_idle", _wrap_HypView_idle, METH_VARARGS },
	 { (char *)"HypView_motion", _wrap_HypView_motion, METH_VARARGS },
	 { (char *)"HypView_mouse", _wrap_HypView_mouse, METH_VARARGS },
	 { (char *)"HypView_passive", _wrap_HypView_passive, METH_VARARGS },
	 { (char *)"HypView_redraw", _wrap_HypView_redraw, METH_VARARGS },
	 { (char *)"HypView_reshape", _wrap_HypView_reshape, METH_VARARGS },
	 { (char *)"HypView_setHiliteCallback", _wrap_HypView_setHiliteCallback, METH_VARARGS },
	 { (char *)"HypView_setLabelToRight", _wrap_HypView_setLabelToRight, METH_VARARGS },
	 { (char *)"HypView_setPickCallback", _wrap_HypView_setPickCallback, METH_VARARGS },
	 { (char *)"HypView_setFrameEndCallback", _wrap_HypView_setFrameEndCallback, METH_VARARGS },
	 { (char *)"HypView_addSpanPolicy", _wrap_HypView_addSpanPolicy, METH_VARARGS },
	 { (char *)"HypView_clearSpanPolicy", _wrap_HypView_clearSpanPolicy, METH_VARARGS },
	 { (char *)"HypView_getDynamicFrameTime", _wrap_HypView_getDynamicFrameTime, METH_VARARGS },
	 { (char *)"HypView_getIdleFrameTime", _wrap_HypView_getIdleFrameTime, METH_VARARGS },
	 { (char *)"HypView_getPickFrameTime", _wrap_HypView_getPickFrameTime, METH_VARARGS },
	 { (char *)"HypView_getCenterShow", _wrap_HypView_getCenterShow, METH_VARARGS },
	 { (char *)"HypView_getCenterLargest", _wrap_HypView_getCenterLargest, METH_VARARGS },
	 { (char *)"HypView_getEdgeSize", _wrap_HypView_getEdgeSize, METH_VARARGS },
	 { (char *)"HypView_getGenerationNodeLimit", _wrap_HypView_getGenerationNodeLimit, METH_VARARGS },
	 { (char *)"HypView_getGenerationLinkLimit", _wrap_HypView_getGenerationLinkLimit, METH_VARARGS },
	 { (char *)"HypView_getGotoStepSize", _wrap_HypView_getGotoStepSize, METH_VARARGS },
	 { (char *)"HypView_getLabels", _wrap_HypView_getLabels, METH_VARARGS },
	 { (char *)"HypView_getLabelSize", _wrap_HypView_getLabelSize, METH_VARARGS },
	 { (char *)"HypView_getLabelFont", _wrap_HypView_getLabelFont, METH_VARARGS },
	 { (char *)"HypView_getLeafRad", _wrap_HypView_getLeafRad, METH_VARARGS },
	 { (char *)"HypView_getMaxLength", _wrap_HypView_getMaxLength, METH_VARARGS },
	 { (char *)"HypView_getMotionCull", _wrap_HypView_getMotionCull, METH_VARARGS },
	 { (char *)"HypView_getNegativeHide", _wrap_HypView_getNegativeHide, METH_VARARGS },
	 { (char *)"HypView_getPassiveCull", _wrap_HypView_getPassiveCull, METH_VARARGS },
	 { (char *)"HypView_getSphere", _wrap_HypView_getSphere, METH_VARARGS },
	 { (char *)"HypView_getSpanPolicy", _wrap_HypView_getSpanPolicy, METH_VARARGS },
	 { (char *)"HypView_getTossEvents", _wrap_HypView_getTossEvents, METH_VARARGS },
	 { (char *)"HypView_setCenterLargest", _wrap_HypView_setCenterLargest, METH_VARARGS },
	 { (char *)"HypView_setCenterShow", _wrap_HypView_setCenterShow, METH_VARARGS },
	 { (char *)"HypView_setEdgeSize", _wrap_HypView_setEdgeSize, METH_VARARGS },
	 { (char *)"HypView_setGenerationNodeLimit", _wrap_HypView_setGenerationNodeLimit, METH_VARARGS },
	 { (char *)"HypView_setGenerationLinkLimit", _wrap_HypView_setGenerationLinkLimit, METH_VARARGS },
	 { (char *)"HypView_setGotoStepSize", _wrap_HypView_setGotoStepSize, METH_VARARGS },
	 { (char *)"HypView_setKeepAspect", _wrap_HypView_setKeepAspect, METH_VARARGS },
	 { (char *)"HypView_setLabels", _wrap_HypView_setLabels, METH_VARARGS },
	 { (char *)"HypView_setLabelSize", _wrap_HypView_setLabelSize, METH_VARARGS },
	 { (char *)"HypView_setLabelFont", _wrap_HypView_setLabelFont, METH_VARARGS },
	 { (char *)"HypView_setLeafRad", _wrap_HypView_setLeafRad, METH_VARARGS },
	 { (char *)"HypView_setMaxLength", _wrap_HypView_setMaxLength, METH_VARARGS },
	 { (char *)"HypView_setMotionCull", _wrap_HypView_setMotionCull, METH_VARARGS },
	 { (char *)"HypView_setPassiveCull", _wrap_HypView_setPassiveCull, METH_VARARGS },
	 { (char *)"HypView_setSphere", _wrap_HypView_setSphere, METH_VARARGS },
	 { (char *)"HypView_setTossEvents", _wrap_HypView_setTossEvents, METH_VARARGS },
	 { (char *)"HypView_setDynamicFrameTime", _wrap_HypView_setDynamicFrameTime, METH_VARARGS },
	 { (char *)"HypView_setIdleFrameTime", _wrap_HypView_setIdleFrameTime, METH_VARARGS },
	 { (char *)"HypView_setPickFrameTime", _wrap_HypView_setPickFrameTime, METH_VARARGS },
	 { (char *)"HypView_setColorBackground", _wrap_HypView_setColorBackground, METH_VARARGS },
	 { (char *)"HypView_setColorHilite", _wrap_HypView_setColorHilite, METH_VARARGS },
	 { (char *)"HypView_setColorLabel", _wrap_HypView_setColorLabel, METH_VARARGS },
	 { (char *)"HypView_setColorLinkFrom", _wrap_HypView_setColorLinkFrom, METH_VARARGS },
	 { (char *)"HypView_setColorLinkTo", _wrap_HypView_setColorLinkTo, METH_VARARGS },
	 { (char *)"HypView_setColorSelect", _wrap_HypView_setColorSelect, METH_VARARGS },
	 { (char *)"HypView_setColorSphere", _wrap_HypView_setColorSphere, METH_VARARGS },
	 { (char *)"HypView_getHypGraph", _wrap_HypView_getHypGraph, METH_VARARGS },
	 { (char *)"HypView_swigregister", HypView_swigregister, METH_VARARGS },
	 { NULL, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_f_r_q_const__string_int_int__void[] = {{"_p_f_r_q_const__string_int_int__void", 0, "void (*)(string const &,int,int)", 0},{"_p_f_r_q_const__string_int_int__void"},{0}};
static swig_type_info _swigt__p_f_int__void[] = {{"_p_f_int__void", 0, "void (*)(int)", 0},{"_p_f_int__void"},{0}};
static swig_type_info _swigt__p_timeval[] = {{"_p_timeval", 0, "timeval *", 0},{"_p_timeval"},{0}};
static swig_type_info _swigt__p_HypGraph[] = {{"_p_HypGraph", 0, "HypGraph *", 0},{"_p_HypGraph"},{0}};
static swig_type_info _swigt__p_HypView[] = {{"_p_HypView", 0, "HypView *", 0},{"_p_HypView"},{0}};
static swig_type_info _swigt__p_p_char[] = {{"_p_p_char", 0, "char **", 0},{"_p_p_char"},{0}};
static swig_type_info _swigt__p_string[] = {{"_p_string", 0, "string *", 0},{"_p_string"},{0}};
static swig_type_info _swigt__p_istream[] = {{"_p_istream", 0, "istream *", 0},{"_p_istream"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_f_r_q_const__string_int_int__void, 
_swigt__p_f_int__void, 
_swigt__p_timeval, 
_swigt__p_HypGraph, 
_swigt__p_HypView, 
_swigt__p_p_char, 
_swigt__p_string, 
_swigt__p_istream, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0}};

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
}

