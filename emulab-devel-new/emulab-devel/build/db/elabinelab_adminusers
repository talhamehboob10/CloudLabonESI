#!/usr/bin/perl -w
#
# Copyright (c) 2000-2018 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;

#
# ElabInElab: This is run on the inner boss to add admin users.
#
sub usage()
{
    print STDERR "Usage: $0 [-d]\n";
    exit(1);
}
my $optlist = "d";
my $debug   = 0;
sub mysystem($);
sub fatal($);

#
# Configure variables
#
my $TB		= "/users/mshobana/emulab-devel/build";
my $TBOPS       = "testbed-ops\@ops.cloudlab.umass.edu";
my $ELABINELAB  = 0;
my $SAVEUID     = $UID;
my $tmpdir      = "/tmp/users.$$";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/sbin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Turn off line buffering on output
$| = 1;

use lib "/users/mshobana/emulab-devel/build/lib";
use libdb;
use libtestbed;
use User;
use Project;
use Group;

# Defined in libdb ...
my $TBOPSPID    = TBOPSPID();

if (!$ELABINELAB) {
    fatal("This script can only run on an inner Emulab!");
}
# Only admin types!
if (!TBAdmin($UID)) {
    fatal("Only TB administrators can run this script!");
}

#
# Parse command arguments. Once we return from getopts, all that should
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}

usage()
    if (scalar(@ARGV));

my $project = Project->Lookup($TBOPSPID);
if (!defined($project)) {
    fatal("Could not lookup project $TBOPSPID");
}
my $group = $project->GetProjectGroup();

#
# We know the xml files are in a tar file in the "stuff" directory,
# which was put there by rc.mkelab.
#
mysystem("mkdir $tmpdir");
mysystem("tar xzf $TB/stuff/users.tar.gz -C $tmpdir");

opendir(DIR, $tmpdir) or
    fatal("Cannot opendir $tmpdir: $!");
my @files = grep { $_ ne "." && $_ ne ".." } readdir(DIR);
closedir(DIR);

foreach my $file (@files) {
    my $uid;
    
    if ($file =~ /^([-\w]+)\.xml$/) {
	$uid = $1;
    }
    else {
	fatal("Odd file file $file in $tmpdir");
    }
    mysystem("$TB/sbin/newuser -s -r -P $tmpdir/$file");
    my $user = User->Lookup($uid);
    if (!defined($user)) {
	fatal("Could not look of $uid after newuser");
    }
    $user->SetStatus(USERSTATUS_ACTIVE());
    $user->Update({"admin" => 1});
    mysystem("$TB/sbin/tbacct -s -b add $uid");
    # This switches the shell from the paperbag.
    mysystem("$TB/sbin/tbacct -s -b mod $uid");

    $group->AddMemberShip($user, $Group::MemberShip::TRUSTSTRING_GROUPROOT)
	== 0 or fatal("Could not add $uid to $TBOPSPID");

    mysystem("$TB/sbin/setgroups $uid");
}
mysystem("$TB/sbin/genelists -a");
exit(0);

#
# Run a command string.
#
sub mysystem($)
{
    my ($command) = @_;

    if ($debug) {
	print "Command: '$command\'\n";
    }

    system($command);
    if ($?) {
	die("*** $0:\n".
	    "    Command failed: $? - $command\n");
    }
}

sub fatal($)
{
    my ($mesg) = @_;

    print STDERR "*** $0:\n".
	         "    $mesg\n";
    exit(-1);
}
