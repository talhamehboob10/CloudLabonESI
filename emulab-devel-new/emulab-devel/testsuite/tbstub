#!/usr/bin/perl

#
# Copyright (c) 2000-2015 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#


# The lack of -w is intentional!  Several variables here are only used
# by the test file and maybe not even there.  Thus -w will cause a lot
# of warnings of variables being used only once.

# tbstub

# This should not be directly called by the user.  This is called from
# tbtest to provide a basic environment for the test scripts to run.  The
# reason to have the tests run in a seperate process it for memory management.
# There is no way to completely clear out the memory used by a package
# other than terminating the interpreter.  Thus to allow each test to
# run in it's own namespace without having a memory leak we put each
# in it's own process.

# The last last of output must be:
#   PASS
#   FAIL <msg>

# Syntax:
#   tbstub <db> <pid> <eid> <testname> <testdir>

use DBI;

if ($#ARGV != 4) {
    print STDERR "Do not run directly!\n";
    exit(1);
}

($db,$pid,$eid,$test,$dir) = @ARGV;

# The status of the test.
$status = "";

# A counter.
$counter = 0;

sub doexit {
    if ($status eq "") {
	$status = "PASS";
    }

    print "$status\n";

    exit(0);
};

$dbh = DBI->connect("DBI:mysql:database=$db;host=localhost") ||
    die "Could not connect to DB.\n";

do {
package TEST;
$eid = $::eid;
$pid = $::pid;
$test = $::test;
$dir = $::dir;
$dbh = $::dbh;
$db = $::db;

sub tb_prerun {
    my ($cmd,$exitcode) = @_;
    print "$cmd -force $pid $eid nsfile.ns\n";
    open(TBEXEC,"$cmd -force $pid $eid nsfile.ns 2>&1 |");
    while (<TBEXEC>) {
	print $_;
    }
    close(TBEXEC);
    $ecode = ($? >> 8);

#    system("mysqldump --create-options $db > $cmd-$::counter.txt");
    $::counter++;

    # Forget about specific error codes. Either success or fail.
    if (($exitcode && !$ecode) || (!$exitcode && $ecode)) {
	tb_fail("$cmd - Exit code $ecode. Unexpected");
    }
};
sub tb_compare {
    # results is a reference to a list of list references.  I.e.
    # a list of lists.  Each sublist is a list of column values and
    # refers to a row.
    my ($query,$results) = @_;

    my $sth = $dbh->prepare($query);
    $sth->execute;
    my @row;
    my $i;
    my @result;
    my $rowi = 0;
    while (@row = $sth->fetchrow_array) {
	@result = @{(@$results)[$rowi]};
	if ($#row != $#result) {
	    tb_fail("Row $rowi - Length of $#row != expected $#result.");
	}
	for ($i=0;$i<$#row;++$i) {
	    if ($row[$i] ne $result[$i]) {
		tb_fail("$rowi/$i - Found $row[$i], expected $result[$i].");
	    }
	}
	$rowi++;
    }
};

sub tb_run {
    my ($cmd,$exitcode) = @_;
    print "$cmd -force $pid $eid\n";
    open(TBEXEC,"$cmd -force $pid $eid 2>&1 |");
    while (<TBEXEC>) {
	print $_;
    }
    close(TBEXEC);
    $ecode = ($? >> 8);

#    system("mysqldump --create-options $db > $cmd-$::counter.txt");
    $::counter++;

    # Forget about specific error codes. Either success or fail.
    if (($exitcode && !$ecode) || (!$exitcode && $ecode)) {
	tb_fail("$cmd - Exit code $ecode. Unexpected");
    }
};
sub tb_fail {
    $::status = "FAIL - " . $_[0];
    ::doexit;
};

# Clean out any old ns files in the dir (esp. temps made by tbprerun), 
# then copy in the new ns file.
system("rm -f *.ns");
print "Debug: $dir/nsfile.ns\n";
system("cp -f $dir/nsfile.ns .");
if (($? >> 8) != 0) {
    tb_fail("Could not copy nsfile.");
}

print "Executing $dir/test\n";
do "$dir/test";

};

doexit;
