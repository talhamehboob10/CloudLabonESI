#!/usr/bin/perl
#
# Copyright (c) 2009 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
package TestBed::XMLRPC::Client::Node::InsufficientNodes;
use Mouse;

package TestBed::XMLRPC::Client::Node;
use SemiModern::Perl;
use Moose;
use Data::Dumper;

extends 'TestBed::XMLRPC::Client';

#autoloaded/autogenerated/method_missings/etc available getlist typeinfo

sub filter_hash {
  my ($hash, $proc) = @_;
  my %new_hash;
  while (my ($k, $v) = each %$hash) {
    if ( $proc->($k, $v) ) {
      $new_hash{$k} = $v;
    }
  }
  \%new_hash;
}

sub _free {
  my ($k, $v) = @_;
  $v->{'free'} == 1;
}

sub get_free {
  filter_hash(
    shift->augment_func( 'getlist', @_ ),
    \&_free);
}

sub get_free_names {
  my $x = shift;
  keys %{$x->get_free(@_)};
}

sub get_free_node_names {
  my $node = shift;
  my $qty = shift;
  my @names = $node->get_free_names(@_);
  if (scalar @names < $qty ) { die TestBed::XMLRPC::Client::Node::InsufficientNodes->new; }
  return @names;
}

=head1 NAME

TestBed::XMLRPC::Client::Node

=over 4

=item C<available>

returns a list of available nodes

=item C<getlist>

returns a list of available nodes

=item C<filter_hash($hash, $proc)>

returns a new has containing key,value pairs that $proce returned true for

=item C<get_free()>

given a list of nodeshashes return nodehashes for nodes that are free

=item C<get_free_names( param => value, ...)>

returns a list of free node names that meet criteria of params => values

=item C<get_free_node_names($qrt, )>

returns a list of at least $qty free node names that meet criteria of params => values

=back

=cut

1;
