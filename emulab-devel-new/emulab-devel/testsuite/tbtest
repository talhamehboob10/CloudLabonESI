#!/usr/bin/perl -w

#
# Copyright (c) 2000-2003 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#


# tbtest

# This is the toplevel of the testbed testing setup.  This command
# should be invokved by a user and script.  It well then create a
# separate object tree, configure it appropriately, setup a testing
# database, and then proceed to run tests.

# IMPORTANT: This command should be come from a tree configured
# for the real DB.

# tbtest [options] <mode stuff>
# Options:
#   -path <path> - Path to test tree, otherwise uses cwd.
#   -full - Do full testing.
#   -frontend - Do frontend only testing.#
#   -leavedb - Avoids removing the DB on exit.
#   -exitonfail - Exit on the first failure.
#   -session <sessionid> - Specify an alternate session id.
#   -flest - Generate flest.log file for flest runs.
#   -daikon - 
#
# <mode> is one of:
#    run <db> <testlist> [<pid> <eid> <num>] - Do everything.
#    init <db> [<pid> <eid> <num>] - Initiatlize.
#    test <testlist> - Run tests
#    single <tests> - Run only <tests>
#    finish - Finish run
# <num> is "X <type> ...", for example "10 pc 16 shark"

use DBI;
use POSIX;
use BSD::Resource;

#die("*** $0:\n".
#    "    Testsuite Disabled. Come edit me if need be.\n");

$| = 1;

# Lower priority since this whole thing consumes CPU like nuts
setpriority(PRIO_PROCESS, 0, 15);

#
# Set our WITH_TB_ADMIN_PRIVS environment variable, so that we have the
# privs we need to clear experiments out of the test database, etc.
#
$ENV{WITH_TB_ADMIN_PRIVS} = 1;

$pwd = `/bin/pwd`;
chop $pwd;

# Figure out where the script is
if ($0 =~ m|/|) {
    # Not pwd
    @a = split("/",$0);
    $dir = join("/",@a[0..$#a-1]);
    if ($0 =~ m|^/|) {
	# absolute path
	$basedir = $dir;
    } else {
	# relative path
	chdir $dir;
	$basedir = `/bin/pwd`;
	chop $basedir;
	chdir $pwd;
    }
} else {
    $basedir = `/bin/pwd`;
    chop $basedir;
}

$path = $pwd;
$TB = "$path/install";

$ENV{'PATH'} = "/bin:/usr/sbin:/usr/bin:/usr/local/bin:/usr/site/bin:$basedir:.";
$basepath = $ENV{'PATH'};

$type = "frontend";

# Parse argv
sub show_help {
    print STDERR "Syntax: $0 [-leavedb] [-path <path>] [-frontend] [-full] <mode>\n";
    print STDERR "Options:\n";
    print STDERR "  -leavedb - Do not drop the test database on exit.\n";
    print STDERR "  -path <path> - Path to directory to store test files.\n";
    print STDERR "  -frontend - Run in frontend mode.\n";
    print STDERR "  -full - Run in full mode.\n";
    print STDERR "  -exitonfail - Exit on any failure.\n";
    print STDERR "  -session <sessionid> - Specify an alternate session id.\n";
    print STDERR "  -flest - Generate flest.log for flest runs.\n";
    print STDERR "  -daikon\n";
    print STDERR "Mode:\n";
    print STDERR "  run <db> <testlist> [<pid> <eid> <num>]\n";
    print STDERR "  init <db> [<pid> <eid> <num>]\n";
    print STDERR "  test <testlist>\n";
    print STDERR "  single <tests>\n";
    print STDERR "  finish\n";
    print STDERR "<num>: Must be even lengthed list of <number> <type>.\n";
    print STDERR "   Ex: \"4 pc 16 shark\"\n";
    print STDERR "Examples:\n";
    print STDERR "   $0 run tbdb frontend\n";
    print STDERR "   $0 -full run tbdb frontend testbed mytest \"10 pc 16 shark\"\n";
    print STDERR "   $0 init tbdb;$0 single ping basic;$0 finish\n";
    exit(1);
};

$mode = "";
$leavedb = 0;
$exitonfail = 0;
$flestlog = 0;
$daikon = 0;
$user=`whoami`;
chop $user;

while (($#ARGV > -1) && ($mode eq "")) {
    $arg = shift;
    if ($arg eq "-path") {
	if ($#ARGV == -1) {show_help;}
	$path = shift;
    } elsif ($arg eq "-frontend") {
	$type = "frontend";
    } elsif ($arg eq "-full") {
	$type = "full";
    } elsif ($arg eq "-leavedb") {
	$leavedb = 1;
    } elsif ($arg eq "-exitonfail") {
	$exitonfail = 1;
    } elsif ($arg eq "-session") {
	if ($#ARGV == -1) {show_help;}
	$user = shift;
    } elsif ($arg eq "-flest") {
	$flestlog = 1;
    } elsif ($arg eq "-daikon") {
	$daikon = 1;
    } else {
	$mode = $arg;
    }
}

chdir $path;
$logfile = "test.log";
$statefile = "state";

if ($mode eq "run") {
    if ($type eq "frontend") {
	if ($#ARGV != 1) {show_help;}
	($TBDB,$testlist) = @ARGV;
    } else {
	if ($#ARGV != 4) {show_help;}
	($TBDB,$testlist,$pid,$eid,$num) = @ARGV;
    }
} elsif ($mode eq "init") {
    if ($type eq "frontend") {
	if ($#ARGV != 0) {show_help;}
	($TBDB) = @ARGV;
    } else {
	if ($#ARGV != 3) {show_help;}
	($TBDB,$pid,$eid,$num) = @ARGV;
    }
} elsif ($mode eq "test") {
    if ($#ARGV != 0) {show_help;}
    ($testlist) = @ARGV;
} elsif ($mode eq "single") {
    if ($#ARGV == -1) {show_help;}
    (@tests) = @ARGV;
    $testlist = "N/A";
} elsif ($mode eq "finish") {
    if ($#ARGV != -1) {show_help;}
} else {
    print STDERR "Unknown mode: $mode\n";
    show_help;
}

if (($mode ne "run") && ($mode ne "init")) {
    # Read state
    open(STATE,$statefile) || do {
	print STDERR "Could not find state file ($statefile).\n";
	print STDERR "  Run in init mode first.\n";
	exit(1);
    };
    ($type,$TBDB,$user,$pid,$eid) = split(" ",<STATE>);
    close(STATE);
}

if (($type eq "full") && (($mode eq "init") || ($mode eq "run"))) {
    @t = split(" ",$num);
    if (($#t % 2) == 0) {
	print STDERR "<num> must be list of even length.\n";
	show_help;
    }
}

$testdb = "tbdb_$user";
$bossnode = `hostname`;

# Test counts
$pass = 0;
$fail = 0;
$unknown = 0;

# prints sends the string to stdout and the logfile.
sub prints {
    print $_[0];
    print LOG $_[0];
};

# tbexec <cmd> <file>
# Executes <cmd> storing results to <file> and displaying appropriate
# message and exiting on failure.
sub tbexec {
    my ($cmd,$file) = @_;
    open(EXEC,"$cmd 2>&1 |");
    open(FILE,"> $file");
    while (<EXEC>) {
	print FILE $_;
    }
    close(FILE);
    close(EXEC);
    if (($? >> 8) == 0) {
	prints "PASS\n";
	$pass++;
    } else {
	prints "FAIL - See $file\n";
	$fail++;
	doexit(1);
    }
};

# tbexect <cmd> <logfp>
# This is similar to tbexec except is used for running commands specific
# to tests.  It runs the command appending the output to the file handle
# <logfp> and returns the exit code.
sub tbexect {
    my ($cmd,$logfp) = @_;
    print $logfp "$cmd\n";
    open(EXEC,"$cmd 2>&1 |");
    while (<EXEC>) {
	print $logfp $_;
    }
    close(EXEC);
    return ($? >> 8);
};

# doexit
# This displays exit counts and then exits with the specified exit code.
sub doexit {
    printf LOG "Total Tests: %-5d  Pass: %-5d  Fail: %-5d  Unknown: %-5d\n", $pass+$fail+$unknown, $pass, $fail, $unknown;
    printf "Total Tests: %-5d  Pass: %-5d  Fail: %-5d  Unknown: %-5d\n", $pass+$fail+$unknown, $pass, $fail, $unknown;
    if ($_[0] != 0) {
	prints "Run in finish mode to clean up any residual state.\n";
    }
    close(LOG);
    exit($_[0]);
};

# These are flest routines
sub pass {
    if ($flestlog) {
	print FLESTLOG "PASS $_[0]\n";
    }
};
sub fail {
    if ($flestlog) {
	print FLESTLOG "FAIL $_[0]\n";
    }
};
sub fail2 {
    if ($flestlog) {
	print FLESTLOG "FAIL: $_[0]\n";
    }
}

sub step_init {
    open(LOG,"> $logfile");

    prints "START INIT\n";
    prints "Session:  $user\n";
    prints "Logfile:  $logfile\n";
    prints "Database: $TBDB\n";
    prints "Type:     $type\n";
    prints "\n";
    prints "Beginning test run. " . ctime(time);

    # Initialize DB
    $dbh = DBI->connect("DBI:mysql:database=$TBDB;host=localhost") ||
	die "Could not connect to DB.\n";
    # Having made sure we can, we now disconnect so as not to harm DB.
    $dbh->disconnect;

    # Write state
    open(STATE,"> $statefile");
    if ($type eq "full") {
	print STATE "$type $TBDB $user $pid $eid\n";
    } else {
	print STATE "$type $TBDB $user\n";
    }
    close(STATE);

    # Reserve nodes
    if ($type eq "full") {
	prints "Reserving nodes.\n";

	my (@nums) = split(" ",$num);
	my $num;
	my $type;
	my %want;
	my %have;
	my $node;

	while ($#nums > -1) {
	    $num = shift @nums;
	    $type = shift @nums;
	    $want{$type} = $num;
	    $have{$type} = [];
	}

	open(AVAIL,"/usr/testbed/sbin/avail includevirt rand |");
	while (<AVAIL>) {
	    chomp;
	    if (! /^\|/) { next; }
	    if (/^\|node_id\s*\|/) { next; }
	    if ( ($node,$type,$class) =
		 /^\|([-a-z0-9]+)\s*\|([-a-z0-9]+)\s*\|(\w+)\s*\|$/i ) {
		if (defined($want{$type}) && $want{$type} > 0) {
		    push(@{$have{$type}},$node);
		    $want{$type}--;
		} elsif (defined($want{$class}) && $want{$class} > 0) {
		    push(@{$have{$class}},$node);
		    $want{$class}--;
		}
	    } else { print "Couldn't parse avail line '$_'\n"; }
	}
	close(AVAIL);

	my $good = 1;
	foreach $type (keys(%want)) {
	    if ($want{$type} > 0) {
		print STDERR "Could not get enough $type - Need $want{$type} more.\n";
		$good = 0;
	    }
	}
	if (! $good) {exit(1);}

	my $raw = "";
	foreach $type (keys(%have)) {
	    $raw .= " " . join(" ",@{$have{$type}});
	}
	prints "  Reserving ";
	tbexec("/usr/testbed/bin/nalloc $pid $eid $raw","$path/reserve.log");
	# Have to run exports_setup, or the nodes won't come up properly
	prints "  Setting up exports ";
	tbexec("/usr/testbed/sbin/exports_setup","$path/exports_setup.log");

	prints "  Setting up tmcc redirect ";
	$dbh = DBI->connect("DBI:mysql:database=$TBDB;host=localhost") ||
	    die "Could not connect to DB.\n";
	$dbh->do("UPDATE experiments set testdb=\"$testdb\" where" .
		 " pid=\"$pid\" and eid=\"$eid\"") || do {
		     prints "FAIL\n";
		     $fail++;
		     doexit(1);
		 };
	$pass++;
	prints "PASS\n";
	$dbh->disconnect;
    }

    # Set up object tree
    prints "Setting up object tree.\n";
    if (! -d $path) {
	mkdir $path,0755;
    }
    mkdir "tbobj",0755;
    mkdir "install",0755;
    chdir "tbobj";
    system("cp -f $basedir/test-defs $path/defs");
    if (($? >> 8) != 0) {
	print STDERR "ERROR: Could not copy defs file.\n";
	doexit(1);
    }
    open(DEFS,">>$path/defs");
    print DEFS "TBDBNAME=$testdb\n";
    print DEFS "TBOPSEMAIL=$user\@emulab.net\n";
    print DEFS "TBLOGSEMAIL=$user\@emulab.net\n";
    print DEFS "TBSTATEDEMAIL=$user\@emulab.net\n";
    print DEFS "OURDOMAIN=test.$user.emulab.net\n";
    print DEFS "BOSSNODE=$bossnode\n";
    close(DEFS);

    prints "  Configuring ";
    my $testmode;
    if ($type eq "full") {
	$testmode = "";
    } else {
	$testmode = "--enable-testmode --disable-events";
    }
    open(CONF,">$path/config");
    print CONF "$basedir/../configure \\\n".
      "--prefix=$TB \\\n$testmode \\\n--with-TBDEFS=$path/defs\n";
    close(CONF);
    tbexec("$basedir/../configure --prefix=$TB $testmode ".
	   "--with-TBDEFS=$path/defs",
	   "$path/configure.log");

    prints "  Building ";
    tbexec("gmake","$path/build.log");

    prints "  Installing ";
    tbexec("gmake boss-install","$path/install.log");

    prints "  Post-Installing ";
    tbexec("sudo gmake post-install","$path/postinstall.log");

    chdir $path;

    # Setup test database
    prints "Setting up test database.\n";
    prints "  Dumping Current ";
    tbexec("mysqldump -e -a $TBDB","$path/dbdump.txt");
    # Now add a line to the dumped database that sets flest as an admin
    prints "  Setting up admin account for $user in test database ";
    tbexec("echo \"update users set admin=1 where uid='$user';\"".
	   " >> $path/dbdump.txt", "dbdump.log");

    prints "  Creating DB ";
    system("echo \"drop database if exists $testdb\" | mysql");
    tbexec("echo \"create database $testdb\" | mysql","createdb.log");

    prints "  Filling DB ";
    tbexec("cat $path/dbdump.txt | mysql -q -s $testdb","fill.log");


    $dbh = DBI->connect("DBI:mysql:database=$testdb;host=localhost") || do {
	prints "ERROR: Could not connect to new DB.\n";
	doexit(1);
    };
    $ENV{'PATH'} = "$basepath:$TB/bin:$TB/sbin";

    #
    # Clear our extraneous stuff.
    #
    $sth = $dbh->prepare("SELECT * from testsuite_preentables");
    $sth->execute;
    while (($table,$action) = $sth->fetchrow_array) {
	$_ = $action;
        SWITCH: {
	    /^drop$/ && do {
		prints "    Dropping table $table\n";
		$dbh->do("drop table $table");
		last SWITCH;
	    };
	    /^clean$/ && do {
		prints "    Cleaning table $table\n";
		$dbh->do("delete from $table");
		last SWITCH;
	    };
	    /^prune$/ && do {
		prints "    Pruning table $table\n";
		$dbh->do("delete from $table ".
			 "where pid!='emulab-ops' and pid!='testbed'");
		last SWITCH;
	    };
	}
    }

    if ($type eq "frontend") {
	# Clear out experiments and set up test experiment.
	prints "  Clearing out existing experiments ";
	open(CLEARLOG,"> clear.log");
	$sth = $dbh->prepare("SELECT pid,eid from experiments ".
			     "where !(pid='emulab-ops' and eid='hwdown') " .
			     "and state != 'swapped'");
	$sth->execute;
	while (($pid,$eid) = $sth->fetchrow_array) {
	    print CLEARLOG "$pid $eid\n";
	    print CLEARLOG "tbswap out -force $pid $eid\n";
	    open(EXEC,"tbswap out -force $pid $eid 2>&1 |");
	    while (<EXEC>) {
		print CLEARLOG $_;
	    }
	    close(EXEC);
	    if (($? >> 8) != 0) {
		prints "FAIL - For $pid $eid - On tbswapout - See clear.log\n";
		$fail++;
		doexit(1);
	    }
	    print CLEARLOG "tbend -force $pid $eid\n";
	    open(EXEC,"tbend -force $pid $eid 2>&1 |");
	    while (<EXEC>) {
		print CLEARLOG $_;
	    }
	    close(EXEC);
	    if (($? >> 8) != 0) {
		prints " FAIL - For $pid $eid - On tbend - See clear.log\n";
		$fail++;
		doexit(1);
	    }
	    #
	    # tbend does not clear the experiments or nsfiles table.
	    #
	    $dbh->do("delete from experiments ".
		     "where pid='$pid' and eid='$eid'");
	    $dbh->do("delete from nsfiles ".
		     "where pid='$pid' and eid='$eid'");
	}
	# Clear reserved just to make sure.
	$dbh->do("delete from reserved ".
		 "where pid='emulab-ops' and eid!='hwdown'") || do {
	    prints "FAIL\n";
	    $fail++;
	    doexit(1);
	};

	# Clear all the users except the person running the test.
	$dbh->do("delete from users where uid!='$user'");

	prints "PASS\n";
	$pass++;

	close(CLEARLOG);
    } else {
	# Free nodes we allocated for the experiment and allocate all
	# others.
	prints "  Creating testbed/unavailable in test DB ";
	open(AVAIL,"avail includevirt |");
	$raw = "";
	while (<AVAIL>) {
	    if (! /^\|/) {next};
	    if (/node_id/) {next;}
	    ($node) = /^\|([-a-zA-Z0-9]+)/;
	    $raw .= " $node";
	}
	close(AVAIL);

	$dbh->do("DELETE from experiments where pid=\"testbed\" and eid=\"unavailable\"");
	$dbh->do("INSERT into experiments (pid,eid) "
		 . "values (\"testbed\",\"unavailable\")") || do {
		     prints "FAIL\n";
		     $fail++;
		     doexit(1);
		 };
	print "PASS\n";
	$pass++;

	prints "  Marking nodes as unavailable ";
	tbexec("nalloc testbed unavailable $raw","unavailable.log");

	prints "  Freeing test nodes ";
	tbexec("nfree $pid $eid","free.log");
    }

    prints "  Setting up test experiment ";
    $dbh->do("DELETE from experiments where pid=\"testbed\" and eid=\"test\"");
    $dbh->do("INSERT into experiments (pid,gid,eid,testdb) "
	     . "values (\"testbed\",\"testbed\",\"test\",\"$testdb\")") || do {
		 prints "FAIL\n";
		 $fail++;
		 doexit(1);
	     };
    print "PASS\n";
    $pass++;

    prints "  Snapshotting clean state ";
    tbexec("mysqldump -e -a $testdb","clean.txt");
    prints "END INIT\n";
}

sub test_pass {
    prints "START TEST\n";

    if ($flestlog) {
	open(FLESTLOG,"> flest.log");
    }

    pass("Pre-Test Setup");

    # Time to run tests!
    prints "Running Tests\n";
    prints "Testlist: $testlist\n";

    # Let's add some stuff to our path
    $ENV{'PATH'} = "$basepath:$TB/bin:$TB/sbin";

    my @tests;
    my $testmode;
    my $dir;

    if ($#_ == -1) {
	open(TESTLIST,"$basedir/testlists/$testlist");
	@tests = ();
	while (<TESTLIST>) {
	    chop;
	    push(@tests,$_);
	}
	close(TESTLIST);
    } else {
	@tests = @_;
    }

    mkdir "tests",0755;
    foreach $test (@tests) {
	if (($test eq ".") || ($test eq "..") || ($test eq "CVS")) {
	    next;
	}
	prints "  $test ";

	mkdir "tests/$test",0755;
	chdir "tests/$test";
	open(TESTLOG,"> test.log");

	# Set up DB state
	if (tbexect("echo \"drop database if exists $testdb\" | mysql",TESTLOG)) {
	    prints "FAIL - Could not drop test DB.\n";
	    prints "Failure was FATAL - Exiting.\n";
	    fail2("$test - Drop test DB");
	    $fail++;
	    doexit(1);
	}
	if (tbexect("echo \"create database $testdb\" | mysql",TESTLOG)) {
	    prints "FAIL - Could not recreate test DB.\n";
	    prints "Failure was FATAL - Exiting.\n";
	    fail2("$test - Recreate test DB");
	    $fail++;
	    doexit(1);
	}
	if (tbexect("cat $path/clean.txt | mysql -q -s $testdb",TESTLOG)) {
	    prints "FAIL - Could not populate test DB.\n";
	    prints "Failure was FATAL - Exiting.\n";
	    fail2("$test - Populate test DB");
	    $fail++;
	    doexit(1);
	}

	if (-f "$basedir/tests/$test/dbstate") {
	    if (tbexect("cat $basedir/tests/$test/dbstate | mysql $testdb",TESTLOG)) {
		prints "FAIL - Could not evaluate dbstate.\n";
		fail2("$test - Evaluate dbstate");
		$fail++;
		if ($exitonfail) {doexit(1);}
		next;
	    }
	}

	# Start stated
	if ($type eq "full") {
	  # Returns non-zero for failures
	  system("$TB/sbin/stated") and
	    die "Error running '$TB/sbin/stated': $!\n";
	}

	# We're now ready to run the test.

	# The last line of this command will be either PASS
	# or FAIL <msg>, all output before that should be sent
	# to the log file.
	open(TESTFP,"tbstub $testdb testbed test $test $basedir/tests/$test |");
	while (<TESTFP>) {
	    print TESTLOG $_;
	    $status = $_;
	}
	chop $status;
	close(TESTFP);
	if (($? >> 8) != 0) {
	    prints "UNKNOWN - Test exited with non-0 code.\n";
	    $unknown++;
	} else {
	    if ($status =~ /^PASS/) {
		$pass++;
	    } elsif ($status =~ /^FAIL/) {
		$fail++;
		# grab copy of testbed
		system("mysqldump -e -a $testdb > db.txt");
		if (($? >> 8) != 0) {
		    prints "ERROR: Could not grab copy of database.\n";
		    doexit(1);
		}
		if ($exitonfail) {prints "FAIL\n"; doexit(1);}
	    } else {
		$unknown++;
		$status = "UKNOWN";
	    }
	    prints "$status\n";
	    if ($flestlog) {
		@t = split(" ",$status);
		$result = $t[0];
		$msg = join(" ",@t[1..$#t]);
		print FLESTLOG "$result: $test $msg\n";
	    }
	}

	if ($type eq "full") {
	    my $statedpidfile = "$TB/locks/stated.pid";
	    my $statedpid = `cat $statedpidfile` ||
	      prints "WARNING: Unable to find stated pid: $!\n";
	    if (! kill(15, $statedpid) ) {
		prints "WARNING: Unable to kill stated process ($statedpid)\n";
	    }
	}

	close(TESTLOG);

	chdir $path;
    }
    if ($flestlog) {
	close FLESTLOG;
    }
    prints "END TEST\n";
}

sub step_test {
    open(LOG,">> $logfile");

    if (!$daikon) {

	test_pass;

    } else {

	prints "DAIKONIZING: STAGE 1 ... ";
	system("$TB/bin/daikonize clean > daikon-clean.log 2>&1");
	if (($? >> 8) != 0 && ($? >> 8) != 1) {
	    prints "FAIL - see \"daikon-clean.log\" for why.\n";
	    prints "EXITING.\n";
	    return;
	}
	system("$TB/bin/daikonize stage1 > daikon-stage1.log 2>&1");
	if (($? >> 8) != 0 && ($? >> 8) != 1) {
	    prints "FAIL - see \"daikon-stage1.log\" for why.\n";
	    prints "EXITING.\n";
	    return;
	} else {
	    prints "PASS\n";
	}

	test_pass;

	prints "DAIKONIZING: STAGE 2 ... ";
	system("$TB/bin/daikonize stage2 > daikon-stage2.log 2>&1");
	if (($? >> 8) != 0 && ($? >> 8) != 1) {
	    prints "FAIL - see \"daikon-stage2.log\" for why.\n";
	    prints "EXITING.\n";
	    return;
	} else {
	    prints "PASS\n";
	}

	test_pass;

	prints "DAIKONIZING: ANALYZE ... ";
	system("$TB/bin/daikonize analyze > daikon-analyze.log 2>&1");
	if (($? >> 8) != 0 && ($? >> 8) != 1) {
	    prints "FAIL - see \"daikon-analyze.log\" for why.\n";
	    prints "EXITING.\n";
	    return;
	} else {
	    prints "PASS\n";
	}
    }
}

sub step_cleanup {
    open(LOG,">> $logfile");

    prints "START cleanup\n";

    # Try to do the necessary cleanup
    if ($leavedb == 0) {
	prints "  Dropping test DB ";
	system("echo \"drop database if exists $testdb\" | mysql");
	if (($? >> 8) != 0) {
	    prints "FAIL\n";
	    $fail++;
	} else {
	    prints "PASS\n";
	    $pass++;
	}
    }
    if (($type eq "full")) {
	prints "  Clearing redirects ";
	$ok = 1;
	$dbh = DBI->connect("DBI:mysql:database=$TBDB;host=localhost") || do {
	    $ok = 0;
	};
	if (! $ok) {
	    prints "FAIL - Could not connect to db\n";
	    $fail++;
	} else {
	    $ok = 1;
	    $dbh->do("UPDATE experiments set testdb=NULL" .
		     " where pid=\"$pid\" and eid=\"$eid\"") || do {
			 $ok = 0;
		     };
	    if ($ok) {
		$pass++;
		prints "PASS\n";
	    } else {
		$fail++;
		prints "FAIL\n";
	    }
	    $dbh->disconnect;
	}

	prints "  Freeing nodes ";
	system("/usr/testbed/bin/nfree $pid $eid > /dev/null");
	if (($? >> 8) != 0) {
	    prints "FAIL\n";
	    $fail++;
	} else {
	    prints("PASS\n");
	    $pass++;
	}
    }
    prints "  Clearing state ";
    system("rm -f $statefile");
    if (($? >> 8) != 0) {
	prints "FAIL\n";
	$fail++;
    } else {
	prints "PASS\n";
	$pass++;
    }
    prints "End test run. " . ctime(time);
    prints "END CLEANUP\n";
}


if ($mode eq "run") {
    step_init;
    step_test;
    step_cleanup;
} elsif ($mode eq "init") {
    step_init;
} elsif ($mode eq "test") {
    step_test;
} elsif ($mode eq "single") {
    step_test @tests;
} elsif ($mode eq "finish") {
    step_cleanup;
}

open(LOG,">> $logfile");

# Do exit does all cleanup.
doexit(0);
