#!/usr/bin/perl -wT
#
# Copyright (c) 2002-2006 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;

#
# Generate lastlog info from syslog data on users node.
#
#	usage: lastlog_daemon [-d]
#
# TODO: Use "logger" instead of writing a log file.
#
sub usage()
{
    print STDOUT "Usage: lastlog_daemon [-d]\n" .
	"Use the -d option to prevent daemonization\n";
    exit(-1);
}
my  $optlist = "d";

# Configure variables
my $TB       = "@prefix@";
my $TBOPS    = "@TBOPSEMAIL@";

# Testbed Support library
use lib "@prefix@/lib";
use libdb;
use libtestbed;
use POSIX; # for sigprocmask and friends
use Fcntl; # file constants for pidfile

my $genlastlog  = "$TB/sbin/genlastlog";
my $logfile     = "$TB/log/genlastlog";
my $debug       = 0;

$| = 1; # Turn off line buffering on output

# Untaint the path
$ENV{'PATH'} = "/bin:/usr/bin:";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (@ARGV != 0) {
    usage();
}
if (defined($options{"d"})) {
    $debug = $options{"d"};
}

# Only root and TB Admins.
if ($UID && !TBAdmin($UID)) {
    die("*** $0:\n".
	"    You must be root or a TB administrator\n");
}

# Go to background.
if (! $debug) {
    if (TBBackGround($logfile)) {
	exit(0);
    }
}

my $str=$TB;
$str =~ s/\/usr\/testbed//g;
$str =~ s/\//\./g;
my $pidfile = ($TB eq "/usr/testbed" ? 
	       "/var/run/lastlog_daemon.pid" :
	       "/var/run/lastlog_daemon$str.pid" );
sysopen(PIDFILE, $pidfile, O_WRONLY | O_EXCL | O_CREAT) || 
  die ("Couldn't create '$pidfile': $? $!\n");
print PIDFILE "$$";
close PIDFILE;

$SIG{HUP} = \&restart;

$SIG{USR1} = \&cleanup;
$SIG{USR2} = \&cleanup;
$SIG{INT}  = \&cleanup;
$SIG{QUIT} = \&cleanup;
$SIG{ABRT} = \&cleanup;
$SIG{TERM} = \&cleanup;
$SIG{KILL} = \&cleanup;

print "lastlog_daemon starting, pid $$\n";

# And just loop.
while (1) {
    print "Running at " . `date`;
    
    if (system("$genlastlog")) {
	# Save status across the date call in print statement.
	my $exitval = $?;
	
	print "Exited with status $exitval at " . `date`;

	SENDMAIL($TBOPS, "Genlastlog Failed!",
		 "Failed with exit value $exitval\n".
		 "Please look at the syslog entries for genlastlog!");
    }
    sleep(60 * 5);
}

exit(0);

sub restart() {
  my $prog = "";
  # If we're started from an abosolute path, use that.
  if ($0 =~ /^(\/.*)$/) { $prog = $1; }
  else { $prog = "$TB/sbin/lastlog_daemon"; }
  print "SIGHUP received, restarting from '$prog'\n";
  unlink $pidfile;
  if (!defined(sigprocmask(SIG_UNBLOCK, POSIX::SigSet->new(SIGHUP)))) {
    $msg = "lastlog_daemon couldn't restart\n".
	     "sigprocmask: sig unblock failed! $?, $!\n";
    SENDMAIL($TBOPS,"lastlog_daemon couldn't restart",$msg);
    die("$msg\n");
  }
  exec("$prog") or 
    do {
      my $msg = "Couldn't restart lastlog_daemon! cmd='$prog'\n".
	"Error: ($?) $!\n";
      SENDMAIL($TBOPS, "lastlog_daemon couldn't restart",$msg);
      die($msg);
    };
}

sub cleanup() {
  print "Signal received, exiting.\n";
  unlink $pidfile;
  exit(0);
}
