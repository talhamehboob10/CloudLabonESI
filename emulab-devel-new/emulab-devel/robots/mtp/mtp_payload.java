/*
 * Automatically generated by jrpcgen 1.0.5 on 14-Feb-05 4:35:56 PM
 * jrpcgen is part of the "Remote Tea" ONC/RPC package for Java
 * See http://acplt.org/ks/remotetea.html for details
 */
package net.emulab;
import org.acplt.oncrpc.*;
import java.io.IOException;

public class mtp_payload implements XdrAble {
    public int opcode;
    public mtp_control error;
    public mtp_control notify;
    public mtp_control init;
    public mtp_control close;
    public mtp_config_rmc config_rmc;
    public mtp_config_vmc config_vmc;
    public mtp_request_position request_position;
    public mtp_request_id request_id;
    public mtp_update_position update_position;
    public mtp_update_id update_id;
    public mtp_command_goto command_goto;
    public mtp_command_stop command_stop;
    public mtp_telemetry telemetry;
    public mtp_wiggle_request wiggle_request;
    public mtp_wiggle_status wiggle_status;
    public mtp_request_position request_report;
    public mtp_contact_report contact_report;

    public mtp_payload() {
    }

    public mtp_payload(XdrDecodingStream xdr)
           throws OncRpcException, IOException {
        xdrDecode(xdr);
    }

    public void xdrEncode(XdrEncodingStream xdr)
           throws OncRpcException, IOException {
        xdr.xdrEncodeInt(opcode);
        switch ( opcode ) {
        case mtp_opcode_t.MTP_CONTROL_ERROR:
            error.xdrEncode(xdr);
            break;
        case mtp_opcode_t.MTP_CONTROL_NOTIFY:
            notify.xdrEncode(xdr);
            break;
        case mtp_opcode_t.MTP_CONTROL_INIT:
            init.xdrEncode(xdr);
            break;
        case mtp_opcode_t.MTP_CONTROL_CLOSE:
            close.xdrEncode(xdr);
            break;
        case mtp_opcode_t.MTP_CONFIG_RMC:
            config_rmc.xdrEncode(xdr);
            break;
        case mtp_opcode_t.MTP_CONFIG_VMC:
            config_vmc.xdrEncode(xdr);
            break;
        case mtp_opcode_t.MTP_REQUEST_POSITION:
            request_position.xdrEncode(xdr);
            break;
        case mtp_opcode_t.MTP_REQUEST_ID:
            request_id.xdrEncode(xdr);
            break;
        case mtp_opcode_t.MTP_UPDATE_POSITION:
            update_position.xdrEncode(xdr);
            break;
        case mtp_opcode_t.MTP_UPDATE_ID:
            update_id.xdrEncode(xdr);
            break;
        case mtp_opcode_t.MTP_COMMAND_GOTO:
            command_goto.xdrEncode(xdr);
            break;
        case mtp_opcode_t.MTP_COMMAND_STOP:
            command_stop.xdrEncode(xdr);
            break;
        case mtp_opcode_t.MTP_TELEMETRY:
            telemetry.xdrEncode(xdr);
            break;
        case mtp_opcode_t.MTP_WIGGLE_REQUEST:
            wiggle_request.xdrEncode(xdr);
            break;
        case mtp_opcode_t.MTP_WIGGLE_STATUS:
            wiggle_status.xdrEncode(xdr);
            break;
        case mtp_opcode_t.MTP_REQUEST_REPORT:
            request_report.xdrEncode(xdr);
            break;
        case mtp_opcode_t.MTP_CONTACT_REPORT:
            contact_report.xdrEncode(xdr);
            break;
        }
    }

    public void xdrDecode(XdrDecodingStream xdr)
           throws OncRpcException, IOException {
        opcode = xdr.xdrDecodeInt();
        switch ( opcode ) {
        case mtp_opcode_t.MTP_CONTROL_ERROR:
            error = new mtp_control(xdr);
            break;
        case mtp_opcode_t.MTP_CONTROL_NOTIFY:
            notify = new mtp_control(xdr);
            break;
        case mtp_opcode_t.MTP_CONTROL_INIT:
            init = new mtp_control(xdr);
            break;
        case mtp_opcode_t.MTP_CONTROL_CLOSE:
            close = new mtp_control(xdr);
            break;
        case mtp_opcode_t.MTP_CONFIG_RMC:
            config_rmc = new mtp_config_rmc(xdr);
            break;
        case mtp_opcode_t.MTP_CONFIG_VMC:
            config_vmc = new mtp_config_vmc(xdr);
            break;
        case mtp_opcode_t.MTP_REQUEST_POSITION:
            request_position = new mtp_request_position(xdr);
            break;
        case mtp_opcode_t.MTP_REQUEST_ID:
            request_id = new mtp_request_id(xdr);
            break;
        case mtp_opcode_t.MTP_UPDATE_POSITION:
            update_position = new mtp_update_position(xdr);
            break;
        case mtp_opcode_t.MTP_UPDATE_ID:
            update_id = new mtp_update_id(xdr);
            break;
        case mtp_opcode_t.MTP_COMMAND_GOTO:
            command_goto = new mtp_command_goto(xdr);
            break;
        case mtp_opcode_t.MTP_COMMAND_STOP:
            command_stop = new mtp_command_stop(xdr);
            break;
        case mtp_opcode_t.MTP_TELEMETRY:
            telemetry = new mtp_telemetry(xdr);
            break;
        case mtp_opcode_t.MTP_WIGGLE_REQUEST:
            wiggle_request = new mtp_wiggle_request(xdr);
            break;
        case mtp_opcode_t.MTP_WIGGLE_STATUS:
            wiggle_status = new mtp_wiggle_status(xdr);
            break;
        case mtp_opcode_t.MTP_REQUEST_REPORT:
            request_report = new mtp_request_position(xdr);
            break;
        case mtp_opcode_t.MTP_CONTACT_REPORT:
            contact_report = new mtp_contact_report(xdr);
            break;
        }
    }

}
// End of mtp_payload.java
