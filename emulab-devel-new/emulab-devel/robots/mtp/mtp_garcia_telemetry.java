/*
 * Automatically generated by jrpcgen 1.0.5 on 14-Feb-05 4:35:56 PM
 * jrpcgen is part of the "Remote Tea" ONC/RPC package for Java
 * See http://acplt.org/ks/remotetea.html for details
 */
package net.emulab;
import org.acplt.oncrpc.*;
import java.io.IOException;

public class mtp_garcia_telemetry implements XdrAble {
    public int robot_id;
    public float battery_level;
    public float battery_voltage;
    public int battery_misses;
    public float left_odometer;
    public float right_odometer;
    public float left_instant_odometer;
    public float right_instant_odometer;
    public float left_velocity;
    public float right_velocity;
    public int move_count;
    public int move_time_sec;
    public int move_time_usec;
    public int down_ranger_left;
    public int down_ranger_right;
    public float front_ranger_left;
    public float front_ranger_right;
    public float front_ranger_threshold;
    public float rear_ranger_left;
    public float rear_ranger_right;
    public float rear_ranger_threshold;
    public float side_ranger_left;
    public float side_ranger_right;
    public float side_ranger_threshold;
    public float speed;
    public int status;
    public int idle;
    public int user_button;
    public int user_led;
    public int stall_contact;

    public mtp_garcia_telemetry() {
    }

    public mtp_garcia_telemetry(XdrDecodingStream xdr)
           throws OncRpcException, IOException {
        xdrDecode(xdr);
    }

    public void xdrEncode(XdrEncodingStream xdr)
           throws OncRpcException, IOException {
        xdr.xdrEncodeInt(robot_id);
        xdr.xdrEncodeFloat(battery_level);
        xdr.xdrEncodeFloat(battery_voltage);
        xdr.xdrEncodeInt(battery_misses);
        xdr.xdrEncodeFloat(left_odometer);
        xdr.xdrEncodeFloat(right_odometer);
        xdr.xdrEncodeFloat(left_instant_odometer);
        xdr.xdrEncodeFloat(right_instant_odometer);
        xdr.xdrEncodeFloat(left_velocity);
        xdr.xdrEncodeFloat(right_velocity);
        xdr.xdrEncodeInt(move_count);
        xdr.xdrEncodeInt(move_time_sec);
        xdr.xdrEncodeInt(move_time_usec);
        xdr.xdrEncodeInt(down_ranger_left);
        xdr.xdrEncodeInt(down_ranger_right);
        xdr.xdrEncodeFloat(front_ranger_left);
        xdr.xdrEncodeFloat(front_ranger_right);
        xdr.xdrEncodeFloat(front_ranger_threshold);
        xdr.xdrEncodeFloat(rear_ranger_left);
        xdr.xdrEncodeFloat(rear_ranger_right);
        xdr.xdrEncodeFloat(rear_ranger_threshold);
        xdr.xdrEncodeFloat(side_ranger_left);
        xdr.xdrEncodeFloat(side_ranger_right);
        xdr.xdrEncodeFloat(side_ranger_threshold);
        xdr.xdrEncodeFloat(speed);
        xdr.xdrEncodeInt(status);
        xdr.xdrEncodeInt(idle);
        xdr.xdrEncodeInt(user_button);
        xdr.xdrEncodeInt(user_led);
        xdr.xdrEncodeInt(stall_contact);
    }

    public void xdrDecode(XdrDecodingStream xdr)
           throws OncRpcException, IOException {
        robot_id = xdr.xdrDecodeInt();
        battery_level = xdr.xdrDecodeFloat();
        battery_voltage = xdr.xdrDecodeFloat();
        battery_misses = xdr.xdrDecodeInt();
        left_odometer = xdr.xdrDecodeFloat();
        right_odometer = xdr.xdrDecodeFloat();
        left_instant_odometer = xdr.xdrDecodeFloat();
        right_instant_odometer = xdr.xdrDecodeFloat();
        left_velocity = xdr.xdrDecodeFloat();
        right_velocity = xdr.xdrDecodeFloat();
        move_count = xdr.xdrDecodeInt();
        move_time_sec = xdr.xdrDecodeInt();
        move_time_usec = xdr.xdrDecodeInt();
        down_ranger_left = xdr.xdrDecodeInt();
        down_ranger_right = xdr.xdrDecodeInt();
        front_ranger_left = xdr.xdrDecodeFloat();
        front_ranger_right = xdr.xdrDecodeFloat();
        front_ranger_threshold = xdr.xdrDecodeFloat();
        rear_ranger_left = xdr.xdrDecodeFloat();
        rear_ranger_right = xdr.xdrDecodeFloat();
        rear_ranger_threshold = xdr.xdrDecodeFloat();
        side_ranger_left = xdr.xdrDecodeFloat();
        side_ranger_right = xdr.xdrDecodeFloat();
        side_ranger_threshold = xdr.xdrDecodeFloat();
        speed = xdr.xdrDecodeFloat();
        status = xdr.xdrDecodeInt();
        idle = xdr.xdrDecodeInt();
        user_button = xdr.xdrDecodeInt();
        user_led = xdr.xdrDecodeInt();
        stall_contact = xdr.xdrDecodeInt();
    }

}
// End of mtp_garcia_telemetry.java
