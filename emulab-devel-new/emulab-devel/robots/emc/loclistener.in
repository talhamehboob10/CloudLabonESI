#! /usr/bin/env python

#
# Copyright (c) 2005 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

import os, os.path
import re
import sys
import time
import getopt

prefix = "@prefix@"

TBPATH = os.path.join(prefix, "lib")
if TBPATH not in sys.path:
    sys.path.append(TBPATH)
    pass

from libdb import *
from tbevent import *

server = "ops"
port = None

usage = ""

try:
    opts, args = getopt.getopt(sys.argv[1:],
                               "hs:p:e:",
                               [ "help",
                                 "server=",
                                 "port=" ])
    for opt, val in opts:
        if opt in ("-h", "--help"):
            sys.stderr.write(usage)
            sys.exit()
            pass
        elif opt in ("-s", "--server"):
            server = val
            pass
        elif opt in ("-p", "--port"):
            port = val
            pass
        else:
            sys.stderr.write("Unhandled option: " + opt + "\n")
            pass
        pass
    
    pass
except getopt.error:
    sys.stderr.write(usage)
    sys.exit(2)
    pass

res = DBQueryFatal("SELECT pixels_per_meter FROM floorimages "
                   "WHERE building='MEB-ROBOTS'");

if len(res) == 0:
    sys.stderr.write("error: MEB-ROBOTS building does not exist?\n");
    sys.exit(2)
    pass

pixels_per_meter = float(res[0][0])

sys.stderr.write("Pixels-per-meter: %f\n" % pixels_per_meter)

class LocationInfoUpdater(EventClient):

    def handle_event(self, event):
        if not re.match("^[-\w]*$", event.getObjName()):
            sys.stderr.write("error: bad node name in event: %s\n" %
                             event.getObjName())
            pass
        else:
            pid, eid = event.getExpt().split('/')
            
            res = DBQueryFatal("SELECT li.node_id,li.loc_x,li.loc_y FROM "
                               "reserved AS r "
                               "LEFT JOIN location_info AS li ON "
                               "  li.node_id=r.node_id "
                               "WHERE r.vname=%s and r.pid=%s and r.eid=%s",
                               (event.getObjName(), pid, eid))

            if len(res) == 0:
                sys.stderr.write("error: node not in experiment\n")
                pass
            else:
                if not res[0][0]:
                    node_id = event.getObjName()
                    pass
                else:
                    node_id = res[0][0]
                    pass

                if event.getEventType() == "COMPLETE":
                    DBQueryFatal("UPDATE nodes SET "
                                 "destination_x=NULL,"
                                 "destination_y=NULL,"
                                 "destination_orientation=NULL "
                                 "WHERE node_id=%s",
                                 (node_id,))
                    return
                
                update = {}
                battery_update = {}
                for arg in event.getArguments().split():
                    try:
                        key, value = arg.split('=')
                        if key == "X" or key == "x":
                            update["loc_x"] = float(value) * pixels_per_meter
			    if update["loc_x"] < 0.0:
				update["loc_x"] = 0.0
				pass
			    update["loc_x"] = str(update["loc_x"])
                            pass
                        elif key == "Y" or key == "y":
                            update["loc_y"] = float(value) * pixels_per_meter
			    if update["loc_y"] < 0.0:
				update["loc_y"] = 0.0
				pass
			    update["loc_y"] = str(update["loc_y"])
                            pass
                        elif key == "ORIENTATION" or key == "orientation":
                            update["orientation"] = str(float(value))
                            pass
                        elif key == "BATTERY_LEVEL" or key == "battery_level":
                            battery_update["battery_percentage"] = (
                                str(float(value)))
                            pass
                        elif (key == "BATTERY_VOLTAGE" or
                              key == "battery_voltage"):
                            battery_update["battery_voltage"] = (
                                str(float(value)))
                            pass
                        else:
                            sys.stderr.write("warning: unknown key: %s\n" %
                                             key)
                            pass
                        pass
                    except:
                        sys.stderr.write("error: bad argument: %s\n" % arg)
                        pass
                    pass

                if len(battery_update) > 0:
                    clause = ",".join(["=".join(i) for i in
                                       battery_update.items()])
                    
                    DBQueryFatal("UPDATE nodes SET "
                                 "battery_timestamp=UNIX_TIMESTAMP(now()), "
                                 + clause
                                 + " WHERE node_id=%s",
                                 (node_id,))
                    pass
                
                if not (update.has_key("loc_x") and update.has_key("loc_y")):
                    return

                if (update.has_key("loc_x") and update.has_key("loc_y") and
                    not update.has_key("orientation")):
                    update["orientation"] = "0.0"
                    pass
                
                if event.getEventType() == "SETDEST":
                    table_name = "nodes"
                    
                    if update.has_key("loc_x"):
                        update["destination_x"] = update["loc_x"]
                        del update["loc_x"]
                        pass
                    if update.has_key("loc_y"):
                        update["destination_y"] = update["loc_y"]
                        del update["loc_y"]
                        pass
                    if update.has_key("orientation"):
                        update["destination_orientation"] = (
                            update["orientation"])
                        del update["orientation"]
                        pass
                    pass
                else:
                    table_name = "location_info"
                    update["stamp"] = "UNIX_TIMESTAMP(now())"
                    pass

                if len(update) > 0:
                    clause = ",".join(["=".join(i) for i in update.items()])
                    
                    DBQueryFatal("UPDATE " + table_name + " SET "
                                 + clause
                                 + " WHERE node_id=%s",
                                 (node_id,))
                    pass
                pass
            pass
        
        return

    pass

liu = LocationInfoUpdater(server=server, port=port)

at = address_tuple()
at.objtype = "NODE"
at.eventtype = "SETDEST,MODIFY"

liu.subscribe(at)

at = address_tuple()
at.objtype = "NODE"
at.eventtype = "COMPLETE"
at.scheduler = 1

liu.subscribe(at)

liu.run()
