#!/usr/bin/perl -w
#
# Copyright (c) 2007 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

#
# Script for anonymizing directories from /usr/testbed/expinfo on boss. Parses
# the names of top-level directories, remvoving the <eid> and <pid> portions,
# leaving only the <id> portion of the directory name.
#
# If it finds any potential errors, does nothing. 
#

use strict;

if (@ARGV != 1) {
    die "Usage: $0 <directory>\n";
}

my ($dirname) = @ARGV;

my @names;
if ($dirname eq "-") {
    @names = <STDIN>;
} else {
    @names = `ls -1 $dirname`;
}

chomp @names;

my $errors = 0;

# Check for duplicate IDs
my %ids;

# Build up a list of commands - only execute them if there are no errors
my @commands;

foreach my $name (@names) {
    # Find the ID # in the filename
    my $id;
    if ($name =~ /\.(\d{3,})$/) {
        $id = $1;
    } elsif ($name =~ /-(\d+-\d+\.\d+\.\d+)$/) {
        $id = $1;
    } else {
        warn "***: Unable to find ID number in '$name'\n";
        $errors++;
        next;
    }
    if ($ids{$id}) {
        warn "***: Duplicate ID number $id ('$name') ";
        $errors++;
        next;
    } else {
        $ids{$id} = 1;
    }
#    if (-d $name) {
#        # Recurse into the directory
#        system "cd $name && $0 .\n";
#    }
    push @commands, "mv $name $id";
}

if ($errors) {
    exit(1);
} else {
    foreach my $cmd (@commands) {
        if (system $cmd) {
            print "*** Error running '$cmd'!\n";
        }
    }
    exit(0);
}
