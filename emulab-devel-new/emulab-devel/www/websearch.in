#!/usr/bin/perl -w
#
# Copyright (c) 2000-2008 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;
use File::Basename;

#
# Search our web index. Spits out HTML. Sorry, easier that way!
# 
sub usage {
    print STDERR "Usage: websearch ...\n";
    exit(-1);
}
my $optlist  = "";

#
# Configure variables
#
my $TB		= "@prefix@";
my $WWW         = "$TB/www";
my $index	= "$TB/www/site.index";
my $swish       = "swish-e";
my $searchstring;
my $searchwords;
my $numhits;
my %hits	= ();	# indexed by document.
my %lines       = ();   # indexed by document.
my @order	= ();

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Turn off line buffering on output
$| = 1;

#
# Very simple; one argument is the string to search for.
#
usage()
    if (! @ARGV);

$searchstring = $ARGV[0];

#
# Do this from the webdir.
#
chdir($WWW) or
    die("*** $0:\n".
	"    Could not chdir to $WWW!\n");

#
# Run swish. The next version of swish will include a perl API module, so
# we will be able to avoid this extra shell call. For now, we are stuck
# calling swish-e.
#
open(SWISH, "swish-e -f $index -x '%r %p %l \"%D\"\n' ".
     "-w '$searchstring' |") or
    die("*** $0:\n".
	"    Could not invoke swish-e on '$searchstring'!\n");

#
# Read back results. 
#
while (<SWISH>) {
    #
    # First few lines are special.
    #
    if ($_ =~ /^\#/) {
	if ($_ =~ /^\# Search words: (.*)$/) {
	    $searchwords = $1;
	}
	elsif ($_ =~ /^\# Number of hits: (\d*)$/) {
	    $numhits = $1;
	}
    }
    elsif ($_ =~ /^\.$/) {
	# So we suck everything up to the dot.
	last;
    }
    else {
	#
	# By this point we should have seen the above stuff go by.
	#
	if (!defined($searchwords) || !defined($numhits)) {
	    next;
	}
	if ($_ =~ /^(\d*) (.*) (\d*) \"(.*)\"$/) {
	    my $rank = $1;
	    my $path = $2;
	    my $size = $3;
	    my $mod  = $4;

	    #print "$path $mod\n";

	    $hits{$path}  = [ $rank, $path, $size, $mod ];
	    $lines{$path} = [];
	    push(@order, $path);
	}
    }
}
close(SWISH);

#
# Build a query to pass to agrep; this is pathetic, but the next version of
# swish will handle this, so not going to worry; it will do the job.
#
my $query = $searchwords;
$query =~ s/\s+AND\s+/\;/ig;
$query =~ s/\s+OR\s+/\,/ig;
$query =~ s/(?<!\\)\"//ig;

#print "$query\n";

#
# Run agrep on the list of files. 
# 
open(AGREP, "agrep -w -i '$query' " . join(" ", keys(%hits)) .
     " /dev/null 2> /dev/null |") or
    die("*** $0:\n".
	"    Could not invoke agrep with '$query'!\n");

while (<AGREP>) {
#    print $_;
    if ($_ =~ /^(.*): (.*)$/) {
	push(@{ $lines{$1} }, $2)
	    if (exists($lines{$1}) && scalar(@{ $lines{$1} }) < 10);
    }
}
close(AGREP);

if (@order) {
    print "Rank, filename, modification date, matching lines<br><br>\n";
    print "<ul>\n";
}
foreach my $hit (@order) {
    my ($rank, $path, $size, $mod) = @{ $hits{$hit} };
    my $url = $path;

    print "<hr>\n";
    print "<li> $rank - <b><a href=$url>$path</a></b>, $mod<br>\n";
    print "<ul>\n";
    foreach my $line (@{ $lines{$hit} }) {
	$line =~ s/<([^>]*)>//ig;	# Matched <...>
	$line =~ s/<[^>]*//ig;		# Unmatched <...
	#$line =~ s/<.*>//ig; 	
	#$line =~ s/<li>//ig;
	#$line =~ s/<\/li>//ig;

	next
	    if ($line eq "");
	
	print "<li> $line\n";
    }
    print "</ul>\n";
}
if (@order) {
    </ul>
}

print "<hr><br><br>".
      "Web Search powered by <a href=\"http://swish-e.org/\"><b>Swish-e</b></a>".
      "\n";

exit(0);
