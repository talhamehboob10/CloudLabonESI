<?php
#
# Copyright (c) 2000-2021 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
chdir("..");
include_once("webtask.php");
include_once("experiment_defs.php");
include_once("node_defs.php");
chdir("apt");

function Do_List()
{
    global $this_user, $ajax_args;
    $clause = "";
    $result = array();

    if (!ISADMIN()) {
	SPITAJAX_ERROR(1, "Not enough permission");
        return;
    }
    if ($ajax_args && isset($ajax_args["uuid"])) {
        $uuid = $ajax_args["uuid"];
        if (!IsValidUUID($uuid)) {
            SPITAJAX_ERROR(-1, "Invalid experiment UUID");
            return -1;
        }
        $experiment = Experiment::LookupByUUID($uuid);
        if (!$experiment) {
            SPITAJAX_ERROR(-1, "No such experiment");
            return -1;
        }
        $idx = $experiment->idx();
        $clause = "where exptidx='$idx'";
    }
    $query_result =
        DBQueryFatal("select * from vlans $clause order by pid,eid");

    while ($row = mysql_fetch_array($query_result)) {
        $result[] = $row;
    }
    SPITAJAX_RESPONSE($result);
}

function Do_GetInfo()
{
    global $this_user, $ajax_args;
    $result = array();

    if (!ISADMIN()) {
	SPITAJAX_ERROR(1, "Not enough permission");
        return;
    }
    if (!isset($ajax_args["vlan_id"])) {
	SPITAJAX_ERROR(-1, "Missing vlan ID");
	return -1;
    }
    $vlan_id = $ajax_args["vlan_id"];
    if (!TBvalid_integer($vlan_id)) {
	SPITAJAX_ERROR(-1, "Invalid vlan ID");
	return -1;
    }
    $query_result =
        DBQueryFatal("select * from vlans where id='$vlan_id'");
    
    if (!mysql_num_rows($query_result)) {
	SPITAJAX_ERROR(-1, "No such vlan ID");
	return -1;
    }
    $row = mysql_fetch_array($query_result);

    if (isset($row["members"]) && $row["members"] != "") {
        $members = array();
        
        foreach (preg_split("/\s/", $row["members"]) as $member) {
            list ($node_id,$iface) = preg_split('/:/', $member);

            $node = Node::Lookup($node_id);
            if ($node) {
                $members[] = $node->GetInterfaceInfo($iface);
            }
        }
        $row["members"] = $members;
    }
    else {
        $row["members"] = null;
    }

    #
    # Virtual interfaces on this vlan.
    #
    $query_result =
        DBQueryFatal("select * from vinterfaces where vlanid='$vlan_id'");
    
    if (mysql_num_rows($query_result)) {
        $vinterfaces = array();
        
        while ($vrow = mysql_fetch_array($query_result)) {
            $vinterfaces[] = $vrow;
        }
        $row["vinterfaces"] = $vinterfaces;
    }
    else {
        $row["vinterfaces"] = null;
    }

    #
    # Map switch path to wires.
    #
    if ($row["switchpath"]) {
        $wires = array();
        
        foreach (preg_split("/\s/", $row["switchpath"]) as $path) {
            list ($node_id1,$node_id2) = preg_split('/:/', $path);

            $query_result =
                DBQueryFatal("select * from wires ".
                             "where type='Trunk' and ".
                             "      ((node_id1='$node_id1' and ".
                             "        node_id2='$node_id2') or ".
                             "       (node_id1='$node_id2' and ".
                             "        node_id2='$node_id1'))");

            while ($wrow = mysql_fetch_array($query_result)) {
                $wires[] = $wrow;
            }
        }
        $row["wires"] = $wires;
    }
    else {
        $row["wires"] = null;
    }
    SPITAJAX_RESPONSE($row);
}

function Do_History()
{
    global $this_user, $ajax_args;
    $records = array();

    error_log(print_r($ajax_args, TRUE));    

    if (!ISADMIN()) {
	SPITAJAX_ERROR(1, "Not enough permission");
        return;
    }
    $limit = 50;
    $first = null;
    $last  = null;
    $which = "";

    #
    # This subquery gets just the rows we want, without a massive increase
    # in the cross product.
    #
    if (isset($ajax_args["operation"])) {
        if (! (isset($ajax_args["first"]) &&
               isset($ajax_args["last"]) &&
               is_numeric($ajax_args["first"]) &&
               is_numeric($ajax_args["last"]))) {
            SPITAJAX_ERROR(1, "Bad arguments");
            return;
        }
        $f = $ajax_args["first"];
        $l = $ajax_args["last"];
        
        if ($ajax_args["operation"] == "next") {
            $which = "where history_id < $l";
        }
        elseif ($ajax_args["operation"] == "prev") {
            $which = "where history_id < $f + $limit";
        }
        elseif ($ajax_args["operation"] == "lanid") {
            $lanid = $ajax_args["argument"];
            if (!is_numeric($lanid)) {
                SPITAJAX_ERROR(1, "Bad arguments");
                return;
            }
            $which = "where lanid='$lanid'";
        }
        elseif ($ajax_args["operation"] == "tag") {
            $tag = $ajax_args["argument"];
            if (!is_numeric($tag)) {
                SPITAJAX_ERROR(1, "Bad arguments");
                return;
            }
            $which = "where tag='$tag'";
        }
        elseif ($ajax_args["operation"] == "date") {
            $time = strtotime($ajax_args["argument"]);
            if (!$time) {
                SPITAJAX_ERROR(1, "Bad arguments");
                return;
            }
            $which = "where allocated<'$time'";
        }
        else {
            SPITAJAX_ERROR(1, "date arguments");
            return;
        }
    }
    $subquery = "select * from vlantag_history $which ".
        "order by history_id desc limit $limit";

    $query_result =
        DBQueryFatal("select h.*,s.pid,s.eid,s.pid_idx,s.slice_uuid,e.gid,".
                     "   i.uuid as instance_uuid,ih.uuid as history_uuid ".
                     " from ($subquery) h ".
                     "left join experiment_stats as s on ".
                     "     s.exptidx=h.exptidx ".
                     "left join experiments as e on ".
                     "     e.idx=h.exptidx ".
                     "left join apt_instances as i on ".
                     "     i.slice_uuid=s.eid_uuid ".
                     "left join apt_instance_history as ih on ".
                     "     ih.slice_uuid=s.eid_uuid ".
                     "order by h.history_id desc");

    while ($row = mysql_fetch_array($query_result)) {
        $history_id = $row["history_id"];

        $blob = array(
            "history_id"    => $history_id,
            "lanid"         => $row["lanid"],
            "lanname"       => $row["lanname"],
            "tag"           => $row["tag"],
            "pid"           => $row["pid"],
            "eid"           => $row["eid"],
            "pid_idx"       => $row["pid_idx"],
            "exptidx"       => $row["exptidx"],
            "allocated"     => DateStringGMT(intval($row["allocated"])),
            "released"      => DateStringGMT($row["released"] ?
                                             intval($row["released"]) : null),
            "slice_uuid"    => $row["slice_uuid"],
            "instance_uuid" => $row["instance_uuid"],
            "history_uuid"  => $row["history_uuid"],
            "experiment"    => $row["gid"] ? $row["exptidx"] : null,
        );
        $records[] = $blob;
        if ($first == null) {
            $first = $history_id;
        }
        $last = $history_id;
    }
    $result = array(
        "records"  => $records,
        "first"    => $first,
        "last"     => $last,
    );
    SPITAJAX_RESPONSE($result);
}

# Local Variables:
# mode:php
# End:
?>
