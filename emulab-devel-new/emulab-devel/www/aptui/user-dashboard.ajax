<?php
#
# Copyright (c) 2000-2021 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
chdir("..");
chdir("apt");
include_once("profile_defs.php");
include_once("instance_defs.php");
include_once("ajax-routines.ajax");
include_once("resgroup_defs.php");

# We set this in CheckPageArgs
$target_user = null;

#
# Need to check the permission, since we allow admins to mess with
# other accounts.
#
function CheckPageArgs()
{
    global $this_user, $target_user;
    global $ajax_args;
    global $TB_USERINFO_READINFO;

    if (!isset($ajax_args["uid"])) {
	SPITAJAX_ERROR(-1, "Missing target uid");
	return -1;
    }
    $uid = $ajax_args["uid"];
    
    if (!TBvalid_uid($uid)) {
	SPITAJAX_ERROR(-1, "Invalid target uid");
        return -1;
    }
    $target_user = User::Lookup($uid);
    if (!$target_user) {
        sleep(2);
	SPITAJAX_ERROR(-1, "Unknown target uid");
        return -1;
    }
    if ($uid == $this_user->uid())
        return 0;
    
    if (!ISADMIN() && !ISFOREIGN_ADMIN() &&
        !$target_user->AccessCheck($this_user, $TB_USERINFO_READINFO)) {
	SPITAJAX_ERROR(-1, "Not enough permission");
	return -1;
    }
    return 0;
}

function Do_ExperimentList()
{
    global $this_user, $target_user;

    if (CheckPageArgs()) {
        return;
    }
    $blob = array("user_experiments" =>
                     ExperimentList("user", $target_user),
                  "project_experiments" =>
                     ExperimentList("membership", $target_user));
    SPITAJAX_RESPONSE($blob);
}

function Do_ClassicExperimentList()
{
    global $this_user, $target_user;

    if (CheckPageArgs()) {
        return;
    }
    $results = ClassicExperimentList("user", $target_user);
    SPITAJAX_RESPONSE($results);
}

function Do_ClassicProfileList()
{
    global $this_user, $target_user;

    if (CheckPageArgs()) {
        return;
    }
    $results = ClassicExperimentList("user", $target_user, "inactive");
    SPITAJAX_RESPONSE($results);
}

function Do_ProfileList()
{
    global $this_user, $target_user;

    if (CheckPageArgs()) {
        return;
    }
    $results = ProfileList("user", $target_user);
    SPITAJAX_RESPONSE($results);
}

function Do_ProjectProfileList()
{
    global $this_user, $target_user;

    if (CheckPageArgs()) {
        return;
    }
    $results = ProjectProfileList($target_user);
    SPITAJAX_RESPONSE($results);
}

function Do_DatasetList()
{
    global $this_user, $target_user;

    if (CheckPageArgs()) {
        return;
    }
    $results = DatasetList("user", $target_user);
    SPITAJAX_RESPONSE($results);
}

function Do_ResgroupList()
{
    global $this_user, $target_user;
    $result  = array();
    $listing = array();

    if (CheckPageArgs()) {
        return;
    }
    $resgroups = ReservationGroup::LookupForUser($target_user);
    foreach ($resgroups as $resgroup) {
        $listing[$resgroup->uuid()] = $resgroup->Blob();
    }
    $result["user"] = $listing;

    #
    # Also all resgroups in projects the user belongs to. 
    #
    $projlist  = $target_user->ProjectMembershipList();
    $listing   = array();

    foreach ($projlist as $project) {
        $resgroups = ReservationGroup::LookupForProject($project);
        foreach ($resgroups as $resgroup) {
            $listing[$resgroup->uuid()] = $resgroup->Blob();
        }
    }
    $result["project"] = $listing;
    SPITAJAX_RESPONSE($result);
}

function Do_ClassicDatasetList()
{
    global $this_user, $target_user;

    if (CheckPageArgs()) {
        return;
    }
    $results = ClassicDatasetList("user", $target_user);
    SPITAJAX_RESPONSE($results);
}

function Do_ProjectList()
{
    global $this_user, $target_user;
    global $TB_PROJECT_READINFO, $newTrustMap;

    if (CheckPageArgs()) {
        return;
    }
    $target_idx  = $target_user->uid_idx();
    $target_uuid = $target_user->uuid();
    $results     = array();
    $projlist    = $target_user->ProjectMembershipList();

    #
    # Cull out the nonlocal projects, we do not want to show those
    # since they are just the holding projects.
    #
    foreach ($projlist as $proj) {
        if (!$proj->IsNonLocal()) {
            $blob = array();
            $blob["pid"] = $proj->pid();
            $blob["description"] = $proj->name();
            $leader = $proj->GetLeader();
            $blob["leader"]      = $leader->uid();
            $blob["leader_name"] = $leader->name();
            $blob["leader_idx"]  = $leader->idx();
            $membership = $proj->MemberShipInfo($target_user);
            $blob["trust"] = $newTrustMap[$membership["trust"]];

            #
            # User membership in subgroups
            #
            $blob["subgroups"] = array();
            
            $groups = $proj->GroupList($target_user);
            if (count($groups)) {
                foreach ($groups as $group) {
                    $glob = array();
                    $leader = $group->GetLeader();

                    $glob["gid"]          = $group->gid();
                    $glob["gid_idx"]      = $group->gid_idx();
                    $glob["description"]  = $group->description();
                    $glob["leader"]       = $leader->uid();
                    $glob["leader_idx"]   = $leader->idx();
                    $glob["leader_name"]  = $leader->name();
                    $membership = $group->MemberShipInfo($target_user);
                    $glob["trust"] = $newTrustMap[$membership["trust"]];
                    $blob["subgroups"][] = $glob;
                }
            }
            $results[$proj->pid()] = $blob;
        }
    }

    SPITAJAX_RESPONSE($results);
}

function Do_AccountDetails()
{
    global $this_user, $target_user;

    if (CheckPageArgs()) {
        return;
    }
    $target_idx  = $target_user->uid_idx();
    $target_uuid = $target_user->uuid();
    $results     = array();

    $results["uid"]          = $target_user->uid();
    $results["name"]         = $target_user->name();
    $results["email"]        = $target_user->email();
    $results["affiliation"]  = $target_user->affil();
    $results["country"]      = $target_user->country();
    $results["address1"]     = $target_user->addr1();
    $results["address2"]     = $target_user->addr2();
    $results["state"]        = $target_user->state();
    $results["city"]         = $target_user->city();
    $results["zip"]          = $target_user->zip();
    $results["phone"]        = $target_user->phone();
    $results["shell"]        = $target_user->shell();

    if (ISADMIN()) {
        $results["uid_idx"]       = $target_user->uid_idx();
        $results["portal"]        = ($target_user->portal() ?
                                     $target_user->portal() : "classic");
        $results["bound_portal"]  = $target_user->bound_portal() ? true:false;
        $results["created"]       = DateStringGMT($target_user->created());
        $results["modified"]      = DateStringGMT($target_user->modified());
        $results["pswd_expires"]  = DateStringGMT($target_user->pswd_expires());
        $results["status"]        = $target_user->status();
        $results["frozen_stamp"]  = DateStringGMT($target_user->frozen_stamp());
        $results["frozen_by"]     = $target_user->frozen_by();
        $results["stud"]          = $target_user->stud() ? true : false;
        $results["admin"]         = $target_user->admin() ? true : false;
        $results["foreign_admin"] = $target_user->foreign_admin() ? true:false;
        $results["expert_mode"]   = $target_user->expert_mode() ? true:false;
        $results["web_frozen"]    = $target_user->weblogin_frozen()? true:false;
        $results["nonlocal_id"]   = ($target_user->nonlocal_id() ?
                                     $target_user->nonlocal_id() : "");
        $results["last_weblogin"] = DateStringGMT(LASTWEBLOGIN($target_idx));
        $results["inactive"]      = ($target_user->status() ==
                                      TBDB_USERSTATUS_INACTIVE ? true : false);
        $results["affil_matched"] = $target_user->affiliation_matched();
        $results["affil_updated"] =
            DateStringGMT($target_user->affiliation_updated());
        $results["loggedin"]      = $target_user->LoggedIn();
    }
    $scopus_info = array();
    $query_result =
        DBQueryFatal("select u.scopus_id,u.author_url,p.title, ".
                     "    u.validation_state,p.authors,p.pubname,p.doi ".
                     "  from user_scopus_info as u ".
                     "left join scopus_paper_info as p on ".
                     "     p.scopus_id=u.latest_abstract_id ".
                     "where uid_idx='$target_idx' and ".
                     "      u.validation_state!='invalid'");
    while ($row = mysql_fetch_array($query_result)) {
        $scopus_id = $row["scopus_id"];
        $scopus_info[$scopus_id] = $row;
    }
    $results["scopus_info"] = $scopus_info;

    SPITAJAX_RESPONSE($results);
}

#
# Usage for the user, in pnode hours. 
#
function Do_UsageSummary()
{
    global $this_user, $target_user;
    global $ajax_args;

    if (CheckPageArgs()) {
        return;
    }
    list($pcount, $phours)           = Instance::CurrentUsage($target_user);
    list($weekpcount, $weekphours)   = Instance::WeeksUsage($target_user);
    list($monthpcount, $monthphours) = Instance::MonthsUsage($target_user);
    list($rank, $ranktotal)          = Instance::Ranking($target_user, 30);

    if ($phours < 2) {
        $phours = sprintf("%.1f", $phours);
    }
    else {
        $phours = sprintf("%.0f", $phours);
    }
    if ($weekphours < 2) {
        $weekphours = sprintf("%.1f", $weekphours);
    }
    else {
        $weekphours = sprintf("%.0f", $weekphours);
    }
    if ($monthphours < 2) {
        $monthphours = sprintf("%.1f", $monthphours);
    }
    else {
        $monthphours = sprintf("%.0f", $monthphours);
    }
    $blob = array("pnodes"      => $pcount,
                  "phours"      => $phours,
                  "weekpnodes"  => $weekpcount,
                  "weekphours"  => $weekphours,
                  "monthpnodes" => $monthpcount,
                  "monthphours" => $monthphours,
                  "rankdays"    => 30,
                  "rank"        => $rank,
                  "ranktotal"   => $ranktotal,
                  "expcount"    => Instance::CurrentInstanceCount($target_user),
    );
    
    SPITAJAX_RESPONSE($blob);
}

#
# Toggle flags.
#
function Do_Toggle()
{
    global $this_user, $target_user;
    global $ajax_args, $suexec_output;
    global $TBMAIL_OPS, $TBMAIL_AUDIT, $TBMAIL_WWW, $TBADMINGROUP;

    if (CheckPageArgs()) {
        return;
    }
    if (!ISADMIN()) {
	SPITAJAX_ERROR(-1, "Not enough permission");
        return;
    }
    if ($target_user->status() != TBDB_USERSTATUS_ACTIVE &&
        $target_user->status() != TBDB_USERSTATUS_INACTIVE) {
	SPITAJAX_ERROR(-1, "User not been activated yet!");
        return;
    }
    $target_idx  = $target_user->uid_idx();
    $target_uid  = $target_user->uid();
    $this_uid    = $this_user->uid();

    if (!isset($ajax_args["toggle"])) {
	SPITAJAX_ERROR(-1, "Missing toggle name");
	return -1;
    }
    $toggle = $ajax_args["toggle"];

    if ($toggle == "admin") {
        $target_user->SetAdminFlag($target_user->admin() ? 0 : 1);
        if ($target_user->admin()) {
            TBMAIL($TBMAIL_OPS,
                   "Admin Flag enabled for '$target_uid'",
                   "$this_uid has enabled the admin flag for $target_uid!\n\n",
                   "From: $TBMAIL_OPS\n".
                   "Bcc: $TBMAIL_AUDIT\n".
                   "Errors-To: $TBMAIL_WWW");
        }
        if (SUEXEC($this_uid, $TBADMINGROUP,
                   "webtbacct mod $target_uid", SUEXEC_ACTION_CONTINUE)) {
            SPITAJAX_ERROR(-1, $suexec_output);
            return -1;
        }
        if (SUEXEC($this_uid, $TBADMINGROUP,
                   "webmodgroups $target_uid", SUEXEC_ACTION_CONTINUE)) {
            SPITAJAX_ERROR(-1, $suexec_output);
            return -1;
        }
    }
    elseif ($toggle == "inactive") {
        $newstatus = ($target_user->IsActive() ?
                      TBDB_USERSTATUS_INACTIVE : TBDB_USERSTATUS_ACTIVE);
        $command   = ($target_user->IsActive() ? "deactivate" : "reactivate");
    
        $target_user->SetStatus($newstatus);
        if (SUEXEC($this_uid, $TBADMINGROUP,
                   "webtbacct $command $target_uid", SUEXEC_ACTION_CONTINUE)) {
            SPITAJAX_ERROR(-1, $suexec_output);
            return -1;
        }
    }
    elseif ($toggle == "bound_portal") {
        $target_user->SetBoundPortal($target_user->bound_portal() ? 0 : 1);
    }
    elseif ($toggle == "foreign_admin") {
        $target_user->SetForeignAdmin($target_user->foreign_admin() ? 0 : 1);
    }
    elseif ($toggle == "stud") {
        $target_user->SetStudly($target_user->stud() ? 0 : 1);
    }
    elseif ($toggle == "web_frozen") {
        $target_user->SetWebFreeze($target_user->weblogin_frozen() ? 0 : 1);
    }
    elseif ($toggle == "expert_mode") {
        $target_user->SetExpertMode($target_user->expert_mode() ? 0 : 1);
    }
    else {
	SPITAJAX_ERROR(-1, "Unknown toggle name: $toggle");
        return;
    }
    SPITAJAX_RESPONSE(1);
}

#
# Freeze or Thaw.
#
function Do_FreezeOrThaw()
{
    global $this_user, $target_user;
    global $ajax_args, $suexec_output;
    global $TBADMINGROUP;

    if (CheckPageArgs()) {
        return;
    }
    if (!ISADMIN()) {
	SPITAJAX_ERROR(-1, "Not enough permission");
        return;
    }
    if ($target_user->status() != TBDB_USERSTATUS_ACTIVE &&
        $target_user->status() != TBDB_USERSTATUS_FROZEN) {
	SPITAJAX_ERROR(-1, "User is not active or frozen!");
        return;
    }
    $target_idx  = $target_user->uid_idx();
    $target_uid  = $target_user->uid();
    $this_uid    = $this_user->uid();

    if (!isset($ajax_args["which"])) {
	SPITAJAX_ERROR(-1, "What am I supposed to do?");
	return -1;
    }
    $which = strtolower($ajax_args["which"]);
    if ($which != "freeze" && $which != "thaw") {
	SPITAJAX_ERROR(-1, "Cannot do that: $which");
	return -1;
    }
    # Use -u (update) and -f (force) to make it happen.
    if (SUEXEC($this_uid, $TBADMINGROUP,
               "webtbacct -u -f $which $target_uid", SUEXEC_ACTION_CONTINUE)) {
        SPITAJAX_ERROR(-1, $suexec_output);
        return -1;
    }
    $target_email = $target_user->email();
    $target_name  = $target_user->name();
    $adminemail   = $target_user->opsEmail();

    if ($which == "freeze") {
        $tag = "frozen";
        $message = 
            "To discuss this matter in further detail, ".
            "please respond to this message.\n";
    }
    else {
        $tag = "unfrozen";
        $message = "";
    }
    if (isset($ajax_args["message"]) && $ajax_args["message"] != "") {
        $message = $ajax_args["message"] . "\n\n" . $message;
    }    
    TBMAIL("$target_name '$target_uid' <$target_email>",
           "Your account has been $tag",
           "Your account has been ${tag}.\n\n" . $message,
           "From: $adminemail\n".
           "Cc: $adminemail");
    SPITAJAX_RESPONSE(1);
}

#
# Send a reset password link, no cookie required.
#
function Do_SendPasswordReset()
{
    global $this_user, $target_user;
    global $ajax_args, $APTBASE, $APTMAIL, $TBMAIL_WWW, $TBMAIL_AUDIT;

    if (CheckPageArgs()) {
        return;
    }
    if (!ISADMIN()) {
	SPITAJAX_ERROR(-1, "Not enough permission");
        return;
    }
    if ($target_user->status() != TBDB_USERSTATUS_ACTIVE &&
        $target_user->status() != TBDB_USERSTATUS_FROZEN) {
	SPITAJAX_ERROR(-1, "User is not active or frozen!");
        return;
    }
    $target_idx  = $target_user->uid_idx();
    $target_uid  = $target_user->uid();
    $target_name = $target_user->name();
    $target_email= $target_user->email();

    #
    # Generate a random key and send the user an email message with a URL
    # that will allow them to change their password. 
    #
    $key = GENHASH();
    $target_user->SetChangePassword($key, "UNIX_TIMESTAMP(now())+(60*10)");

    TBMAIL("$target_name <$target_email>",
           "Password reset for '$target_uid'",
           "\n".
           "Here is your password reset authorization URL. Click on this\n".
           "link within the next 10 minutes, and you will be allowed to\n".
           "reset your password.\n".
           "\n".
           "    ${APTBASE}/changepswd.php?user=$target_uid&reset=$key\n".
           "\n".
           "\n".
           "Thanks!\n",
           "From: $APTMAIL\n".
           "Bcc: $TBMAIL_AUDIT\n".
           "Errors-To: $TBMAIL_WWW");

    SPITAJAX_RESPONSE(1);
}

function Do_SendTestMessage()
{
    global $this_user, $target_user;
    global $APTMAIL;

    if (CheckPageArgs()) {
        return;
    }
    if (!ISADMIN()) {
	SPITAJAX_ERROR(1, "Only administrators can do this.");
        return;
    }
    $target_idx   = $target_user->uid_idx();
    $target_uuid  = $target_user->uuid();
    $target_email = $target_user->email();
    $target_name  = $target_user->name();
    $target_uid   = $target_user->uid();
    $adminemail   = $target_user->adminEmail();

    TBMAIL("$target_name '$target_uid' <$target_email>",
           "This is a test",
           "\n".
           "Dear $target_name ($target_uid):\n".
           "\n".
           "This is a test message to validate the email address that we\n".
           "have in our database. Please respond to this message\n".
           "as soon as you receive it. If we do not hear back from you, we\n".
           "may be forced to freeze your account.\n".
           "\n".
           "Thank you very much!\n",
           "From: $adminemail\n".
           "Bcc: $adminemail");
           
    SPITAJAX_RESPONSE(1);
}

function Do_NagPI()
{
    global $this_user, $ajax_args;

    if (!isset($ajax_args["pid"])) {
	SPITAJAX_ERROR(-1, "Missing project name");
	return -1;
    }
    if (!TBvalid_pid($ajax_args["pid"])) {
	SPITAJAX_ERROR(-1, "Invalid project name");
	return -1;
    }
    $project = Project::Lookup($ajax_args["pid"]);
    if (!$project) {
	SPITAJAX_ERROR(-1, "No such project");
	return -1;
    }
    $group = $project->DefaultGroup();
    if (!$group) {
	SPITAJAX_ERROR(-1, "Internal error getting group");
	return -1;
    }
    $membership = $group->MemberShipInfo($this_user);
    if ($membership["date_approved"]) {
        SPITAJAX_ERROR(1, "You have already been approved, please refresh ".
                       "the page to see your updated status.");
        return -1;
    }
    if ($membership["date_nagged"]) {
        $nagged = strtotime($membership["date_nagged"]);
        if (time() - $nagged < 3600 * 24) {
            SPITAJAX_ERROR(1, "You recently reminded the project leader, ".
                           "lets give him/her a chance to respond before ".
                           "sending another reminder.");
            return -1;
        }
    }
    # Chalk an error up to a double click, do not bother to do anything.
    $group->NewMemberNotify($this_user, true);
    SPITAJAX_RESPONSE("nagged");
}

function Do_AcceptAUP()
{
    global $this_user, $PORTAL_GENESIS;

    $this_user->AcceptAUP($PORTAL_GENESIS);

    SPITAJAX_RESPONSE("accepted");
}

#
# Return a list of all paramsets for user.
#
function Do_ListParameterSets()
{
    global $this_user, $target_user;

    if (CheckPageArgs()) {
        return;
    }
    $uid_idx = $target_user->uid_idx();
    #
    # Watch for version specific parameter set, switch the profile_uuid
    # to that version. Note that repo based profiles are always version
    # zero, we have to add another argument to the url instead.
    #
    $query_result =
        DBQueryFatal("select s.uuid from apt_parameter_sets as s ".
                     "where s.uid_idx='$uid_idx' ".
                     "order by s.name,s.profileid,s.created");
    if (! mysql_num_rows($query_result)) {
        SPITAJAX_RESPONSE(null);
        return;
    }
    $results = array();
    while ($row = mysql_fetch_array($query_result)) {
        $paramset = Paramset::Lookup($row["uuid"]);
        if (!$paramset) {
            continue;
        }
        $blob = $paramset->Blob($this_user);
        if (!$blob) {
            continue;
        }
        $results[] = $blob;
    }
    SPITAJAX_RESPONSE($results);
    return;
}

#
# Verify scopus info (mark entries the user has indicated are theirs).
#
function Do_VerifyScopusInfo()
{
    global $this_user, $target_user, $ajax_args;

    if (CheckPageArgs()) {
        return;
    }
    if (!ISADMIN() && !$this_user->SameUser($target_user)) {
	SPITAJAX_ERROR(-1, "Not enough permission");
	return -1;
    }
    $uid_idx = $target_user->uid_idx();

    if (!isset($ajax_args["abstracts"])) {
	SPITAJAX_ERROR(-1, "Missing abstract list");
	return -1;
    }
    $abstracts = $ajax_args["abstracts"];
    foreach ($abstracts as $scopus_id => $valid) {
        if (!preg_match("/^\d+$/", $scopus_id)) {
            SPITAJAX_ERROR(-1, "Invalid scopus_id ID");
            return -1;
        }
        $state = ($valid == "true" ? "valid" : "invalid");

        $target_user->ValidateScopusInfo($scopus_id, $state);
    }
    SPITAJAX_RESPONSE(1);
}

#
# Delete user,
#
function Do_DeleteUser()
{
    global $this_user, $target_user, $ajax_args;
    global $suexec_output;
    global $TBADMINGROUP;

    if (CheckPageArgs()) {
        return;
    }
    if (!ISADMIN()) {
	SPITAJAX_ERROR(-1, "Not enough permission");
	return -1;
    }
    if ($this_user->SameUser($target_user)) {
	SPITAJAX_ERROR(-1, "Not allowed to self delete");
	return -1;
    }
    $uid = $this_user->uid();

    if (SUEXEC($uid, $TBADMINGROUP, "webrmuser " . $target_user->uid_idx(),
               SUEXEC_ACTION_CONTINUE)) {
        SPITAJAX_ERROR(-1, $suexec_output);
        return -1;
    }
    SPITAJAX_RESPONSE(1);
}

# Local Variables:
# mode:php
# End:
?>
