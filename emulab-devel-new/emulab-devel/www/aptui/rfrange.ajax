<?php
#
# Copyright (c) 2000-2020 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
chdir("..");
include_once("geni_defs.php");
chdir("apt");
include_once("rfrange_defs.php");

#
# Include the currently used ranges. If asking for a specific project
# include the global ranges too.
#
function ProjectBlob($project, $global = false)
{
    global $this_user;
    $pid_idx = $project->pid_idx();
    $rfanges = ProjectRFRanges::Lookup($project);
    $blob    = array();
    if (!FeatureEnabled("OTA-allowed", $this_user, $project, null)) {
        return $blob;
    }
    foreach ($rfanges->Ranges() as $range) {
        $range_id = $range->range_id() ? $range->range_id() : "";
        
        $blob[] = array(
            "global"    => false,
            "idx"       => $range->idx(),
            "range_id"  => $range_id,
            "freq_low"  => $range->freq_low(),
            "freq_high" => $range->freq_high(),
        );
    }
    if ($global) {
        $rfanges = GlobalRFRanges::Lookup();
        
        foreach ($rfanges->Ranges() as $range) {
            $range_id = $range->range_id() ? $range->range_id() : "";
            
            $blob[] = array(
                "global"    => true,
                "idx"       => $range->idx(),
                "range_id"  => $range_id,
                "freq_low"  => $range->freq_low(),
                "freq_high" => $range->freq_high(),
            );
        }
    }
    return $blob;
}

function Do_ProjectRanges()
{
    global $this_user;
    global $ajax_args;
    global $TB_PROJECT_READINFO;

    if (!isset($ajax_args["pid"])) {
	SPITAJAX_ERROR(-1, "Missing project");
	return -1;
    }
    $pid = $ajax_args["pid"];
    
    if (!TBvalid_pid($pid)) {
	SPITAJAX_ERROR(-1, "Invalid target pid");
        return -1;
    }
    $target_project = Project::Lookup($pid);
    if (!$target_project) {
        sleep(2);
	SPITAJAX_ERROR(-1, "Unknown target pid");
        return -1;
    }
    if (!ISADMIN() &&
        !$target_project->AccessCheck($this_user, $TB_PROJECT_READINFO)) {
	SPITAJAX_ERROR(-1, "Not enough permission");
	return -1;
    }
    $blob = ProjectBlob($target_project, true);
    SPITAJAX_RESPONSE($blob);
}

function Do_ProjectInuseRanges()
{
    global $this_user;
    global $ajax_args;
    global $TB_PROJECT_READINFO;

    if (!isset($ajax_args["pid"])) {
	SPITAJAX_ERROR(-1, "Missing project");
	return -1;
    }
    $pid = $ajax_args["pid"];
    
    if (!TBvalid_pid($pid)) {
	SPITAJAX_ERROR(-1, "Invalid target pid");
        return -1;
    }
    $target_project = Project::Lookup($pid);
    if (!$target_project) {
        sleep(2);
	SPITAJAX_ERROR(-1, "Unknown target pid");
        return -1;
    }
    if (!ISADMIN() &&
        !$target_project->AccessCheck($this_user, $TB_PROJECT_READINFO)) {
	SPITAJAX_ERROR(-1, "Not enough permission");
	return -1;
    }
    $pid_idx = $target_project->pid_idx();
    $blob    = array();

    $query_result =
        DBQueryFatal("select i.uuid,i.name,r.freq_low,r.freq_high, ".
                     "     s.expires ".
                     "   from apt_instance_rfranges as r ".
                     "left join apt_instances as i on i.uuid=r.uuid ".
                     "left join geni.geni_slices as s on ".
                     "     s.uuid=i.slice_uuid ".
                     "where i.pid_idx='$pid_idx' ".
                     "order by i.name");

    if (mysql_num_rows($query_result)) {
        while ($row = mysql_fetch_array($query_result)) {
            $range = array(
                "uuid"      => $row["uuid"],
                "name"      => $row["name"],
                "freq_low"  => $row["freq_low"],
                "freq_high" => $row["freq_high"],
                "expires"   => DateStringGMT($row["expires"]),
                "isexp"     => 1,
            );
            $blob[] = $range;
        }
    }
    SPITAJAX_RESPONSE($blob);
}

function Do_GlobalRanges()
{
    $rfanges = GlobalRFRanges::Lookup();
    $blob    = array();

    foreach ($rfanges->Ranges() as $range) {
        $blob[$range->idx()] = $range->rawdata();
    }
    SPITAJAX_RESPONSE($blob);
}

function Do_AllProjectRanges()
{
    if (!ISADMIN()) {
	SPITAJAX_ERROR(-1, "Not enough permission");
	return -1;
    }
    $blob = array();
    
    $query_result =
        DBQueryFatal("select distinct pid from apt_project_rfranges ".
                     "order by pid");

    while ($row = mysql_fetch_array($query_result)) {
        $pid = $row["pid"];
        $project = Project::Lookup($pid);
        if (!$project) {
            continue;
        }
        $foo = ProjectBlob($project, false);
        $blob[$project->pid()] = $foo;
    }
    SPITAJAX_RESPONSE($blob);
}

function Do_AllInuseRanges()
{
    $blob = array();

    $query_result =
        DBQueryFatal("select i.uuid,i.pid,i.name,r.freq_low,r.freq_high, ".
                     "     s.expires,i.started ".
                     "   from apt_instance_rfranges as r ".
                     "left join apt_instances as i on i.uuid=r.uuid ".
                     "left join geni.geni_slices as s on ".
                     "     s.uuid=i.slice_uuid ".
                     "order by i.pid,i.name");

    while ($row = mysql_fetch_array($query_result)) {
        $range = array(
            "freq_low"  => $row["freq_low"],
            "freq_high" => $row["freq_high"],
            "start"     => DateStringGMT($row["started"]),
            "end"       => DateStringGMT($row["expires"]),
            "isexp"     => 1,
        );
        # Anonymous if not admin.
        if (ISADMIN()) {
            $range["pid"]  = $row["pid"];
            $range["uuid"] = $row["uuid"];
            $range["name"] = $row["name"];
        }
        $blob[] = $range;
    }
    SPITAJAX_RESPONSE($blob);
}

# Local Variables:
# mode:php
# End:
?>
