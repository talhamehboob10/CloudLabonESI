<?php
#
# Copyright (c) 2000-2021 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
chdir("..");
chdir("apt");
include_once("instance_defs.php");

#
# Number of experiments started over range of time periods. 
#
$scales  = array("Day"   => (24 * 3600),
                 "Week"  => (24 * 3600 * 7),
                 "Month" => (24 * 3600 * 30),
                 "Year"  => (24 * 3600 * 365),
                 "Epoch" => time());

#
# Server side of getting dashboard stats.
#
function Do_GetStats()
{
    global $scales, $geni_response_codes, $urn_mapping, $TBBASE;
    global $PORTAL_GENESIS, $ISEMULAB;
    $pclause = " ";

    if (! (ISADMIN() || ISFOREIGN_ADMIN())) {
        SPITAJAX_ERROR(1, "Not enough permission");
        return;
    }
    
    $started   = array();
    $errors    = array();
    $breakdown = array();
    $breakdown["timedout"] = array();
    $breakdown["mapping"]  = array();
    $breakdown["other"]    = array();
    $pclause  = "portal='$PORTAL_GENESIS' and ";

    foreach ($scales as $key => $age) {
        $query_result =
            DBQueryFatal("select ".
                 "(select count(*) from apt_instances ".
                 " where $pclause ".
                 "       started > DATE_SUB(now(),interval $age second)),".
                 "(select count(*) from apt_instance_history ".
                 " where $pclause ".
                 "       started > DATE_SUB(now(),interval $age second))");
        $row = mysql_fetch_array($query_result);
        $started[$key] = $row[0] + $row[1];

        $query_result =
            DBQueryFatal("select count(*) from apt_instance_failures ".
                    " where $pclause ".
                    "       started > DATE_SUB(now(),interval $age second)");
        $row = mysql_fetch_array($query_result);
        $errors[$key] = $row[0] + $row[1];

        $breakdown["timedout"][$key] = 0;
        $breakdown["mapping"][$key]  = 0;
        $breakdown["other"][$key]    = 0;

        $query_result =
            DBQueryFatal("select exitcode,count(exitcode) as count ".
                         "  from apt_instance_failures ".
                         "where $pclause ".
                         "      started>DATE_SUB(now(),interval $age second)".
                         "group by exitcode");
        while ($row = mysql_fetch_array($query_result)) {
            $exitcode = $row[0];
            $count    = $row[1];
            if ($exitcode == GENIRESPONSE_TIMEDOUT) {
                $breakdown["timedout"][$key] = $count;
            }
            elseif ($exitcode == GENIRESPONSE_BADARGS ||
                    ($exitcode >= GENIRESPONSE_VLAN_UNAVAILABLE &&
                     $exitcode <= GENIRESPONSE_NO_MAPPING)) {
                $breakdown["mapping"][$key] += $count;
            }
            else {
                $breakdown["other"][$key] += $count;
            }
        }
    }
    $dashboard = array("started"   => $started,
                       "errors"    => $errors,
                       "breakdown" => $breakdown);

    #
    # What are most recent swapins
    #
    $pclause = "where portal='$PORTAL_GENESIS' ";
    $latest  = array();

    $query_result =
        DBQueryFatal("select i.name,i.uuid,i.creator,i.creator_idx,".
                     "  i.physnode_count,i.started,i.aggregate_urn, ".
                     "  p.uuid as profile_uuid,p.name as profile_name ".
                     "from apt_instances as i ".
                     "left join apt_profiles as p on ".
                     "     p.profileid=i.profile_id ".
                     $pclause .
                     "order by started desc limit 5");
    while ($row = mysql_fetch_array($query_result)) {
        $name        = $row["name"];
        $uuid        = $row["uuid"];
        $creator     = $row["creator"];
        $creator_idx = $row["creator_idx"];
        $pcount      = $row["physnode_count"];
        $created     = DateStringGMT($row["started"]);
        $profile_uuid = $row["profile_uuid"];
        $profile_name = $row["profile_name"];
        $aggregate_urn= $row["aggregate_urn"];
        $cluster      = "N/A";

        if ($aggregate_urn && $aggregate_urn != "") {
            $cluster = $urn_mapping[$aggregate_urn];
        }
        $latest[$uuid] = array("uuid" => $uuid,
                               "name" => $name,
                               "creator_idx" => $creator_idx,
                               "creator" => $creator,
                               "physnode_count" => $pcount,
                               "started" => $created,
                               "cluster"  => $cluster,
                               "profile_uuid" => $profile_uuid,
                               "profile_name" => $profile_name);
    }
    $dashboard["latest"] = $latest;

    #
    # Who are the heaviest users
    #
    $users    = array();

    $query_result =
        DBQueryFatal("select creator,creator_idx,count(creator) as ecount, ".
                     "   sum(physnode_count) as pcount ".
                     "from apt_instances group by creator,creator_idx ".
                     "order by pcount desc limit 10");
    while ($row = mysql_fetch_array($query_result)) {
        $creator     = $row["creator"];
        $creator_idx = $row["creator_idx"];
        $pcount      = $row["pcount"];
        $ecount      = $row["ecount"];

        $users[$creator] = array("creator_idx" => $creator_idx,
                                 "physnode_count" => $pcount,
                                 "experiment_count" => $ecount);
    }
    $dashboard["heaviest_users"] = $users;

    #
    # Who are the heaviest projects
    #
    $projects = array();

    $query_result =
        DBQueryFatal("select pid,count(pid) as ecount, ".
                     "   sum(physnode_count) as pcount ".
                     "from apt_instances group by pid ".
                     "order by pcount desc limit 10");
    while ($row = mysql_fetch_array($query_result)) {
        $pid     = $row["pid"];
        $pcount  = $row["pcount"];
        $ecount  = $row["ecount"];

        $projects[$pid] = array("pid" => $pid,
                                "physnode_count" => $pcount,
                                "experiment_count" => $ecount);
    }
    $dashboard["heaviest_projects"] = $projects;

    #
    # Most popular profiles (since the Epoch).
    #
    $profiles = array();

    $query_result =
        DBQueryFatal("select p.uuid,p.name,count(h.profile_id) as count ".
                     "   from apt_instance_history as h ".
                     "left join apt_profiles as p on p.profileid=h.profile_id ".
                     "where p.uuid is not null ".
                     "group by profile_id order by count desc limit 10");
    while ($row = mysql_fetch_array($query_result)) {
        $name       = $row["name"];
        $count      = $row["count"];
        $uuid       = $row["uuid"];

        $profiles[$name] = array("name"  => $name,
                                 "uuid"  => $uuid,
                                 "count" => $count);
    }
    $dashboard["heaviest_profiles"] = $profiles;

    #
    # Detailed info on the 10 most recent errors.
    #
    $pclause = "where f.portal='$PORTAL_GENESIS' ";
    $error_details = array();

    $query_result =
        DBQueryFatal("select f.name,exitcode,f.started,f.public_url,f.uuid,".
                     "  IF(i.uuid,1,0) as active,f.exitmessage, ".
                     "  p.uuid as profile_uuid,p.name as profile_name, ".
                     "  IF(i.uuid,i.aggregate_urn,h.aggregate_urn) ".
                     "    as aggregate_urn, ".
                     "  f.slice_uuid,f.logfileid,f.creator ".
                     "from apt_instance_failures as f ".
                     "left join apt_instances as i on ".
                     "     i.uuid=f.uuid ".
                     "left join apt_instance_history as h on ".
                     "     h.uuid=f.uuid ".
                     "left join apt_profiles as p on ".
                     "     p.profileid=f.profile_id ".
                     $pclause .
                     "order by f.started desc limit 10");

    while ($row = mysql_fetch_array($query_result)) {
        $name       = $row["name"];
        $exitcode   = $row["exitcode"];
        $url        = $row["public_url"];
        $logfileid  = $row["logfileid"];
        $active     = $row["active"] ? 1 : 0;
        $uuid       = $row["uuid"];
        $created    = DateStringGMT($row["started"]);
        $creator    = $row["creator"];
        $message    = $row["exitmessage"];
        $reason     = $exitcode;
        $slice_uuid = $row["slice_uuid"];
        $profile_uuid = $row["profile_uuid"];
        $profile_name = $row["profile_name"];
        $aggregate_urn= $row["aggregate_urn"];
        $cluster      = "N/A";

        if ($exitcode >= 0 && $exitcode <= count($geni_response_codes)) {
            $reason = $geni_response_codes[$exitcode];
        }
        elseif ($exitcode == GENIRESPONSE_STITCHER_ERROR) {
            $reason = "Stitcher Failed";
        }
        if ($aggregate_urn && $aggregate_urn != "") {
            $cluster = $urn_mapping[$aggregate_urn];
        }
        #
        # Ick. If the url is for the showslicepub link, we have a problem;
        # the link is good only while the slice is alive. After that, we have
        # to use a private url (which is okay, cause only admins are going
        # to see it and be able to use it).
        #
        if (ISFOREIGN_ADMIN()) {
            $url = null;
        }
        elseif (!$url) {
            #
            # If there is a log file, show that instead.
            #
            if ($logfileid) {
                $url = $TBBASE . "/" .
                    CreateURL("spewlogfile", "logfile", $logfileid);
            }
        }
        elseif (preg_match("/^(https:.*)\/showslicepub/", $url, $matches)) {
            if (ISADMIN()) {
                $url = $matches[1] . "/showslicelogs.php?slice_uuid=".
                    $slice_uuid;
            }
            else {
                $url = null;
            }
        }
        $error_details[$uuid] = array("name"     => $name,
                                      "uuid"     => $uuid,
                                      "exitcode" => $exitcode,
                                      "active"   => $active,
                                      "started"  => $created,
                                      "creator"  => $creator,
                                      "reason"   => $reason,
                                      "message"  => $message,
                                      "url"      => $url,
                                      "cluster"  => $cluster,
                                      "profile_uuid" => $profile_uuid,
                                      "profile_name" => $profile_name);
                                      
    }
    $dashboard["error_details"] = $error_details;
    
    #
    # Experiments waiting for extensions from an administrator
    #
    $extension_details = array();

    $query_result =
        DBQueryFatal("select a.*,s.expires, ".
                     "   (UNIX_TIMESTAMP(now()) > ".
                     "    UNIX_TIMESTAMP(s.expires)) as expired ".
                     "  from apt_instances as a ".
                     "left join geni.geni_slices as s on ".
                     "     s.uuid=a.slice_uuid ".
                     "where a.extension_requested=1 order by s.expires asc");

    while ($row = mysql_fetch_array($query_result)) {
        $name       = $row["name"];
        $uuid       = $row["uuid"];
        $pid        = $row["pid"];
        $expires    = DateStringGMT($row["expires"]);
        $created    = DateStringGMT($row["started"]);
        $creator    = $row["creator"];

        $extension_details[$uuid] = array("name"     => $name,
                                          "uuid"     => $uuid,
                                          "pid"      => $pid,
                                          "creator"  => $creator,
                                          "started"  => $created,
                                          "expires"  => $expires);
    }
    $dashboard["extension_requests"] = $extension_details;

    #
    # List of all locked down experiments.
    #
    $lockdown = array();

    $query_result =
        DBQueryFatal("select i.name,i.uuid,i.creator,i.creator_idx,".
                     "  i.physnode_count,i.started,i.aggregate_urn,s.expires, ".
                     "  p.uuid as profile_uuid,p.name as profile_name ".
                     "from apt_instances as i ".
                     "left join apt_profiles as p on ".
                     "     p.profileid=i.profile_id ".
                     "left join geni.geni_slices as s on ".
                     "     s.uuid=i.slice_uuid ".
                     "where i.admin_lockdown!=0 ".
                     "order by i.started desc");
    while ($row = mysql_fetch_array($query_result)) {
        $name        = $row["name"];
        $uuid        = $row["uuid"];
        $creator     = $row["creator"];
        $creator_idx = $row["creator_idx"];
        $pcount      = $row["physnode_count"];
        $created     = DateStringGMT($row["started"]);
        $expires     = DateStringGMT($row["expires"]);
        $profile_uuid = $row["profile_uuid"];
        $profile_name = $row["profile_name"];
        $aggregate_urn= $row["aggregate_urn"];
        $cluster      = "N/A";

        if ($aggregate_urn && $aggregate_urn != "") {
            $cluster = $urn_mapping[$aggregate_urn];
        }
        $lockdown[$uuid] = array("uuid" => $uuid,
                               "name" => $name,
                               "creator_idx" => $creator_idx,
                               "creator" => $creator,
                               "physnode_count" => $pcount,
                               "started" => $created,
                               "expires" => $expires,
                               "cluster"  => $cluster,
                               "profile_uuid" => $profile_uuid,
                               "profile_name" => $profile_name);
    }
    $dashboard["lockdown"] = $lockdown;

    #
    # Grab the node type counts for all clusters
    #
    $typecounts = array();
    
    $query_result =
        DBQueryFatal("select nickname,type,count,free ".
                     "   from apt_aggregate_nodetypes as t ".
                     "left join apt_aggregates as a on a.urn=t.urn");
    
    while ($row = mysql_fetch_array($query_result)) {
        $site = $row["nickname"];
        $type = $row["type"];
        
        $blob = array("site"  => $site,
                      "type"  => $type,
                      "count" => $row["count"],
                      "free"  => $row["free"]);
        if (!array_key_exists($site, $typecounts)) {
            $typecounts[$site] = array();
        }
        $typecounts[$site][$type] = $blob;
    }
    $dashboard["typecounts"] = $typecounts;

    SPITAJAX_RESPONSE($dashboard);
}

# Local Variables:
# mode:php
# End:
?>
