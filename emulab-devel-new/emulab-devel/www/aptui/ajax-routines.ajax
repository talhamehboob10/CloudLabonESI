<?php
#
# Copyright (c) 2000-2021 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
chdir("..");
include_once("lease_defs.php");
include_once("blockstore_defs.php");
include_once("imageid_defs.php");
chdir("apt");
include_once("dataset_defs.php");
include_once("profile_defs.php");

function ClassicExperimentList($which, $target, $state = "active")
{
    global $urn_mapping, $TBBASE;
    global $this_user;
    $joinclause = "";

    if ($state == "active") {
        $stateclause = "and (e.state='active' or ".
            "e.state='activating' or e.state='swapping')";
    }
    elseif ($state == "inactive") {
        $stateclause = "and (e.state='swapped')";
    }

    if ($which == "user") {
        $target_idx = $target->uid_idx();
        $whereclause = "where e.swapper_idx='$target_idx'";
    }
    elseif ($which == "group") {
        $target_pid  = $target->pid();
        $target_gid  = $target->gid();
        $whereclause = "where e.pid='$target_pid' and e.gid='$target_gid'";
    }
    elseif ($which == "all") {
        $joinclause  = "left join experiment_stats as s on s.exptidx=e.idx ".
        "left join apt_instances as i on i.slice_uuid=s.slice_uuid";
        $whereclause = "where ((e.pid!='emulab-ops' and e.geniflags=0) or ".
        "(e.geniflags=1 and i.slice_uuid=s.slice_uuid is null))";
    }
    else {
        $target_pid = $target->pid();
        $whereclause = "where e.pid='$target_pid'";
    }
    if ($which != "all") {
        $whereclause .= " and e.geniflags=0";
    }
    $whereclause .= " and t.tid is null";
    $results = array();

    $query_result =
        DBQueryFatal("select idx from experiments as e ".
                     "left join experiment_templates as t on ".
                     "     t.pid=e.pid and t.eid=e.eid ".
                     "$joinclause $whereclause $stateclause ".
                     "order by e.eid");

    while ($row = mysql_fetch_array($query_result)) {
        $idx = $row["idx"];
        $experiment = Experiment::Lookup($idx);
        $resources  = $experiment->GetResources();
        $stats      = $experiment->GetStats();

        $url          = $TBBASE . "/" . CreateURL("showexp", $experiment);
        $creator_uid  = $experiment->creator();
        $pid          = $experiment->pid();
        $eid          = $experiment->eid();
        $swapped      = DateStringGMT($stats->swapin_last());
        $created      = DateStringGMT($experiment->created());
        $cluster      = "Emulab";
        
        $blob             = array();
        $blob["idx"]      = $idx;
        $blob["pid"]      = "<a href='show-project.php?project=$pid'>$pid</a>";
        $blob["eid"]      = "<a href='$url'target=_blank>$eid</a>";
        $blob["uuid"]     = $experiment->uuid();
        $blob["created"]      = $created;
        $blob["swapped"]      = $swapped;
        $blob["state"]        = $experiment->state();
        $blob["description"]  = $experiment->description();

        if (ISADMIN() || $which == "project") {
            $blob["creator"] =
                "<a href='user-dashboard.php?user=$creator_uid'>".
                "$creator_uid</a>";
        }
        else {
            $blob["creator"] = $creator_uid;
        }

        if ($experiment->state() == "active") {
            $pcount       = $experiment->PCCount();
            $phours       = sprintf("%.2f",(($pcount *
                                             $experiment->SwapSeconds()) /
                                            3600.0));
            $blob["cluster"]      = "Emulab";
            $blob["pcount"]       = $pcount;
            $blob["phours"]       = $phours;
            $blob["vcount"]       = $resources->vnodes();
            $blob["types"]        = $experiment->TypesUsed();
        }
        $results["$pid:$eid"] = $blob;
    }
    return $results;
}

function ExperimentList($which, $target)
{
    global $urn_mapping, $TBBASE;
    global $this_user;
    $trust_none = TBDB_TRUSTSTRING_NONE;
    $extraclause = "";

    if ($which == "user") {
        $target_uuid = $target->uuid();
        $whereclause = "where a.creator_uuid='$target_uuid'";
    }
    elseif ($which == "group") {
        $target_pid = $target->pid();
        $target_gid = $target->gid();
        $whereclause = "where a.pid='$target_pid' and a.gid='$target_gid'";
    }
    elseif ($which == "membership") {
        $target_uuid = $target->uuid();
        $target_idx  = $target->idx();
        $whereclause = "where (a.creator_uuid='$target_uuid' or ".
                       "       g.uid_idx is not null) ";
        $extraclause = "left join group_membership as g on ".
                       "     g.uid_idx='$target_idx' and  ".
                       "     g.pid_idx=a.pid_idx and " .
                       "     g.trust!='$trust_none' ";
    }
    else {
        $target_pid = $target->pid();
        $whereclause = "where a.pid='$target_pid'";
    }
    $results = array();

    $query_result =
        DBQueryFatal("select a.*,s.expires,s.hrn,u.email, ".
                     " (UNIX_TIMESTAMP(now()) > ".
                     "  UNIX_TIMESTAMP(s.expires)) as expired, ".
                     "  truncate(a.physnode_count * ".
                     "   ((UNIX_TIMESTAMP(now()) - ".
                     "     UNIX_TIMESTAMP(a.started)) / 3600.0),2) as phours, ".
                     " IFNULL(aggs.count,0) as aggrows, ".
                     " agg.aggregate_urn as aggrow_urn".
                     "  from apt_instances as a ".
                     "left join (".
                     "    select uuid, COUNT(*) AS count ".
                     "    from apt_instance_aggregates group by uuid) AS aggs ".
                     "  on aggs.uuid=a.uuid ".
                     "left join apt_instance_aggregates as agg ".
                     "     on agg.uuid=a.uuid ".
                     "left join geni.geni_slices as s on ".
                     "     s.uuid=a.slice_uuid ".
                     "left join geni.geni_users as u on u.uuid=a.creator_uuid ".
                     "$extraclause ".
                     "$whereclause");

    while ($row = mysql_fetch_array($query_result)) {
        $profile_id   = $row["profile_id"];
        $version      = $row["profile_version"];
        $uuid         = $row["uuid"];
        $name         = $row["name"];
        $status       = $row["status"];
        $canceled     = $row["canceled"];
        $created      = DateStringGMT($row["created"]);
        $started      = DateStringGMT($row["started"]);
        $expires      = DateStringGMT($row["expires"]);
        $creator_idx  = $row["creator_idx"];
        $profile_name = "$profile_id:$version";
        $creator_uid  = $row["creator"];
        $pid          = $row["pid"];
        $pcount       = $row["physnode_count"];
        $vcount       = $row["virtnode_count"];
        $lockdown     = $row["admin_lockdown"] || $row["user_lockdown"] ? 1 : 0;
        $phours       = $row["phours"];
        $email        = $row["email"];
        $blob         = array();

        # If a guest user, use email instead.
        if (isset($email)) {
            $blob["creator"] = $email;
        }
        elseif (ISADMIN() || $which == "project") {
            $blob["creator"] =
                "<a href='user-dashboard.php?user=$creator_uid'>".
                "$creator_uid</a>";
        }
        else {
            $blob["creator"] = $creator_uid;
        }
        if ($row["expired"]) {
            $status = "expired";
        }
        elseif ($canceled) {
            $status = "canceled";
        }
        $blob["status"] = $status;
        
        $profile = Profile::Lookup($profile_id, $version);
        if ($profile) {
            $blob["profile_name"] = $profile->name();
            $blob["profile_uuid"] = $profile->uuid();
        }
        else {
            $blob["profile_name"] = $profile_name;
        }
        
        #
        # If arows non-zero, then we use that for aggregate_urn,
        # and if its more then 1, we need to consume the extras rows
        # to get the rest of the aggregate urns.
        #
        if ($row["aggrows"] > 0) {
            $cluster = $urn_mapping[$row["aggrow_urn"]];

            for ($i = 1; $i < $row["aggrows"]; $i++) {
                $row = mysql_fetch_array($query_result);
                $cluster .= "," . $urn_mapping[$row["aggrow_urn"]];
            }
        }
        else {
            $cluster = $urn_mapping[$row["aggregate_urn"]];
        }
        $blob["cluster"] = $cluster;
        $blob["name"] = "<a href='status.php?uuid=$uuid'>$name</a>";
        $blob["project"] = "<a href='show-project.php?project=$pid'>$pid</a>";
        $blob["pcount"]   = $pcount;
        $blob["phours"]   = $phours;
        $blob["vcount"]   = $vcount;
        $blob["created"]  = $created;
        $blob["started"]  = $started;
        $blob["expires"]  = $expires;
        $blob["lockdown"] = $lockdown;
        $blob["uuid"]     = $uuid;
        $results["$pid:$name"] = $blob;
    }
    return $results;
}

function ProfileList($which, $target)
{
    global $urn_mapping, $TBBASE;
    global $this_user;

    if ($which == "user") {
        $target_idx  = $target->uid_idx();
        $whereclause = "where v.creator_idx='$target_idx'";
    }
    elseif ($which == "group") {
        $target_pid  = $target->pid();
        $target_gid  = $target->gid();
        $whereclause = "where v.pid='$target_pid' and v.gid='$target_gid'";
    }
    else {
        $target_idx  = $target->pid_idx();
        $whereclause = "where v.pid_idx='$target_idx'";
    }
    $query_result =
        DBQueryFatal("select p.*,v.*,DATE(v.created) as created ".
                     " from apt_profiles as p ".
                     "left join apt_profile_versions as v on ".
                     "   v.profileid=p.profileid and ".
                     "   v.version=p.version ".
                     "$whereclause");

    return ProfileListAux($query_result);
}

#
# Return list of profiles in all projects the user is a member of.
#
function ProjectProfileList($target_user)
{
    global $urn_mapping, $TBBASE;
    global $this_user;
    $trust_none = TBDB_TRUSTSTRING_NONE;

    $creator_idx = $target_user->uid_idx();

    $query_result =
        DBQueryFatal("select p.*,v.*,DATE(v.created) as created ".
                     " from apt_profiles as p ".
                     "left join apt_profile_versions as v on ".
                     "     v.profileid=p.profileid and ".
                     "     v.version=p.version ".
                     "left join group_membership as g on ".
                     "     g.pid_idx=p.pid_idx and g.gid_idx=p.gid_idx ".
                     "where g.uid_idx='$creator_idx' and ".
                     "      g.trust!='$trust_none' ".
                     "order by p.pid");

    return ProfileListAux($query_result);
}

#
# Helper function
#
function ProfileListAux($query_result)
{
    global $urn_mapping, $TBBASE;
    global $this_user;
    $results = array();

    while ($row = mysql_fetch_array($query_result)) {
        $idx     = $row["profileid"];
        $uuid    = $row["uuid"];
        $version = $row["version"];
        $name    = $row["name"];
        $pid     = $row["pid"];
        $desc    = $row["description"];
        $created = DateStringGMT($row["created"]);
        $last_use= DateStringGMT($row["last_use"]);
        $public  = $row["public"];
        $listed  = $row["listed"];
        $creator = $row["creator"];
        $rspec   = $row["rspec"];
        $privacy = ($public ? "Public" : "Project");
        $desc    = "";

        $profile = Profile::Lookup($idx);
        if (!$profile) {
            continue;
        }
        $parsed_xml = simplexml_load_string($rspec);
        if ($parsed_xml &&
            $parsed_xml->rspec_tour && $parsed_xml->rspec_tour->description) {
            $desc = $parsed_xml->rspec_tour->description;
            # Convert to array to get the one element. 
            $desc = (array)$desc;
            $desc = $desc[0];
        }
        $blob = array();
        $blob["profile_name"] = $name;
        $blob["profile_uuid"] = $uuid;
        $blob["privacy"]      = $privacy;
        $blob["description"]  = $desc;
        $blob["created"]      = $created;
        $blob["listed"]       = ($listed ? "Yes" : "No");
        $blob["created"]      = $created;
        $blob["project"]      = $pid;
        $blob["creator"]      = $creator;
        $blob["last_use"]     = $last_use;
        $blob["canedit"]      = $profile->CanEdit($this_user);
        $blob["candelete"]    = $profile->CanDelete($this_user);
        
        $results["$pid:$name"] = $blob;
    }
    return $results;
}

function DatasetList($which, $target)
{
    global $urn_mapping, $TBBASE, $ISEMULAB, $DEFAULT_AGGREGATE_URN;
    global $this_user;

    if ($which == "user") {
        $target_idx  = $target->uid_idx();
        $whereclause = "where v.creator_idx='$target_idx'";
        $orderclause = "order by v.dataset_id";
    }
    elseif ($which == "group") {
        $target_pid  = $target->pid();
        $target_gid  = $target->gid();
        $whereclause = "where v.pid='$target_pid' and v.gid='$target_gid'";
        $orderclause = "order by v.creator_uid";
    }
    else {
        $target_idx  = $target->pid_idx();
        $whereclause = "where v.pid_idx='$target_idx'";
        $orderclause = "order by v.creator_uid";
    }
    #
    # In the main portal, we show only those datasets on the local cluster.
    #
    if ($ISEMULAB) {
        $whereclause .= "and agg.urn='$DEFAULT_AGGREGATE_URN'";
    }
    $results = array();

    $query_result =
        DBQueryFatal("select v.*,agg.nickname from apt_datasets as v ".
                     "left join apt_aggregates as agg ".
                     "on agg.urn=v.aggregate_urn ".
                     "$whereclause $orderclause");

    while ($row = mysql_fetch_array($query_result)) {
        $uuid         = $row["uuid"];
        $name         = $row["dataset_id"];
        $type         = $row["type"];
        $pid          = $row["pid"];
        $pid_idx      = $row["pid_idx"];
        $gid          = $row["gid"];
        $gid_idx      = $row["gid_idx"];
        $creator_uid  = $row["creator_uid"];
        $creator_idx  = $row["creator_idx"];
        $aggregate_urn= $row["aggregate_urn"];
        $created      = $row["created"];
        $expires      = $row["expires"];
        $cluster      = $row["nickname"];
        $size         = $row["size"] ? $row["size"] : 0;
        $state        = $row["state"];
        # Convert to GB.
        $size         = sprintf('%0.2f', $size * 0.00104858);

        #
        # The state is a bit of a problem, since local leases do not have
        # an "allocating" state. For a remote dataset, we get set to busy.
        # Need to unify this. But the main point is that we want to tell
        # the user that the dataset is busy allocation.
        #
        if ($state == "busy" ||
            ($state == "unapproved" && $row["locked"])) {
            $state = "allocating";
        }
        $blob = array();
        $blob["uuid"]         = $uuid;
        $blob["name"]         = $name;
        $blob["type"]         = $type;
        $blob["pid"]          = $pid;
        $blob["pid_idx"]      = $pid_idx;
        $blob["gid"]          = $gid;
        $blob["gid_idx"]      = $gid_idx;
        $blob["creator_uid"]  = $creator_uid;
        $blob["creator_idx"]  = $creator_idx;
        $blob["created"]      = $created;
        $blob["expires"]      = ($type != "imdataset" ? $expires : "");
        $blob["aggregate_urn"]= $aggregate_urn;
        $blob["cluster"]      = $cluster;
        $blob["size"]         = $size;
        $blob["state"]        = $state;

        $results[$uuid] = $blob;
    }
    return $results;
}

function ClassicDatasetList($which, $target)
{
    global $urn_mapping, $TBBASE, $ISEMULAB;
    global $this_user;

    if ($which == "user") {
        $target_uid   = $target->uid();
        $whereclause1 = "where l.owner_uid='$target_uid' and ad.uuid is null";
        $whereclause2 = "where v.creator='$target_uid' and ".
                      "ad.uuid is null and v.isdataset=1";
        $orderclause  = "order by name";
    }
    elseif ($which == "group") {
        $target_pid   = $target->pid();
        $target_gid   = $target->gid();
        $whereclause1 = "where l.pid='$target_pid' and ".
                      "where l.gid='$target_gid' and ad.uuid is null";
        $whereclause2 = "where v.pid='$target_pid' and ad.uuid is null and ".
                      "v.gid='$target_gid' and v.isdataset=1";
        $orderclause  = "order by creator";
    }
    else {
        $target_pid   = $target->pid();
        $whereclause1 = "where l.pid='$target_pid' and ad.uuid is null";
        $whereclause2 = "where v.pid='$target_pid' and ".
                      "ad.uuid is null and v.isdataset=1 ";
        $orderclause  = "order by creator";
    }
    $results = array();

    $query_result =
        DBQueryFatal(
            "select uuid,type,name,creator from ".
            " ((select l.uuid as uuid,'lease' as type, ".
            "          l.lease_id as name,l.owner_uid as creator ".
            "      from project_leases as l ".
            "  left join apt_datasets as ad on ad.remote_uuid=l.uuid ".
            "  $whereclause1) ".
            "  union ".
            "  (select i.uuid as uuid,'image' as type, ".
            "          i.imagename as name,v.creator as creator ".
            "       from images as i ".
            "  left join image_versions as v on ".
            "       v.imageid=i.imageid and v.version=i.version ".
            "  left join apt_datasets as ad on ad.remote_uuid=i.uuid ".
            "  $whereclause2)) as foo $orderclause");

    while ($row = mysql_fetch_array($query_result)) {
        $uuid    = $row["uuid"];
        $type    = $row["type"];

        if ($type == "image") {
            $dataset = ImageDataset::Lookup($uuid);
        }
        elseif ($type == "lease") {
            $dataset = Lease::Lookup($uuid);
        }     

        $blob = array();
        $blob["uuid"]         = $uuid;
        $blob["name"]         = $dataset->id();
        $blob["type"]         = $dataset->type();
        $blob["pid"]          = $dataset->pid();
        $blob["gid"]          = $dataset->gid();
        $blob["creator_uid"]  = $dataset->owner_uid();
        $blob["created"]      = $dataset->created();
        $blob["expires"]      = $dataset->expires();

        $results[$uuid] = $blob;
    }
    return $results;
}

#
# Classic images. For now, just one list. Maybe this will be per
# user/project/group in the future.
#
function ClassicImageList($target)
{
    global $urn_mapping, $TBBASE, $ISEMULAB, $TBMAINSITE, $OURDOMAIN;
    global $this_user;

    $target_idx = $target->uid_idx();
    $results    = array();

    $query =
           "select distinct i.imagename,iv.*,ov.* from images as i ".
           "left join image_versions as iv on ".
           "          iv.imageid=i.imageid and iv.version=i.version ".
           "left join os_info_versions as ov on ".
           "          i.imageid=ov.osid and ov.vers=i.version ".
           "left join osidtoimageid as map on map.osid=i.imageid ".
           "where (iv.ezid = 1 and iv.isdataset=0) and ".
           "      iv.creator_urn is null and ".
           "      iv.origin_urn is null and ".
           #      Sigh, we have old images without origin_* settings.
           "      iv.metadata_url is null and ".
           "      iv.creator_idx='$target_idx' ".
           "order by i.imagename";

    $query_result = DBQueryFatal($query);

    $domain = $OURDOMAIN;
    if ($TBMAINSITE) {
        $domain = "emulab.net";
    }

    while ($row = mysql_fetch_array($query_result)) {
	$imageid = $row["imageid"];
        $name    = $row["imagename"];
        $pid     = $row["pid"];
        $urn     = "urn:publicid:IDN+${domain}+image+${pid}//${name}";
        $blob    = array();

        $blob["imageid"]     = $imageid;
        $blob["description"] = $row["description"];
        $blob["imagename"]   = $row["imagename"];
        $blob["created"]     = DateStringGMT($row["created"]);
        $blob["pid"]         = $row["pid"];
        $blob["pid_idx"]     = $row["pid_idx"];
        $blob["global"]      = $row["global"];
        $blob["creator"]     = $row["creator"];
        $blob["creator_idx"] = $row["creator_idx"];
        $blob["format"]      = $row["format"];
        $blob["urn"]         = $urn;
	$blob["url"]         = "show-image.php?imageid=$imageid";
        $results[] = $blob;
    }
    return $results;
}

# Local Variables:
# mode:php
# End:
?>
