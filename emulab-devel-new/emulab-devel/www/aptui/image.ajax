<?php
#
# Copyright (c) 2000-2020 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
chdir("..");
include_once("webtask.php");
include_once("imageid_defs.php");
include_once("osiddefs.php3");
include_once("node_defs.php");
include_once("instance_defs.php");
chdir("apt");

#
# All functions take the image uuid,
#
$image = null;

function CheckPageArgs($write)
{
    global $this_user, $ajax_args, $image;
    global $TB_IMAGEID_MODIFYINFO, $TB_IMAGEID_READINFO;

    if (!isset($ajax_args["uuid"])) {
	SPITAJAX_ERROR(-1, "Missing image uuid");
	return -1;
    }
    $uuid = $ajax_args["uuid"];
    if (!IsValidUUID($uuid)) {
	SPITAJAX_ERROR(-1, "Invalid image uuid");
	return -1;
    }
    $image = Image::LookupByUUID($uuid);
    if (!$image) {
	SPITAJAX_ERROR(-1, "No such image");
	return -1;
    }
    if (ISADMIN()) {
        return 0;
    }
    if (($write && 
         ! $image->AccessCheck($this_user, $TB_IMAGEID_MODIFYINFO)) ||
        ! $image->AccessCheck($this_user, $TB_IMAGEID_READINFO)) {
	SPITAJAX_ERROR(-1, "Not enough permission");
	return -1;
    }
    return 0;
}

#
# Get the info for an image.
#
function Do_GetInfo()
{
    global $this_user, $ajax_args, $image, $embedded;
    global $TBBASE, $ISEMULAB, $TBMAINSITE, $OURDOMAIN;

    if (CheckPageArgs(0)) {
        return;
    }
    $embedded = isset($ajax_args["embedded"]) && $ajax_args["embedded"];
    
    $domain = $OURDOMAIN;
    if ($TBMAINSITE) {
        $domain = "emulab.net";
    }
    $osinfo     = $image->OSinfo();
    $id         = $image->imageid();
    $vers       = $image->version();
    $uuid       = $image->uuid();
    $image_uuid = $image->image_uuid();
    $pid        = $image->pid();
    $gid        = $image->gid();
    $name       = $image->imagename();
    $urn        = null;
    
    if ($image->metadata_url()) {
        if ($image->origin_urn() && $image->origin_name()) {
            list ($auth,$type,$ignore) = Instance::ParseURN($image->origin_urn());
            $urn = "urn:publicid:IDN+${auth}+";
            if ($image->isdataset()) {
                $urn .= "imdataset+" . $image->origin_name();
            }
            else {
                $urn .= "image+" . $image->origin_name();
            }
        }
    }
    else {
        if ($image->isdataset()) {
            $domain .= ":${pid}";
            if ($pid != $gid) {
                $domain .= ":${gid}";
            }
            $urn = "urn:publicid:IDN+${domain}+imdataset+${name}";
        }
        else {
            $urn = "urn:publicid:IDN+${domain}+image+${pid}//${name}";
        }
    }

    $blob = array();
    $blob["name"]         = $image->imagename();
    $blob["imageid"]      = $image->imageid();
    $blob["uuid"]         = $image->uuid();
    $blob["image_uuid"]   = $image->image_uuid();
    $blob["urn"]          = $urn;
    $blob["version"]      = $image->version();
    $blob["pid"]          = $image->pid();
    $blob["gid"]          = $image->gid();
    $blob["description"]  = $image->description();
    $blob["created"]      = DateStringGMT($image->created());
    $blob["creator"]      = $image->creator();
    $blob["creator_urn"]  = $image->creator_urn();
    $blob["updated"]      = DateStringGMT($image->updated());
    $blob["updater"]      = $image->updater();
    $blob["updater_urn"]  = $image->updater_urn();
    $blob["lastused"]     = DateStringGMT($image->LastUsed());
    $blob["path"]         = $image->path();
    $blob["shared"]       = $image->shared() ? 1 : 0;
    $blob["global"]       = $image->isglobal() ? 1 : 0;
    $blob["listed"]       = $image->listed() ? 1 : 0;
    $blob["ready"]        = $image->ready() ? 1 : 0;
    $blob["released"]     = $image->released() ? 1 : 0;
    $blob["isdataset"]    = $image->isdataset() ? 1 : 0;
    $blob["hash"]         = $image->hash();
    $blob["version_url"]  = "show-image.php?imageid=${id}&version=${vers}";
    if ($embedded) {
        $blob["version_url"] .= "&embedded=1";
    }
    if (Image::UseImageTracker()) {
        $blob["ims_noreport"]  = $image->ims_noreport() ? 1 : 0;
        $blob["ims_reported"]  = $image->ims_reported();
        $blob["ims_update"]    = $image->ims_update();
    }
    #
    # An imported image has a metadata_url and an imagefile_url.
    #
    if ($image->metadata_url()) {
        $blob["metadata_url"]  = $image->metadata_url();
        $blob["imagefile_url"] = $image->imagefile_url();
    }
    else {
        $blob["version_url"]   = "$TBBASE/image_metadata.php?uuid=$uuid";
        $blob["image_url"]     = "$TBBASE/image_metadata.php?uuid=$image_uuid";
    }
    if ($image->logfileid()) {
        $logfile = Logfile::Lookup($image->logfileid());
        if ($logfile) {
            $blob["logfile_url"] = $logfile->URL();
        }
    }

    if (!$image->isdataset()) {
        if ($image->architecture()) {
            $blob["architecture"] = $image->architecture();
        }
        $blob["loadpart"]         = $image->loadpart();
        $blob["loadlength"]       = $image->loadlength();
        $blob["mbr_version"]      = $image->mbr_version();
        $blob["types"]            = $image->Types();
        $blob["reboot_waittime"]  = $osinfo->reboot_waittime();
        $blob["op_mode"]          = $osinfo->op_mode();
        $blob["os"]               = $osinfo->OS();
        $blob["os_version"]       = $osinfo->version();
        $blob["os_features"]      = preg_split("/,/", $osinfo->osfeatures());
        $blob["xen_capable"]      = 0;
        if ($osinfo->def_parentosid()) {
	    $n_image = Image::Lookup($osinfo->def_parentosid());
            if ($n_image) {
                $n_imageid = $n_image->imageid();
                $n_version = $n_image->version();
                $n_url = "show-image.php?imageid=${n_imageid}" .
                   "&version=${n_version}";
                if ($embedded) {
                    $n_url .= "&embedded=1";
                }
                $blob["def_parent_image_uuid"] = $n_image->uuid();
                $blob["def_parent_image_name"] = $n_image->imagename();
                $blob["def_parent_image_vers"] = $n_image->version();
                $blob["def_parent_image_url"]  = $n_url;
                if ($n_image->OSinfo()->FeatureSupported("xen-host")) {
                    $blob["xen_capable"] = 1;
                }
            }
        }
        $xenflip = ($blob["xen_capable"] ? 0 : 1);
        $blob["xen_capable_url"] = 
                 "toggle.php?imageid=${id}&type=imagedoesxen&value=$xenflip";
        if ($image->notes() && $image->notes() != "") {
            $blob["notes"] = $image->notes();
        }
        else {
            $blob["notes"] = "";
        }
	if ($image->loadpart() == 0 && $image->loadlength() == 4) {
	    $blob["wholedisk"]  = true;
	}
        else {
	    $blob["wholedisk"]  = false;
        }
        $blob["deprecated"] = $image->deprecated();
        if ($image->deprecated()) {
            $blob["deprecated_iserror"] = $image->deprecated_iserror() ? 1 : 0;
            $blob["deprecated_message"] = $image->deprecated_message();
        }
    }

    if ($image->parent_imageid()) {
        $p_imageid   = $image->parent_imageid();
        $p_version   = $image->parent_version();
        $p_image     = Image::Lookup($p_imageid, $p_version);
        # On an elabinelab we will not have the previous version.
        # if it came in at creation time.
        if ($p_image) {
            $p_imagename = $p_image->imagename();
            $p_url = "show-image.php?imageid=${p_imageid}" .
                   "&version=${p_version}";
            if ($embedded) {
                $p_url .= "&embedded=1";
            }
            $blob["parent_image_uuid"] = $p_image->uuid();
            $blob["parent_image_name"] = $p_image->imagename();
            $blob["parent_image_vers"] = $p_image->version();
            $blob["parent_image_url"]  = $p_url;
	}
    }
    if ($image->version() > 0 &&
        (is_null($image->parent_imageid()) ||
         ($image->parent_imageid() &&
          $image->parent_imageid() != $image->imageid()))) {
        $pvers = $image->version() - 1;
        $purl  = "show-image.php?imageid=${id}&version=${pvers}";
        if ($embedded) {
            $purl .= "&embedded=1";
        }
        $blob["previous_image_vers"] = $pvers;
        $blob["previous_image_url"]  = $purl;
    }
    $next = $image->LookupNextVersion();
    if ($next) {
        $nvers = $next->version();
        $nurl  = "show-image.php?imageid=${id}&version=${nvers}";
        if ($embedded) {
            $nurl .= "&embedded=1";
        }
        $blob["next_image_vers"] = $nvers;
        $blob["next_image_url"]  = $nurl;
    }
    
    # Look for an unreleased version of this image.
    $unreleased = $image->LookupUnreleased();
    if ($unreleased && $unreleased->version() != $image->version()) {
        $blob["unreleased_image_vers"] = $unreleased->version();
    }
    SPITAJAX_RESPONSE($blob);
}

#
# Modify a single value.
#
function Do_Modify()
{
    global $this_user, $ajax_args, $image;
    global $TBBASE, $ISEMULAB, $TBMAINSITE, $OURDOMAIN;
    global $osid_featurelist;

    if (CheckPageArgs(1)) {
        return;
    }
    $uuid = $image->uuid();

    if (!isset($ajax_args["field"])) {
	SPITAJAX_ERROR(-1, "Missing field name");
	return -1;
    }
    $field = $ajax_args["field"];
    
    if (!isset($ajax_args["value"])) {
	SPITAJAX_ERROR(-1, "Missing new value");
	return -1;
    }
    $value = $ajax_args["value"];

    #
    # We can handle these few fields. Value indicates adminonly
    #
    $allowed = array("reboot_waittime" => true,
                     "description"     => false,
                     "architecture"    => true,
                     "path"            => true,
                     "listed"          => true,
                     "ims_noreport"    => true,
                     "osfeatures"      => true,
    );
    if (!array_key_exists($field, $allowed)) {
	SPITAJAX_ERROR(-1, "Not allowed to change this field");
	return -1;
    }
    if ($allowed[$field] && !ISADMIN()) {
	SPITAJAX_ERROR(-1, "No permission to change this field");
	return -1;
    }
    if ($field == "reboot_waittime" || $field == "osfeatures") {
        $table = "os_info";
    }
    else {
        $table = "images";
    }
    if (!TBcheck_dbslot($value, $table, $field,
                       TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
	SPITAJAX_ERROR(1, "Illegal value: " . TBFieldErrorString());
        return 1;
    }
    if ($field == "osfeatures") {
        foreach (preg_split("/,/", $value) as $feature) {
            if (!array_key_exists($feature, $osid_featurelist)) {
                SPITAJAX_ERROR(-1, "Invalid feature: $feature");
                return -1;
            }
        }
    }
    $safe_value = DBQuoteSpecial($value);
    if ($field == "osfeatures" || $field == "reboot_waittime") {
        $imageid = $image->imageid();
        $version = $image->version();
        
        $query_result = 
            DBQueryWarn("update os_info_versions set ${field}='$safe_value' ".
                        "where osid='$imageid' and vers='$version'");
    }
    elseif ($field == "architecture" && $value == "") {
        $imageid = $image->imageid();
        $osinfo  = $image->OSinfo();

        $query_result =
            DBQueryWarn("update images set architecture=NULL ".
                        "where imageid='$imageid'");

        # When clearing the architecture need to make sure the pcvm type
        # gets into typelist.
        if ($osinfo && $osinfo->def_parentosid()) {
	    DBQuerywarn("replace into osidtoimageid set ".
                        " osid='$imageid', type='pcvm', imageid='$imageid'");
        }
    }
    elseif ($field == "listed" || $field == "architecture") {
        $imageid = $image->imageid();

        $query_result =
            DBQueryWarn("update images set ${field}='$safe_value' ".
                        "where imageid='$imageid'");
    }
    else {
        $query_result =
            DBQueryWarn("update image_versions set ${field}='$safe_value' ".
                        "where uuid='$uuid'");
    }
    if (!$query_result) {
	SPITAJAX_ERROR(-1, "Internal error updating database");
	return -1;
    }
    # Mark for IMS update. Ignored if not using the image tracker.
    DBQueryWarn("update image_versions set ims_update=now() ".
                "where uuid='$uuid'");
    
    SPITAJAX_RESPONSE(1);
}

#
# Just the admin notes
#
function Do_SaveAdminNotes()
{
    global $this_user, $ajax_args, $image;
    global $TBBASE, $ISEMULAB, $TBMAINSITE, $OURDOMAIN;

    if (CheckPageArgs(1)) {
        return;
    }
    if (!ISADMIN()) {
	SPITAJAX_ERROR(-1, "Not enough permission");
	return -1;
    }
    
    $uuid = $image->uuid();
    if (!isset($ajax_args["notes"])) {
	SPITAJAX_ERROR(-1, "Missing the notes");
	return -1;
    }
    $notes = $ajax_args["notes"];
    if ($notes != "" && !TBvalid_fulltext($notes)) {
	SPITAJAX_ERROR(-1, "Invalid characters in notes");
	return -1;
    }
    $safe_notes = DBQuoteSpecial($notes);
    if (!DBQueryWarn("update image_versions set notes='$safe_notes' ".
                     "where uuid='$uuid'")) {
	SPITAJAX_ERROR(-1, "Internal error updating database");
	return -1;
    }
    SPITAJAX_RESPONSE(1);
}

#
# Just the type list
#
function Do_SetTypes()
{
    global $this_user, $ajax_args, $image;
    global $TBBASE, $ISEMULAB, $TBMAINSITE, $OURDOMAIN;

    if (CheckPageArgs(1)) {
        return;
    }
    $uuid = $image->uuid();

    if (!isset($ajax_args["typelist"])) {
	SPITAJAX_ERROR(-1, "Missing the type list");
	return -1;
    }
    $typelist = $ajax_args["typelist"];
    if (!is_array($typelist)) {
	SPITAJAX_ERROR(-1, "Not an array");
	return -1;
    }

    #
    # Need a list of node types. We join this over the nodes table so that
    # we get a list of just the nodes that are currently in the testbed, not
    # just in the node_types table.
    #
    $types_result =
        DBQueryFatal("select distinct n.type from nodes as n ".
                     "left join node_type_attributes as a on a.type=n.type ".
                     "where a.attrkey='imageable' and ".
                     "      a.attrvalue!='0'");
    $alltypes = array();
    while ($row = mysql_fetch_array($types_result)) {
        $alltypes[$row["type"]] = $row["type"];
    }
    $alltypes["pcvm"] = "pcvm";

    foreach ($typelist as $type) {
        if (!array_key_exists($type, $alltypes)) {
            SPITAJAX_ERROR(-1, "Invalid type: $type");
            return -1;
        }
    }
    # Build the mtype args for the backend script.
    $args = array();
    foreach ($alltypes as $type) {
        $args["mtype_${type}"] = 0;
    }
    foreach ($typelist as $type) {
        $args["mtype_${type}"] = 1;
    }
    # Send to the backend for more checking, and eventually, to update the DB.
    if (! Image::EditImageid($image, $args, $errors)) {
        SUEXECERROR(SUEXEC_ACTION_CONTINUE);    
        SPITAJAX_ERROR(-1, $errors[0]);
        return;
    }
    SPITAJAX_RESPONSE(1);
}

#
# Delete image.
#
function Do_Delete()
{
    global $this_user, $ajax_args, $image;
    global $TB_IMAGEID_DESTROY;

    if (CheckPageArgs(1)) {
        return;
    }
    $uuid = $image->uuid();

    if (! (ISADMIN() ||
           $image->AccessCheck($this_user, $TB_IMAGEID_DESTROY))) {
	SPITAJAX_ERROR(-1, "Not enough permission");
	return -1;
    }
    if (!isset($ajax_args["purge"])) {
	SPITAJAX_ERROR(-1, "Missing purge argument");
	return -1;
    }
    $purge     = $ajax_args["purge"];
    $purgeopt  = $purge ? "-p" : "";
    $imageid   = $image->imageid();
    $project   = $image->Project();
    $unix_pgid = $project->unix_gid();

    $retval = SUEXEC($this_user->uid(), $unix_pgid,
                     "webdelete_image -F $purgeopt $imageid",
                     SUEXEC_ACTION_CONTINUE);
    if ($retval) {
	SPITAJAX_ERROR(-1, "Internal error, operations have been notified.");
	return -1;
    }
    SPITAJAX_RESPONSE(1);
}

#
# Change the sharing,
#
function Do_SetSharing()
{
    global $this_user, $ajax_args, $image;
    global $TBBASE, $ISEMULAB, $TBMAINSITE, $OURDOMAIN;

    if (CheckPageArgs(1)) {
        return;
    }
    $uuid = $image->uuid();

    if (! (isset($ajax_args["shared"]) && isset($ajax_args["shared"]))) {
	SPITAJAX_ERROR(-1, "Missing shared or global");
	return -1;
    }
    $shared = $ajax_args["shared"];
    $global = $ajax_args["global"];

    # These are booleans.
    if ($shared && $global) {
	SPITAJAX_ERROR(-1, "Not allowed to be both shared and global");
	return -1;
    }
    if ($image->SetSharedGlobal($shared, $global)) {
	SPITAJAX_ERROR(-1, "Internal error updating database");
	return -1;
    }
    SPITAJAX_RESPONSE(1);
}

#
# Clone image.
#
function Do_Clone()
{
    global $this_user, $ajax_args;
    global $TBBASE, $ISEMULAB, $TBMAINSITE, $OURDOMAIN;
    global $TB_PROJECT_MAKEIMAGEID, $TB_NODEACCESS_LOADIMAGE, $suexec_output;
    global $TB_IMAGEID_MODIFYINFO, $TB_IMAGEID_READINFO;

    $this_idx   = $this_user->uid_idx();
    $this_uid   = $this_user->uid();
    # Allow for form precheck only. So JS code knows it will be fast. 
    $checkonly  = isset($ajax_args["checkonly"]) && $ajax_args["checkonly"];

    if (!isset($ajax_args["formfields"])) {
	SPITAJAX_ERROR(1, "Missing formfields");
	return;
    }
    $formfields = $ajax_args["formfields"];
    $errors = array();
    $node   = null;

    $required = array("image_pid", "image_gid", "imagename", "description",
                      "os_version", "shared-global");

    foreach ($required as $field) {
	if (!isset($formfields[$field]) || $formfields[$field] == "") {
	    $errors[$field] = "Missing field";
	}
    }
    if (count($errors)) {
	SPITAJAX_ERROR(2, $errors);
	return;
    }
    #
    # We get the original base image the form is created from.
    #
    if (!isset($formfields["baseimage_uuid"]) ||
            $formfields["baseimage_uuid"] == "") {
        $errors["error"] = "Missing base image UUID";
    }
    elseif (! IsValidUUID($formfields["baseimage_uuid"])) {
        $errors["error"] = "Invalid base image UUID";
    }
    elseif (! ($baseimage =
               Image::LookupByUUID($formfields["baseimage_uuid"]))) {
        $errors["error"] = "No such base image";
    }
    elseif (! ($baseinfo = $baseimage->OSinfo())) {
        $errors["error"] = "Cannot determine base osinfo for image";
    }
    elseif (! $baseimage->AccessCheck($this_user, $TB_IMAGEID_READINFO)) {
        $errors["error"] = "Not enough permission to clone image";
    }
    
    #
    # The node is optional for admins.
    # Make sure the node is running the image we are cloning.
    #
    if (isset($formfields["node_id"]) && $formfields["node_id"] != "") {
        $node = Node::Lookup($formfields["node_id"]);
        if (!$node) {
            $errors["node_id"] = "No such node";
        }
        elseif (!$node->AccessCheck($this_user, $TB_NODEACCESS_LOADIMAGE)) {
            $errors["node_id"] = "Not enough permission";
        }
        else {
            $nodeimage = $node->def_boot_image();
            if (!$nodeimage) {
                $errors["error"] = "Cannot determine base image for node";
            }
            elseif (!$nodeimage->SameImage($baseimage)) {
                $errors["node_id"] = "Not running the image being cloned";
            }
            elseif ($nodeimage->version() != $baseimage->version()) {
                $errors["node_id"] = "Running a different version of ".
                                     "the image being cloned";
            }
        }
    }
    elseif (!ISADMIN()) {
        # Mere users have no reason to clone an image without a snapshot.
        $errors["node_id"] = "Missing field";
    }
    if (!TBvalid_pid($formfields["image_pid"])) {
        $errors["image_pid"] = "Invalid project name";
    }
    elseif (! ($project = Project::Lookup($formfields["image_pid"]))) {
        $errors["image_pid"] = "No such project";
    }
    if (!TBvalid_gid($formfields["image_gid"])) {
	$errors["image_gid"] = "Invalid group name";
    }
    elseif ($project &&
	    !($group =
              $project->LookupSubgroupByName($formfields["image_gid"]))) {
	$errors["image_gid"] = "No such group";
    }
    # Permission check if we managed to get a proper group above.
    if ($group &&
        ! $group->AccessCheck($this_user, $TB_PROJECT_MAKEIMAGEID)) {
        $errors["image_pid"] = "Not enough permission";
    }
    if (!TBvalid_imagename($formfields["imagename"])) {
        $errors["imagename"] = "Invalid image name";
    }
    elseif ($project &&
            Image::LookupByName($project, $formfields["imagename"])) {
        $errors["imagename"] = "Already in use";
    }
    
    if (!TBvalid_description($formfields["description"])) {
        $errors["description"] = "Invalid description";
    }
    if (!TBcheck_dbslot($formfields["os_version"], "os_info", "version",
                        TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
        $errors["os_version"] = "Invalid version string";
    }
    if (! ($formfields["shared-global"] == "shared" ||
           $formfields["shared-global"] == "global" ||
           $formfields["shared-global"] == "none")) {
        $errors["shared-global"] = "Invalid shared/global value";
    }
    if (count($errors)) {
	SPITAJAX_ERROR(2, $errors);
	return;
    }
    if ($checkonly) {
	SPITAJAX_RESPONSE(0);
	return;
    }

    #
    # Build up argument array to pass along. A lot comes from the
    # baseimage, to be compatible with the existing code paths.
    #
    $args = array();
    $args["pid"]         = $formfields["image_pid"];
    $args["gid"]         = $formfields["image_gid"];
    $args["imagename"]   = $formfields["imagename"];
    $args["description"] = $formfields["description"];
    $args["loadpart"]    = $baseimage->loadpart();
    $args["OS"]          = $baseinfo->OS();
    $args["version"]     = $formfields["os_version"];
    $args["op_mode"]     = $baseinfo->op_mode();
    if (isset($formfields["wholedisk"]) && $formfields["wholedisk"] != "") {
        $args["wholedisk"]  = 1;
    }
    if ($formfields["shared-global"] == "shared") {
        $args["shared"] = 1;
    }
    elseif ($formfields["shared-global"] == "global") {
        $args["global"] = 1;
    }
    $args["noexport"]        = $baseimage->noexport();
    $args["mbr_version"]     = $baseimage->mbr_version();
    $args["osfeatures"]      = $baseinfo->osfeatures();
    if ($baseimage->architecture()) {
        $args["architecture"] = $baseimage->architecture();
    }
    if ($baseinfo->reboot_waittime() && $baseinfo->reboot_waittime() != "") {
        $args["reboot_waittime"] = $baseinfo->reboot_waittime();
    }
    # Send the type array anyway.
    foreach ($baseimage->Types() as $type) {
        $args["mtype_$type"] = 1;
    }
    if ($baseinfo->def_parentosid()) {
        $p_image = Image::Lookup($baseinfo->def_parentosid());
        if ($p_image) {
            $args["def_parentosid"] = $p_image->pid() .
                                    "," . $p_image->imagename();
        }
    }
    if (! ($newimage =
           Image::NewImageId(1, $formfields["imagename"], $args,
                             $this_user, $group, null, $errors))) {
	SPITAJAX_ERROR(-1, $suexec_output);
        sleep(1);
        return;
    }
    #
    # OK, if there is a node, we want to start the cloning. We pass a
    # webtask through, so that Do_SnapshotStatus() below can pick up
    # the status for the imaging modal.
    #
    if (isset($node)) {
        $experiment = $node->Reservation();
        if (!$experiment) {
            SPITAJAX_ERROR(-1, "not currently reserved to an experiment");
            return;
        }
        $node_pid = $experiment->pid();
        $unix_gid = $experiment->UnixGID();
        $unix_groups = $project->unix_gid() . "," . $unix_gid;
        if ($project->pid() != $node_pid) {
            $unix_groups = "$unix_groups,$node_pid";
        }
        $webtask = WebTask::CreateAnonymous();
        $webtask->SetTaskValue("node_id", $node->node_id());
        $webtask->Store();

        #
        # On this path, the image does not exist, so if this fails then
        # we want to kill the descriptor to avoid cruft in the DB.
        # Note that we created the descriptor above, so force with -C
        #
        $retval = SUEXEC($this_uid, $unix_groups,
                         "webclone_image -C -t " . $webtask->task_id() .
                         " " . escapeshellarg($formfields["imagename"]) .
                         " " . $node->node_id(),
                         SUEXEC_ACTION_IGNORE);

        if ($retval != 0) {
            $webtask->Refresh();
            
            SUEXECERROR(SUEXEC_ACTION_CONTINUE);
            
            if (!$webtask->exited() || $retval < 0) {
                SPITAJAX_ERROR(-1,
                               "Internal error starting snapshot" .
                               ($webtask->output() ?
                                ": " . $webtask->output() : ""));
            }
            else {
                # Need to pass exitcode through on this one.
                SPITAJAX_ERROR($webtask->exitcode(), $webtask->output());
            }
            $webtask->Delete();
            return;
        }
    }
    $url = "show-image.php?imageid=" . $newimage->uuid();
    if (isset($node)) {
        $url .= "&showsnapstatus=1&node_id=" . $node->node_id();
    }
    SPITAJAX_RESPONSE($url);
}

#
# Snapshot status
#
function Do_SnapshotStatus()
{
    global $this_user, $ajax_args, $image;
    global $TBBASE, $ISEMULAB, $TBMAINSITE, $OURDOMAIN;

    if (CheckPageArgs(0)) {
        return;
    }
    $uuid = $image->uuid();

    #
    # If the image is unlocked, we are no longer imaging.
    #
    if (0 && !$image->Locked()) {
	SPITAJAX_ERROR(2, "Snapshot not in progress");
	return;
    }
    #
    # If no webtask, then we cannot return any status info.
    #
    $webtask_id = $image->webtask_id();
    if (!$webtask_id) {
	SPITAJAX_ERROR(2, "No snapshot status info available");
	return;
    }
    $webtask = WebTask::Lookup($webtask_id);
    if (!$webtask)  {
	SPITAJAX_ERROR(2, "No snapshot status info available");
	return;
    }
    $taskdata = $webtask->TaskData();
    $blob = array();

    #error_log(print_r($webtask, true));

    #
    # Size is in KB to avoid bigint problems. 
    # 
    if (isset($taskdata["imagesize"])) {
	$blob["image_size"] = $taskdata["imagesize"];
    }
    else {
	$blob["image_size"] = 0;
    }
    $blob["image_status"] = $taskdata["status"];

    #
    # We stuck the node_id in above when we started the snapshot
    #
    $node_id = $taskdata["node_id"];
    $node = Node::Lookup($node_id);
    if ($node) {
        $blob["node_status"] = $node->eventstate();
    }
    if ($webtask->exited()) {
	$blob["exited"]   = $webtask->exited();
	$blob["exitcode"] = $webtask->exitcode();
        if (isset($taskdata["log"])) {
            $blob["log"] = $taskdata["log"];
        }
        # We want to say something in the web UI if imaging throws an error.
        if ($webtask->exitcode()) {
            $blob["errmsg"] = $webtask->output();
        }
        if (isset($taskdata["image_name"])) {
            $blob["image_name"] = $taskdata["image_name"];
        }
    }
    SPITAJAX_RESPONSE($blob);
}

#
# Snapshot image.
#
function Do_Snapshot()
{
    global $this_user, $ajax_args, $image;
    global $TBBASE, $ISEMULAB, $TBMAINSITE, $OURDOMAIN;
    global $TB_PROJECT_MAKEIMAGEID, $TB_NODEACCESS_LOADIMAGE; $suexec_output;
    global $TB_IMAGEID_MODIFYINFO, $TB_IMAGEID_READINFO;

    if (CheckPageArgs(1)) {
        return;
    }
    sleep(1);
    $this_idx   = $this_user->uid_idx();
    $this_uid   = $this_user->uid();
    $baseimage  = $image;
    $group      = $image->Group();

    if (!isset($ajax_args["node_id"])) {
	SPITAJAX_ERROR(-1, "Missing Node ID");
	return -1;
    }
    $node_id = $ajax_args["node_id"];
    if (!TBvalid_node_id($node_id)) {
	SPITAJAX_ERROR(-1, "Invalid Node ID");
	return -1;
    }
    $node = Node::Lookup($node_id);
    if (!$node) {
	SPITAJAX_ERROR(-1, "No such node");
	return;
    }
    elseif (!$node->AccessCheck($this_user, $TB_NODEACCESS_LOADIMAGE)) {
	SPITAJAX_ERROR(-1, "Not enough permission to snapshot node");
	return;
    }
    else {
        $nodeimage = $node->def_boot_image();
        if (!$nodeimage) {
            SPITAJAX_ERROR(-1, "Cannot determine base image for node");
            return;
        }
        elseif (!$nodeimage->SameImage($baseimage)) {
            SPITAJAX_ERROR(-1, "Not running the image being cloned");
            return;
        }
        elseif ($nodeimage->version() != $baseimage->version()) {
            SPITAJAX_ERROR(-1, "Node is running a different version of ".
                           "the image being cloned");
            return;
         }
    }
    $experiment = $node->Reservation();
    if (!$experiment) {
        SPITAJAX_ERROR(-1, "not currently reserved to an experiment");
        return;
    }
    $node_pid = $experiment->pid();
    $unix_gid = $experiment->UnixGID();
    $project  = $experiment->Project();
    $unix_groups = $project->unix_gid() . "," . $unix_gid;
    if ($project->pid() != $node_pid) {
	$unix_groups = "$unix_groups,$node_pid";
    }

    #
    # We pass a webtask through, so that Do_SnapshotStatus() above can pick up
    # the status for the imaging modal.
    #
    $webtask = WebTask::CreateAnonymous();
    $webtask->SetTaskValue("node_id", $node->node_id());
    $webtask->Store();
        
    $retval = SUEXEC($this_uid, $unix_groups,
                     "webclone_image -t " . $webtask->task_id() .
                     " " . escapeshellarg($baseimage->imagename()) .
                     " " . escapeshellarg($node->node_id()),
                     SUEXEC_ACTION_IGNORE);

    if ($retval != 0) {
        $webtask->Refresh();
            
        SUEXECERROR(SUEXEC_ACTION_CONTINUE);
            
        if (!$webtask->exited() || $retval < 0) {
            SPITAJAX_ERROR(-1, "Internal error starting snapshot");
        }
        else {
            # Need to pass exitcode through on this one.
            SPITAJAX_ERROR($webtask->exitcode(), $webtask->output());
        }
        $webtask->Delete();
        return;
    }
    $newimage = $baseimage->LookupUnreleased();
    if (!$newimage) {
        SUEXECERROR(SUEXEC_ACTION_CONTINUE);
        SPITAJAX_ERROR(-1, "Internal error starting snapshot");
    }
    $url = "show-image.php?imageid=" . $newimage->uuid();
    if (isset($node)) {
        $url .= "&showsnapstatus=1";
    }
    SPITAJAX_RESPONSE($url);
}

# Local Variables:
# mode:php
# End:
?>
