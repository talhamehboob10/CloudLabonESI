<?php
#
# Copyright (c) 2000-2021 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
chdir("..");
include_once("webtask.php");
include_once("geni_defs.php");
chdir("apt");
include_once("profile_defs.php");

function Do_GetBranchList()
{
    global $this_user;
    global $ajax_args;
    
    if (!isset($ajax_args["uuid"])) {
	SPITAJAX_ERROR(1, "Missing profile uuid");
	return;
    }
    $profile = Profile::Lookup($ajax_args["uuid"]);
    if (!$profile) {
	SPITAJAX_ERROR(1, "Unknown profile uuid");
	return;
    }
    if (isset($this_user)) {
        $this_uid = $this_user->uid();
    }
    else {
        if (!$profile->ispublic()) {
            SPITAJAX_ERROR(1, "Not enough permission");
            return;
        }
        $this_uid = "nobody";
    }
    if (!$profile->repourl()) {
	SPITAJAX_ERROR(1, "Not a repo-based profile");
	return;
    }
    $webtask = WebTask::CreateAnonymous();
    if (!$webtask) {
	SPITAJAX_ERROR(-1, "Internal webtask Error");
	return;
    }
    $retval = SUEXEC($this_uid, "tbadmin",
		     "webmanage_gitrepo -t " . $webtask->task_id() . " " .
                     "  branchlist -p " . $profile->uuid(),
		     SUEXEC_ACTION_IGNORE);
    $webtask->Refresh();
    
    if ($retval != 0) {
        if ($retval < 0) {
            $error = $webtask->TaskValue("output");
	    SUEXECERROR(SUEXEC_ACTION_CONTINUE);
        }
        else {
            $error = $webtask->TaskValue("output");
        }
        $webtask->Delete();
	SPITAJAX_ERROR(1, $error);
	return;
    }
    $blob = array("branchlist" => $webtask->TaskValue("branchlist"),
                  "taglist"    => $webtask->TaskValue("taglist"));
    $webtask->Delete();
    SPITAJAX_RESPONSE($blob);
}

#
# Get info about a commit (or whatever).
#
function Do_GetCommitInfo()
{
    global $this_user;
    global $ajax_args;
    $which = "";
    
    if (isset($ajax_args["refspec"]) && $ajax_args["refspec"]) {
        if (!TBvalid_userdata($ajax_args["refspec"])) {
            SPITAJAX_ERROR(1, "Invalid refspec");
            return;
        }
        $which = escapeshellarg($ajax_args["refspec"]);
    }
    if (!isset($ajax_args["uuid"])) {
	SPITAJAX_ERROR(1, "Missing profile uuid");
	return;
    }
    $profile = Profile::Lookup($ajax_args["uuid"]);
    if (!$profile) {
	SPITAJAX_ERROR(1, "Unknown profile uuid");
	return;
    }
    if (isset($this_user)) {
        $this_uid = $this_user->uid();
    }
    else {
        if (!$profile->ispublic()) {
            SPITAJAX_ERROR(1, "Not enough permission");
            return;
        }
        $this_uid = "nobody";
    }
    
    $webtask = WebTask::CreateAnonymous();
    if (!$webtask) {
	SPITAJAX_ERROR(-1, "Internal webtask Error");
	return;
    }
    $retval = SUEXEC($this_uid, "tbadmin",
		     "webmanage_gitrepo -t " . $webtask->task_id() . " " .
                     "  commitinfo -p " . $profile->uuid() . "  $which",
		     SUEXEC_ACTION_IGNORE);
    $webtask->Refresh();
    
    if ($retval != 0) {
        if ($retval < 0) {
            $error = $webtask->TaskValue("output");
	    SUEXECERROR(SUEXEC_ACTION_CONTINUE);
        }
        else {
            $error = $webtask->TaskValue("output");
        }
        $webtask->Delete();
	SPITAJAX_ERROR(1, $error);
	return;
    }
    $webtask->Delete();
    SPITAJAX_RESPONSE($webtask->TaskValue("commitinfo"));
}

#
# Get source from repository and send back the script or rspec.
#
function Do_GetRepoSource()
{
    global $this_user;
    global $ajax_args;
    $which = "";
    
    if (!isset($ajax_args["refspec"])) {
	SPITAJAX_ERROR(1, "Missing branch or tag name");
	return;
    }
    if ($ajax_args["refspec"] != null) {
        if (!TBvalid_userdata($ajax_args["refspec"])) {
            SPITAJAX_ERROR(1, "Invalid refspec");
            return;
        }
        $which = escapeshellarg($ajax_args["refspec"]);
    }
    if (!isset($ajax_args["uuid"])) {
	SPITAJAX_ERROR(1, "Missing profile uuid");
	return;
    }
    $profile = Profile::Lookup($ajax_args["uuid"]);
    if (!$profile) {
	SPITAJAX_ERROR(1, "Unknown profile uuid");
	return;
    }
    if (isset($this_user)) {
        $this_uid = $this_user->uid();
    }
    else {
        if (!$profile->ispublic()) {
            SPITAJAX_ERROR(1, "Not enough permission");
            return;
        }
        $this_uid = "nobody";
    }
    $webtask = WebTask::CreateAnonymous();
    if (!$webtask) {
	SPITAJAX_ERROR(-1, "Internal webtask Error");
	return;
    }
    $outfname = tempnam("/tmp", "repofile");
    chmod($outfname, 0666);
    
    $retval = SUEXEC($this_uid, "tbadmin",
		     "webmanage_gitrepo -t " . $webtask->task_id() . " " .
                     "  getsource -o $outfname -p " . $profile->uuid() .
                     "  $which",
		     SUEXEC_ACTION_IGNORE);
    $webtask->Refresh();
    
    if ($retval != 0) {
        if ($retval < 0) {
            $error = $webtask->TaskValue("output");
	    SUEXECERROR(SUEXEC_ACTION_CONTINUE);
        }
        else {
            $error = $webtask->TaskValue("output");
        }
        $webtask->Delete();
        unlink($outfname);
	SPITAJAX_ERROR(1, $error);
	return;
    }
    $blob = array("script"  => file_get_contents($outfname),
                  "hash"    => $webtask->TaskValue("hash"));
    $webtask->Delete();
    unlink($outfname);
    SPITAJAX_RESPONSE($blob);
}

# Local Variables:
# mode:php
# End:
?>
