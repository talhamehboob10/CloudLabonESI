<?php
#
# Copyright (c) 2000-2020 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
chdir("..");
include_once("webtask.php");
chdir("apt");
include_once("profile_defs.php");
include_once("instance_defs.php");
include_once("ajax-routines.ajax");

#
# Need to check the permission, since we allow admins to mess with
# other accounts.
#
function CheckPageArgs()
{
    global $this_user;
    global $ajax_args;

    if (!(ISADMIN() || ISFOREIGN_ADMIN())) {
	SPITAJAX_ERROR(-1, "Not enough permission");
	return -1;
    }
    return 0;
}

function Do_ExperimentList()
{
    global $this_user, $urn_mapping, $PORTAL_GENESIS;
    global $ajax_args;
    $results = array();

    if (CheckPageArgs()) {
        return;
    }

    $query_result = 
        DBQueryFatal("select a.*,s.expires,s.hrn,u.email,users.usr_name, ".
                     " (UNIX_TIMESTAMP(now()) > ".
                     "  UNIX_TIMESTAMP(s.expires)) as expired, ".
                     "  truncate(a.physnode_count * ".
                     "   ((UNIX_TIMESTAMP(now()) - ".
                     "     UNIX_TIMESTAMP(a.started)) / 3600.0),2) as phours, ".
                     " IFNULL(aggs.count,0) as aggrows, ".
                     " agg.aggregate_urn as aggrow_urn ".
                     "  from apt_instances as a ".
                     "left join (".
                     "    select uuid, COUNT(*) AS count ".
                     "    from apt_instance_aggregates group by uuid) AS aggs ".
                     "  on aggs.uuid=a.uuid ".
                     "left join apt_instance_aggregates as agg ".
                     "     on agg.uuid=a.uuid ".
                     "left join geni.geni_slices as s on ".
                     "     s.uuid=a.slice_uuid ".
                     "left join geni.geni_users as u on u.uuid=a.creator_uuid ".
                     "left join users on users.uid_idx=a.creator_idx");

    while ($row = mysql_fetch_array($query_result)) {
        $profile_id   = $row["profile_id"];
        $version      = $row["profile_version"];
        $uuid         = $row["uuid"];
        $name         = $row["name"];
        $status       = $row["status"];
        $canceled     = $row["canceled"];
        $paniced      = $row["paniced"];
        $created      = DateStringGMT($row["started"]);
        $expires      = DateStringGMT($row["expires"]);
        $creator_idx  = $row["creator_idx"];
        $profile_name = "$profile_id:$version";
        $creator_uid  = $row["creator"];
        $pid          = $row["pid"];
        $pcount       = $row["physnode_count"];
        $vcount       = $row["virtnode_count"];
        $user_lockdown= $row["user_lockdown"];
        $admin_lockdown= $row["admin_lockdown"];
        $lockdown     = ($user_lockdown || $admin_lockdown ? 1 : 0);
        $phours       = $row["phours"];
        $email        = $row["email"];
        $extending    = $row["extension_requested"];
        $portal       = $row["portal"];
        $blob         = array();

        # If a guest user, use email instead.
        if (isset($email)) {
            $blob["creator"] = $email;
        }
        else {
            $blob["creator"] =
                "<a href='user-dashboard.php?user=$creator_uid'>".
                "$creator_uid</a>";
        }
        if ($paniced) {
            $status = "quarantined";
        }
        elseif ($row["expired"]) {
            $status = "expired";
        }
        elseif ($canceled) {
            $status = "canceled";
        }
        $blob["status"] = $status;
        
        $profile = Profile::Lookup($profile_id, $version);
        if ($profile) {
            $blob["profile_name"] = $profile->name();
            $blob["profile_uuid"] = $profile->uuid();
        }
        else {
            $blob["profile_name"] = $profile_name;
        }
        
        #
        # If arows non-zero, then we use that for aggregate_urn,
        # and if its more then 1, we need to consume the extras rows
        # to get the rest of the aggregate urns.
        #
        if ($row["aggrows"] > 0) {
            $cluster = $urn_mapping[$row["aggrow_urn"]];

            for ($i = 1; $i < $row["aggrows"]; $i++) {
                $row = mysql_fetch_array($query_result);
                $cluster .= "," . $urn_mapping[$row["aggrow_urn"]];
            }
        }
        else {
            $cluster = $urn_mapping[$row["aggregate_urn"]];
        }
        $namefrag = "<a href='adminextend.php?uuid=$uuid'>$name</a>
               <a href='status.php?uuid=$uuid' target=_blank>
	       <span class='pull-right glyphicon glyphicon-eye-open'>
               </span></a>";
        $pidfrag = "<a href='show-project.php?project=$pid'>$pid</a>";

        $blob["uuid"]           = $uuid;
        $blob["name"]           = $namefrag;
        $blob["project"]        = $pidfrag;
        $blob["cluster"]        = $cluster;
        $blob["pcount"]         = $pcount;
        $blob["phours"]         = $phours;
        $blob["vcount"]         = $vcount;
        $blob["created"]        = $created;
        $blob["expires"]        = $expires;
        $blob["user_lockdown"]  = ($user_lockdown ? 1 : 0);
        $blob["admin_lockdown"] = ($admin_lockdown ? 1 : 0);
        $blob["lockdown"]       = $lockdown;
        $blob["portal"]         = $portal;
        $blob["extension_requested"] = $extending;

        #
        # For admins, we includes a filters field.
        #
        $filters = array();
        if ($lockdown) {
            $filters[] = "locked";
        }
        if ($status == "expired") {
            $filters[] = "expired";
        }
        if ($extending) {
            $filters[] = "extending";
        }
        if ($portal == $PORTAL_GENESIS) {
            $filters[] = "portal";
        }
        if (time() - strtotime($created) > (45 * 24 * 3600)) {
            $filters[] = "old";
        }
        $blob["filter"] = implode(",", $filters);
        
        $results["$pid:$name"] = $blob;
    }
    SPITAJAX_RESPONSE($results);    
}

function Do_ExperimentErrors()
{
    global $this_user, $urn_mapping, $geni_response_codes;
    global $ajax_args;
    $clause  = "";
    $results = array();

    if (CheckPageArgs()) {
        return;
    }
    if (isset($ajax_args["stamp"]) && TBvalid_integer($ajax_args["stamp"])) {
        $stamp = $ajax_args["stamp"];
        $clause = "where UNIX_TIMESTAMP(f.started) <= $stamp";
    }
    $query_result =
        DBQueryFatal("select f.name,exitcode,f.started,f.public_url,".
	             "  IF(i.uuid,i.uuid,f.uuid) as uuid, ".
                     "  IF(i.uuid,1,0) as active,f.exitmessage, ".
                     "  p.uuid as profile_uuid,p.name as profile_name, ".
                     "  IF(i.uuid,i.aggregate_urn,h.aggregate_urn) ".
                     "    as aggregate_urn, ".
                     "  f.slice_uuid,f.logfileid,f.creator ".
                     "from apt_instance_failures as f ".
                     "left join apt_instances as i on ".
                     "     i.uuid=f.uuid ".
                     "left join apt_instance_history as h on ".
                     "     h.uuid=f.uuid ".
                     "left join apt_profiles as p on ".
                     "     p.profileid=f.profile_id ".
                     $clause . " " .
                     "order by f.started desc limit 100");

    while ($row = mysql_fetch_array($query_result)) {
        $name       = $row["name"];
        $exitcode   = $row["exitcode"];
        $url        = $row["public_url"];
        $logfileid  = $row["logfileid"];
        $uuid       = $row["uuid"];
        $active     = $row["active"] ? 1 : 0;
        $started    = DateStringGMT($row["started"]);
        $creator    = $row["creator"];
        $message    = $row["exitmessage"];
        $reason     = $exitcode;
        $slice_uuid = $row["slice_uuid"];
        $profile_uuid = $row["profile_uuid"];
        $profile_name = $row["profile_name"];
        $aggregate_urn= $row["aggregate_urn"];
        $cluster      = null;

        if ($exitcode >= 0 && $exitcode <= count($geni_response_codes)) {
            $reason = $geni_response_codes[$exitcode];
        }
        elseif ($exitcode == GENIRESPONSE_STITCHER_ERROR) {
            $reason = "Stitcher Failed";
        }
        if ($aggregate_urn && $aggregate_urn != "") {
            $cluster = $urn_mapping[$aggregate_urn];
        }
        #
        # Ick. If the url is for the showslicepub link, we have a problem;
        # the link is good only while the slice is alive. After that, we have
        # to use a private url (which is okay, cause only admins are going
        # to see it and be able to use it).
        #
        if (ISFOREIGN_ADMIN()) {
            $url = null;
        }
        elseif (!$url) {
            #
            # If there is a log file, show that instead.
            #
            if ($logfileid) {
                $url = $TBBASE . "/" .
                    CreateURL("spewlogfile", "logfile", $logfileid);
            }
        }
        elseif (preg_match("/^(https:.*)\/showslicepub/", $url, $matches)) {
            if (ISADMIN()) {
                $url = $matches[1] . "/showslicelogs.php?slice_uuid=".
                    $slice_uuid;
            }
            else {
                $url = null;
            }
        }
        $results[] = array("name"     => $name,
                           "uuid"     => $uuid,
                           "exitcode" => $exitcode,
                           "active"   => $active,
                           "started"  => $started,
                           "creator"  => $creator,
                           "reason"   => $reason,
                           "message"  => $message,
                           "url"      => $url,
                           "cluster"  => $cluster,
                           "profile_uuid" => $profile_uuid,
                           "profile_name" => $profile_name);
    }
    SPITAJAX_RESPONSE($results);    
}

#
# Search for an IP.
#
function Do_SearchIP()
{
    global $this_user, $urn_mapping;
    global $ajax_args;
    $this_uid = $this_user->uid();

    if (CheckPageArgs()) {
        return;
    }
    $ip = $ajax_args["ip"];
    if (! preg_match('/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/', $ip)) {
	SPITAJAX_ERROR(-1, "Bad IP address");
        return;
    }
    $webtask = WebTask::CreateAnonymous();
    $retval = SUEXEC($this_uid, "nobody",
		     "websearchip -t " . $webtask->task_id() . " $ip",
		     SUEXEC_ACTION_IGNORE);
    $webtask->Refresh();
    
    if ($retval != 0) {
        if (!$webtask->exited() || $retval < 0) {
            SUEXECERROR(SUEXEC_ACTION_CONTINUE);
            SPITAJAX_ERROR(-1, "Internal error");
        }
        else {
            SPITAJAX_ERROR($webtask->exitcode(), $webtask->output());
        }
        $webtask->Delete();
        return;
    }
    $uuid = $webtask->TaskValue("instance");
    $webtask->Delete();
    SPITAJAX_RESPONSE($uuid);
}

#
# List of all Classic experiments, not associated with an instance.
#
function Do_ClassicExperimentList()
{
    global $this_user, $urn_mapping;
    global $ajax_args;
    $this_uid = $this_user->uid();

    if (CheckPageArgs()) {
        return;
    }
    $blob = ClassicExperimentList("all", null);

    SPITAJAX_RESPONSE($blob);
}

# Local Variables:
# mode:php
# End:
?>
