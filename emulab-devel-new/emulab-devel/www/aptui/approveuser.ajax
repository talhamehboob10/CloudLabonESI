<?php
#
# Copyright (c) 2000-2016 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

function CommonSetup()
{
    global $ajax_args;
    global $this_user;
    global $TB_PROJECT_ADDUSER;

    # Until I get a delay into the waitwait modal.
    sleep(1);

    if (!isset($ajax_args["user_uid"])) {
	SPITAJAX_ERROR(1, "Missing user user_uid");
	return;
    }
    $user_uid    = $ajax_args["user_uid"];
    $target_user = User::Lookup($user_uid);
    
    if (!isset($ajax_args["pid"])) {
	SPITAJAX_ERROR(1, "Missing project pid");
	return;
    }
    $pid     = $ajax_args["pid"];
    $project = Project::Lookup($pid);

    #
    # Check that the current user has the necessary trust level
    # to approver users in the project/group.
    #
    if (! $project->AccessCheck($this_user, $TB_PROJECT_ADDUSER)) {
	SPITAJAX_ERROR(1, "You are not allowed to approve users in project $pid");
	return;
    }
    #
    # Must be an unapproved member ...
    #
    $approved = 0;
    if (! $project->IsMember($target_user, $approved)) {
	SPITAJAX_ERROR(1, "User $user_uid is not a member of project $pid");
	return;
    }
    if ($approved) {
	SPITAJAX_ERROR(1, "User $user_uid is already an approved ".
		          "member of project $pid");
	return;
    }
    return array($target_user, $project);
}

#
# Deny
#
function Do_Deny()
{
    global $this_user;
    global $TBADMINGROUP;
    $this_uid = $this_user->uid();

    list ($target_user, $project) = CommonSetup();
    $pid      = $project->pid();
    $user_uid = $target_user->uid();
    
    #
    # Must delete the group_membership record since we require that the 
    # user reapply once denied. Send the luser email to let him know.
    #
    $project->DeleteMember($target_user);

    #
    # See if user is in any other projects (even unapproved).
    #
    $project_list = $target_user->ProjectMembershipList();

    #
    # If no we can safely delete the user account.
    #
    if (!count($project_list)) {
	SUEXEC($this_uid, $TBADMINGROUP, "webrmuser -n -p $pid $user_uid", 1);
    }
    SPITAJAX_RESPONSE("User $user_uid was denied membership in project $pid");
}

#
# Approve
#
function Do_Approve()
{
    global $this_user;
    global $TBADMINGROUP;
    $this_uid = $this_user->uid();

    list ($target_user, $project) = CommonSetup();
    $pid      = $project->pid();
    $user_uid = $target_user->uid();
    $trust    = TBDB_TRUSTSTRING_LOCALROOT;

    # Create the user if it is not yet approved.
    if ($target_user->status() != TBDB_USERSTATUS_ACTIVE) {
	$target_user->SetStatus(TBDB_USERSTATUS_ACTIVE);

	$retval = SUEXEC($this_uid, $TBADMINGROUP,
			 "webtbacct add $user_uid",
			 SUEXEC_ACTION_CONTINUE);
	if ($retval) {
	    SPITAJAX_ERROR(-1, "Internal error creating new user");
	    return;
	}
    }
    # And update the trust level in the group.
    $retval = SUEXEC($this_uid, $TBADMINGROUP,
		     "webmodgroups -a $pid:$pid:$trust $user_uid",
		     SUEXEC_ACTION_CONTINUE);
    if ($retval) {
	SPITAJAX_ERROR(-1, "Internal error updating user membership");
	return;
    }
    # Users that join a bound to portal project, also get bound if they
    # are not already marked for another portal.
    if ($project->bound_portal()) {
        if ($project->portal() == $target_user->portal()) {
            $target_user->SetBoundPortal(1);
        }
    }
    SPITAJAX_RESPONSE("User $user_uid was granted membership in project $pid");
}

# Local Variables:
# mode:php
# End:
?>
