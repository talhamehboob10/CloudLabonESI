<?php
#
# Copyright (c) 2000-2020 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
chdir("..");
include_once("webtask.php");
chdir("apt");

#
# Get frequency data. We have both a CORS and unknown CA problem.
#
function Do_GetFrequencyData()
{
    global $instance, $creator, $this_user;
    global $ajax_args;
    $opt = "";

    if (!isset($ajax_args["cluster"])) {
	SPITAJAX_ERROR(1, "Missing urn argument");
	return 1;
    }
    if (!isset($ajax_args["node_id"])) {
	SPITAJAX_ERROR(1, "Missing node_id argument");
	return 1;
    }
    if (!isset($ajax_args["iface"])) {
	SPITAJAX_ERROR(1, "Missing iface argument");
	return 1;
    }
    $cluster = $ajax_args["cluster"];
    if (!TBvalid_node_id($cluster)) {
        SPITAJAX_ERROR(-1, "Illegal characters in cluster");
        return 1;
    }
    $aggregate = Aggregate::LookupByNickname($cluster);
    if (!$aggregate) {
        SPITAJAX_ERROR(-1, "No such cluster: $cluster");
        return 1;
    }
    $node_id = $ajax_args["node_id"];
    if (!TBvalid_node_id($node_id)) {
        SPITAJAX_ERROR(-1, "Illegal characters in node_id");
        return 1;
    }
    $iface = $ajax_args["iface"];
    if (!TBvalid_node_id($iface)) {
        SPITAJAX_ERROR(-1, "Illegal characters in iface");
        return 1;
    }
    if ($iface != "rf0") {
        SPITAJAX_ERROR(-1, "Illegal interface: $iface");
        return 1;
    }
    $logid = "";
    if (isset($ajax_args["logid"]) && $ajax_args["logid"] != "") {
        if (!TBvalid_userdata($ajax_args["logid"])) {
            SPITAJAX_ERROR(-1, "Illegal logid");
            return 1;
        }
        $logid = "-" . $ajax_args["logid"];
    }
    $archived = 0;
    if (isset($ajax_args["archived"]) && $ajax_args["archived"] == "1") {
        $archived = 1;
    }
    $download = 0;
    if (isset($ajax_args["download"]) && $ajax_args["download"] == "1") {
        $download = 1;
    }
    $url = $aggregate->weburl() . "/rfmonitor/" .
        ($archived ? "/archive/" : "") .
        "${node_id}:${iface}${logid}.csv.gz";
    $url = preg_replace("/^https:/i","http:", $url);

    $socket = fopen($url, "r");
    if (!$socket) {
        SPITAJAX_ERROR(-1, "Could not open URL");
        return;
    }
    if ($download) {
        $headers = $http_response_header;
        
        foreach ($headers as $k => $v) {
            header($v);
        }
        header("Content-Disposition: inline; ".
               "filename='${node_id}:${iface}${logid}.csv.gz'");
    }
    fpassthru($socket);
    fclose($socket);
    return;
}

#
# Get directory We have both a CORS and unknown CA problem.
#
function Do_GetListing()
{
    global $instance, $creator, $this_user;
    global $ajax_args;
    $opt = "";

    if (!isset($ajax_args["cluster"])) {
	SPITAJAX_ERROR(1, "Missing cluster argument");
	return 1;
    }
    $cluster = $ajax_args["cluster"];
    if (!TBvalid_node_id($cluster)) {
        SPITAJAX_ERROR(-1, "Illegal characters in cluster");
        return 1;
    }
    $aggregate = Aggregate::LookupByNickname($cluster);
    if (!$aggregate) {
        SPITAJAX_ERROR(-1, "No such cluster: $cluster");
        return 1;
    }
    $url = $aggregate->weburl() . "/rfmonitor/listing.php";
    $url = preg_replace("/^https:/i","http:", $url);

    $socket = fopen($url, "r");
    if (!$socket) {
        SPITAJAX_ERROR(-1, "Could not open URL");
        return;
    }
    fpassthru($socket);
    fclose($socket);
    return;
}


# Local Variables:
# mode:php
# End:
?>
