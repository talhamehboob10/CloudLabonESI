<?php
#
# Copyright (c) 2000-2020 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
chdir("..");
include_once("webtask.php");
chdir("apt");
include_once("profile_defs.php");
include_once("instance_defs.php");
include_once("aggregate_defs.php");

$portals = array();
if ($TBMAINSITE) {
    $portals["www.aptlab.net"]         = "APT";
    $portals["www.cloudlab.us"]        = "Cloud";
    $portals["www.emulab.net"]         = "Emulab";
    $portals["www.phantomnet.org"]     = "Phantom";
    $portals["www.powderwireless.net"] = "Powder";
}
else {
    $portals[$APTHOST] = "Emulab";
}

function Do_Search()
{
    global $this_user, $urn_mapping;
    global $ajax_args, $portals, $APTHOST;
    $isadmin     = (ISADMIN() || ISFOREIGN_ADMIN() ? 1 : 0);
    $results     = array();
    $aggregate   = null;

    if (!$isadmin) {
        if (isset($ajax_args["target_user"])) {
            $target_user = User::LookupByUid($ajax_args["target_user"]);
            if (!$target_user) {
                SPITAJAX_ERROR(1, "No such user");
                return;
            }
            if (!$target_user->SameUser($this_user)) {
                SPITAJAX_ERROR(1, "Not enough permission to view info!");
                return;
            }
        }
        elseif (isset($ajax_args["target_project"])) {
            $target_project = Project::Lookup($ajax_args["target_project"]);
            if (!$target_project) {
                SPITAJAX_ERROR(1, "No such project");
                return;
            }
            $approved = 0;
            
            if (!$target_project->IsMember($this_user, $approved) &&
                $approved) {
                SPITAJAX_ERROR(1, "Not enough permission to view this info!");
                return;
            }
        }
        else {
            $target_user = $this_user;
        }
    }
    elseif (isset($ajax_args["target_project"])) {
        $target_project = Project::Lookup($ajax_args["target_project"]);
        if (!$target_project) {
            SPITAJAX_ERROR(1, "No such project");
            return;
        }
    }  
    elseif (isset($ajax_args["target_user"])) {
        $target_user = User::LookupByUid($ajax_args["target_user"]);
        if (!$target_user) {
            SPITAJAX_ERROR(1, "No such user");
            return;
        }
    }
    if ($isadmin && isset($ajax_args["cluster"])) {
        $aggregate = Aggregate::LookupByNickname($ajax_args["cluster"]);
        if (!$aggregate) {
            SPITAJAX_ERROR(1, "No such cluster");
            return;
        }
    }
    $whereclause = "";

    if (isset($target_project)) {
        $target_idx   = $target_project->pid_idx();
        $whereclause = "where h.pid_idx='$target_idx'";
    }
    elseif (isset($target_user)) {
        $target_idx  = $target_user->idx();
        $whereclause = "where h.creator_idx='$target_idx'";
    }
    if (isset($ajax_args["portalonly"])) {
        if ($whereclause != "") {
            $whereclause = "$whereclause and ";
        }
        else {
            $whereclause = "where ";
        }
        $whereclause .= "servername='$APTHOST' ";
    }
    if (!(isset($ajax_args["min"]) && isset($ajax_args["max"]))) {
        SPITAJAX_ERROR(1, "Must provide min and max");
        return;
    }
    $min = $ajax_args["min"];
    $max = $ajax_args["max"];
    if (!is_numeric($min) || $min < 0) {
        SPITAJAX_ERROR(1, "Bad value for min");
        return;
    }
    if (!is_numeric($max) || $max < 0 || $max < $min) {
        SPITAJAX_ERROR(1, "Bad value for max");
        return;
    }
    # Hand off.
    if ($isadmin && isset($ajax_args["IP"])) {
        return SearchForIP($ajax_args["IP"], $min, $max);
    }
    if ($whereclause != "") {
        $whereclause = "$whereclause and ";
    }
    else {
        $whereclause = "where ";
    }
    if (isset($min)) {
        $whereclause .= "UNIX_TIMESTAMP(h.started) > $min ";
        if (isset($max)) {
            $whereclause .= "and ";
        }
    }
    if (isset($max)) {
        $whereclause .= "UNIX_TIMESTAMP(h.started) < $max ";
    }
    $query_result =
        DBQueryFatal("select h.uuid,h.profile_version,h.created, ".
                 "    h.started,h.destroyed,h.servername, ".
		 "    h.creator,p.uuid as profile_uuid,h.pid,u.email, ".
                 "    h.physnode_count,h.virtnode_count,".
                 "    h.name as instance_name,p.name as profile_name, ".
                 "    truncate(h.physnode_count * ".
                 "      ((UNIX_TIMESTAMP(h.destroyed) - ".
                 "        UNIX_TIMESTAMP(h.started)) / 3600.0),2) as phours, ".
                 "    GROUP_CONCAT(aa.abbreviation) as clusters, ".
                 "    GROUP_CONCAT(aa.nickname) as nicknames ".
		 "  from apt_instance_history as h ".
                 "left join apt_instance_aggregate_history as ia ".
                 "     on ia.uuid=h.uuid ".
                 "left join apt_aggregates as aa on aa.urn=ia.aggregate_urn ".
		 "left join apt_profile_versions as p on ".
		 "     p.profileid=h.profile_id and ".
		 "     p.version=h.profile_version ".
		 "left join geni.geni_users as u on u.uuid=h.creator_uuid ".
                 $whereclause . " " .
		 "group by h.uuid order by h.started desc");

    while ($row = mysql_fetch_array($query_result)) {
        if ($aggregate &&
            strpos($row["nicknames"], $aggregate->nickname()) === FALSE) {
            continue;
        }
        $uuid      = $row["uuid"];
	$pname     = $row["profile_name"];
        $iname     = $row["instance_name"];
	$pproj     = $row["pid"];
	$puuid     = $row["profile_uuid"];
	$created   = DateStringGMT($row["created"]);
	$started   = DateStringGMT($row["started"]);
	$destroyed = DateStringGMT($row["destroyed"]);
	$creator   = $row["creator"];
	$email     = $row["email"];
        $pcount    = $row["physnode_count"];
        $vcount    = $row["virtnode_count"];
        $phours    = $row["phours"];
        $portal    = $portals[$row["servername"]];
        $clusters  = $row["clusters"];
        # Backwards compat.
        if (!isset($pproj)) {
            $pproj = "";
        }
        if (!isset($destroyed)) {
            $destroyed = "";
        }
        if (!isset($iname)) {
            $iname = "&nbsp;";
        }
        
	# If a guest user, use email instead.
	if (isset($email)) {
	    $creator = $email;
	}

        # Save space with array instead of hash.
	$instance =
            array($pname, $pproj, $puuid, $pcount, $vcount,
                  $creator, $started, $destroyed, $phours, $iname,
                  $uuid, $created, $portal, $clusters);
                          
	$results[] = $instance;
    }
    SPITAJAX_RESPONSE($results);    
}

function SearchForIP($ip, $min, $max)
{
    global $this_user, $portals, $urn_mapping;
    $this_uid = $this_user->uid();
    $results = array();
    
    if (!preg_match("/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/", $ip)) {
        SPITAJAX_ERROR(1, "Invalid IP");
        return;
    }
    $webtask = WebTask::CreateAnonymous();
    $retval = SUEXEC($this_uid, "nobody",
		     "websearchip -t " . $webtask->task_id() .
                     " -s $min -e $max -b $ip",
		     SUEXEC_ACTION_IGNORE);
    $webtask->Refresh();
    
    if ($retval != 0) {
        if (!$webtask->exited() || $retval < 0) {
            SUEXECERROR(SUEXEC_ACTION_CONTINUE);
            SPITAJAX_ERROR(-1, "Internal error");
        }
        else {
            SPITAJAX_ERROR($webtask->exitcode(), $webtask->output());
        }
        $webtask->Delete();
        return;
    }
    $current   = $webtask->TaskValue("instance");
    $instances = $webtask->TaskValue("instancelist");
    $webtask->Delete();

    if ($current) {
        #
        # This is a bit hokey, but it lets us show a current experiment
        # in the activity list when searching for an IP, which is handy.
        #
        $instance = Instance::Lookup($current);
        error_log("foo: $min, $max, " . strtotime($instance->started()));
        if ($instance &&
            (strtotime($instance->started()) > $min &&
             strtotime($instance->started()) < $max)) {
            $uuid      = $instance->uuid();
            $iname     = $instance->name();
            $pproj     = $instance->pid();
            $created   = DateStringGMT($instance->created());
            $started   = DateStringGMT($instance->started());
            $destroyed = null;
            $creator   = $instance->creator();
            $pcount    = $instance->physnode_count();
            $vcount    = $instance->virtnode_count();
            $portal    = $portals[$instance->servername()];
            $phours    = round(pcount *
                               ((time() -
                                 strtotime($instance->created())) / 3600.0));

            # Profile Info.
            $profile = Profile::Lookup($instance->profile_id(),
                                       $instance->profile_version());
            if ($profile) {
                $pname = $profile->name();
                $puuid = $profile->uuid();
            }
            $clusters = array();
            foreach ($instance->slivers() as $sliver) {
                $abbreviation = $urn_mapping[$sliver->aggregate_urn()];
                $clusters[]   = $abbreviation;
            }
            $clusters = join(",", $clusters);

            # Backwards compat.
            if (!isset($pproj)) {
                $pproj = "";
            }
            if (!isset($iname)) {
                $iname = "&nbsp;";
            }

            # Save space with array instead of hash.
            $instance =
                array($pname, $pproj, $puuid, $pcount, $vcount,
                      $creator, $started, $destroyed, $phours, $iname,
                      $uuid, $created, $portal, $clusters);
                          
            $results[] = $instance;
        }
    }

    foreach ($instances as $uuid) {
        $instance = InstanceHistory::Lookup($uuid);
        if (!$instance) {
            continue;
        }
        $iname     = $instance->name();
	$pproj     = $instance->pid();
	$created   = DateStringGMT($instance->created());
	$started   = DateStringGMT($instance->started());
	$destroyed = DateStringGMT($instance->destroyed());
	$creator   = $instance->creator();
        $pcount    = $instance->physnode_count();
        $vcount    = $instance->virtnode_count();
        $portal    = $portals[$instance->servername()];
        $phours    = round(pcount *
                           ((strtotime($instance->destroyed()) -
                             strtotime($instance->created())) / 3600.0));

        # Profile Info.
        $profile = Profile::Lookup($instance->profile_id(),
                                   $instance->profile_version());
        if ($profile) {
            $pname = $profile->name();
            $puuid = $profile->uuid();
        }
        $clusters = array();
        foreach ($instance->slivers() as $sliver) {
            $abbreviation = $urn_mapping[$sliver["aggregate_urn"]];
            $clusters[]   = $abbreviation;
        }
        $clusters = join(",", $clusters);

        # Backwards compat.
        if (!isset($pproj)) {
            $pproj = "";
        }
        if (!isset($iname)) {
            $iname = "&nbsp;";
        }

        # Save space with array instead of hash.
	$instance =
            array($pname, $pproj, $puuid, $pcount, $vcount,
                  $creator, $started, $destroyed, $phours, $iname,
                  $uuid, $created, $portal, $clusters);
                          
	$results[] = $instance;
        
    }
    SPITAJAX_RESPONSE($results);    
}

# Local Variables:
# mode:php
# End:
?>
