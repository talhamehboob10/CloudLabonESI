<?php
#
# Copyright (c) 2000-2021 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
chdir("..");
include_once("webtask.php");
include_once("aggregate_defs.php");
chdir("apt");

#
# Return Fixed Endpoint info.
#
function Do_GetFixedEndpoints()
{
    global $this_user, $ajax_args;
    $blob = array();
    $aggregates = Aggregate::AllAggregatesList();
    $radioinfo  = Aggregate::RadioInfoNew();
    
    foreach ($aggregates as $urn => $aggregate) {
        if (! $aggregate->isFE() || $aggregate->disabled()) {
            continue;
        }
        $reservablenodes = $aggregate->ReservableNodes(true);

        $blob[$urn] =
            array("urn"       => $urn,
                  "latitude"  => $aggregate->latitude(),
                  "longitude" => $aggregate->longitude(),
                  "nickname"  => $aggregate->nickname(),
                  "name"      => $aggregate->name(),
                  "typelist"  => $typelist,
                  "radioinfo" => null,
                  # Ask for extended info.
                  "reservable_nodes" => $reservablenodes);
        if (array_key_exists($urn, $radioinfo)) {
            $blob[$urn]["radioinfo"] = $radioinfo[$urn];
        }
    }
    SPITAJAX_RESPONSE($blob);
}

#
# Return Base Station info. All BSs are attached to the MotherShip.
#
function Do_GetBaseStations()
{
    global $this_user, $ajax_args;
    $aggregate = Aggregate::ThisAggregate();
    if (!$aggregate) {
	SPITAJAX_ERROR(-1, "No aggregate info");
	return -1;
    }
    $urn = $aggregate->urn();
    $reservable_nodes = $aggregate->ReservableNodes(true);
    $radioinfo        = Aggregate::RadioInfoNew();
    $locationRadios   = array();
    # Split up radios by location
    foreach ($radioinfo[$urn] as $node_id => &$info) {
        $location = $info["location"];
        if (!array_key_exists($location, $locationRadios)) {
            $locationRadios[$location] = array();
        }
        $locationRadios[$location][$node_id] = $info;
        if (isset($reservable_nodes[$node_id])) {
            $info["available"] = $reservable_nodes[$node_id]["available"];
        }
    }

    #
    # Grab the base station locations,
    #
    $query_result =
        DBQueryFatal("select * from apt_aggregate_radio_locations ".
                     "where itype='BS' and aggregate_urn='$urn'");
    if (!mysql_num_rows($query_result)) {
        SPITAJAX_RESPONSE(null);
        return 0;
    }
    $baseStations = array();
    
    while ($row = mysql_fetch_array($query_result)) {
        $location   = $row["location"];
        $latitude   = $row["latitude"];
        $longitude  = $row["longitude"];
        $streeturl  = $row["streeturl"];

        $baseStations[$location] = array(
            "name"        => $location,
            "latitude"    => $latitude,
            "longitude"   => $longitude,
            "type"        => "Rooftop Base Station",
            "street"      => $streeturl,
            "cluster_urn" => $urn,
            "radioinfo"   => null
        );
        if (array_key_exists($location, $locationRadios)) {
            $baseStations[$location]["radioinfo"] = $locationRadios[$location];
        }
    }
    SPITAJAX_RESPONSE($baseStations);
}

#
# Return Bus information.
#
function Do_GetMobileEndpoints()
{
    global $this_user, $ajax_args;

    $query_result =
        DBQueryFatal("select a.*,b.*,r.description as routename,aas.status ".
                     "   from apt_mobile_aggregates as a ".
                     "left join apt_mobile_buses as b on b.urn=a.urn ".
                     "left join apt_aggregates as aa on aa.urn=a.urn ".
                     "left join apt_aggregate_status as aas on aas.urn=a.urn ".
                     "left join apt_mobile_bus_routes as r on ".
                     "  r.routeid=b.routeid ".
                     "where aa.disabled=0 and ".
                     "      b.busid!='6969' and b.busid!='4209' and ".
                     "      b.busid!='6996' and b.busid!='6970'");
    if (!mysql_num_rows($query_result)) {
        SPITAJAX_RESPONSE(null);
        return 0;
    }
    $buses = array();
    
    while ($row = mysql_fetch_array($query_result)) {
        $urn = $row["urn"];
        
        $blob = array(
            "urn"           => $urn,
            "type"          => $row["type"],
            "busid"         => $row["busid"],
            "last_ping"     => DateStringGMT($row["last_ping"]),
            "status"        => $row["status"],
            "routeid"       => $row["routeid"],
            "routename"     => $row["routename"],
            "route_changed" => DateStringGMT($row["route_changed"]),
            "latitude"      => $row["latitude"],
            "longitude"     => $row["longitude"],
            "speed"         => $row["speed"],
            "heading"       => $row["heading"],
            "location_stamp"=> DateStringGMT($row["location_stamp"]),
            # GPSD data
            "gpsd_stamp"    => DateStringGMT($row["gpsd_stamp"]),
            "gpsd_latitude" => $row["gpsd_latitude"],
            "gpsd_longitude"=> $row["gpsd_longitude"],
            "gpsd_speed"    => $row["gpsd_speed"],
            "gpsd_heading"  => $row["gpsd_heading"],
        );

        #
        # Lets try to determine what buses are free by looking at the local
        # state. To many buses at the end of slow links to ask them anytime
        # a user wants to know (say, from the resource availability page).
        #
        $free_result =
            DBQueryFatal("select status from apt_instance_aggregates as ia ".
                         "where ia.status!='terminated' and ".
                         "      ia.aggregate_urn='$urn'");
        $blob["free"] = (mysql_num_rows($free_result) == 0 ? 1 : 0);
        
        $buses[$row["busid"]] = $blob;
    }

    #
    # Routes we care about. For convenience lets include the experiment
    # uuid holding the route, for the experiment view.
    #
    $routes = array();
    
    $query_result =
        DBQueryFatal("select r.*,ir.uuid from apt_mobile_bus_routes as r ".
                     "left join apt_instance_bus_routes as ir on ".
                     "     ir.routeid=r.routeid ");
    while ($row = mysql_fetch_array($query_result)) {
        $blob = array(
            "routeid"       => $row["routeid"],
            "description"   => $row["description"],
            "experiment"    => $row["uuid"],
        );
        $routes[$row["routeid"]] = $blob;
    }
    $result = array("buses"  => $buses,
                    "routes" => $routes);
    
    SPITAJAX_RESPONSE($result);
}


# Local Variables:
# mode:php
# End:
?>
