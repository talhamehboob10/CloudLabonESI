<?php
#
# Copyright (c) 2000-2015 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
chdir("..");
chdir("apt");

#
# When there's a PubKeys class, this will be a Class function to edit them...
#
function AddKeyAux($target_uid, $keydata, &$error)
{
    global $this_user;
    global $suexec_output, $suexec_output_array;

    #
    # Generate a temporary file and write in the XML goo.
    #
    $filename = tempnam("/tmp", "addpubkey");
    if (! $filename) {
	TBERROR("Could not create temporary filename", 0);
	$error = "Transient error(1); please try again later.";
	return false;
    }
    if (! ($fp = fopen($filename, "w"))) {
	TBERROR("Could not open temp file $xmlname", 0);
	$error = "Transient error(2); please try again later.";
	return false;
    }
    fwrite($fp, $keydata);
    fclose($fp);
    chmod($filename, 0666);

    # Invoke the back-end script as the user if an admin for permissions.
    $suexec_uid = (ISADMIN() ? $this_user->uid() : "nobody");
    $retval = SUEXEC($suexec_uid, "nobody",
                     "webaddpubkey -f -u $target_uid $filename",
                     SUEXEC_ACTION_IGNORE);
    unlink($filename);

    if ($retval) {
	if ($retval < 0) {
	    $error = "Transient error(3, $retval); please try again later.";
	    SUEXECERROR(SUEXEC_ACTION_CONTINUE);
	}
	else {
            $error = "Key could not be parsed";
        }
	return false;
    }
    return true; 
}

#
# Add and Delete SSH keys
#
function Do_AddKey()
{
    global $this_user;
    global $ajax_args;
    $error = "";

    $target_user = $this_user;
    $embedded    = isset($ajax_args["embedded"]) && $ajax_args["embedded"];

    if (!isset($ajax_args["keydata"])) {
	SPITAJAX_ERROR(1, "Missing key data");
	return;
    }
    if (isset($ajax_args["target_uid"])) {
        $target_uid  = $ajax_args["target_uid"];
        $target_user = User::Lookup($target_uid);
        if (!$target_user) {
            SPITAJAX_ERROR(1, "No such user: $target_uid");
            return;
        }
        if (! ($target_user->SameUser($this_user) || ISADMIN())) {
            SPITAJAX_ERROR(1, "No permission to add key for $target_uid");
            return;
        }
    }
    if (!AddKeyAux($target_user->uid(), $ajax_args["keydata"], $error)) {
	SPITAJAX_ERROR(1, $error);
	return;
    }
    SPITAJAX_RESPONSE(0);
    return;
}

function Do_DeleteKey()
{
    global $this_user;
    global $ajax_args;

    $target_user = $this_user;
    $embedded    = isset($ajax_args["embedded"]) && $ajax_args["embedded"];

    if (!isset($ajax_args["index"])) {
	SPITAJAX_ERROR(1, "Missing key index");
	return;
    }
    $index = $ajax_args["index"];
    if (!preg_match('/^\d*$/', $index)) {
	SPITAJAX_ERROR(1, "Invalid key index");
	return;
    }
    if (isset($ajax_args["target_uid"])) {
        $target_uid  = $ajax_args["target_uid"];
        $target_user = User::Lookup($target_uid);
        if (!$target_user) {
            SPITAJAX_ERROR(1, "No such user: $target_uid");
            return;
        }
        if (! ($target_user->SameUser($this_user) || ISADMIN())) {
            SPITAJAX_ERROR(1, "No permission to delete key for $target_uid");
            return;
        }
    }
    $target_idx = $target_user->uid_idx();
    $target_uid = $target_user->uid();
    
    DBQueryFatal("delete from user_pubkeys ".
                 "where uid_idx='$target_idx' and idx='$index' and internal=0");

    #
    # update authkeys files and nodes, but only if user has a real account.
    # The -w option can only be used on real users, and deleting a key does
    # not require anything by the outside script if not a real user; it
    # will complain and die. 
    #
    if (HASREALACCOUNT($target_uid) &&
        SUEXEC("nobody", "nobody",
               "webaddpubkey -w $target_uid", SUEXEC_ACTION_CONTINUE)) {
            SPITAJAX_ERROR(-1, "Internal error regenerating auth keys file");
            return;
    }
    SPITAJAX_RESPONSE(0);
    return;
}

# Local Variables:
# mode:php
# End:
?>
