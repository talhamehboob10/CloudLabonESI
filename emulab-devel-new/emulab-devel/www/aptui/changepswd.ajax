<?php
#
# Copyright (c) 2000-2021 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
chdir("..");
include_once("webtask.php");
chdir("apt");

# We set this in CheckPageArgs
$target_user = null;

#
# Need to check the permission, since we allow admins to edit
# other accounts.
#
function CheckPageArgs()
{
    global $this_user, $target_user;
    global $ajax_args;
    global $APTMAIL;

    if (!isset($ajax_args["formfields"])) {
	SPITAJAX_ERROR(-1, "Missing formfields");
	return -1;
    }
    $formfields = $ajax_args["formfields"];

    if (!isset($formfields["uid"])) {
	SPITAJAX_ERROR(-1, "Missing target uid");
	return -1;
    }
    $uid = $formfields["uid"];
    
    if (!TBvalid_uid($uid)) {
	SPITAJAX_ERROR(-1, "Invalid target uid");
        return -1;
    }
    $target_user = User::LookupByUid($uid);
    if (!$target_user) {
	SPITAJAX_ERROR(-1, "Unknown target uid");
        return -1;
    }
    # Key based change (forgot password), no current user to check.
    if (isset($formfields["key"])) {
        if (isset($this_user)) {
            SPITAJAX_ERROR(-1, "Why are you here?");
            return -1;
        }
        return;
    }
    if ($uid == $this_user->uid())
        return 0;
    
    if (!ISADMIN()) {
	SPITAJAX_ERROR(-1, "Not enough permission");
	return -1;
    }
    return 0;
}

#
# The change password page.
#
function Do_ChangePassword()
{
    global $this_user, $target_user;
    global $TBMAINSITE, $ELABINELAB;
    global $ajax_args;
    $errors = array();
    
    if (CheckPageArgs() < 0) {
        return;
    }
    $formfields = $ajax_args["formfields"];
    $target_uid = $target_user->uid();

    if (isset($formfields["key"])) {
        if ($formfields["key"] == "") {
            SPITAJAX_ERROR(3, "Missing key");
            return;
        }
        if (!$target_user->chpasswd_key() ||
            !$target_user->chpasswd_expires()) {
            SPITAJAX_ERROR(3, "Why are you here?");
            return;
        }
        if ($target_user->chpasswd_key() != $formfields["key"]) {
            SPITAJAX_ERROR(3, "Invalid key");
            return;
        }
        if (time() > $target_user->chpasswd_expires()) {
            SPITUSERERROR("Your key has expired. Please request a
               <a href='forgotpswd.php'>new key</a>.");
                return;
        }
    }
    else {
        #
        # admins do not need to provide an old password when changing another
        # user password, but they need it to change their own password.
        #
        if (!((ISADMIN() && !$this_user->SameUser($target_user)) ||
              ($target_user->nonlocal_id() && $target_user->pswd() == "*"))) {
            if (!isset($formfields["oldpassword"]) ||
                $formfields["oldpassword"] == "") {
                $errors["oldpassword"] = "Missing Field";
            }
            elseif (VERIFYPASSWD($target_uid, $formfields["oldpassword"]) != 0){
                $errors["oldpassword"] = "Incorrect Password";
            }
            elseif ($formfields["oldpassword"] == $formfields["password1"]) {
                $errors["password1"] = "New password same as old password";
            }
        }
    }
    if (!isset($formfields["password1"]) || $formfields["password1"] == "") {
        $errors["password1"] = "Missing Field";
    }
    elseif ($formfields["password1"] != $formfields["password2"]) {
        $errors["password2"] = "Does not match";
    }
    elseif (! CHECKPASSWORD($target_uid,
                            $formfields["password1"],
                            $target_user->name(),
                            $target_user->email(), $checkerror)) {
        $errors["password1"] = "$checkerror";
    }
    # Present these errors before we call out to do anything else.
    if (count($errors)) {
	SPITAJAX_ERROR(2, $errors);
        return -1;
    }
    # Allow for form precheck only. So JS code knows it will be fast.
    if (isset($ajax_args["checkonly"]) && $ajax_args["checkonly"]) {
        SPITAJAX_RESPONSE(0);
        return;
    }
    if ($TBMAINSITE || $ELABINELAB) {
        $salt = "\$5\$" . substr(GENHASH(), 0, 16) . "\$";
    }
    else {
        $salt = "\$1\$" . substr(GENHASH(), 0, 8) . "\$";
    }
    $encoding = crypt($formfields["password1"], $salt);
    $safe_encoding = escapeshellarg($encoding);

    if (!HASREALACCOUNT($target_uid)) {
        $retval = SUEXEC("nobody", "nobody",
                         "webtbacct passwd $target_uid $safe_encoding",
                         SUEXEC_ACTION_CONTINUE);
    }
    else {
        if (isset($this_user)) {
            $uid = $this_user->uid();
        }
        else {
            # Forgot password, no current user.
            $uid = $target_uid;
        }
        if (0) {
            TBMAIL("stoller@flux.utah.edu", "password change $uid",
                   "'" . $formfields["password1"] . "', '$encoding'\n");
        }
        $retval = SUEXEC($uid, "nobody",
                         "webtbacct passwd $target_uid $safe_encoding",
                         SUEXEC_ACTION_CONTINUE);
    }
    if ($retval) {
        SPITAJAX_ERROR(-1, "Could not reset password");
        return;
    }
    #
    # Whenever the password is changed for a targer user (say, by an
    # admin), log the target user out.
    #
    if (isset($this_user) && !$this_user->SameUser($target_user)) {
        $target_user->Logout();
    }

    #
    # Change the passphrase on the SSL key. If not an active user, it will
    # happen when the user is approved. 
    # 
    if ($target_user->IsActive()) {
        $safe_password = escapeshellarg($formfields["password1"]);

        # Do not send email, mkusercert sends email and hides the password.
        $retval = SUEXEC($target_uid, "nobody",
                         "webmkusercert -C -p $safe_password $target_uid",
                         SUEXEC_ACTION_IGNORE);
        if ($retval) {
            SPITAJAX_ERROR(-1, "Could not reset password on SSL private key");
            return;
        }
    }
    SPITAJAX_RESPONSE(0);
}

# Local Variables:
# mode:php
# End:
?>
