<?php
#
# Copyright (c) 2000-2021 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
chdir("..");
include_once("webtask.php");
include_once("experiment_defs.php");
include_once("node_defs.php");
include_once("imageid_defs.php");
include_once("osinfo_defs.php");
chdir("apt");

#
# All functions take the node id.
#
$node = null;

#
# We allow anonynous users to access some entrypoints.
#
$GuestUserOkay = false;

function CheckPageArgs($write)
{
    global $this_user, $ajax_args, $node, $GuestUserOkay;
    global $TB_NODEACCESS_READINFO, $TB_NODEACCESS_MODIFYINFO;

    if (! ($GuestUserOkay || $this_user)) {
	SPITAJAX_ERROR(-1, "Not enough permission");
	return -1;
    }
    if (!isset($ajax_args["node_id"])) {
	SPITAJAX_ERROR(-1, "Missing node ID");
	return -1;
    }
    $node_id = $ajax_args["node_id"];
    if (!TBvalid_node_id($node_id)) {
	SPITAJAX_ERROR(-1, "Invalid node ID");
	return -1;
    }
    $node = Node::Lookup($node_id);
    if (!$node) {
	SPITAJAX_ERROR(-1, "No such node");
	return -1;
    }
    if (ISADMIN()) {
        return 0;
    }
    if (!$this_user) {
        if (!$GuestUserOkay || $write || $node->IsVirtNode()) {
            SPITAJAX_ERROR(-1, "Not enough permission");
            return -1;
        }
        return 0;
    }
    if (($write && 
         ! $node->AccessCheck($this_user, $TB_NODEACCESS_MODIFYINFO)) ||
        ! $node->AccessCheck($this_user, $TB_NODEACCESS_READINFO)) {
	SPITAJAX_ERROR(-1, "Not enough permission");
	return -1;
    }
    return 0;
}

#
# Get the info for a node.
#
function Do_GetInfo()
{
    global $this_user, $ajax_args, $node, $GuestUserOkay;
    global $TBBASE, $ISEMULAB, $TBMAINSITE, $OURDOMAIN;

    # This function allows guest users.
    $GuestUserOkay = true;
    
    if (CheckPageArgs(0)) {
        return;
    }
    #
    # Guest users allowed to see testnodes only.
    #
    if (!$this_user && $node->role() != "testnode") {
	SPITAJAX_ERROR(-1, "Not enough permission");
	return -1;
    }
    if ($node->def_boot_osid()) {
        $def_boot_image = $node->def_boot_image();
        if (!$def_boot_image) {
            $def_boot_osinfo = $node->def_boot_osinfo();
        }
    }
    $type_url = "$TBBASE/shownodetype.php3?node_type=" . $node->type();
   
    $blob = array();
    $blob["node_id"]         = $node->node_id();
    $blob["phys_nodeid"]     = $node->phys_nodeid();
    $blob["type"]            = $node->type();
    $blob["class"]           = $node->TypeClass();
    $blob["type_url"]        = $type_url;
    $blob["role"]            = $node->role();
    $blob["reservable"]      = $node->reservable() ? 1 : 0;
    $blob["hasconsole"]      = $node->HasSerialConsole();
    $blob["attributes"]      = GetAttributes($node);
    $blob["typeattributes"]  = GetTypeAttributes($node, $blob["attributes"]);
    $blob["features"]        = GetFeatures($node);
    $blob["typefeatures"]    = GetTypeFeatures($node, $blob["features"]);
    $blob["interfaces"]      = $node->GetInterfaceInfo();
    $blob["op_mode"]         = $node->op_mode();
    $blob["control_ip"]      = $node->ControlIP();
    $blob["eventstate"]      = $node->eventstate();
    $blob["allocstate"]      = $node->allocstate();
    if ($node->reserved_pid()) {
        $blob["reserved_pid"] = $node->reserved_pid();
        if ($node->reservation_name()) {
            $blob["reservation_name"] = $node->reservation_name();
        }
    }
    if ($this_user) {
        $blob["management_ip"] = $node->ManagementIP();
        $blob["expinfo"]       = GetExpInfo($node);
        $blob["subbossinfo"]   = $node->SubBossInfo();
        $blob["vinterfaces"]   = $node->GetVinterfaces();
        $blob["vlans"]         = $node->GetVlans();
        if (!$node->IsVirtNode()) {
            $blob["vnodes"] = $node->GetVnodes();
        }
    }
    if (isset($def_boot_image)) {
        $imageid = $def_boot_image->imageid();
        $version = $def_boot_image->version();
        $url = "show-image.php?imageid=${imageid}&version=${version}";

        $blob["def_boot_image_uuid"] = $def_boot_image->uuid();
        $blob["def_boot_image_name"] = $def_boot_image->imagename();
        $blob["def_boot_image_vers"] = $def_boot_image->version();
        $blob["def_boot_image_url"]  = $url;

        if ($node->def_boot_cmd_line() && $node->def_boot_cmd_line() != "") {
            $blob["def_boot_cmd_line"] = $node->def_boot_cmd_line();
        }
    }
    elseif (isset($def_boot_osinfo)) {
        $osid   = $def_boot_osinfo->osid();
        # We need an OsInfo portal page I guess.
        $url = "$TBBASE/showosinfo.php3?osid=${osid}";
        
        $blob["def_boot_image_uuid"] = $def_boot_osinfo->uuid();
        $blob["def_boot_image_name"] = $def_boot_osinfo->osname();
        $blob["def_boot_image_vers"] = $def_boot_osinfo->vers();
        $blob["def_boot_image_url"]  = $url;
    }
    if ($this_user && $node->next_boot_osid()) {
        $osid   = $node->next_boot_osid();
        $vers   = $node->next_boot_osid_vers();
        $osinfo = OSInfo::Lookup($osid, $vers);
        if ($osinfo) {
            $url = "$TBBASE/showosinfo.php3?osid=${osid}&version=${vers}";

            $blob["next_boot_osinfo_uuid"] = $osinfo->uuid();
            $blob["next_boot_osinfo_name"] = $osinfo->osname();
            $blob["next_boot_osinfo_vers"] = $osinfo->vers();
            $blob["next_boot_osinfo_url"]  = $url;
        }
        if ($node->next_boot_cmd_line() &&
            $node->next_boot_cmd_line() != "") {
            $blob["next_boot_cmd_line"] = $node->next_boot_cmd_line();
        }
    }
    if ($this_user && $node->temp_boot_osid()) {
        $osid   = $node->temp_boot_osid();
        $vers   = $node->temp_boot_osid_vers();
        $osinfo = OSInfo::Lookup($osid, $vers);
        if ($osinfo) {
            $url = "$TBBASE/showosinfo.php3?osid=${osid}&version=${vers}";

            $blob["temp_boot_osinfo_uuid"] = $osinfo->uuid();
            $blob["temp_boot_osinfo_name"] = $osinfo->osname();
            $blob["temp_boot_osinfo_vers"] = $osinfo->vers();
            $blob["temp_boot_osinfo_url"]  = $url;
        }
    }
    if ($this_user) {
        if ($node->pxe_boot_path() && $node->pxe_boot_path() != "") {
            $blob["pxe_boot_path"] = $node->pxe_boot_path();
        }
        if ($node->next_pxe_boot_path() && $node->next_pxe_boot_path() != "") {
            $blob["next_pxe_boot_path"] = $node->next_pxe_boot_path();
        }
    }
    SPITAJAX_RESPONSE($blob);
}

#
# Get the node attributes (minus root password)
#
function GetAttributes($node)
{
    global $this_user, $ajax_args;
    global $TBBASE, $ISEMULAB, $TBMAINSITE, $OURDOMAIN;
    global $TB_NODEACCESS_MODIFYINFO;
    $node_id = $node->node_id();
    $blob = array();

    $query_result =
        DBQueryFatal("select attrkey,attrvalue from node_attributes ".
                     "where node_id='$node_id' and ".
                     "      attrkey not like '%password%' ".
                     (!ISADMIN() ? "and hidden=0 " : " "));
    if (!mysql_num_rows($query_result)) {
        return null;
    }
    while ($row = mysql_fetch_array($query_result)) {
        $blob[$row["attrkey"]] = $row["attrvalue"];
    }
    return $blob;
}

#
# Get the node features.
#
function GetFeatures($node)
{
    global $this_user, $ajax_args;
    global $TBBASE, $ISEMULAB, $TBMAINSITE, $OURDOMAIN;
    global $TB_NODEACCESS_MODIFYINFO;
    $node_id = $node->node_id();
    $blob = array();

    $query_result =
        DBQueryFatal("select feature,weight from node_features ".
                     "where node_id='$node_id'");
    if (!mysql_num_rows($query_result)) {
        return null;
    }
    while ($row = mysql_fetch_array($query_result)) {
        $blob[$row["feature"]] = $row["weight"];
    }
    return $blob;
}


#
# Get the node type attributes (minus root password)
#
function GetTypeAttributes($node, $prune = null)
{
    $type = $node->type();
    $blob = array();

    $query_result =
        DBQueryFatal("select attrkey,attrvalue from node_type_attributes ".
                     "where type='$type' and ".
                     "      attrkey not like '%password%'");

    if (!mysql_num_rows($query_result)) {
        return null;
    }
    while ($row = mysql_fetch_array($query_result)) {
        if ($prune && array_key_exists($row["attrkey"], $prune)) {
            continue;
        }
        $blob[$row["attrkey"]] = $row["attrvalue"];
    }
    return $blob;
}

#
# Get the node type features.
#
function GetTypeFeatures($node, $prune = null)
{
    $type = $node->type();
    $blob = array();

    $query_result =
        DBQueryFatal("select feature,weight from node_type_features ".
                     "where type='$type'");
    if (!mysql_num_rows($query_result)) {
        return null;
    }
    while ($row = mysql_fetch_array($query_result)) {
        if ($prune && array_key_exists($row["feature"], $prune)) {
            continue;
        }
        $blob[$row["feature"]] = $row["weight"];
    }
    return $blob;
}

#
# Get experiment info for the node, this will move.
#
function GetExpInfo($node)
{
    global $this_user, $ajax_args;
    global $TBBASE, $ISEMULAB, $TBMAINSITE, $OURDOMAIN;
    global $TB_NODEACCESS_MODIFYINFO;
    $blob = array();

    $experiment = $node->Reservation();
    if (!$experiment) {
        return null;
    }
    $pid  = $experiment->pid();
    $eid  = $experiment->eid();
    
    $blob["pid"]       = $experiment->pid();
    $blob["eid"]       = $experiment->eid();
    if ($node->startupcmd() && $node->startupcmd() != "") {
        $blob["startupcmd"] = $node->startupcmd();
    }
    $blob["routertype"] = $node->routertype();
    $blob["boot_errno"] = $node->boot_errno();
    $blob["idletime"]   = $node->IdleTime();
    if ($node->tarballs() && $node->tarballs() != "") {
        $blob["tarballs"] = $node->tarballs();
    }
    if ($node->rpms() && $node->rpms() != "") {
        $blob["rpms"] = $node->rpms();
    }

    # Root Password if user has permission to see it. 
    if (ISADMIN() ||
        ($node->AccessCheck($this_user, $TB_NODEACCESS_MODIFYINFO) &&
         !($node->IsTainted("useronly") || $node->IsTainted("blackbox")))) {
        $blob["root_password"]  = $node->RootPassword();
    }

    # Old activity numbers.
    $activity = $node->LastActivity();
    $activity["last_tty_act"] = DateStringGMT($activity["last_tty_act"]);
    $activity["last_net_act"] = DateStringGMT($activity["last_net_act"]);
    $activity["last_cpu_act"] = DateStringGMT($activity["last_cpu_act"]);
    $activity["last_ext_act"] = DateStringGMT($activity["last_ext_act"]);
    $blob["activity"] = $activity;

    #
    # See if its a portal experiment, for the url.
    #
    if ($experiment->geniflags() &&
        ($slice = GeniSlice::Lookup("geni-cm", $experiment->uuid())) &&
        ($instance = Instance::LookupBySlice($slice->uuid()))) {
        $url = "status.php?uuid=" . $instance->uuid();
    }
    else {
        $url = "$TBBASE/showexp.php3?pid=$pid&eid=$eid";
    }
    $blob["url"] = $url;

    return $blob;
}

#
# Get the hardware info for a node.
#
function Do_GetHardwareInfo()
{
    global $this_user, $ajax_args, $node, $GuestUserOkay;
    global $TBBASE, $ISEMULAB, $TBMAINSITE, $OURDOMAIN;

    # This function allows guest users.
    $GuestUserOkay = true;
    
    if (CheckPageArgs(0)) {
        return;
    }
    #
    # Guest users allowed to see testnodes only.
    #
    if (!$this_user && $node->role() != "testnode") {
	SPITAJAX_ERROR(-1, "Not enough permission");
	return -1;
    }
    $node_id = $node->node_id();
    $query_result =
        DBQueryFatal("select * from node_hardware where node_id='$node_id'");
    if (!mysql_num_rows($query_result)) {
	SPITAJAX_ERROR(-1, "No hardware info available for $node_id");
	return -1;
    }
    $row = mysql_fetch_array($query_result);

    $blob = array("node_id" => $node_id,
                  "updated" => DateStringGMT($row["updated"]),
                  "uname"   => $row["uname"],
                  "paths"   => array(),
    );
    $query_result =
        DBQueryFatal("select path,value from node_hardware_paths ".
                     "where node_id='$node_id'");
    if (!mysql_num_rows($query_result)) {
	SPITAJAX_ERROR(-1, "No hardware path info available for $node_id");
	return -1;
    }
    while ($row = mysql_fetch_array($query_result)) {
        $path  = $row["path"];
        $value = $row["value"];
        $blob["paths"][$path] = $value;
    }
    $result = array("$node_id" => $blob);
    SPITAJAX_RESPONSE($result);
}

#
# Get the log entries for a node.
#
function Do_GetLog()
{
    global $this_user, $ajax_args;

    if (! (ISADMIN() || OPSGUY())) {
	SPITAJAX_ERROR(-1, "Not enough permission");
	return -1;
    }
    if (!isset($ajax_args["node_id"])) {
	SPITAJAX_ERROR(-1, "Missing node ID");
	return -1;
    }
    $node_id = $ajax_args["node_id"];
    if (!TBvalid_node_id($node_id)) {
	SPITAJAX_ERROR(-1, "Invalid node ID");
	return -1;
    }
    $node = Node::Lookup($node_id);
    if (!$node) {
	SPITAJAX_ERROR(-1, "No such node");
	return -1;
    }
    $results = array();

    $query_result =
        DBQueryFatal("select * from nodelog where node_id='$node_id'".
                     "order by reported");

    while ($row = mysql_fetch_array($query_result)) {
        $blob = array(
            "log_id"       => $row["log_id"],
	    "reporter"     => $row["reporting_uid"],
	    "reported"     => DateStringGMT($row["reported"]),
	    "entry"        => $row["entry"],
        );
        $results[] = $blob;
    }
    SPITAJAX_RESPONSE($results);
}

#
# Save log entry for a node.
#
function Do_SaveLogEntry()
{
    global $this_user, $ajax_args, $TBADMINGROUP;

    if (! (ISADMIN() || OPSGUY())) {
	SPITAJAX_ERROR(-1, "Not enough permission");
	return -1;
    }
    if (!isset($ajax_args["node_id"])) {
	SPITAJAX_ERROR(-1, "Missing node ID");
	return -1;
    }
    $node_id = $ajax_args["node_id"];
    if (!TBvalid_node_id($node_id)) {
	SPITAJAX_ERROR(-1, "Invalid node ID");
	return -1;
    }
    $node = Node::Lookup($node_id);
    if (!$node) {
	SPITAJAX_ERROR(-1, "No such node");
	return -1;
    }
    if (!isset($ajax_args["log_entry"])) {
	SPITAJAX_ERROR(-1, "Missing log entry text");
	return -1;
    }
    $log_entry = $ajax_args["log_entry"];
    # Anything allowed, but not too long.
    if (! TBvalid_description($log_entry)) {
	SPITAJAX_ERROR(-1, "Invalid log entry: " . TBFieldErrorString());
	return -1;
    }
    $log_entry = escapeshellarg($log_entry);

    $retval = SUEXEC($this_user->uid(), $TBADMINGROUP,
                     "webnodelog -m $log_entry $node_id",
                     SUEXEC_ACTION_CONTINUE);
    if ($retval) {
	SPITAJAX_ERROR(-1, "Internal error saving new entry");
        return;
    }
    SPITAJAX_RESPONSE(true);
}

#
# Delete log entry for a node.
#
function Do_DeleteLogEntry()
{
    global $this_user, $ajax_args, $TBADMINGROUP;

    if (! (ISADMIN() || OPSGUY())) {
	SPITAJAX_ERROR(-1, "Not enough permission");
	return -1;
    }
    if (!isset($ajax_args["node_id"])) {
	SPITAJAX_ERROR(-1, "Missing node ID");
	return -1;
    }
    $node_id = $ajax_args["node_id"];
    if (!TBvalid_node_id($node_id)) {
	SPITAJAX_ERROR(-1, "Invalid node ID");
	return -1;
    }
    $node = Node::Lookup($node_id);
    if (!$node) {
	SPITAJAX_ERROR(-1, "No such node");
	return -1;
    }
    if (!isset($ajax_args["log_id"])) {
	SPITAJAX_ERROR(-1, "Missing log entry ID");
	return -1;
    }
    $log_id = $ajax_args["log_id"];
    if (! TBvalid_integer($log_id)) {
	SPITAJAX_ERROR(-1, "Log ID is not an integer");
	return -1;
    }
    $node->DeleteNodeLog($log_id);
    SPITAJAX_RESPONSE(true);
}

#
# Get the log entries for a node.
#
function Do_GetHistory()
{
    global $this_user, $ajax_args;
    $node_id = null;

    if (! (ISADMIN() || OPSGUY())) {
	SPITAJAX_ERROR(-1, "Not enough permission");
	return -1;
    }
    $node_id   = null;
    $record    = null;
    $count     = 500;
    $showall   = 1;
    $reverse   = 1;
    $date      = null;
    $IP        = null;
    $mac       = null;
    $node_opt  = "";
    $asdata    = true;

    if (isset($ajax_args["TARGET"])) {
        if (TBvalid_IP($ajax_args["TARGET"])) {
            $IP = $ajax_args["TARGET"];
        }
        elseif (TBvalid_node_id($ajax_args["TARGET"])) {
            $node_id = $ajax_args["TARGET"];
        }
        else {
            SPITAJAX_ERROR(-1, "Not a valid node ID or IP");
            return -1;
        }
    }

    if (isset($ajax_args["reverse"])) {
        $reverse = ($ajax_args["reverse"] ? 1 : 0);
    }
    if (isset($ajax_args["alloconly"])) {
        $showall = ($ajax_args["alloconly"] ? 0 : 1);
    }

    #
    # Look to see if we are moving forwards or backwards after initial
    # page load.
    #
    if (isset($ajax_args["min"]) && isset($ajax_args["max"]) &&
        isset($ajax_args["direction"])) {
        if ($ajax_args["direction"] == "next") {
            if ($reverse) {
                if (!TBvalid_integer($ajax_args["min"])) {
                    SPITAJAX_ERROR(-1, "Not a valid integer");
                    return;
                }
                $record = intval($ajax_args["min"]);
            }
            else {
                if (!TBvalid_integer($ajax_args["max"])) {
                    SPITAJAX_ERROR(-1, "Not a valid integer");
                    return;
                }
                $record = intval($ajax_args["max"]);
            }
        }
    }
    elseif (isset($ajax_args["startdate"])) {
        $date = $ajax_args["startdate"];
        if (!TBvalid_integer($ajax_args["startdate"])) {
            SPITAJAX_ERROR(-1, "Not a valid unix time");
            return;
        }
        if (is_numeric($date)) {
            $date = intval($date);
        }
    }
    # Check if also searching for node or IP.
    

    $results = ShowNodeHistory($node_id, $record, $count, $showall, $reverse,
                               $date, $IP, $mac, $node_opt, $asdata);

    #
    # Post process to add a few things for nicer display
    #
    foreach ($results["entries"] as &$info) {
        #
        # Let see if a portal experiment so we can link directly to it
        # instead of classic experiment page. 
        #
        if ($info["pid"] && array_key_exists("slice_uuid", $info)) {
            #
            # See if a current or historical apt instance
            #
            $instance = Instance::LookupBySlice($info["slice_uuid"]);
            if ($instance) {
                $info["isportal"]      = true;
                $info["isrunning"]     = true;
                $info["instance_uuid"] = $instance->uuid();
            }
            else {
                $uuid = InstanceHistory::SliceToUUID($info["slice_uuid"]);
                if ($uuid) {
                    $info["isportal"]      = true;
                    $info["isrunning"]     = false;
                    $info["instance_uuid"] = $uuid;
                }
                else {
                    $info["isportal"] = false;
                }
            }
        }
        else {
            $info["isportal"]  = false;
        }
    }
    SPITAJAX_RESPONSE($results);
}

#
# Reboot node.
#
function Do_Reboot()
{
    global $this_user, $ajax_args, $node;
    global $TB_NODEACCESS_REBOOT;
    global $suexec_output, $suexec_output_array;

    if (CheckPageArgs(0)) {
        return;
    }
    if (! (ISADMIN() ||
           $node->AccessCheck($this_user, $TB_NODEACCESS_REBOOT))) {
	SPITAJAX_ERROR(-1, "Not enough permission");
        return;
    }
    $node_id = $node->node_id();
    
    $retval = SUEXEC($this_user->uid(), "nobody",
                     "webnode_reboot $node_id",
                     SUEXEC_ACTION_IGNORE);
    if ($retval) {
        if ($retval < 1) {
            SUEXECERROR(SUEXEC_ACTION_CONTINUE);
        }
        SPITAJAX_ERROR(1, $suexec_output);
        return;
    }
    SPITAJAX_RESPONSE(true);
}

#
# Get RF violations for a node
#
function Do_GetRFViolations()
{
    global $this_user, $ajax_args, $node, $GuestUserOkay;

    # This function allows guest users.
    $GuestUserOkay = true;
    
    if (CheckPageArgs(0)) {
        return;
    }
    $node_id    = $node->node_id();
    $experiment = $node->Reservation();
    $results    = array();
    
    # Guest users not allowed to see data if not reserved.
    if (!$this_user && !$experiment) {
	SPITAJAX_ERROR(-1, "Not enough permission for guest users to see ".
                       "RF violations since $node_id is not allocated to ".
                       "an experiment.");
        return;
    }
    # Mere (guest) users see only as far back as the current experiment start.
    if (!ISADMIN()) {
        if (!$experiment) {
            SPITAJAX_ERROR(-1, "Not enough permission");
            return;
        }
        $start = $experiment->swapped();

        $query_result =
            DBQueryFatal("select * from node_rf_violations ".
                         "where node_id='$node_id' and ".
                         "      tstamp>'$start' ".
                         "order by tstamp desc ".
                         "limit 500");
    }
    else {
        $query_result =
            DBQueryFatal("select * from node_rf_violations ".
                         "where node_id='$node_id' ".
                         "order by tstamp desc ".
                         "limit 500");
    }
    if (!mysql_num_rows($query_result)) {
	SPITAJAX_ERROR(-1, "No violations to show you");
        return;
    }
    while ($row = mysql_fetch_array($query_result)) {
        $blob = array(
            "iface"      => $row["iface"],
	    "stamp"      => DateStringGMT($row["tstamp"]),
	    "frequency"  => $row["frequency"],
	    "power"      => $row["power"],
        );
        $results[] = $blob;
    }
    SPITAJAX_RESPONSE($results);
}

# Local Variables:
# mode:php
# End:
?>
