<?php
#
# Copyright (c) 2000-2018, 2020 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
chdir("..");
include_once("lease_defs.php");
include_once("imageid_defs.php");
include_once("blockstore_defs.php");
include_once("node_defs.php");
include_once("webtask.php");
chdir("apt");
include_once("dataset_defs.php");
include_once("instance_defs.php");

#
# Server side of creating a dataset.
#
function Do_CreateDataSet()
{
    global $this_user;
    global $ajax_args;
    global $DBFieldErrstr, $TBDIR, $APTBASE, $embedded;
    global $suexec_output, $suexec_output_array;
    global $urn_mapping;

    $this_idx   = $this_user->uid_idx();
    $this_uid   = $this_user->uid();
    # Allow for form precheck only. So JS code knows it will be fast. 
    $checkonly  = isset($ajax_args["checkonly"]) && $ajax_args["checkonly"];
    $embedded   = isset($ajax_args["embedded"]) && $ajax_args["embedded"];

    if (!isset($ajax_args["formfields"])) {
	SPITAJAX_ERROR(1, "Missing formfields");
	return;
    }
    $formfields = $ajax_args["formfields"];
    $errors  = array();
    $options = "";
    
    $required = array("dataset_pid", "dataset_name", "dataset_type",
		      "dataset_fstype", "dataset_read", "dataset_modify");

    foreach ($required as $field) {
	if (!isset($formfields[$field]) || $formfields[$field] == "") {
	    $errors[$field] = "Missing field";
	}
    }
    if (count($errors)) {
	SPITAJAX_ERROR(2, $errors);
	return;
    }

    if (!TBvalid_pid($formfields["dataset_pid"])) {
	$errors["dataset_pid"] = $DBFieldErrstr;
    }
    $project = Project::LookupByPid($formfields["dataset_pid"]);
    if (!$project) {
	$errors["dataset_pid"] = "No such project";
    }
    elseif (!ISADMIN() &&
	    (!$project->IsMember($this_user, $isapproved) || !$isapproved)) {
	$errors["dataset_pid"] = "Not a project member";
    }
    $pid = $project->pid();
    
    if (!TBvalid_vnode_id($formfields["dataset_name"])) {
	$errors["dataset_name"] = $DBFieldErrstr;
    }
    # Temporary until I solve the HRN (OU) 64 char limit.
    elseif (strlen($formfields["dataset_name"]) > 24) {
        $errors["dataset_name"] = "Too long: maximum length 24 chars";
    }
    if (! ($formfields["dataset_type"] == "stdataset" ||
	   $formfields["dataset_type"] == "ltdataset" ||
	   $formfields["dataset_type"] == "imdataset")) {
	$errors["dataset_type"] = "Illegal value";
    }
    else {
	$options .= " -t " . $formfields["dataset_type"];
    }
    if ($formfields["dataset_type"] == "stdataset") {
	if (!isset($formfields["dataset_expires_gmt"]) ||
	    $formfields["dataset_expires_gmt"] == "") {
	    $errors["dataset_expires"] = "Missing field";
	}
	elseif (!strtotime($formfields["dataset_expires_gmt"])) {
	    $errors["dataset_expires"] = "Illegal value";
	}
	else {
	    $options .= " -e " .
		escapeshellarg($formfields["dataset_expires_gmt"]);
	}
    }
    if ($formfields["dataset_type"] != "imdataset") {
        if (! preg_match('/^(none|ext2|ext3|ext4|ufs|ufs2)$/',
                         $formfields["dataset_fstype"])) {
            $errors["dataset_fstype"] = "Illegal value";
        }
        elseif ($formfields["dataset_fstype"] != "none") {
            $options .= " -f " . $formfields["dataset_fstype"];
        }
        if (! (isset($formfields["dataset_size"]) &&
               $formfields["dataset_size"] != "")) {
            $errors["dataset_size"] = "Missing field";
        }
        elseif (! preg_match('/^\d+(MB|GB|TB|MiB|GiB|TiB)$/i',
                         $formfields["dataset_size"])) {
            $errors["dataset_size"] = "Illegal value";
        }
        else {
            $options .= " -s " . $formfields["dataset_size"];
        }
        if (!$embedded) {
            if (! (isset($formfields["dataset_cluster"]) &&
                   $formfields["dataset_cluster"] != "")) {
                $errors["dataset_cluster"] = "Missing field";
            }
            elseif (!array_key_exists($formfields["dataset_cluster"],
                                      $urn_mapping)) {
                $errors["dataset_cluster"] = "Illegal value";
            }
            else {
                $options .= " -a '" . $formfields["dataset_cluster"] . "' ";
            }
        }
    }
    else {
        #
        # Not going to allow descriptor only image datasets, must
        # provide the node and bsname, and the instance if on the APT path.
        #
        if (! (isset($formfields["dataset_node"]) &&
            $formfields["dataset_node"] != "")) {
            $errors["dataset_node"] = "Must provide a node";
        }
        elseif (! (isset($formfields["dataset_bsname"]) &&
               $formfields["dataset_bsname"] != "")) {
            $errors["dataset_bsname"] = "Must provide bsname";
        }
        else {
            $nodeid = $formfields["dataset_node"];
            $bsname = $formfields["dataset_bsname"];

            if (!TBvalid_node_id($nodeid)) {
                $errors["dataset_node"] = TBFieldErrorString();
            }
            elseif (!TBvalid_vnode_id($bsname)) {
                $errors["dataset_bsname"] = TBFieldErrorString();
            }
            if (!count($errors)) {
                if ($embedded) {
                    if ($node = Node::Lookup($nodeid)) {
                        $reservation = $node->Reservation();
                        if (!$reservation ||
                            !$reservation->pid() == $pid) {
                            $errors["dataset_node"] =
                                "Node not reserved to an experiment in the ".
                            "same project as your dataset";
                        }
                        else {
                            $blockstore =
                                $reservation->LookupBlockstore($bsname);
                            if (!$blockstore) {
                                $errors["dataset_bsname"] =
                                    "No such blockstore";
                            }
                            elseif ($blockstore['fixed'] != $node->VirtName()) {
                                $errors["dataset_bsname"] =
                                    "Blockstore does not exist on node $nodeid";
                            }
                        }
                    }
                    else {
                        $errors["dataset_node"] = "No such node";
                    }
                }
                else {
                    if (! (isset($formfields["dataset_instance"]) &&
                           $formfields["dataset_instance"] != "")) {
                        $errors["dataset_instance"] = "Must provide instance";
                    }
                    elseif (!preg_match("/^\w+\-\w+\-\w+\-\w+\-\w+$/",
                                        $formfields["dataset_instance"])) {
                        $errors["dataset_instance"] = "Invalid instance uuid";
                    }
                    elseif ($instance =
                            Instance::Lookup($formfields["dataset_instance"])){
                        $options .= " -i " . $instance->uuid();
                    }
                    else {
                        $errors["dataset_instance"] = "No such instance";
                    }
                }
                $options .= " -I ${nodeid},${bsname}";
            }
        }
    }
    # Permission bits.
    if ($formfields["dataset_read"] != "global" &&
        $formfields["dataset_read"] != "project") {
        $errors["dataset_read"] = "Illegal value";
    }
    else {
        $options .= " -R " . $formfields["dataset_read"];
    }
    if ($formfields["dataset_modify"] != "creator" &&
        $formfields["dataset_modify"] != "project") {
        $errors["dataset_modify"] = "Illegal value";
    }
    else {
        $options .= " -W " . $formfields["dataset_modify"];
    }
    if (count($errors)) {
	SPITAJAX_ERROR(2, $errors);
	return;
    }
    if ($checkonly) {
	SPITAJAX_RESPONSE(0);
	return;
    }
    $options .= " " . escapeshellarg($pid . "/" .
				     $formfields["dataset_name"]);

    # Need a webtask for policy messages.
    $webtask = WebTask::CreateAnonymous();
    
    if ($embedded) {
        $wopt    = "-C -b -T " . $webtask->task_id();
	$command = "webcreatedataset $wopt $options";
    }
    else {
        $wopt     = "-t " . $webtask->task_id();
	$command  = "webmanage_dataset $wopt -- create $options";
    }
    
    $retval = SUEXEC($this_uid, $project, $command, SUEXEC_ACTION_IGNORE);
    if ($retval) {
        $webtask->Refresh();
        if (!$webtask->exited() || $retval < 0) {
            SUEXECERROR(SUEXEC_ACTION_CONTINUE);
            SPITAJAX_ERROR(-1, "Internal error creating dataset");
        }
        else {
            SPITAJAX_ERROR(1, "Cannot create dataset: " . $webtask->output());
        }
        $webtask->Delete();
        return;
    }
    if ($embedded) {
        if ($formfields["dataset_type"] == "imdataset") {
            $dataset = ImageDataset::LookupByName($project,
                                                  $formfields["dataset_name"]);
        }
        else {
            $dataset = Lease::LookupByName($project,
                                           $formfields["dataset_name"]);
        }
    }
    else {
	$dataset = Dataset::LookupByName($project, $formfields["dataset_name"]);
    }
    if (!$dataset) {
        $webtask->Delete();
	SPITAJAX_ERROR(-1, "Could not find dataset after creation");
	return 1;
    }
    $dataset_uuid = $dataset->uuid();
    $blob = array("dataset_uuid" => $dataset_uuid, "needapproval" => 0);
    
    #
    # If the dataset was not approved, we want to notify the user instead
    # of zapping over to the show dataset page, since we are going to lose
    # the reason. At some point we probably want to store this with the
    # dataset (or local lease).
    #
    $webtask->Refresh();
    if ($webtask->TaskValue("needapproval")) {
        $blob["needapproval"] = 1;
        if ($webtask->TaskValue("unapproved_reason")) {
            $blob["unapproved_reason"] =
                $webtask->TaskValue("unapproved_reason");
        }
    }
    $webtask->Delete();
    SPITAJAX_RESPONSE($blob);
}

#
# Server side of modifying a dataset.
#
function Do_ModifyDataSet()
{
    global $this_user;
    global $ajax_args;
    global $DBFieldErrstr, $TBDIR, $APTBASE, $embedded;
    global $suexec_output, $suexec_output_array;

    $this_idx   = $this_user->uid_idx();
    $this_uid   = $this_user->uid();
    # Allow for form precheck only. So JS code knows it will be fast. 
    $checkonly  = isset($ajax_args["checkonly"]) && $ajax_args["checkonly"];
    $embedded   = isset($ajax_args["embedded"]) && $ajax_args["embedded"];

    if (!isset($ajax_args["formfields"])) {
	SPITAJAX_ERROR(1, "Missing formfields");
	return;
    }
    $formfields = $ajax_args["formfields"];
    $errors     = array();

    if (!isset($formfields["dataset_uuid"])) {
	SPITAJAX_ERROR(1, "Missing dataset uuid");
	return 1;
    }
    $dataset_uuid = $formfields["dataset_uuid"];

    #
    # Either a local lease or a remote dataset. 
    #
    $dataset = Lease::Lookup($dataset_uuid);
    if (!$dataset) {
	$dataset = ImageDataset::Lookup($dataset_uuid);
	if (!$dataset) {
            $dataset = Dataset::Lookup($dataset_uuid);
        }
    }
    if (!$dataset) {
	SPITAJAX_ERROR(1, "Unknown dataset");
	return;
    }
    $project = $dataset->Project();
    
    if (!(ISADMIN() ||
          $dataset->AccessCheck($this_user, $LEASE_ACCESS_MODIFYINFO))) {
	SPITAJAX_ERROR(1, "Not enough permission");
	return;
    }
    if (isset($formfields["dataset_read"])) {
	if ($formfields["dataset_read"] != "global" &&
	    $formfields["dataset_read"] != "project") {
	    $errors["dataset_read"] = "Illegal value";
	}
    }
    if (isset($formfields["dataset_modify"])) {
	if ($formfields["dataset_modify"] != "creator" &&
	    $formfields["dataset_modify"] != "project") {
	    $errors["dataset_modify"] = "Illegal value";
	}
    }
    $nodeid = null;
    if ($dataset->type() == "imdataset") {
        if ($nodeid) {
            if (!(ISADMIN() ||
                  $dataset->AccessCheck($this_user, $LEASE_ACCESS_MODIFY))) {
                SPITAJAX_ERROR(1, "Not enough permission");
                return;
            }
        }
        #
        # Node and BS name are optional.
        #
        if ((isset($formfields["dataset_node"]) &&
             $formfields["dataset_node"] != "") ||
            (isset($formfields["dataset_bsname"]) &&
             $formfields["dataset_bsname"] != "")) {
            if (! (isset($formfields["dataset_node"]) &&
                   $formfields["dataset_node"] != "")) {
                $errors["dataset_node"] = "Must also provide a node";
            }
            elseif (! (isset($formfields["dataset_bsname"]) &&
                   $formfields["dataset_bsname"] != "")) {
                $errors["dataset_bsname"] = "Must also provide bsname";
            }
            else {
                $nodeid = $formfields["dataset_node"];
                $bsname = $formfields["dataset_bsname"];

                if (!TBvalid_node_id($nodeid)) {
                    $errors["dataset_node"] = TBFieldErrorString();
                }
                elseif (!TBvalid_vnode_id($bsname)) {
                    $errors["dataset_bsname"] = TBFieldErrorString();
                }
            }
            if (!count($errors)) {
                if ($embedded || $dataset->islocal()) {
                    if ($node = Node::Lookup($nodeid)) {
                        $reservation = $node->Reservation();
                        if (!$reservation ||
                            $reservation->pid() != $dataset->pid()) {
                            $errors["dataset_node"] =
                                "Node not reserved to an experiment in the ".
                                "same project as your dataset";
                        }
                        else {
                            $blockstore =
                                $reservation->LookupBlockstore($bsname);
                            if (!$blockstore ||
                                $blockstore['fixed'] != $node->VirtName()) {
                                $errors["dataset_bsname"] =
                                    "Blockstore does not exist on node $nodeid";
                            }
                        }
                    }
                    else {
                        $errors["dataset_node"] = "No such node";
                    }
                }
                else {
                    if (! (isset($formfields["dataset_instance"]) &&
                           $formfields["dataset_instance"] != "")) {
                        $errors["dataset_instance"] = "Must provide instance";
                    }
                    elseif (!preg_match("/^\w+\-\w+\-\w+\-\w+\-\w+$/",
                                        $formfields["dataset_instance"])) {
                        $errors["dataset_instance"] = "Invalid instance uuid";
                    }
                    elseif ($instance =
                            Instance::Lookup($formfields["dataset_instance"])){
                        $instance_uuid = $instance->uuid();
                    }
                    else {
                        $errors["dataset_instance"] = "No such instance";
                    }
                }
            }
        }
    }
    if (count($errors)) {
	SPITAJAX_ERROR(2, $errors);
	return;
    }
    if ($checkonly) {
	SPITAJAX_RESPONSE(0);
	return;
    }
    $leaseid = $dataset->pid() . "/" . $dataset->id();
    $opt     = "";

    if (isset($formfields["dataset_read"])) {
        $perm = $formfields["dataset_read"];
        if ($perm != $dataset->read_access()) {
            $opt .= "-R $perm ";
        }
    }
    if (isset($formfields["dataset_modify"])) {
        $perm = $formfields["dataset_modify"];
        if ($perm != $dataset->write_access()) {
            $opt .= "-W $perm ";
        }
    }
    if ($opt != "") {
        if ($dataset->islocal()) {
            $command = $dataset->grantCommand() . " ";
            $retval = SUEXEC($this_uid, $project,
                             "$command $opt $leaseid",
                             SUEXEC_ACTION_CONTINUE);
            if ($retval) {
                SPITAJAX_ERROR(1, $suexec_output);
                return;
            }
        }
        else {
            $webtask = WebTask::CreateAnonymous();
            $command = $dataset->grantCommand($webtask);
            $retval = SUEXEC($this_uid, $project,
                             "$command $opt $leaseid",
                             SUEXEC_ACTION_IGNORE);
            if ($retval) {
                $webtask->Refresh();
                if (!$webtask->exited() || $retval < 0) {
                    SUEXECERROR(SUEXEC_ACTION_CONTINUE);
                    SPITAJAX_ERROR(-1, "Internal error modifying ".
                                   "dataset permissions");
                }
                else {
                    SPITAJAX_ERROR(1, "Cannot modify dataset permissions: " .
                                   $webtask->output());
                }
                $webtask->Delete();
                return;
            }
            $webtask->Delete();
        }
    }
    if ($dataset->type() == "imdataset" && $nodeid) {
        $safe_nodeid = escapeshellarg($nodeid);
        $safe_bsname = escapeshellarg($bsname);
        $dname       = $dataset->id();
        $pid         = $dataset->pid();

        if ($embedded || $dataset->islocal()) {
            $retval = SUEXEC($this_uid, $project,
                             "webclone_image -b $safe_bsname ".
                             "$dname $safe_nodeid",
                             SUEXEC_ACTION_IGNORE);
            if ($retval) {
                if ($retval < 1) {
                    SUEXECERROR(SUEXEC_ACTION_CONTINUE);
                }
                SPITAJAX_ERROR(1, $suexec_output);
                return;
            }
        }
        else {
            $webtask = WebTask::CreateAnonymous();
            $retval = SUEXEC($this_uid, $project,
                             "webmanage_dataset -t ". $webtask->task_id() .
                             " snapshot -i $instance_uuid ".
                             "   -b $safe_bsname $pid/$dname $safe_nodeid",
                             SUEXEC_ACTION_IGNORE);
            if ($retval) {
                $webtask->Refresh();
                if (!$webtask->exited() || $retval < 0) {
                    SUEXECERROR(SUEXEC_ACTION_CONTINUE);
                    SPITAJAX_ERROR(-1,
                                   "Internal error taking dataset snapshot");
                }
                else {
                    SPITAJAX_ERROR(1, "Cannot snapshot dataset: " .
                                   $webtask->output());
                }
                $webtask->Delete();
                return;
            }
            $webtask->Delete();
        }
    }
    SPITAJAX_RESPONSE("show-dataset.php?uuid=$dataset_uuid");
}

function Do_DeleteDataset()
{
    global $this_user;
    global $ajax_args;
    global $suexec_output, $suexec_output_array, $APTBASE;
    
    $this_idx = $this_user->uid_idx();
    $this_uid = $this_user->uid();

    if (!isset($ajax_args["uuid"])) {
	SPITAJAX_ERROR(1, "Missing uuid");
	return;
    }
    #
    # Either a local lease or a remote dataset. 
    #
    $dataset = Lease::Lookup($ajax_args["uuid"]);
    if (!$dataset) {
	$dataset = ImageDataset::Lookup($ajax_args["uuid"]);
	if (!$dataset) {
            $dataset = Dataset::Lookup($ajax_args["uuid"]);
            $islease = 0;
        }
    }
    if (!$dataset) {
	SPITAJAX_ERROR(1, "Unknown dataset");
	return;
    }
    $project = $dataset->Project();
    
    if (!(ISADMIN() ||
          $dataset->AccessCheck($this_user, $LEASE_ACCESS_DESTROY))) {
	SPITAJAX_ERROR(1, "Not enough permission");
	return;
    }

    #
    # Invoke backend.
    #
    if ($dataset->islocal()) {
        $command = $dataset->deleteCommand();
        $retval = SUEXEC($this_uid, $project, $command,
                         SUEXEC_ACTION_IGNORE);
        if ($retval != 0) {
            if ($retval < 0) {
                SUEXECERROR(SUEXEC_ACTION_CONTINUE);
            }
            $error = "Transient error; please try again later";
	
            if ($retval && count($suexec_output_array)) {
                $error = $suexec_output;
            }
            SPITAJAX_ERROR(1, $error);
            return;
        }
    }
    else {
        $webtask = WebTask::CreateAnonymous();
        $command = $dataset->deleteCommand($webtask);
        $retval = SUEXEC($this_uid, $project, $command,
                         SUEXEC_ACTION_IGNORE);
        if ($retval) {
            $webtask->Refresh();
            if (!$webtask->exited() || $retval < 0) {
                SUEXECERROR(SUEXEC_ACTION_CONTINUE);
                SPITAJAX_ERROR(-1, "Internal error deleting dataset");
            }
            else {
                SPITAJAX_ERROR(1, "Cannot delete dataset: " .
                               $webtask->output());
            }
            $webtask->Delete();
            return;
        }
        $webtask->Delete();
    }
    SPITAJAX_RESPONSE("landing.php");
}

function Do_ApproveDataset()
{
    global $this_user;
    global $ajax_args;
    global $suexec_output, $suexec_output_array, $APTBASE;
    
    $this_idx = $this_user->uid_idx();
    $this_uid = $this_user->uid();

    if (!isset($ajax_args["uuid"])) {
	SPITAJAX_ERROR(1, "Missing uuid");
	return;
    }
    $dataset_uuid = $ajax_args["uuid"];
    #
    # Either a local lease or a remote dataset. 
    #
    $dataset = Lease::Lookup($dataset_uuid);
    if (!$dataset) {
        $dataset = Dataset::Lookup($dataset_uuid);
    }
    if (!$dataset) {
	SPITAJAX_ERROR(1, "Unknown dataset");
	return;
    }
    if (!ISADMIN()) {
	SPITAJAX_ERROR(1, "Not enough permission");
	return;
    }
    if ($dataset->state() != "unapproved") {
	SPITAJAX_ERROR(1, "Dataset does not need to be approved.");
	return;
    }
    if ($dataset->islocal()) {
        $retval = SUEXEC($this_uid, $dataset->Project(),
                         "webapprovelease " .
                         $dataset->pid() . "/" .
                         $dataset->gid() . "/" . $dataset->lease_id(),
                         SUEXEC_ACTION_CONTINUE);
        if ($retval != 0) {
            $error = "Transient error; please try again later";
	
            if ($retval && count($suexec_output_array)) {
                $error = $suexec_output;
            }
            SPITAJAX_ERROR(1, $error);
            return;
        }
    }
    else {
        $webtask = WebTask::CreateAnonymous();
    
        $retval = SUEXEC($this_uid, $dataset->Project(),
                         "webmanage_dataset -t ". $webtask->task_id() .
                         " approve " . $dataset->pid() . "/" . $dataset->id(),
                         SUEXEC_ACTION_IGNORE);
        if ($retval) {
            $webtask->Refresh();
            if (!$webtask->exited() || $retval < 0) {
                SUEXECERROR(SUEXEC_ACTION_CONTINUE);
                SPITAJAX_ERROR(-1, "Internal error approving dataset");
            }
            else {
                SPITAJAX_ERROR(1, "Cannot approve dataset: " .
                               $webtask->output());
            }
            $webtask->Delete();
            return;
        }
        $webtask->Delete();
    }
    SPITAJAX_RESPONSE("show-dataset.php?uuid=$dataset_uuid");
}

function Do_RefreshDataset()
{
    global $this_user;
    global $ajax_args;
    global $suexec_output, $suexec_output_array, $APTBASE;
    
    $this_idx = $this_user->uid_idx();
    $this_uid = $this_user->uid();

    if (!isset($ajax_args["uuid"])) {
	SPITAJAX_ERROR(1, "Missing uuid");
	return;
    }
    $uuid    = $ajax_args["uuid"];
    $dataset = Dataset::Lookup($uuid);
    if (!$dataset) {
	SPITAJAX_ERROR(1, "Unknown dataset");
	return;
    }
    if (!(ISADMIN() ||
          $dataset->AccessCheck($this_user, $LEASE_ACCESS_READINFO))) {
	SPITAJAX_ERROR(1, "Not enough permission");
	return;
    }

    #
    # Invoke backend.
    #
    $webtask  = WebTask::CreateAnonymous();
    
    $retval = SUEXEC($this_uid, $dataset->Project(),
		     "webmanage_dataset -t ". $webtask->task_id() . 
                     " refresh " . $dataset->pid() . "/" . $dataset->id(),
		     SUEXEC_ACTION_IGNORE);
    if ($retval) {
        $webtask->Refresh();
        if (!$webtask->exited() || $retval < 0) {
            SUEXECERROR(SUEXEC_ACTION_CONTINUE);
            SPITAJAX_ERROR(-1, "Internal error refreshing dataset");
        }
        else {
            SPITAJAX_ERROR(1, "Cannot refresh dataset info: " .
                           $webtask->output());
        }
        $webtask->Delete();
        return;
    }
    $webtask->Delete();
    SPITAJAX_RESPONSE(0);
}

function Do_ExtendDataset()
{
    global $this_user;
    global $ajax_args;
    global $suexec_output, $suexec_output_array, $APTBASE;
    
    $this_idx = $this_user->uid_idx();
    $this_uid = $this_user->uid();
    $islease  = 1;

    if (!isset($ajax_args["uuid"])) {
	SPITAJAX_ERROR(1, "Missing uuid");
	return;
    }
    #
    # Either a local lease or a remote dataset. 
    #
    $dataset = Lease::Lookup($ajax_args["uuid"]);
    if (!$dataset) {
	$dataset = Dataset::Lookup($ajax_args["uuid"]);
	$islease = 0;
    }
    if (!$dataset) {
	SPITAJAX_ERROR(1, "Unknown dataset");
	return;
    }
    if (!(ISADMIN() ||
          $dataset->AccessCheck($this_user, $LEASE_ACCESS_MODIFYINFO))) {
	SPITAJAX_ERROR(1, "Not enough permission");
	return;
    }

    #
    # For Portal datasets, we use a webtask. The native CLI does not
    # to webtasks.
    #
    if ($islease) {
	$command  = "webextendlease ";
        $command .= $dataset->pid() . "/" . $dataset->id();
        
        $retval = SUEXEC($this_uid, $dataset->Project(), $command,
                         SUEXEC_ACTION_IGNORE);
        if ($retval != 0) {
            if ($retval < 0) {
                SUEXECERROR(SUEXEC_ACTION_CONTINUE);
            }
            $error = "Transient error; please try again later";
	
            if ($retval && count($suexec_output_array)) {
                $error = $suexec_output_array;
            }
            SPITAJAX_ERROR(1, $error);
            return;
        }
    }
    else {
        $webtask  = WebTask::CreateAnonymous();
        $retval = SUEXEC($this_uid, $dataset->Project(),
                         "webmanage_dataset -t ". $webtask->task_id() .
                         " extend ". $dataset->pid() . "/" . $dataset->id(),
                         SUEXEC_ACTION_IGNORE);
        if ($retval) {
            $webtask->Refresh();
            if (!$webtask->exited() || $retval < 0) {
                SUEXECERROR(SUEXEC_ACTION_CONTINUE);
                SPITAJAX_ERROR(-1, "Internal error extending dataset");
            }
            else {
                SPITAJAX_ERROR(1, "Cannot extend dataset: " .
                               $webtask->output());
            }
            $webtask->Delete();
            return;
        }
        $webtask->Delete();
    }
    $dataset_uuid = $dataset->uuid();
    SPITAJAX_RESPONSE("show-dataset.php?uuid=$dataset_uuid");
}

function Do_GetInfo()
{
    global $this_user;
    global $ajax_args;
    
    $this_idx = $this_user->uid_idx();
    $this_uid = $this_user->uid();
    $islease  = 1;

    if (!isset($ajax_args["uuid"])) {
	SPITAJAX_ERROR(1, "Missing uuid");
	return;
    }
    #
    # Either a local lease or a remote dataset. 
    #
    $dataset = Lease::Lookup($ajax_args["uuid"]);
    if (!$dataset) {
	$dataset = Dataset::Lookup($ajax_args["uuid"]);
	$islease = 0;
    }
    if (!$dataset) {
	SPITAJAX_ERROR(1, "Unknown dataset");
	return;
    }
    if (!(ISADMIN() ||
          $dataset->AccessCheck($this_user, $LEASE_ACCESS_READINFO))) {
	SPITAJAX_ERROR(1, "Not enough permission");
	return;
    }
    $blob = array();
    if ($dataset->state() == "busy" ||
        ($dataset->state() == "unapproved" && $dataset->locked())) {
        $blob["state"] = "allocating";
    }
    else {
        $blob["state"] = $dataset->state();
    }
    $blob["size"] = $dataset->size() ? $dataset->size() : 0;

    # A local lease via Classic interface (embedded).
    if ($islease) {
        SPITAJAX_RESPONSE($blob);
        return;
    }

    #
    # If we were generating an image. 
    #
    $webtask = $dataset->WebTask();
    if (!$webtask) {
	SPITAJAX_ERROR(-1, "Internal error getting webtask");
	return;
    }
    if ($webtask) {
        $taskdata = $webtask->TaskData();
        #
        # Size is in KB to avoid bigint problems. But kill the KB.
        # 
        if (isset($taskdata["image_size"])) {
            if (preg_match("/^(\d+)KB$/",
                           $taskdata["image_size"], $matches)) {
                $taskdata["image_size"] = $matches[1]; 
            }
            $blob["image_size"] = $taskdata["image_size"];
        }
        else {
            $blob["image_size"] = 0;
        }
        $blob["image_status"] = $taskdata["image_status"];
        if (isset($taskdata["copyback_uuid"])) {
            $blob["copyback_uuid"] = $taskdata["copyback_uuid"];
        }
        if ($webtask->exited()) {
            $blob["exited"]   = $webtask->exited();
            $blob["exitcode"] = $webtask->exitcode();
            
            if (isset($taskdata["errmsg"])) {
                $blob["errmsg"] = $taskdata["errmsg"];
            }
            elseif (isset($taskdata["output"])) {
                $blob["errmsg"] = $taskdata["output"];
            }
        }

        #
        # Lets put the node status in too. The backend has helpfully told us
        # the aggregate and node to track down the status.
        #
        if (isset($taskdata["instance"]) &&
            isset($taskdata["aggregate_urn"]) &&
            isset($taskdata["client_id"])) {
            $instance = Instance::Lookup($taskdata["instance"]);
            if (!$instance) {
                SPITAJAX_ERROR(-1, "Instance is gone");
                return;
            }
            $sliver = InstanceSliver::Lookup($instance,
                                             $taskdata["aggregate_urn"]);
            if (!$sliver) {
                SPITAJAX_ERROR(-1, "Sliver is gone");
                return;
            }
            foreach ($sliver->StatusArray() as $status) {
                if (isset($status["sliver_data"]) &&
                    $status["client_id"] == $taskdata["client_id"]) {
                    $blob["node_status"] = $status["sliver_details"]["rawstate"];
                    break;
                }
            }
        }
    }
    SPITAJAX_RESPONSE($blob);
}

# Local Variables:
# mode:php
# End:
?>
