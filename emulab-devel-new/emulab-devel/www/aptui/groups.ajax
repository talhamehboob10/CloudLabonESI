<?php
#
# Copyright (c) 2000-2019 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
chdir("..");
chdir("apt");
include_once("profile_defs.php");
include_once("instance_defs.php");
include_once("ajax-routines.ajax");

# We set this in CheckPageArgs
$target_group = null;

#
# Need to check the permission, since we allow admins to mess with
# other accounts.
#
function CheckPageArgs()
{
    global $this_user, $target_group;
    global $ajax_args;
    global $TB_PROJECT_READINFO;

    if (!isset($ajax_args["pid"])) {
	SPITAJAX_ERROR(-1, "Missing target pid");
	return -1;
    }
    if (!isset($ajax_args["gid"])) {
	SPITAJAX_ERROR(-1, "Missing target gid");
	return -1;
    }
    $pid = $ajax_args["pid"];
    $gid = $ajax_args["gid"];
    
    if (!TBvalid_pid($pid)) {
	SPITAJAX_ERROR(-1, "Invalid target pid");
        return -1;
    }
    if (!TBvalid_pid($gid)) {
	SPITAJAX_ERROR(-1, "Invalid target gid");
        return -1;
    }
    $target_group = Group::LookupByPidGid($pid, $gid);
    
    if (!$target_group) {
        sleep(2);
	SPITAJAX_ERROR(-1, "Unknown target group");
        return -1;
    }
    if (!ISADMIN() && !ISFOREIGN_ADMIN() && 
        !$target_group->AccessCheck($this_user, $TB_PROJECT_READINFO)) {
	SPITAJAX_ERROR(-1, "Not enough permission");
	return -1;
    }
    return 0;
}

#
# Server side of creating a new group
#
function Do_CreateGroup()
{
    global $this_user;
    global $ajax_args;
    global $DBFieldErrstr;
    global $TB_PROJECT_MAKEGROUP;

    $this_idx   = $this_user->uid_idx();
    $this_uid   = $this_user->uid();
    # Allow for form precheck only. So JS code knows it will be fast. 
    $checkonly  = isset($ajax_args["checkonly"]) && $ajax_args["checkonly"];

    if (!isset($ajax_args["formfields"])) {
	SPITAJAX_ERROR(1, "Missing formfields");
	return;
    }
    $formfields = $ajax_args["formfields"];
    $errors   = array();
    $required = array("project", "group_leader", "group_id",
                      "group_description");

    foreach ($required as $field) {
	if (!isset($formfields[$field]) || $formfields[$field] == "") {
	    $errors[$field] = "Missing field";
	}
    }
    if (count($errors)) {
	SPITAJAX_ERROR(2, $errors);
	return;
    }
    # Project
    if (!TBvalid_pid($formfields["project"])) {
	$errors["project"] = $DBFieldErrstr;
    }
    $project = Project::LookupByPid($formfields["project"]);
    if (!$project) {
	$errors["project"] = "No such project";
    }
    elseif (!ISADMIN() &&
            !$project->AccessCheck($this_user, $TB_PROJECT_MAKEGROUP)) {
        $errors["project"] = "No permission to create groups";
    }
    $pid = $project->pid();

    # Group leader.
    if (!TBvalid_uid($formfields["group_leader"])) {
	$errors["group_leader"] = $DBFieldErrstr;
    }
    else {
        $leader = User::Lookup($formfields["group_leader"]);
        if (!$leader) {
            $errors["group_leader"] = "No such leader";
        }
        elseif (! ($project->IsMember($leader, $isapproved) && $isapproved)) {
            $errors["group_leader"] = "Leader is not a member of project";
        }
    }
    # Group Name.
    # XXX Ack, gids are just like pids; no underscore. 
    if (!TBvalid_newgid($formfields["group_id"])) {
	$errors["group_id"] = $DBFieldErrstr;
    }
    else {
        $group = Group::LookupByPidGid($pid, $formfields["group_id"]);
        if ($group) {
            $errors["group_id"] = "Already in use";
        }
    }
    # Description.
    if (!TBvalid_description($formfields["group_description"])) {
	$errors["group_description"] = $DBFieldErrstr;
    }
    if (count($errors)) {
	SPITAJAX_ERROR(2, $errors);
	return;
    }
    if ($checkonly) {
	SPITAJAX_RESPONSE(0);
	return;
    }

    #
    # Build up argument array to pass along.
    #
    $args = array();
    $args["project"]   = $project->pid_idx();
    $args["group_id"]  = $formfields["group_id"];
    $args["group_description"] = $formfields["group_description"];
    $args["group_leader"] = $leader->uid();

    if (! ($newgroup = Group::Create($project, $this_uid, $args, $errors))) {
	SPITAJAX_ERROR(2, $errors);
        return;
    }
    $gid_idx = $newgroup->gid_idx();
    SPITAJAX_RESPONSE("show-group.php?group=$gid_idx");
}

function Do_DeleteGroup()
{
    global $this_user, $target_group;
    global $TB_PROJECT_DELGROUP;
    global $suexec_output, $suexec_output_array;

    if (CheckPageArgs()) {
        return;
    }
    if (! $target_group->AccessCheck($this_user, $TB_PROJECT_DELGROUP)) {
	SPITAJAX_ERROR(-1, "You are not allowed to delete this group");
	return -1;
    }
    # Check to see if there are any active experiments. Abort if there are.
    if ($target_group->ExperimentList(0)) {
        SPITAJAX_ERROR(-1, "There are active experiments in the group");
        return;
    }
    $uid      = $this_user->uid();
    $project  = $target_group->Project();
    $unix_gid = $project->unix_gid();
    $pid      = $project->pid();
    $gid_idx  = $target_group->gid_idx();
    
    if (SUEXEC($uid, $unix_gid,
               "webrmgroup $gid_idx", SUEXEC_ACTION_CONTINUE)) {
        SPITAJAX_ERROR(-1, "Internal error deleting group");
        return;
    }
    SPITAJAX_RESPONSE("show-project.php?project=$pid");
}

function Do_ExperimentList()
{
    global $this_user, $target_group;

    if (CheckPageArgs()) {
        return;
    }
    $results = ExperimentList("group", $target_group);
    SPITAJAX_RESPONSE($results);
}

function Do_ClassicExperimentList()
{
    global $this_user, $target_group;

    if (CheckPageArgs()) {
        return;
    }
    $results = ClassicExperimentList("group", $target_group);
    SPITAJAX_RESPONSE($results);
}

function Do_ClassicProfileList()
{
    global $this_user, $target_group;

    if (CheckPageArgs()) {
        return;
    }
    $results = ClassicExperimentList("group", $target_group, "inactive");
    SPITAJAX_RESPONSE($results);
}

function Do_ProfileList()
{
    global $this_user, $target_group;

    if (CheckPageArgs()) {
        return;
    }
    $results = ProfileList("group", $target_group);
    SPITAJAX_RESPONSE($results);
}

function Do_MemberList()
{
    global $this_user, $target_group;
    global $newTrustMap, $TB_PROJECT_ADDUSER;

    if (CheckPageArgs()) {
        return;
    }
    $members     = array();
    $nonmembers  = array();
    # We want *all* members including leader and unapproved.
    $memberlist    = $target_group->MemberList(0, 1);
    $nonmemberlist = $target_group->NonMemberList();
    $leader        = $target_group->GetLeader();
    # Canapprove is a proxy for group_root or better.
    $statsokay     = (ISADMIN() ||
                      $target_group->AccessCheck($this_user,
                                                 $TB_PROJECT_ADDUSER));

    foreach ($memberlist as $user) {
        $membership = $target_group->MemberShipInfo($user);
        
        $blob = array();
        $blob["uid"]      = $user->uid();
        $blob["name"]     = $user->name();
        $blob["email"]    = $user->email();
        $blob["joined"]   = DateStringGMT($membership["date_applied"]);
        #
        # Need to tag the group leader explicitly.
        #
        if ($user->SameUser($leader)) {
            $blob["trust"]    = "leader";
        }
        else {
            $blob["trust"]    = $newTrustMap[$membership["trust"]];
        }
        $blob["approved"] = ($target_group->UserTrust($user) ==
                             TBDB_TRUSTSTRING_NONE ? 0 : 1);

        # Can the current user delete this user from the group.
        $blob["candelete"]= 
            (ISADMIN() ||
             $target_group->CanDeleteUser($this_user, $user) ? 1 : 0);

        if ($statsokay) {
            list($pcount, $phours) = Instance::MonthsUsage($user,$target_group);
            if ($phours) {
                $blob["usage"] = array("pcount" => $pcount,
                                       "phours" => intval($phours));
            }
        }
        $members[$user->uid()] = $blob;
    }
    foreach ($nonmemberlist as $user) {
        $blob = array();
        $blob["uid"]      = $user->uid();
        $blob["name"]     = $user->name();
        $blob["email"]    = $user->email();
        $nonmembers[$user->uid()] = $blob;
    }
    $results = array("members"    => $members,
                     "nonmembers" => $nonmembers);
    
    SPITAJAX_RESPONSE($results);
}

function Do_GroupProfile()
{
    global $this_user, $target_group;

    if (CheckPageArgs()) {
        return;
    }
    $results = array();
    $leader  = $target_group->GetLeader();

    $results["pid"]         = $target_group->pid();
    $results["pid_idx"]     = $target_group->pid_idx();
    $results["gid"]         = $target_group->gid();
    $results["gid_idx"]     = $target_group->gid_idx();
    $results["leader"]      = $target_group->leader();
    $results["leader_idx"]  = $target_group->leader_idx();
    $results["leader_name"] = $leader->name();
    $results["created"]     = DateStringGMT($target_group->created());
    $results["description"] = $target_group->description();

    SPITAJAX_RESPONSE($results);
}

function Do_EditMembership()
{
    global $this_user, $target_group, $ajax_args;
    global $newTrustMap, $TB_PROJECT_ADDUSER, $TB_PROJECT_BESTOWGROUPROOT;

    if (CheckPageArgs()) {
        return;
    }
    $pid = $target_group->pid();
    $gid = $target_group->gid();
    $isproject = ($pid == $gid ? 1 : 0);

    if (!$target_group->AccessCheck($this_user, $TB_PROJECT_ADDUSER)) {
	SPITAJAX_ERROR(-1, "You are not allowed to manage group membership");
	return -1;
    }
    if (!isset($ajax_args["action"])) {
	SPITAJAX_ERROR(-1, "Missing action");
	return -1;
    }
    $action = $ajax_args["action"];
    if (! ($action == "approve" || $action == "add" ||
           $action == "deny" || $action == "remove")) {
	SPITAJAX_ERROR(-1, "Invalid action");
	return -1;
    }
    if ($isproject && $action != "remove") {
	SPITAJAX_ERROR(-1, "Invalid action for project default group");
	return -1;
    }
    if (!isset($ajax_args["users"])) {
	SPITAJAX_ERROR(-1, "Missing target user list");
	return -1;
    }
    if (!is_array($ajax_args["users"])) {
	SPITAJAX_ERROR(-1, "Target user list is not an array");
	return -1;
    }
    $users = $ajax_args["users"];

    foreach ($users as $uid => $trust) {
        if (!TBvalid_uid($uid)) {
            SPITAJAX_ERROR(-1, "Invalid target user uid: $uid");
            return -1;
        }
        $target_user = User::LookupByUid($uid);
        if (!$target_user) {
            SPITAJAX_ERROR(-1, "Unknown target user uid: $uid");
            return -1;
        }
        #
        # User may not be heading up active experiments in the group.
        #
        $explist = $target_user->ExperimentList(1, $target_group);
        if (count($explist)) {
            SPITAJAX_ERROR(-1, "User is still heading up experiments: $uid");
            return -1;
        }
        if ($action == "remove") {
            # Check permission to do this. This is really a project test.
            if (!ISADMIN() &&
    	        !$target_group->CanDeleteUser($this_user, $target_user)) {
                SPITAJAX_ERROR(-1, "Not allowed to remove user: $uid");
                return -1;
            }
        }
        else {
            # Check trust values unless removing from the group/project.
            if (!array_key_exists($trust, $newTrustMap)) {
                SPITAJAX_ERROR(-1, "Invalid privilege: $trust");
                return -1;
            }
            $trust = $newTrustMap[$trust];

            #
            # If changing to manager privs, then make sure current user can
            # bestow manager.
            #
            if ($trust == TBDB_TRUSTSTRING_GROUPROOT && !ISADMIN() && 
                !$target_group->AccessCheck($this_user,
                                            $TB_PROJECT_BESTOWGROUPROOT)) {
                SPITAJAX_ERROR(-1,
                               "You are not allowed to bestow manager privs");
                return -1;
            }
        }
    }
    reset($users);
    foreach ($users as $uid => $trust) {
        $target_user = User::LookupByUid($uid);
        if (!$target_user) {
            SPITAJAX_ERROR(-1, "Unknown target user uid: $uid");
            return -1;
        }
        if ($isproject) {
            $retval = SUEXEC($this_user->uid(), $pid,
                             "webrmuser -p $pid $uid",
                             SUEXEC_ACTION_CONTINUE);
        }
        else {
            $option = ($action == "approve" ? "-m" :
                       $action == "add" ? "-a" : "-r");
            $args = "$pid:$gid";
            if ($action == "add" || $action == "approve") {
                $trust = $newTrustMap[$trust];
                $args .= ":$trust";
            }
            $retval = SUEXEC($this_user->uid(), $pid,
                             "webmodgroups $option $args $uid",
                             SUEXEC_ACTION_CONTINUE);
        }
        if ($retval) {
            SPITAJAX_ERROR(-1, "Error updating user membership for $uid");
            return;
        }
    }
    SPITAJAX_RESPONSE("success");
}

function Do_EditPrivs()
{
    global $this_user, $target_group, $ajax_args;
    global $newTrustMap, $TB_PROJECT_EDITGROUP, $TBADMINGROUP;
    global $TB_PROJECT_BESTOWGROUPROOT;

    if (CheckPageArgs()) {
        return;
    }
    if (!$target_group->AccessCheck($this_user, $TB_PROJECT_EDITGROUP)) {
	SPITAJAX_ERROR(-1, "You are not allowed to edit privs");
	return -1;
    }
    if (!isset($ajax_args["priv"])) {
	SPITAJAX_ERROR(-1, "Missing target priv");
	return -1;
    }
    if (!array_key_exists($ajax_args["priv"], $newTrustMap)) {
	SPITAJAX_ERROR(-1, "Invalid priv");
	return -1;
    }
    if (!isset($ajax_args["user_uid"])) {
	SPITAJAX_ERROR(-1, "Missing target user uid");
	return -1;
    }
    if (!TBvalid_uid($ajax_args["user_uid"])) {
	SPITAJAX_ERROR(-1, "Invalid target user uid");
	return -1;
    }
    $target_user = User::LookupByUid($ajax_args["user_uid"]);
    if (!$target_user) {
	SPITAJAX_ERROR(-1, "Unknown target user uid");
	return -1;
    }
    $this_uid = $this_user->uid();
    $user_uid = $target_user->uid();
    $trust    = $newTrustMap[$ajax_args["priv"]];
    $pid      = $target_group->pid();
    $gid      = $target_group->gid();

    #
    # If adding with manager privs, then make sure current user can
    # bestow manager.
    #
    if ($trust == TBDB_TRUSTSTRING_GROUPROOT && !ISADMIN() && 
        !$target_group->AccessCheck($this_user, $TB_PROJECT_BESTOWGROUPROOT)) {
	SPITAJAX_ERROR(-1, "You are not allowed to bestow manager privs");
	return -1;
    }

    # Create the user if it is not yet approved.
    if ($target_user->status() == TBDB_USERSTATUS_UNAPPROVED) {
	$target_user->SetStatus(TBDB_USERSTATUS_ACTIVE);

	$retval = SUEXEC($this_uid, $TBADMINGROUP,
			 "webtbacct add $user_uid",
			 SUEXEC_ACTION_CONTINUE);
	if ($retval) {
            $target_user->SetStatus(TBDB_USERSTATUS_UNAPPROVED);
	    SPITAJAX_ERROR(-1, "Internal error creating new user");
	    return;
	}
    }
    $retval = SUEXEC($this_uid, $pid,
		     "webmodgroups -m $pid:$gid:$trust $user_uid",
		     SUEXEC_ACTION_CONTINUE);
    if ($retval) {
	SPITAJAX_ERROR(-1, "Internal error updating user membership");
	return;
    }
    SPITAJAX_RESPONSE("success");
}

# Local Variables:
# mode:php    #  Update the trust level in the group.
# End:
?>
