#!/usr/bin/perl -w
#
# Copyright (c) 2010-2018 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use Data::Dumper;

#
# Update DB.
#
sub usage()
{
    print STDERR "Usage: testbed-control [-nf] shutdown|boot|restart\n";
    print STDERR "Use -n option to leave logins disabled after restart.\n";
    print STDERR "Use -f option to force shutdown (ignore current swapping)\n";
    exit(-1);
}
my $optlist   = "nf";
my $noenable  = 0;
my $force     = 0;
my $stopped   = 0;
my $committed = 0;

#
# Configure variables
#
my $TB	         = "@prefix@";
my $TBOPS        = "@TBOPSEMAIL@";
my $SETSITEVAR   = "$TB/sbin/setsitevar";
my $STARTUP      = "/usr/local/etc/rc.d/3.testbed.sh";
my $MFRISBEED    = "/usr/local/etc/rc.d/3.mfrisbeed.sh";
my $PGENISUPPORT = @PROTOGENI_SUPPORT@;
my $APACHE_START = "@APACHE_START_COMMAND@";

# Protos
sub Fatal($);

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

use lib "@prefix@/lib";
use libdb;
use libtestbed;
use libEmulab;

#
# Parse command arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"n"})) {
    $noenable = 1;
}
if (defined($options{"f"})) {
    $force = 1;
}
usage()
    if (@ARGV != 1);
usage()
    if (! ($ARGV[0] eq "boot" || $ARGV[0] eq "shutdown" ||
	   $ARGV[0] eq "restart"));

#
# Must be root if actually doing this.
#
if ($UID) {
    Fatal("This script must be run as root! Maybe use sudo?")
}

# Chicken or Egg.
DBQueryFatal("INSERT INTO sitevariables VALUES ".
	     " ('general/testbed_shutdown',NULL,'0', ".
	     "  'Non-zero value indicates that the testbed is shutdown ".
	     "and scripts should not do anything when they run. ".
	     "DO NOT SET THIS BY HAND!', 0)")
    if (!SiteVarExists("general/testbed_shutdown"));

sub Restart()
{
    # Do not let the restart get interrupted. Bad.
    $SIG{INT} = 'IGNORE';

    #
    # Need to to do this so the rc script knows it is okay to start.
    #  0  - Testbed is enabled.
    #  1  - Testbed is disabled.
    # -1  - Testbed is coming back online, so start up daemons.
    #
    system("$SETSITEVAR general/testbed_shutdown -1");
    if ($?) {
	Fatal("Could not set general/testbed_shutdown to -1");
    }

    if ($stopped) {
	print "Starting up testbed daemons.\n";
	if (system("$MFRISBEED start") || system("$STARTUP start")) {
	    print "*** Could not restart testbed daemons.\n";
	    exit(1);
	}
	print "\n";
    }
    system("$SETSITEVAR general/testbed_shutdown -");
    if ($?) {
	Fatal("Could not clear general/testbed_shutdown");
    }
    if ($PGENISUPPORT &&
	!system("grep -q FCGID /etc/rc.conf")) {
	if (system("$APACHE_START graceful geni")) {
	    Fatal("Could not restart apache geni server; swapping is disabled");
	}
    }
    if ($noenable) {
	print "Leaving the web interface disabled as directed.\n";
    }
    else {
	print "Turning on the web interface and allowing swaps\n";
	if (system("$SETSITEVAR web/nologins -") ||
	    system("$SETSITEVAR web/message -")) {
	    print "*** Could not renable the web interface and swapping!\n";
	    exit(1);
	}
    }
}

if ($ARGV[0] eq "boot") {
    #
    # What if the system is currently started? We do not want to start
    # two copies of things. Look to see if stated and/or bootinfo are
    # running, since these are the two most critical and quickly missed
    # daemons.
    #
    if (CheckDaemonRunning("stated") || CheckDaemonRunning("bootinfo")) {
	Fatal("Testbed appears to be running (stated and/or bootinfo running)");
    }
    $stopped = 1;
    Restart();
    #
    # Inform TBOPS.
    #
    SENDMAIL($TBOPS, "Testbed has been restarted!",
	     "Testbed has been restarted ...\n");
    exit(0);
}

sub Handler()
{
    Restart();
    exit(1);
}
$SIG{INT} = 'IGNORE';

#
# Stop the testbed before doing the update.
#
print "** Putting the testbed to sleep ...\n";
print "-> Turning off the web interface and disallowing swaps.\n";

my $msg = "Testbed going offline for maintenance; back in a little while";
$msg =~ s|\&|&amp;|g;
$msg =~ s|\<|&lt;|g;
system("$SETSITEVAR","web/message", $msg);
if ($?) {
    Fatal("Could not update web message");
}
system("$SETSITEVAR web/nologins 1");
if ($?) {
    Fatal("Could not disable web logins and experiment swaps");
}
system("$SETSITEVAR general/testbed_shutdown 1");
if ($?) {
    Fatal("Could not set general/testbed_shutdown");
}
    
print "-> Waiting a few seconds for testbed to quiet down ...\n";
$SIG{INT} = \&Handler;
sleep(5);
print "-> Looking for experiments still in transition.\n";

#
# Look for any experiments in transition, and wait for them to stop.
# This could take an arbitrarily long time of course, but its the only
# safe way to do it. Don't worry about any experiments that are older
# then 24 hours though; they are likely stuck and not going anywhere.
#
while (!$force) {
    my $query_result =
	DBQueryWarn("select pid,eid,idx,state,expt_locked ".
		    "   from experiments ".
		    "where expt_locked is not null and ".
		    "      DATE_SUB(NOW(),INTERVAL 1 DAY) <= expt_locked");
    if (!$query_result) {
	Fatal("Error getting info from the DB. Stopping.");
    }
    last
	if (!$query_result->numrows());

    print "-> Experiments still in transition:\n";
    while (my ($pid,$eid,$idx,$state,$expt_locked) =
	   $query_result->fetchrow_array()) {

	print "  $pid,$eid,$idx -- $state, $expt_locked\n";
    }
    print "-> Waiting 30 seconds before trying again. ^C is okay\n\n";
    sleep(30);
}
print "** Testbed is quiet; stopping testbed daemons ... \n";
if (system("$STARTUP stop >/dev/null 2>&1") ||
    system("$MFRISBEED stop >/dev/null 2>&1")) {
    Fatal("Could not stop testbed daemons. Stopping. Best to reboot!");
}
$stopped = 1;

#
# Inform TBOPS.
#
SENDMAIL($TBOPS, "Testbed has been shutdown!",
	 "Testbed has been shutdown ...\n");

if ($ARGV[0] eq "restart") {
    print "** Testbed is stopped. Waiting a moment before restarting ...\n";
    sleep(2);
    Restart();
    #
    # Inform TBOPS.
    #
    SENDMAIL($TBOPS, "Testbed has been restarted!",
	     "Testbed has been restarted ...\n");
    exit(0);
}
print "** Testbed is stopped. Safe to power off or reboot\n";
exit(0);

sub Fatal($)
{
    my ($msg) = @_;

    die("*** $0:\n".
	"    $msg\n");
}
