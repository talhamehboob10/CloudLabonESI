#!/usr/bin/perl -w
#
# Copyright (c) 2003-2018 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use Data::Dumper;

#
# Add a node to the DB. Just the node, interfaces and wire done with
# other scripts.
#
sub usage()
{
    print STDERR "Usage: addnode -t <type> <node_id>\n";
    print STDERR "Options:\n";
    print STDERR " -d       - Turn on debugging\n";
    print STDERR " -n       - Dry run mode\n";
    print STDERR " -t type  - Type name (eg: bbg, spp, goober, whatever)\n";
    exit(-1);
}
my $optlist   = "t:dn";
my $debug     = 0;
my $impotent  = 0;
my $type;

# Protos
sub fatal($);
sub CreateNode();

#
# Configure variables
#
my $TB		   = "@prefix@";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use emdb;
use EmulabConstants;
use emutil;
use User;
use Node;
use NodeType;
use OSinfo;
use Experiment;
use Interface;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/sbin:/usr/bin:";

#
# Parse command arguments. 
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{'h'})) {
    usage();
}
if (defined($options{'d'})) {
    $debug = 1;
}
if (defined($options{'n'})) {
    $impotent = 1;
}
if (defined($options{'t'})) {
    $type = $options{'t'};
}
usage()
    if (@ARGV != 1 || !(defined($type)));

my $node_id = $ARGV[0];

#
# Verify user, must be admin.
#
my $this_user = User->ThisUser();
if (! defined($this_user)) {
    fatal("You ($UID) do not exist!");
}
if (!$this_user->IsAdmin()) {
    fatal("You are not a testbed administrator!");
}

#
# The node may not already exist.
#
if (Node->Lookup($node_id)) {
    fatal("Node already exists in the DB");
}

#
# Node type must exist, created elsewhere.
#
my $nodetype = NodeType->Lookup($type);
if (!defined($nodetype)) {
    fatal("Node type does not exist in the DB");
}

#
# Always start in hwdown.
#
my $experiment = Experiment->Lookup(NODEDEAD_PID(), NODEDEAD_EID());
if (!defined($nodetype)) {
    fatal("Could not lookup hwdown experiment");
}

my $blob = {
    "type"               => $type,
    "role"               => "testnode",
    "initial_eventstate" => TBDB_NODESTATE_ISUP(),
};

my $node;
print "Creating new node $node_id\n";
if (!$impotent) {
    $node = Node->Create($node_id, $experiment, $blob);
    if (!defined($node)) {
	fatal("Could not create new node");
    }
}
exit(0);

sub fatal($)
{
    my ($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}
