#!/usr/bin/perl -w
#
# Copyright (c) 2007-2020 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

use English;
use strict;
use Getopt::Std;

#
# Funnel all email through here so we can use the correct envelope sender
# via the -f option to sendmail. Must be done as root though, sendmail
# requires -f option to be invoked by root.
#
# The entire message (headers and body) are expected on STDIN.
#
sub usage()
{
    print("Usage: tbsendmail < message\n");
    print("       tbsendmail -a < message\n");
    print("       tbsendmail -f <from> < message\n");
    exit(-1);
}
my $optlist     = "-f:a";
my $anon        = 0;
my $from;
my $sender;
my $message;

#
# Configure variables
#
my $TB       = "@prefix@";

use lib "@prefix@/lib";
use Brand;

#
# Untaint the path
# 
$ENV{'PATH'} = "$TB/bin:$TB/sbin:/bin:/usr/bin:/sbin:/usr/sbin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

if ($EUID != 0) {
    # We don't want to run this script unless its the real version.
    die("*** $0:\n".
	"    Must be root! Maybe its a development version?\n");
}

my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"a"})) {
    $anon = 1;
}
if (defined($options{"f"})) {
    $from = $options{"f"};
}

#
# If we do not get either option, try to find the From: line in the headers
# so we can figure it out. If no From: line, then we fall back to anonymous.
# Either way, we have to then pipe the message to sendmail.
#
if (!$anon) {
    if (!defined($from)) {
	my $inheaders = 1;
	$message = "";

	while (<STDIN>) {
	    if ($inheaders) {
		if ($_ =~ /^From: (.*)$/i) {
		    $from = $1;
		    $inheaders = 0;
		}
		elsif ($_ eq "") {
		    $inheaders = 0;
		}
	    }
	    $message .= $_;
	}
    }
    if (defined($from)) {
	#
	# Grab the domain out of the from address and lookup the
	# Brand. This is how we get the correct envelope sender to use.
	#
	my $domain;
	if ($from =~ /\@([-\.\w]+)$/ || $from =~ /\@([-\.\w]+)\>$/) {
	    $domain = $1;
	}
	if (!defined($domain) || $domain eq "") {
	    die("Could not get domain from '$from'");
	}
	my $brand = Brand->LookupByDomain($domain);
	if (!defined($brand)) {
	    die("Could not get brand from domain '$domain'");
	}
	$sender = "root\@" . $brand->EnvelopeSender($domain);
    }
    else {
	$sender = "root";
    }
}
else {
    $sender = "root";
}

# Set the Real UID to 0 otherwise the real userid might end up in one
# of the Received lines.
$UID = $EUID;

if (defined($message)) {
    if (open(MAIL, "| /usr/sbin/sendmail -i -t -f $sender")) {
	print MAIL $message;
	close(MAIL) or
	    die($! ? "Error closing sendmail pipe: $!" :
		"Error returned from sendmail: $?");
    }
    else {
	die("Could not open sendmail pipe");
    }
}
else {
    exec("/usr/sbin/sendmail -i -t -f $sender");
}

