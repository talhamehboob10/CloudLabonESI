#!/usr/bin/perl -w

#
# Copyright (c) 2000-2002 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

#
# vlansync - Synchronize the switch vlans to what's in the vlans table
#            by removing extra vlans/ports, and adding missing ones
#

my $TBROOT = "@prefix@";

use English;

$ENV{'PATH'} = '@prefix@/sbin:@prefix@/bin:/bin';

my $debug = 0;

my @extras = ();
my %missing = ();
my $force = 0;
my $args = ":".join(":",@ARGV).":";

if ($args =~ /:-h/) {
  die("Usage:\nvlansync [-h[elp]] [-f[orce]]\n".
      "vlansync will add any missing VLANs from the database to the switch.\n".
      "The -f[orce] option will delete any extra vlans from the switch.\n");
}

if ($args =~ /:-f/) { $force = 1; }

open(DIFF,"vlandiff |");

my $table = 0;
my $switch = 0;

sub num { $a <=> $b } # for sorting numerically...

while (<DIFF>) {
  chomp;
  if ( /table/ ) { $table = 1; $switch = 0; next; }
  if ( /switch/ ) { $table = 0; $switch = 1; next; }
  if ( $table ) {
    my ($id, $memb) = split("\t");
    $missing{$id} = $memb;
    print "Missing $id: $memb\n" if $debug > 1;
  }
  if ( $switch) {
    if ( /^\#(\d+): /) {
      push(@extras, $1);
      print "Extra: $1\n" if $debug > 1;
    } else { die("Couldn't find VLAN number in '$_'\n"); }
  }
}

@extras = sort num @extras;

if ($debug) {
  print "Found missing:\n";
  foreach $id (sort num keys %missing) {
    print "$id: $missing{$id}\n";
  }
  print "Found extras: @extras\n";
}

if ($force && @extras > 0 ) {
  print "Removing extra VLANs: @extras\n";
  system("snmpit -r @extras");
}

if ( (scalar keys %missing) == 0) { exit(0); }

print "Creating missing vlans:\n";
my $tmpfile = "/tmp/vlansync-$PID";
open(TMP,">$tmpfile") || die("Couldn't open $tmpfile for writing: $!\n");
print TMP "start vlan\n";
foreach $id (sort num keys %missing) {
  print "$id $missing{$id}\n";
  print TMP "$id $missing{$id}\n";
}
print TMP "end vlan\n";
close TMP;

system("snmpit -f $tmpfile");

system("rm -f $tmpfile");

exit(0);
