#!/usr/bin/perl -w
#
# Copyright (c) 2000-2002 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

#
# process-acl: Do some trivial processing on acl files - Takes a config
# file called 'process-acl.cfg' in the current directory, in the form
# name = value, and a set of input files. '$name' in the input file is
# replaced with the value from the config file. Intended for use with
# Cisco acls, but should work fine with anything that doesn't use '$'s
#

my @filenames = @ARGV;

sub usage {
    print "usage: $0 filename.in ...\n";
    print "Filenames should end in '.in' - the output filename will have\n";
    print "this suffix removed\n";
    return 1;
}

if (!@filenames || grep(!/\.in$/,@filenames)) {
    exit &usage;
}

open(CONFIG,"< process-acl.cfg") || die "Unable to open process_acl.cfg: $!\n";

my %vars = ();

my $linenum = 0;
print "Parsing config file ...\n";
while (my $line = <CONFIG>) {
    chomp $line;
    $linenum++;

    #
    # Nuke comments 
    #
    $line =~ s/(#.*)//;

    #
    # Skip blank lines
    #
    next unless ($line =~ /[^\s]/);

    #
    # Take name = value, with optional $ on name, and optional quotes around
    # value (lots of whitespace allowed, too)
    #
    if ($line =~ /^\s*\$?(\w+)\s*=\s*"?([^\s"].*[^\s"])"?\s*$/) {
	my ($name, $value) = ($1, $2);
	$vars{$name} = $value;
    } else {
	die "Parse error on line $line\n";
    }
}

close(CONFIG);

print "Processing files ...\n";
foreach my $filename (@filenames) {
    my $outfile = $filename;
    $outfile =~ s/\.in$//;
    print "Processing $filename into $outfile ...\n";
    open(IN,"<$filename") || die "Unable to open $filename: $!\n";
    open(OUT,">$outfile") || die "Unable to open $filename: $!\n";

    #
    # Do the actual replacement
    #
    while (<IN>) {
        # Skip comment lines
        if (/^\s*!/) {
            next;
        }
	while (/\$(\w+)/) {
	    if (!$vars{$1}) {
		die "Unknown variable: $1\n";
	    }
	    s/\$(\w+)/$vars{$1}/;
	}
	print OUT;
    }
    close(OUT);
}

print "Done!\n";
