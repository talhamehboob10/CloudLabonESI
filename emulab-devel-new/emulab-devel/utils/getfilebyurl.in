#!/usr/bin/perl -w
#
# Copyright (c) 2008-2020 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#

#
# Simple CGI interface to shellinabox ...
#
use strict;
use English;
use Data::Dumper;
use CGI;
use Sys::Syslog;
use IO::Handle;
use File::Basename;

# Yack. apache does not close fds before the exec, and if this dies
# we are left with a giant mess.
BEGIN {
    no warnings;
    for (my $i = 3; $i < 1024; $i++) {
      POSIX:close($i);
    }
}

# Configure variables
my $TB		     = "@prefix@";
my $MAINSITE 	     = @TBMAINSITE@;
my $TBOPS            = "@TBOPSEMAIL@";
my $TBLOGFACIL       = "@TBLOGFACIL@";

# Testbed libraries.
use lib '@prefix@/lib';
use libSignedURL;

# Protos
sub SpewFile($);
sub fatal($);

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
#
$ENV{'PATH'} = '/bin:/usr/bin:/usr/sbin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Locals
my $debug = 0;
my $path;

if ($debug) {
    open(STDERR, "> /tmp/foo.log");
}
else {
    # Set up syslog
    openlog("getfilebyurl", "pid", $TBLOGFACIL);
}

#
# We don't want to run this script unless its the real version.
#
if ($EUID != 0) {
    fatal("Must be setuid! Maybe its a development version?");
}
#
# Only apache ... 
#
if (getpwuid($UID) ne "nobody") {
    fatal("You are not allowed to run this script!");
}

sub info($)
{
    my ($msg) = @_;
    
    if ($debug) {
	print STDERR "$msg\n";
    }
    else {
	syslog("info", $msg);
    }
}
sub fatal($)
{
    my ($msg) = @_;
    info($msg);
    
    print "Content-Type: text/plain\n";
    print "Status: 400 Bad Request\n\n";
    print "$msg\n";
    exit(1);
}

# The query holds the authentication object. 
my $query = new CGI();
my $uri   = $ENV{"REQUEST_URI"};
if (1) {
    info(Dumper($query));
    info($uri);
}
if (DecodeURL($uri, \$path)) {
    fatal($path);
}
if (! -e $path) {
    fatal("File does not exist: $path");
}
SpewFile($path);
exit(0);

#
# Spew out a file. 
#
sub SpewFile($)
{
    my ($file) = @_;
    my $filename = basename($file);
    
    #
    # Stat the file get the length.
    #
    my (undef,undef,undef,undef,undef,undef,undef,$bytelen) = stat($file);
    
    open(FD, "< $file")
	or fatal("Could not open $file!\n");

    print "Content-Type: application/octet-stream\n";
    print "Content-Length: $bytelen\n";
    print "Content-Disposition: inline; filename=$filename\n";
    print "Expires: Mon, 26 Jul 1997 05:00:00 GMT\n";
    print "Cache-Control: no-cache, must-revalidate\n";
    print "Pragma: no-cache\n";
    print "\n";

    #
    # Deal with NFS read failures (OPS/FS split).
    #
    my $foffset = 0;
    my $retries = 5;
    my $buf;

    while ($bytelen) {
	my $rlen = sysread(FD, $buf, 8192);

	if (! defined($rlen)) {
	    #
	    # Retry a few times on error to avoid the
	    # changing-exports-file server problem.
	    #
	    if ($retries > 0 && sysseek(FD, $foffset, 0)) {
		$retries--;
		sleep(1);
		next;
	    }
	    fatal("Error reading $file: $!");
	}
        if ($rlen == 0) {
	    last;
	}
	if (! syswrite(STDOUT, $buf, $rlen)) {
	    fatal("Error writing file to stdout: $!");
	}
	$foffset += $rlen;
	$bytelen -= $rlen;
	$retries = 5;
    }
    if ($bytelen) {
	fatal("Did not get the entire file! $bytelen bytes left.");
    }
    close(FD);
    return 0;
}
