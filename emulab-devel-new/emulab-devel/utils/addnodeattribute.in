#!/usr/bin/perl -w
#
# Copyright (c) 2003-2018, 2020 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use Data::Dumper;

#
# Add a node attribute to the DB.
#
sub usage()
{
    print STDERR "Usage: addnodeattribute [-h] <node_id> <key> <value>\n";
    print STDERR "       addnodeattribute -r <node_id> <key>\n";
    print STDERR "       addnodeattribute -v <node_id> <key>\n";
    print STDERR "Options:\n";
    print STDERR " -r       - Remove attribute\n";
    print STDERR " -v       - Show attribute value\n";
    print STDERR " -h       - Mark as hidden (from mere users)\n";
    exit(-1);
}
my $optlist   = "rhv";
my $hidden    = 0;
my $remove    = 0;
my $show      = 0;

# Protos
sub fatal($);

#
# Configure variables
#
my $TB		   = "@prefix@";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use emdb;
use EmulabConstants;
use emutil;
use User;
use Node;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/sbin:/usr/bin:";

#
# Parse command arguments. 
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{'h'})) {
    $hidden = 1;
}
if (defined($options{'r'})) {
    $remove = 1;
}
if (defined($options{'v'})) {
    $show = 1;
}
usage()
    if (@ARGV < 2 || (!$remove && !$show && @ARGV != 3));

my $node_id = $ARGV[0];
my $key     = $ARGV[1];

#
# Verify user, must be admin.
#
my $this_user = User->ThisUser();
if (! defined($this_user)) {
    fatal("You ($UID) do not exist!");
}
if (!$this_user->IsAdmin()) {
    fatal("You are not a testbed administrator!");
}
my $node = Node->Lookup($node_id);
if (!defined($node)) {
    fatal("No such node");
}
if (!TBcheck_dbslot($key, "node_attributes", "attrkey",
		    TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
    fatal("Invalid key: " . TBFieldErrorString());
}
if ($show) {
    my $tmp;
    if ($node->NodeAttribute($key, \$tmp)) {
	fatal("Could not load node attributes");
    }
    if (!defined($tmp)) {
	fatal("No such attribute defined on this node");
    }
    print "$tmp\n";
    exit(0);
}

#
# No error if it does not exist,
#
if ($remove) {
    $node->ClearNodeAttribute($key) == 0
	or fatal("Could not remove attribute");
    exit(0);
}
my $value = $ARGV[2];
if (!TBcheck_dbslot($value, "node_attributes", "attrvalue",
		    TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
    fatal("Invalid value: " . TBFieldErrorString());
}
$node->SetNodeAttribute($key, $value, $hidden) == 0
    or fatal("Could not add attribute");
exit(0);

sub fatal($)
{
    my ($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}
