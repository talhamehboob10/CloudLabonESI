#!/usr/bin/perl -w
#
# Copyright (c) 2011-2021 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;

#
# For Letsencrypt. This current implementation is strictly for FEs/MEs
# where ops is a VM on boss without a routable IP address. We need a real
# cert on ops for consoles to work, but since it is not routable, using
# http challenges is troublesome. So I figure we just use DNS challenges,
# and roll ops into the main cert and use it on both boss and ops, which is
# okay to do. Thing is, the dns approach did not turn out to be less
# troublesome, quite the opposite actually. In fact WAY troublesome.
# 
sub usage()
{
    print "Usage: certbot_rewnew [-n] [-e]\n";
    exit(1);
}
my $optlist  = "ne";
my $impotent = 0;
my $expand   = 0;

#
# Configure variables
#
my $TB		  = "@prefix@";
my $TBOPS         = "@TBOPSEMAIL@";
my $APACHE_START  = "@APACHE_START_COMMAND@";
my $NAMED_SETUP   = "$TB/sbin/named_setup";
my $CERTBOT_HOOK  = "$TB/sbin/certbot_authhook";
my $SCP 	  = "/usr/bin/scp -2";
my $SSH		  = "/usr/bin/ssh";
my $OURDOMAIN	  = '@OURDOMAIN@';
my $USERNODE	  = '@USERNODE@';
my $BOSSNODE	  = '@BOSSNODE@';
my $WWWHOST	  = '@WWWHOST@';
my $SAVEUID	  = $UID;
my $BOSSCERT      = "/usr/local/etc/letsencrypt/live/$OURDOMAIN/cert.pem";
my $BOSSKEY       = "/usr/local/etc/letsencrypt/live/$OURDOMAIN/privkey.pem";
my $APACHE_ETCDIR = "@INSTALL_APACHE_CONFIG@";
my $OPSCERT       = "$APACHE_ETCDIR/ssl.crt/${USERNODE}.crt";
my $OPSKEY        = "$APACHE_ETCDIR/ssl.key/${USERNODE}.key";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Protos
sub fatal($);

#
# Turn off line buffering on output
#
$| = 1; 

# We do not want to run this script unless its the real version.
if ($EUID != 0) {
    fatal("Must be root! Maybe its a development version?");
}
# XXX Hacky!
if ($TB ne "/usr/testbed") {
    fatal("Wrong version. Maybe its a development version?");
}

use lib '@prefix@/lib';
use libaudit;

#
# Check args.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"n"})) {
    $impotent = 1;
}
if (defined($options{"e"})) {
    $expand = 1;
}

# Record output in case of error.
LogStart(0);

# Need to be real root for this.
$UID = 0;

my $CERT    = "/usr/local/etc/letsencrypt/live/$OURDOMAIN/cert.pem";
my $CERTBOT = "certbot certonly -n --agree-tos -m $TBOPS ".
    ($impotent ? "--dry-run " : "") .
    ($expand   ? "--expand " : "") .
    "--manual-public-ip-logging-ok ".
    "--manual --preferred-challenges dns --reuse-key ".
    "--manual-auth-hook $CERTBOT_HOOK ".
    "--manual-cleanup-hook '$CERTBOT_HOOK -c' ".
    "-d $OURDOMAIN -d $WWWHOST -d $BOSSNODE -d $USERNODE ";

system($CERTBOT) == 0
    or fatal("certbot failure");

if ($impotent) {
    print "Exiting without installing certs or restarting apache\n";
    exit(0);
}

#
# We have to update the key and cert on ops and restart apache there.
#
print "Copying SSL cert to ops\n";
system("$SCP $BOSSCERT ${USERNODE}:$OPSCERT") == 0
    or fatal("Could not copy new certificate to ops");
    
print "Copying SSL key to ops\n";
system("$SCP $BOSSKEY ${USERNODE}:$OPSKEY") == 0
    or fatal("Could not copy new certificate to ops");

print "Restarting apache on ops\n";
system("$SSH ${USERNODE} $APACHE_START graceful") == 0
    or fatal("Could not restart apache on ops");

system("$APACHE_START graceful") == 0
    or fatal("Could not gracefully restart apache!");
    
$UID  = $SAVEUID;

# Apache spits out stuff. No errors at this point, nothing to report.
AuditAbort();
exit(0);

sub fatal($)
{
    my ($msg) = @_;

    die("*** $0:\n".
	"    $msg\n");
}

