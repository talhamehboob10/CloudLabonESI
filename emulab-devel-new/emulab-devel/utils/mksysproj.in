#!/usr/bin/perl -w
#
# Copyright (c) 2000-2020 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use File::Temp qw(tempfile);

#
# Create a holding project.
#
sub usage()
{
    print STDOUT "Usage: mksysproj [-n] [-m <description>] pid leader\n";
    print STDOUT "-h     This message\n";
    print STDOUT "-n     Report what would be done\n";
    print STDOUT "-m     Optional project description.\n";
    exit(-1);
}
my $optlist     = "hnm:";
my $impotent    = 0;
my $description = "Holding Project --- DO NOT DELETE";

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBDOCBASE   = "@TBDOCBASE@";
my $NEWPROJ     = "$TB/sbin/newproj";
my $MKPROJ      = "$TB/sbin/mkproj";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use emdb;
use emutil;
use EmulabConstants;
use libtestbed;
use User;
use Project;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/sbin:/usr/bin:";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

my $xml =
    "<project>" .
    " <attribute name='leader'><value>%s</value></attribute>".
    " <attribute name='name'><value>%s</value></attribute>".
    " <attribute name='short description'><value>%s</value></attribute>".
    " <attribute name='URL'><value>%s</value></attribute>".
    " <attribute name='members'><value>1</value></attribute>".
    " <attribute name='num_pcs'><value>1</value></attribute>".
    " <attribute name='long description'><value>%s</value></attribute>".
    " <attribute name='funders'><value>none</value></attribute>".
    " <attribute name='whynotpublic'><value></value></attribute>".
    " <attribute name='public'><value>1</value></attribute>".
    " <attribute name='linkedtous'><value>1</value></attribute>".
    "</project>";

# Protos
sub fatal($);

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"h"})) {
    usage();
}
if (defined($options{"n"})) {
    $impotent = 1;
}
usage()
    if (@ARGV != 2);

my $this_user = User->ThisUser();
if (! defined($this_user)) {
    fatal("You ($UID) do not exist!");
}
if (!$this_user->IsAdmin()) {
    fatal("You not have permission to do this!");
}

my $project = Project->Lookup($ARGV[0]);
my $leader  = User->Lookup($ARGV[1]);

if (defined($project)) {
    fatal("Project already exists");
}
if (!defined($leader)) {
    fatal("User does not exist");
}
$xml = sprintf($xml, $leader->uid(), $ARGV[0], 
	       $description, $TBDOCBASE, $description);
if ($impotent) {
    print "$xml\n";
    exit(0);
}

#
# Create the XML file to pass along
#
my ($fh, $filename) = tempfile(UNLINK => 1);
fatal("Could not create temporary file")
    if (!defined($fh));
print $fh "$xml\n";
close($fh);

system("$NEWPROJ -s $filename");
if ($?) {
    fatal("Could not create new project");
}
system("$MKPROJ -s $ARGV[0]");
if ($?) {
    fatal("Could not approve new project");
}
exit(0);

sub fatal($)
{
    my ($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}
