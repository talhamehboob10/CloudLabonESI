#!/usr/bin/perl -w
#
# Copyright (c) 2003-2016 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;

#
# Grant and revoke permission to use specific images.
#
sub usage()
{
    print STDERR "Usage: createimagealias [-r] <image> target1,target2,...\n";
    print STDERR "	-h   This message\n";
    print STDERR "	-r   Delete alias\n";
    exit(-1);
}
my $optlist  = "r";
my $debug    = 0;
my $remove   = 0;
my @targets  = ();

# Protos
sub fatal($);

#
# Configure variables
#
my $TB  	  = "@prefix@";
my $PGENISUPPORT  = @PROTOGENI_SUPPORT@;
my $POSTIMAGEDATA = "$TB/sbin/protogeni/postimagedata";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use emdb;
use EmulabConstants;
use libtestbed;
use libEmulab;
use Project;
use Group;
use User;
use OSImage;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/sbin:/usr/bin:";

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{r})) {
    $remove = 1;
}
usage()
    if (@ARGV < 1);

my $imagename = shift(@ARGV);

#
# Verify user.
#
my $this_user = User->ThisUser();
if (! defined($this_user)) {
    fatal("You ($UID) do not exist!");
}
# No aliases outside emulab-ops for now.
my $project = Project->Lookup(TBOPSPID());
fatal("Cannot lookup project " . TBOPSPID())
    if (!defined($project));
my $pid = $project->pid();

if ($remove) {
    my $image = OSImageAlias->Lookup($imagename);
    fatal("No such image aliases exists")
	if (!defined($image));
    exit($image->Delete());
}
usage()
    if (@ARGV < 1);

# Sanity check the images.
foreach my $imagename (@ARGV) {
    my $image = OSImage->Lookup($imagename);
    fatal("$pid,$imagename does not exist")
	if (!defined($image));
    fatal("Target image not in the same project as the alias")
	if ($project->pid() ne $image->pid());
    fatal("Target cannot be another alias!")
	if ($image->isImageAlias());
    my $tmp = $image->LookupMostRecent();
    fatal("Target image $pid,$imagename is not the most recent")
	if ($tmp->version() != $image->version());
    
    push(@targets, $image);
}
my $image = OSImageAlias->Create($imagename,
				 $project->GetProjectGroup(), @targets);
fatal("Could not create image alias")
    if (!defined($image));

if ($PGENISUPPORT &&
    GetSiteVar("protogeni/use_imagetracker")) {
    my $imageid = $image->imageid();
    print "Posting image alias $imageid to the image server ...\n";
    system("$POSTIMAGEDATA $imageid");
    if ($?) {
	print STDERR "Could not post alias to the image server\n";
    }
}
exit(0);

sub fatal($)
{
    my ($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}

