#!/usr/bin/perl -w
#
# Copyright (c) 2003-2015 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use Data::Dumper;

#
# Grant and revoke shared vlan access.
#
sub usage()
{
    print STDERR "Usage: sharevlan [-o] eid lanname token\n";
    print STDERR "       sharevlan -r | -i | -c token\n";
    print STDERR "       sharevlan -r eid lanname\n";
    print STDERR " -r    Revoke sharing instead\n";
    print STDERR " -i    Show members.\n";
    print STDERR " -o    Sharing is open to everyone.\n";
    print STDERR " -l    List all shared vlans\n";
    print STDERR " -c    Create a credential for private vlan\n";
    exit(-1);
}
my $optlist  = "hrRolifc";
my $revoke   = 0;
my $docred   = 0;
my $open     = 0;
my $list     = 0;
my $info     = 0;
my $force    = 0;

# Protos
sub fatal($);

#
# Please do not run as root. Hard to track what has happened.
#
if ($UID == 0) {
    die("*** $0:\n".
	"    Please do not run this as root!\n");
}

#
# Configure variables
#
my $TB		 = "@prefix@";
my $TBOPS        = "@TBOPSEMAIL@";
my $OURDOMAIN    = "@OURDOMAIN@";
my $PGENISUPPORT = @PROTOGENI_SUPPORT@;
my $PGENIDOMAIN  = "@PROTOGENI_DOMAIN@";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use emdb;
use libtestbed;
use Experiment;
use EmulabConstants;
use Lan;
use User;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/sbin:/usr/bin:";

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{'h'})) {
    usage();
}
if (defined($options{'o'})) {
    $open = 1;
}
if (defined($options{'f'})) {
    $force = 1;
}
if (defined($options{'i'})) {
    $info = 1;

    usage()
	if (@ARGV != 1);
}
elsif (defined($options{'l'})) {
    $list = 1;
}
elsif (defined($options{'r'})) {
    $revoke = 1;

    if (defined($options{'R'})) {
	$force = 1;
    }
}
elsif (defined($options{'c'})) {
    $docred = 1;
}
else {
    usage()
	if (@ARGV != 3);
}

#
# Verify user, must be admin.
#
my $this_user = User->ThisUser();
if (! defined($this_user)) {
    fatal("You ($UID) do not exist!");
}
if (!$this_user->IsAdmin()) {
    fatal("You are not a testbed administrator!");
}

if ($list) {
    my $query_result =
	DBQueryFatal("select * from shared_vlans as s ".
		     "left join vlans as v on v.id=s.lanid ".
		     "order by s.token");
    exit(0)
	if (! $query_result->numrows);

    printf("%-15s %-20s %-20s %-20s %-5s %s\n",
	   "PID", "EID", "Token", "Lan", "Tag", "Who");
    print "-------------------------------------------------------------";
    print "------------------------------\n";
	
    while (my $row = $query_result->fetchrow_hashref()) {
	my $pid      = $row->{'pid'};
	my $eid      = $row->{'eid'};
	my $token    = $row->{'token'};
	my $lan      = $row->{'vname'};
	my $created  = $row->{'created'};
	my $creator  = $row->{'creator'};
	my $tag      = $row->{'tag'} || "";

	printf("%-15s %-20s %-20s %-20s %-5s %s\n",
	       $pid, $eid, $token, $lan, "$tag", $creator);
    }
    exit(0);
}

if ($info) {
    my $token = $ARGV[0];
    my $query_result =
	DBQueryFatal("select lanid from shared_vlans where token='$token'");
    if (!$query_result->numrows) {
	fatal("No such shared vlan");
    }
    my ($lanid) = $query_result->fetchrow_array();
    my $vlan = VLan->Lookup($lanid);
    if (!defined($vlan)) {
	fatal("No such vlan $lanid");
    }
    my @members;
    if ($vlan->MemberList(\@members) != 0) {
	fatal("Could not get member list for $vlan");
    }
    foreach my $member (@members) {
	my $node;
	my $iface;
	$member->GetNodeIface(\$node, \$iface);
	print $node->node_id() . ":$iface";

	my $portlan_exptidx;
	my $portlan_lanname;
	my $experiment;
	$member->GetAttribute("portlan_exptidx", \$portlan_exptidx);
	$member->GetAttribute("portlan_lanname", \$portlan_lanname);
	
	if (defined($portlan_exptidx) && defined($portlan_lanname)) {
	    $experiment = Experiment->Lookup($portlan_exptidx);
	    if (defined($experiment)) {
		print " " . $experiment->pid() . ":" . $experiment->eid();
	    }
	    else {
		print " oops";
	    }
	}
	my $reservation = $node->Reservation();
	if (defined($reservation) &&
	    (!defined($experiment) ||
	     !$reservation->SameExperiment($experiment))) {
	    print " (" . $reservation->pid() . ":" . $reservation->eid() . ")";
	}
	print "\n";
    }
    exit(0);
}

if ($revoke) {
    my ($vlan,$lanid);
    my $busy  = 0;

    if (@ARGV == 1) {
	my $token = $ARGV[0];

	my $query_result =
	    DBQueryFatal("select lanid from shared_vlans where token='$token'");
	if (!$query_result->numrows) {
	    fatal("No such shared vlan");
	}
	($lanid) = $query_result->fetchrow_array();
	$vlan = VLan->Lookup($lanid);
	if (!defined($vlan)) {
	    fatal("No such vlan $lanid");
	}
    }
    elsif (@ARGV == 2) {
	my $eid     = $ARGV[0];
	my $lanname = $ARGV[1];

	my $experiment = Experiment->Lookup($eid);
	if (!defined($experiment)) {
	    fatal("No such experiment $eid");
	}
	$vlan = VLan->Lookup($experiment, $lanname);
	if (!defined($vlan)) {
	    fatal("No such lan in $experiment");
	}
	$lanid = $vlan->lanid();
    }
    else {
	usage();
    }
    if (!$vlan->IsShared()) {
	fatal("Lan is not shared");
    }

    #
    # The lan is obviously shared, so we have to lock it.
    # It should not spend much time locked though, so the
    # timeout should not be too long; indicates an error if
    # it is.
    #
    if ($vlan->Lock(180) != 0) {
	fatal("Could not lock vlan $lanid");
    }
    
    #
    # Do not allow if the lan is actually being used by other experiments.
    #

    my @members;
    if ($vlan->MemberList(\@members) != 0) {
	$vlan->Unlock();
	fatal("Could not get member list for $vlan");
    }
    foreach my $member (@members) {
	my $node;
	my $iface;
	$member->GetNodeIface(\$node, \$iface);

	my $portlan_exptidx;
	my $portlan_lanname;
	my $experiment;
	$member->GetAttribute("portlan_exptidx", \$portlan_exptidx);
	$member->GetAttribute("portlan_lanname", \$portlan_lanname);
	
	if (defined($portlan_exptidx) && defined($portlan_lanname)) {
	    $experiment = Experiment->Lookup($portlan_exptidx);
	    if (defined($experiment)) {
		print $node->node_id() . ":$iface in ";
		print $experiment->pid() . "/" . $experiment->eid() . " ";
		print "is using this vlan";
		if ($force) {
		    print ", but we are going to forcibly revoke it!\n";

		    my $portlan = Lan->Lookup($experiment, $portlan_lanname);
		    if (!defined($portlan)) {
			$vlan->Unlock();
			fatal("Could not revoke sharing of $vlan by ".
			      "$portlan_lanname in $experiment cause ".
			      "portlan_lanname does not exist!\n");
		    }
		    if ($experiment->ClearPortLans(1, $portlan)) {
			$vlan->Unlock();
			fatal("Could not revoke sharing of $vlan by ".
			      "$portlan_lanname in $experiment!\n");
		    }
		}
		else {
		    print "!\n";
		    $busy++;
		}
	    }
	    else {
		print $node->node_id() . ":$iface is marked as shared in this ";
		print "vlan but the experiment is gone!\n";
	    }
	}
    }
    if ($busy) {
	print "*** Refusing to delete shared vlan until sharers give it up!\n";
	$vlan->Unlock();
	exit(1);
    }
    
    $vlan->Unlock();
    DBQueryFatal("delete from shared_vlans where lanid='$lanid'");
    exit(0);
}

if ($docred) {
    if (!$PGENISUPPORT) {
	fatal("Credentials not supported");
    }
    our $LOCALCM_FLAG;
    use vars qw($GENI_DBNAME);
    $GENI_DBNAME = "geni-cm";
    require GeniHRN;
    require GeniCertificate;
    require GeniCredential;
    require GeniSlice;
    require GeniUser;
    
    my $token = $ARGV[0];
    my $query_result =
	DBQueryFatal("select lanid from shared_vlans where token='$token'");
    if (!$query_result->numrows) {
	fatal("No such shared vlan");
    }
    my ($lanid) = $query_result->fetchrow_array();
    my $vlan = VLan->Lookup($lanid);
    if (!defined($vlan)) {
	fatal("No such vlan $lanid");
    }
    #
    # This part is a pain, we need the geni user that created the lan.
    #
    my $experiment = $vlan->GetExperiment();
    my $slice      = GeniSlice->LookupByExperiment($experiment);
    my $geniuser   = GeniUser->Lookup($slice->creator_uuid(), 1);
    my $lan_urn    = GeniHRN::Generate($OURDOMAIN, "vlan", $vlan->lanid());
    my $lan_cert   = GeniCertificate->Lookup($lan_urn);
    if (!defined($lan_cert)) {
	my $lan_hrn = "${PGENIDOMAIN}.vlan" . "." . $vlan->lanid();
	$lan_cert =
	    GeniCertificate->Create({"urn"   => $lan_urn,
				     "hrn"   => $lan_hrn,
				     'email' => $TBOPS});
	if (!defined($lan_cert)) {
	    fatal("Could not generate certificate");
	}
    }
    my $lan_cred = GeniCredential->CreateSigned($lan_cert, $geniuser,
						$LOCALCM_FLAG);
    if (!defined($lan_cred)) {
	fatal("Could not generate credential");
    }
    print $lan_cred->asString();
    exit(0);
}

my $eid     = $ARGV[0];
my $lanname = $ARGV[1];
my $token   = $ARGV[2];

my $experiment = Experiment->Lookup($eid);
if (!defined($experiment)) {
    fatal("No such experiment $eid");
}
if ($experiment->state() ne EXPTSTATE_ACTIVE() && !$force) {
    fatal("Experiment is not active; use -f option to override");
}
my $vlan = VLan->Lookup($experiment, $lanname);
if (!defined($vlan)) {
    fatal("No such lan in $experiment");
}
my $lanid = $vlan->lanid();

my $query_result =
    DBQueryFatal("select * from shared_vlans where lanid='$lanid'");
if ($query_result->numrows) {
    fatal("$lanname is already shared");
}
if (! ($token =~ /^[-\w]*$/)) {
    fatal("Illegal characters in token"); 
}
$query_result =
    DBQueryFatal("select * from shared_vlans where token='token'");
if ($query_result->numrows) {
    fatal("$token is already used in the shared vlans table");
}
my $pid = $experiment->pid();
$eid    = $experiment->eid();
my $idx = $experiment->idx();
my $uid = $this_user->uid();
my $uid_idx = $this_user->uid_idx();

DBQueryFatal("insert into shared_vlans set open='$open', ".
	     "  pid='$pid', eid='$eid', exptidx='$idx', ".
	     "  token='$token', lanid='$lanid', vname='$lanname', ".
	     "  created=now(), creator='$uid', creator_idx='$uid_idx'");

#
# Since that worked, clear the switch path. Whatever the mapper
# computed will be wrong as soon as we start adding ports. By
# clearing the path, we are telling snmpit to compute a new path
# as ports are added or removed from the vlan.
#
$vlan->ClrSwitchPath();

exit(0);

sub fatal($)
{
    my ($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}

