#!/usr/bin/perl -w
#
# Copyright (c) 2011-2020 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use Data::Dumper;

#
# For Letsencrypt. 
# 
sub usage()
{
    print "Usage: certbot_authhook\n";
    exit(1);
}
my $optlist = "c";

#
# Configure variables
#
my $TB		  = "@prefix@";
my $TBOPS         = "@TBOPSEMAIL@";
my $NAMED_SETUP   = "$TB/sbin/named_setup";
my $OURDOMAIN	  = "@OURDOMAIN@";
my $FRAGFILE      = "/etc/namedb/${OURDOMAIN}.db.certbot";
my $SAVEUID	  = $UID;

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Protos
sub fatal($);

#
# Turn off line buffering on output
#
$| = 1; 

# We do not want to run this script unless its the real version.
if ($EUID != 0) {
    fatal("Must be root! Maybe its a development version?");
}
# XXX Hacky!
if ($TB ne "/usr/testbed") {
    fatal("Wrong version. Maybe its a development version?");
}

use lib '@prefix@/lib';

my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"c"})) {
    unlink($FRAGFILE);
    
    system("$NAMED_SETUP") == 0
	or fatal("Could not restart named!");
    
    exit(0);
}

#
# The stuff we need comes in via the environment from certbot.
#
if (! (exists($ENV{"CERTBOT_VALIDATION"}) && exists($ENV{"CERTBOT_DOMAIN"}))) {
    fatal("Did not get the needed environment variables!");
}
my $CERTBOT_VALIDATION  = $ENV{"CERTBOT_VALIDATION"};
my $CERTBOT_DOMAIN      = $ENV{"CERTBOT_DOMAIN"};
my $CERTBOT_ALL_DOMAINS = $ENV{"CERTBOT_ALL_DOMAINS"};
my $CERTBOT_REMAINING   = $ENV{"CERTBOT_REMAINING_CHALLENGES"};
my $safe_validation     = $CERTBOT_VALIDATION;
$safe_validation        =~ s/\-/\\\-/g;

#
# We do not want to do anything until the validation changes.
#
if (! -e $FRAGFILE || system("grep -q -s '$safe_validation' $FRAGFILE")) {
    open(FRAG, ">> $FRAGFILE") or
	fatal("Could not open $FRAGFILE for writing");
    print FRAG "_acme-challenge.${CERTBOT_DOMAIN}.   0   IN      TXT ".
	"$CERTBOT_VALIDATION\n";
    close(FRAG);
}
else {
    exit(0);
}
# Need to be real root for this.
$UID = 0;

if ($CERTBOT_REMAINING == 0) {
    system("$NAMED_SETUP") == 0
	or fatal("Could not restart named!");

    sleep(60);
}

$UID  = $SAVEUID;
exit(0);

sub fatal($)
{
    my ($msg) = @_;

    die("*** $0:\n".
	"    $msg\n");
}

