#!/usr/bin/perl -w
#
# Copyright (c) 2000-2012 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use strict;
use Getopt::Std;
use Data::Dumper;
use URI::Escape;
use File::Temp qw(tempfile);

#
# Phone home back to the mother ship and tell it about Emulab sites.
# Nothing sensitive is sent, just stuff like what version is running,
# commit hash of the code, URL, etc. You can opt out with a setting
# in your defs file.
#
# NOSITECHECKIN=1
#
sub usage()
{
    print("Usage: sitecheckin_client\n");
    exit(-1);
}
my $optlist = "dn";
my $debug   = 0;
my $impotent= 0;

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";
my $MAINSITE    = @TBMAINSITE@;
my $ELABINELAB  = @ELABINELAB@;
my $NOCHECKIN   = @NOSITECHECKIN@;
my $TBBASE      = "@TBBASE@";
my $MOTHERSHIP  = "https://www.emulab.net/sitecheckin.php";
my $EMULAB_CERT = "$TB/etc/emulab.pem";
my $OPENSSL     = "/usr/bin/openssl";
my $WGET	= "/usr/local/bin/wget";

#
# Do not run this script as root please.
#
if ($EUID) {
    die("*** $0:\n".
	"    Only root can run this script!\n");
}

exit(0)
    if ($NOCHECKIN || $ELABINELAB);

#
# Untaint the path
#
$ENV{'PATH'} = "$TB/bin:$TB/sbin:/bin:/usr/bin:/usr/bin:/usr/sbin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Load the Testbed support stuff.
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;
use emutil;

# Protos
sub fatal($);

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"n"})) {
    $impotent = 1;
}
usage()
    if (@ARGV);

my $osvers = `uname -s -r`;
chomp($osvers);

#
# These are the fields that we have to put into the xml file we send.
#
my %xmlfields = ("certificate"  => undef,
		 "url"		=> $TBBASE,
		 "buildinfo"	=> undef,
		 "commithash"	=> undef,
		 "dbrev"	=> undef,
		 "install"	=> undef,
		 "os_version"	=> $osvers,
		 "perl_version"	=> $],
		 "tbops"	=> $TBOPS);

my $query_result =
    DBQueryFatal("select * from version_info order by name");

while (my ($name, $value) = $query_result->fetchrow_array()) {
    $xmlfields{$name} = $value
	if (exists($xmlfields{$name}));
}

#
# Use openssl to cut any cruft.
#
my $certificate = emutil::ExecQuiet("$OPENSSL x509 -in $EMULAB_CERT");
if ($?) {
    fatal("Could not load CA certificate from $EMULAB_CERT");
}
$xmlfields{"certificate"} = $certificate;

#
# Create the XML file to send.
#
my ($fh, $xmlfilename) = tempfile(UNLINK => !$debug);
fatal("Could not create temporary file")
    if (!defined($fh));

my $xmlstuff = "<emulab_site>";
foreach my $key (keys(%xmlfields)) {
    my $val = $xmlfields{$key};

    $xmlstuff .= "<attribute name=\"$key\">";
    $xmlstuff .= "<value>$val</value>";
    $xmlstuff .= "</attribute>";
}
$xmlstuff .= "</emulab_site>";
print $fh "xmlstuff=" . uri_escape($xmlstuff) . "\n";
close($fh);

if ($debug) {
    system("/bin/cat $xmlfilename");
}
system("$WGET --post-file=$xmlfilename --no-check-certificate ".
       "      -O /dev/null -nv -q $MOTHERSHIP");

unlink($xmlfilename);
exit(0);

sub fatal($) {
    my ($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}

