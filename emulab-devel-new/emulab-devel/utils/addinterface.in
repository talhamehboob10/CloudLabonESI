#!/usr/bin/perl -w
#
# Copyright (c) 2003-2019 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use Data::Dumper;

#
# Add an interface to the DB. Typically, this is used to add the switch
# side of a wire, but it can be used to add the node side too.a
#
sub usage()
{
    print STDERR "Usage: addinterface [-b speed | -t ifacetype] [-m mac] ".
	"[-e role] node_id iface_id\n";
    print STDERR "Usage: addinterface -r <node_id> <iface_id>\n";
    print STDERR "Usage: addinterface -i <node_id> <iface_id>\n";
    print STDERR "Options:\n";
    print STDERR " -v        - Turn on debugging\n";
    print STDERR " -n        - Impotent mode\n";
    print STDERR " -i        - Display interface info from DB.\n";
    print STDERR " -r        - Delete interface\n";
    print STDERR " -f        - (with -r) force deletion, even if iface used\n";
    print STDERR " -I IP     - Optional IP address (as for control iface)\n";
    print STDERR " -M Mask   - IP Mask, defaults to 255.255.255.0\n";
    print STDERR " -e role   - Optional interface role, default to 'other'\n";
    print STDERR " -m mac    - Optional MAC address. 0123456789AB format.\n";
    print STDERR " -b speed  - Interface speed; 100Mb,1Gb,10Gb,40Gb,100Gb\n";
    print STDERR " -t type   - Interface type instead of generic based on speed\n";
    print STDERR " iface_id  - eth0, eth1, 1/69, 1.6:1, Po4.5/9:1, etc.\n";
    exit(-1);
}
my $optlist   = "b:t:nvfm:re:iI:M:";
my $verbose   = 0;
my $impotent  = 0;
my $remove    = 0;
my $info      = 0;
my $force     = 0;
my $IP;
my $MASK;
my $speed;
my $type;
my $mac       = "000000000000";
my $role;
my ($card,$port);

# Protos
sub fatal($);
sub RemoveInterface(@);
sub ShowInterface(@);

#
# Configure variables
#
my $TB          = "@prefix@";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use emdb;
use EmulabConstants;
use emutil;
use User;
use Node;
use NodeType;
use Interface;
use Lan;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/sbin:/usr/bin:";

#
# Parse command arguments. 
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{'h'})) {
    usage();
}
if (defined($options{'v'})) {
    $verbose = 1;
}
if (defined($options{'n'})) {
    $impotent = 1;
}
if (defined($options{'r'})) {
    $remove = 1;
}
if (defined($options{'i'})) {
    $info = 1;
}
if (defined($options{'f'})) {
    $force = 1;
}
if (defined($options{'e'})) {
    $role = $options{'e'};
    if ($role !~ /^(expt|ctrl|other|mngmnt)$/) {
	fatal("Role must be one of: expt|ctrl|other|mngmnt");
    }
}
else {
    $role = TBDB_IFACEROLE_EXPERIMENT();
}
if (defined($options{'I'})) {
    $IP = $options{'I'};
    if ($IP !~ /^(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})$/)  {
	fatal("Invalid IP format");
    }
}
if (defined($options{'M'})) {
    $MASK = $options{'M'};
    if ($MASK !~ /^(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})$/)  {
	fatal("Invalid IP mask format");
    }
}
if (defined($options{'m'})) {
    $mac = $options{'m'};
    if ($mac !~ /^\w\w\w\w\w\w\w\w\w\w\w\w$/)  {
	fatal("Invalid mac address format");
    }
}
if (defined($options{'t'})) {
    $type = Interface::Type->Lookup($options{'t'});
    if (!defined($type)) {
	fatal("No such interface type");
    }
}
if (defined($options{'b'})) {
    $speed = $options{'b'};
    $type = Interface::Type->GenericType($speed);
    if (!defined($type)) {
	fatal("No generic interface type for speed: $speed");
    }
}

#
# Verify user, must be admin.
#
my $this_user = User->ThisUser();
if (! defined($this_user)) {
    fatal("You ($UID) do not exist!");
}
if (!$this_user->IsAdmin()) {
    fatal("You are not a testbed administrator!");
}
if ($remove) {
    exit(RemoveInterface(@ARGV));
}
elsif ($info) {
    exit(ShowInterface(@ARGV));
}

usage()
    if (@ARGV != 2 || !defined($type));

my $node_id   = $ARGV[0];
my $iface_id  = $ARGV[1];

# Sanity check node/portinfo.
my $node = Node->Lookup($node_id);
if (!defined($node)) {
    fatal("No such node $node_id");
}
my $interface = Interface->LookupByIface($node_id, $iface_id);
if (defined($interface)) {
    fatal("Interface already exists for $iface_id");
}
#
# Create the interface.
#
my $ifaceargs = {
    "node_id"     => $node_id,
    "iface"       => $iface_id,
    "role"        => $role,
    "type"        => $type->type(),
    "max_speed"   => $type->max_speed() / 1000,
    "mac"         => $mac,
    "IP"          => $IP,
    "mask"        => $MASK,
};
if ($verbose || $impotent) {
    if ($verbose) {
	print "Creating interface with arguments:\n";
    }
    else {
	print "Would create interface with arguments:\n";
    }
    print Dumper($ifaceargs);
}
if (!$impotent) {
    Interface->Create($node, $ifaceargs)
	or fatal("Could not create interface entry");
}
exit(0);

sub fatal($)
{
    my ($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}

#
# Remove an interface. 
#
sub RemoveInterface(@)
{
    my ($nodeid, $iface) = @_;

    if (!defined($iface)) {
	if ($nodeid =~ /^([^:]+):([-\w\/\/:]+)$/) {
	    $nodeid = $1;
	    $iface  = $2;
	}
	else {
	    usage();
	}
    }
    my $interface = Interface->LookupByIface($nodeid, $iface);
    if (!defined($interface)) {
	fatal("No such interface to delete");
    }

    #
    # See if in use. 
    #
    if (Lan->FindLansByMember($nodeid, $iface)) {
	if ($force) {
	    print "$nodeid:$iface appears to be in use; " .
		"continuing anyway...\n";
	}
	else {
	    print "warning: $nodeid:$iface appears to be in use; " .
		"entering impotent mode (use -f to force removal)\n";
	    $impotent = 1;
	}
    }
    if (!$impotent) {
	# Flag indicates it is okay to delete real interface. Safety measure.
	$interface->Delete(1) == 0
	    or fatal("Could not delete $interface");
    }
    return 0;
}

#
# Show interface.
#
sub ShowInterface(@)
{
    my ($nodeid, $iface) = @_;

    if (!defined($iface)) {
	if ($nodeid =~ /^([^:]+):([-\w\/\/:]+)$/) {
	    $nodeid = $1;
	    $iface  = $2;
	}
	else {
	    usage();
	}
    }
    my $interface = Interface->LookupByIface($nodeid, $iface);
    fatal("No such interface")
	if (!defined($interface));
    print "Iface1:\n"
	if ($interface->wiredup());
    $interface->Dump();
    print "\n";

    if ($interface->wiredup()) {
	my $wire = $interface->wire();
	my $switch_interface = Interface->LookupByIface($wire->node_id2(),
							$wire->iface2());
	if (defined($switch_interface)) {
	    print "Iface2:\n";
	    $switch_interface->Dump();
	    print "\n";
	}
	print "Wire:\n";
	$wire->Dump();
    }
    return 0;
}

