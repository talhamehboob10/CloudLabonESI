<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE nstemplate SYSTEM "nstemplate.dtd">
<!--
    XML NS template for making a Private Planetlab
-->
<nstemplate name="Create a Private PlanetLab">
    <description>
        This template is for creating a private PlanetLab.
        The only thing you may want to edit is the number of nodes.
    </description>
    <variable name="Count" default="2" descr="Number of nodes (not including PLC)" />
    <variable name="PLCHWType" default="pc3000" descr="Hardware Type for PLC" />
    <variable name="HWType" default="plabpc" descr="Hardware Type for nodes" />
    <!-- This hard-codes the image name, but it seems like we have to do
         that somewhere... -->
    <variable name="ImageName" default="PLAB-PLC-v42" descr = "Disk Image for PLC" />
    <variable name="PLCOnExpLAN" default="0" descr="PLC should run on private Emulab experimental LAN if 1; else on public Emulab control network." />
    <nstext>
        <section><![CDATA[
# plinabox.ns - NS script to make a private PlanetLab on Emulab
#
# May 24, 2006
#
# Questions and comments to testbed-ops@flux.utah.edu

#
# Boilerplate
#
source tb_compat.tcl
set ns [new Simulator]

# Hack: node types plab pcs are known to work on
tb-make-soft-vtype plabpc {pc850 pc2400c2}

set num_pcs <Count />

#
# Create the PLC
#
set plc [$ns node]
tb-set-node-os $plc <ImageName />
tb-set-node-plab-role $plc plc
tb-set-hardware $plc <PLCHWType />

set privatePLC <PLCOnExpLAN />

# 
# Create the nodes
#
set lan_string "$plc"
for {set i 1} {$i <= $num_pcs} {incr i} { 
  set node($i) [$ns node]
  tb-set-node-plab-role $node($i) node
  tb-set-hardware $node($i) <HWType />
  append lan_string " $node($i)"
}

set lan [$ns make-lan $lan_string 100Mb 0ms]

if { $privatePLC == 1 } {
  tb-set-node-plab-plcnet $plc $lan
  for {set i 1} {$i <= $num_pcs} {incr i} {
    tb-set-node-plab-plcnet $node($i) $lan
  }
}

#
# Boilerplate
#
$ns rtproto Static
$ns run
        ]]></section>
    </nstext>
</nstemplate>
