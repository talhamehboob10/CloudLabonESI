#!/usr/bin/perl -w
#
# Copyright (c) 2010-2018 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use strict;
use Getopt::Std;

#
# Mark an image as running on XEN. 
#
my @OTHER_PARENTS  = ("XEN44-64-STD", "XEN46-64-STD", "XEN49-64-STD");

sub usage()
{
    print STDERR "usage: runsonxen [-p <parent>] <imageid>\n";
    print STDERR "usage: runsonxen -a [-p <parent>]\n";
    print STDERR "usage: runsonxen -c <imageid>\n";
    print STDERR "Options:\n";
    print STDERR " -n      - Impotent mode\n";
    print STDERR " -c      - Clear XEN parent settings completely\n";
    print STDERR " -a      - Operate on all current XEN capable images\n";
    print STDERR " -p      - Set default parent\n";
    exit(1);
}
my $optlist    = "acp:n";
my $doall      = 0;
my $clear      = 0;
my $impotent   = 0;
my $parent;

# Protos
sub fatal($);

#
# Turn off line buffering on output
#
$| = 1;

#
# Load the Testbed support stuff.
#
use lib "@prefix@/lib";
use emdb;
use libEmulab;
use OSImage;

# Default parent for this site is a sitevar.
my $DEFAULT_PARENT = GetSiteVar("general/default_xen_parentosid");

my %options    = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"c"})) {
    $clear = 1;
}
if (defined($options{"a"})) {
    $doall = 1;
}
if (defined($options{"n"})) {
    $impotent = 1;
}
if (defined($options{"p"})) {
    $parent = $options{"p"};
    @OTHER_PARENTS = ($DEFAULT_PARENT, @OTHER_PARENTS);
}
else {
    $parent = $DEFAULT_PARENT;
}
usage()
    if (!$doall && !@ARGV);

#
# List of images to operate on.
#
my @images = ();

if ($doall) {
    my $query_result =
	DBQueryFatal("select distinct v.osid from os_info_versions as v ".
		     "left join os_info_versions as v2 on ".
		     "     v2.osid=v.def_parentosid ".
		     "where v.deleted is null and ".
		     "      v.def_parentosid is not null and ".
		     "      FIND_IN_SET('xen-host', v2.osfeatures)");

    while (my ($osid) = $query_result->fetchrow_array()) {
	my $image = OSImage->Lookup($osid);
	push(@images, $image)
	    if (defined($image));
    }
}
else {
    my $image = OSImage->Lookup($ARGV[0]);
    if (!defined($image)) {
	fatal("No such image");
    }
    @images = ($image);
}

if ($clear) {
    foreach my $image (@images) {
	my $imageid = $image->imageid();
	my $osid    = $image->osid();
	if ($impotent) {
	    print "Would clear parents for $image\n";
	}
	else {
	    DBQueryFatal("delete from osidtoimageid ".
			 "where osid='$imageid' and type='pcvm'");
	    DBQueryFatal("delete from os_submap ".
			 "where osid='$imageid'");
	}
    }
    exit(0);
}

#
# Find the "default" parent image and the list of others parents.
#
my $parent_image = OSImage->Lookup($parent);
if (!defined($parent_image)) {
    $parent_image = OSImage->LookupByName($parent);
    if (!defined($parent_image)) {
	fatal("No such parent $parent");
    }
}
my @other_parents = ();
foreach my $imagename (@OTHER_PARENTS) {
    my $osimage = OSImage->LookupByName($imagename);
    push(@other_parents, $osimage)
	if (defined($osimage));
}

#
# Loop through all images. 
#
foreach my $image (@images) {
    if ($impotent) {
	print "Would set $image to run on $parent_image (default)\n";
    }
    else {
	$image->SetParentOS($parent_image);
	$image->SetRunsOnParent($parent_image);
    }
    # And the rest of the parents.
    foreach my $other_parent (@other_parents) {
	if ($impotent) {
	    print "  Would set $image to run on $other_parent\n";
	}
	else {
	    $image->SetRunsOnParent($other_parent);
	}
    }
    if ($impotent) {
	print "  Setting $image to run on type pcvm\n";
    }
    else {
	$image->SetRunsOnNodeType("pcvm");
    }
}
exit(0);

sub fatal($) {
    my ($mesg) = $_[0];

    print STDERR "*** $0:\n".
	         "    $mesg\n";
    exit(-1);
}
