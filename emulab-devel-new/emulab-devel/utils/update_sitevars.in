#!/usr/bin/perl -w
#
# Copyright (c) 2012, 2018 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Socket;
use strict;
use Getopt::Std;

#
# Update site-specific site variables.
# The intent is that this can be run at any time to update "things that
# might change." We'll see how that works out...
#
sub usage()
{
    print("Usage: update_sitevars [-d level] [-n] [host]\n");
    exit(-1);
}
my $optlist = "d:nvqi";
my $debug   = 0;
my $doit    = 1;
my $verify  = 0;
my $quiet   = 0;
my $verify_count = 0;
my $hostip;

#
# Configure variables
#
my $TB		= "@prefix@";
my $SBINDIR	= "$TB/sbin";
my $OPSVM_ENABLE= @OPSVM_ENABLE@;

my $NC_NET	= "@CONTROL_NETWORK@";
my $NC_MASK	= "@CONTROL_NETMASK@";
my $PR_NET	= "@PRIVATE_NETWORK@";
my $PR_MASK	= "@PRIVATE_NETMASK@";
my $PU_NET	= "@PUBLIC_NETWORK@";
my $PU_MASK	= "@PUBLIC_NETMASK@";

my $GW_IP	= "@CONTROL_ROUTER_IP@";
my $BOSS_IP	= "@BOSSNODE_IP@";
my $OPS_IP	= "@USERNODE_IP@";
my $FS_IP	= "@FSNODE_IP@";

my $sshopt      = "-o ConnectTimeout=5 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null";

#
# Untaint the path
#
$ENV{'PATH'} = "$TB/bin:$TB/sbin:/bin:/usr/bin:/usr/bin:/usr/sbin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Load the Testbed support stuff.
#
use lib "@prefix@/lib";
use emdb;
use libEmulab;
#use EmulabConstants;

# Protos
sub update_arplockdown();
sub fatal($);
sub ExecQuiet($$);

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = $options{"d"};
}
if (defined($options{"i"}) || defined($options{"n"})) {
    $doit = 0;
}
if (defined($options{"v"})) {
    $verify = 1;
    $doit = 0;
}
if (defined($options{"q"})) {
    $quiet = 1;
}
if (@ARGV > 0) {
    my $addr = inet_aton($ARGV[0]);
    if ($addr) {
	$hostip = inet_ntoa($addr);
    }
    if (!$hostip) {
	fatal("Could not resolve " . $ARGV[0]);
    }
    my $hostnet = inet_ntoa(inet_aton($hostip) & inet_aton($NC_MASK));
    my $nodenet = inet_ntoa(inet_aton($NC_NET) & inet_aton($NC_MASK));
    if ($hostnet ne $nodenet) {
	fatal("Node " . $ARGV[0] . " is not on the not control net ($NC_NET)");
    }
    shift @ARGV;
}
usage() 
    if (@ARGV != 0);

#
# Right now, all we know how to do is update the ARP-related sitevars
#
update_arplockdown();

if ($verify) {
    if (!$quiet && $verify_count) {
	print "*** Your site variables are out of date.\n";
	print "    Run 'update_sitevars' to update them as indicated.\n";
    }
    exit($verify_count);
}
exit(0);

sub update_arplockdown()
{
    my %vars = (
	"node/gw_ip" => {
	    'desc'     => "IP address of the control net router (NULL if none)",
	    'defval'   => "",
	},
	"node/gw_mac" => {
	    'desc'     => "MAC address of the control net router (NULL if none)",
	    'defval'   => "",
	},
	"node/boss_ip" => {
	    'desc'     => "IP address of the boss node",
	    'defval'   => "",
	},
	"node/boss_mac" => {
	    'desc'     => "MAC address of the boss node (NULL if behind GW)",
	    'defval'   => "",
	},
	"node/ops_ip" => {
	    'desc'     => "IP address of the ops node",
	    'defval'   => "",
	},
	"node/ops_mac" => {
	    'desc'     => "MAC address of the ops node (NULL if behind GW)",
	    'defval'   => "",
	},
	"node/fs_ip" => {
	    'desc'     => "IP address of the fs node (same as ops if same node)",
	    'defval'   => "",
	},
	"node/fs_mac" => {
	    'desc'     => "MAC address of the fs node (NULL if behind GW, same as ops if same node)",
	    'defval'   => "",
	}
    );

    #
    # Make sure all the sitevars exist
    #
    foreach my $name (keys %vars) {
	if (!SiteVarExists($name)) {
	    my $desc = $vars{$name}{'desc'};
	    my $defval = $vars{$name}{'defval'};
	    if ($doit) {
		if (!CreateSiteVar($name, $desc, $defval)) {
		    fatal("Could not create sitevar '$name'");
		}
	    } else {
		$verify_count++;
		if (!$quiet) {
		    print STDERR "Would create sitevar '$name' [$desc]\n";
		}
	    }
	}

	#
	# XXX make sure the description is up to date
	#
	else {
	    my $desc = $vars{$name}{'desc'};
	    my $odesc = GetSiteVarDesc($name);

	    if ($desc ne $odesc) {
		if ($doit) {
		    print "Updating description of $name from '$odesc' to '$desc'\n";
		    SetSiteVarDesc($name, $desc);
		} else {
		    $verify_count++;
		    if (!$quiet) {
			print "Would update description of $name\n";
		    }
		}
	    }
	}
    }

    my ($gw_mac, $boss_mac, $ops_mac, $fs_mac) = GetMACs();

    #
    # Update site variables
    #
    foreach my $name (sort keys %vars) {
	my $curval = "";
	if ($doit || SiteVarExists($name)) {
	    $curval = GetSiteVar($name);
	}
	if ($name !~ /^node\/(.*)_(.*)$/) {
	    next;
	}
	my $host = $1;
	my $field = $2;
	my $newval = undef;
	if ($host eq "gw") {
	    $newval = ($field eq "ip") ? $GW_IP : $gw_mac;
	} elsif ($host eq "boss") {
	    $newval = ($field eq "ip") ? $BOSS_IP : $boss_mac;
	} elsif ($host eq "ops") {
	    $newval = ($field eq "ip") ? $OPS_IP : $ops_mac;
	} elsif ($host eq "fs") {
	    $newval = ($field eq "ip") ? $FS_IP : $fs_mac;
	}

	# XXX use empty values rather than NULL unless old val is also NULL
	if (defined($curval) && !defined($newval)) {
	    $newval = "";
	}

	if (!defined($newval) && !defined($curval)) {
	    next;
	}
	if (!defined($newval) || !defined($curval) || $newval ne $curval) {
	    if ($doit) {
		print "Changing $name from ";
	    } else {
		$verify_count++;
		if (!$quiet) {
		    print "Would change $name from ";
		}
	    }
	    if ($doit || !$quiet) {
		if (defined($curval)) {
		    print "'$curval'";
		} else {
		    print "undefined";
		}
		print " to ";
		if (defined($newval)) {
		    print "'$newval'";
		} else {
		    print "undefined";
		}
		print "\n";
	    }
	    if ($doit && !SetSiteVar($name, $newval)) {
		fatal("Could not set sitevar '$name'");
	    }
	}
    }
}

sub GetMACs()
{
    #
    # Determine if there is a gateway and which (if any) servers are
    # behind it.
    #
    my $nodenet = inet_ntoa(inet_aton($NC_NET) & inet_aton($NC_MASK));
    my $privnet = inet_ntoa(inet_aton($PR_NET) & inet_aton($PR_MASK));
    my $pubnet = inet_ntoa(inet_aton($PU_NET) & inet_aton($PU_MASK));
    my $gwnet = inet_ntoa(inet_aton($GW_IP) & inet_aton($NC_MASK));
    my $bossnet = inet_ntoa(inet_aton($BOSS_IP) & inet_aton($PR_MASK));
    my $opsnet = inet_ntoa(inet_aton($OPS_IP) & inet_aton($PU_MASK));
    my $fsnet = inet_ntoa(inet_aton($FS_IP) & inet_aton($PU_MASK));
    my $bossoncnet = ($bossnet eq $nodenet) ? 1 : 0;
    my $opsoncnet = ($opsnet eq $nodenet) ? 1 : 0;
    my $fsoncnet = ($fsnet eq $nodenet) ? 1 : 0;
    my $fsisops = ($OPS_IP eq $FS_IP) ? 1 : 0;

    #
    # Gateway: even if everybody is on the node control net, there may
    # still be a gateway to the outside world. This might be a seperate 
    # box, or it may be one of boss/ops.
    #
    my $gotgw = ($nodenet eq $privnet && $nodenet eq $pubnet) ? 0 : 1;
    if ($gotgw && !$GW_IP) {
	fatal("multiple network segments but GW_IP not defined;".
	      " fix your defs file and re-run!\n");
    }

    #
    # If at least one of our servers is on the control net or they
    # explicitly specified a host, our job is easy.
    #
    my ($gw_mac, $boss_mac, $ops_mac, $fs_mac);
    if ($hostip || $bossoncnet || $opsoncnet || (!$fsisops && $fsoncnet)) {
	my $host;
	if ($bossoncnet) {
	    $host = $BOSS_IP;
	} elsif ($opsoncnet) {
	    $host = $OPS_IP;
	} elsif ($fsoncnet) {
	    $host = $FS_IP;
	} else {
	    $host = $hostip;
	}
	if ($hostip && $host ne $hostip) {
	    print STDERR "WARNING: using $host instead of $hostip...\n";
	}

	# Make sure the host is alive and running FreeBSD
	if (GetHostOS($host) ne "FreeBSD") {
	    fatal("Host $host is not up or not running FreeBSD");
	}

	if ($gotgw || $GW_IP) {
	    $gw_mac = GetMACFromARP($host, $GW_IP);
	}
	if ($bossoncnet) {
	    $boss_mac = GetMACFromARP($host, $BOSS_IP);
	}
	if ($opsoncnet) {
	    $ops_mac = GetMACFromARP($host, $OPS_IP);
	}
	elsif ($OPSVM_ENABLE) {
	    $ops_mac = $boss_mac;
	}
	if ($fsoncnet) {
	    if ($fsisops) {
		$fs_mac = $ops_mac;
	    } else {
		$fs_mac = GetMACFromARP($host, $FS_IP);
	    }
	}
    }

    #
    # Otherwise, there is nothing we can do!
    # The good news is that the only variable that will be set for which
    # we cannot determine a value, is the gw_mac. For that we just return
    # the current value.
    #
    else {
	$gw_mac = GetSiteVar("node/gw_mac");
	if (!$quiet) {
	    print STDERR "update_sitevars: WARNING: cannot determine GW mac, ";
	    if ($gw_mac) {
		print STDERR "keeping existing value '$gw_mac'\n";
	    } else {
		print STDERR "you need to manually fix this value\n";
	    }
	}
    }

    if ((!$doit && !($verify && $quiet)) || $debug) {
	if ($gotgw) {
	    print "Multiple-segment configuration:\n";
	    print "  Private net: $PR_NET/$PR_MASK\n";
	    print "  Public net: $PU_NET/$PU_MASK\n";
	} else {
	    print "Single-segment configuration:\n";
	}
	print "  Node control net: $NC_NET/$NC_MASK\n";
	if ($gotgw || $GW_IP) {
	    print "  Gateway: $GW_IP ($gw_mac)\n";
	} else {
	    print "  No gateway\n";
	}
	if ($bossoncnet) {
	    print "  Boss on node control net: $BOSS_IP ($boss_mac)\n";
	} else {
	    print "  Boss on private net: $BOSS_IP\n";
	}
	if ($fsisops) {
	    if ($opsoncnet) {
		print "  Ops/fs on node control net: $OPS_IP ($ops_mac)\n";
	    } else {
		print "  Ops/fs on public net: $OPS_IP\n";
	    }
	} else {
	    if ($opsoncnet) {
		print "  Ops on node control net: $OPS_IP ($ops_mac)\n";
	    } else {
		print "  Ops on public net: $OPS_IP\n";
	    }
	    if ($fsoncnet) {
		print "  Fs on node control net: $FS_IP ($fs_mac)\n";
	    } else {
		print "  Fs on public net: $FS_IP\n";
	    }
	}
	if ($doit) {
	    print "\n";
	}
    }

    return ($gw_mac, $boss_mac, $ops_mac, $fs_mac);
}

sub GetHostOS($)
{
    my ($ip) = @_;
    my $output = "";

    my $sshcmd = "";
    if ($ip ne $BOSS_IP) {
	$sshcmd = "ssh $sshopt $ip ";
    }

    if (ExecQuiet("$sshcmd uname", \$output)) {
	fatal("Could not get uname info from $ip");
    }
    if ($output =~ /FreeBSD/) {
	return "FreeBSD";
    }

    return "unsupported";
}

#
# Find a MAC address from ifconfig info.
# We ssh to $ip, harvest the ifconfig info, and parse that to find $ip
# and its MAC address. Returns the MAC string or undef on error.
#
sub GetMACFromIfconfig($)
{
    my ($ip) = @_;
    my $output = "";

    my $sshcmd = "";
    if ($ip ne $BOSS_IP) {
	$sshcmd = "ssh $sshopt $ip ";
    }

    if (ExecQuiet("$sshcmd ifconfig", \$output)) {
	fatal("Could not harvest ifconfig info from $ip");
    }

    # XXX this is probably BSD-specific
    my $iface = "";
    my $mac = "";
    my $nextmac = 0;
    foreach (split('\n', $output)) {
	if (/^([^\s:]+):/) {
	    $iface = $1;
	    $mac = "";
	    $nextmac = 0;
	    next;
	}
	if (/ether (..:..:..:..:..:..)/) {
	    $mac = $1;
	    if ($nextmac) {
		return $mac;
	    }
	    next;
	}
	if (/inet ([\d\.]+)/) {
	    if ($1 eq $ip) {
		if ($mac) {
		    return $mac;
		}
		$nextmac = 1;
	    }
	    next;
	}
    }

    return undef;
}

#
# Find a MAC address from ARP info.
# We ssh to $host, run "ping $ip", harvest the ARP info, and parse that to
# find $ip and get the MAC address. Returns the MAC string or undef on error.
#
sub GetMACFromARP($$)
{
    my ($host,$ip) = @_;
    my $output = "";

    my $sshcmd = "sh -c";
    if ($host ne $BOSS_IP) {
	$sshcmd = "ssh $sshopt $host";
    }

    if (ExecQuiet("$sshcmd 'ping -t 5 -c 1 $ip; arp -an'", \$output)) {
	fatal("Could not harvest ifconfig info from $ip");
    }

    # XXX very much FreeBSD specific
    foreach (split('\n', $output)) {
	if (/^\S+ \(([\d\.]+)\) at (..:..:..:..:..:..) on /) {
	    if ($ip eq $1) {
		return $2;
	    }
	}
    }

    return undef;
}

#
# Run a command, being sure to capture all output. 
#
sub ExecQuiet($$)
{
    #
    # Use a pipe read, so that we save away the output
    #
    my ($command,$outp) = @_;
    my $output    = "";

    if ($debug > 1) {
	print STDERR "exec('$command')\n";
    }

    if (!open(PIPE,"$command 2>&1 |")) {
	print STDERR "Failed pipe('$command')\n";
	return -1;
    }
    while (<PIPE>) {
	$output .= $_;
    }
    close(PIPE);
    my $exit_value  = $? >> 8;

    if ($exit_value) {
	print STDERR "Failed: exec('$command'):\n";
    }
    if ($debug > 2 || $exit_value) {
	print STDERR "$output\n";
    }
    
    $$outp = $output
	if ($outp);

    return $exit_value;
}

sub fatal($)
{
    my ($mesg) = @_;

    print STDERR "*** $0:\n".
	         "    $mesg\n";
    exit(-1);
}
