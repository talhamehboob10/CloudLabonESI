#!/usr/bin/perl -w
#
# Copyright (c) 2003-2018 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use Data::Dumper;

#
# Add a wire to the DB.
#
sub usage()
{
    print STDERR "Usage: addwire [-t type] [-c id [-l len]] ".
      "node1:iface1 portinfo1 node2:iface2 portinfo2\n";
    print STDERR "Usage: addwire -r node1:iface1 node2:iface2\n";
    print STDERR "Usage: addwire -i node1:iface1 node2:iface2\n";
    print STDERR "Options:\n";
    print STDERR " -v        - Turn on debugging\n";
    print STDERR " -n        - Impotent mode\n";
    print STDERR " -r        - Delete wire\n";
    print STDERR " -i        - Show info about wire from DB\n";
    print STDERR " -f        - (with -r) force deletion, even if wire is in use\n";
    print STDERR " -c cable  - Cable ID\n";
    print STDERR " -l len    - Cable length\n";
    print STDERR " -t type   - Wire type (defaults to Unused)\n";
    print STDERR " portinfo  - card,port (for now, might change later)\n";
	
    exit(-1);
}
my $optlist   = "t:nvfrc:l:i";
my $verbose   = 0;
my $impotent  = 0;
my $remove    = 0;
my $info      = 0;
my $force     = 0;
my $type      = "Unused";
my $cable;
my $cablelen;
my ($node_id1,$iface_id1,$card1,$port1,$node_id2,$iface_id2,$card2,$port2);

# Protos
sub fatal($);
sub RemoveWire($$);
sub ShowWire($$);

#
# Configure variables
#
my $TB          = "@prefix@";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use emdb;
use EmulabConstants;
use emutil;
use User;
use Node;
use NodeType;
use Interface;
use Lan;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/sbin:/usr/bin:";

#
# Parse command arguments. 
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{'h'})) {
    usage();
}
if (defined($options{'v'})) {
    $verbose = 1;
}
if (defined($options{'n'})) {
    $impotent = 1;
}
if (defined($options{'r'})) {
    $remove = 1;
    usage()
	if (@ARGV != 2);
}
if (defined($options{'i'})) {
    $info = 1;
    usage()
	if (@ARGV != 2);
}
if (defined($options{'f'})) {
    $force = 1;
}
if (defined($options{'t'})) {
    $type = $options{'t'};
    if ($type !~ /^(Trunk|Node|Control|Power|Serial|Unused|Management)$/) {
	fatal("Type must be one of: ".
	      "Trunk|Node|Control|Power|Serial|Unused|Management");
    }
}
if (defined($options{'c'})) {
    $cable = $options{'c'};
}
if (defined($options{'l'})) {
    $cablelen = $options{'l'};
}


#
# Verify user, must be admin.
#
my $this_user = User->ThisUser();
if (! defined($this_user)) {
    fatal("You ($UID) do not exist!");
}
if (!$this_user->IsAdmin()) {
    fatal("You are not a testbed administrator!");
}
if ($remove) {
    exit(RemoveWire($ARGV[0],$ARGV[1]));
}
elsif ($info) {
    exit(ShowWire($ARGV[0],$ARGV[1]));
}
usage()
    if (@ARGV != 4);

if ($ARGV[0] =~ /^([-\w]+):(.+)$/) {
    $node_id1  = $1;
    $iface_id1 = $2;
}
else {
    fatal("Invalid argument for interface: " . $ARGV[0]);
}
if ($ARGV[1] =~ /^(\d+),(\d+)$/) {
    $card1 = $1;
    $port1 = $2;
}
else {
    fatal("Invalid argument for portinfo: " . $ARGV[1]);
}
if ($ARGV[2] =~ /^([-\w]+):(.+)$/) {
    $node_id2  = $1;
    $iface_id2 = $2;
}
else {
    fatal("Invalid argument for interface: " . $ARGV[2]);
}
if ($ARGV[3] =~ /^(\d+),(\d+)$/) {
    $card2 = $1;
    $port2 = $2;
}
else {
    fatal("Invalid argument for portinfo: " . $ARGV[3]);
}

#
# Cannot add wires unless interfaces exist for both side.
#
my $interface1 = Interface->LookupByIface($node_id1, $iface_id1);
if (!defined($interface1)) {
    fatal("No interface for $node_id1:$iface_id1");
}
my $interface2 = Interface->LookupByIface($node_id2, $iface_id2);
if (!defined($interface2)) {
    fatal("No interface for $node_id2:$iface_id2");
}
#
# Not allowed to have any existing wires using either interface.
#
my $wire = Interface::Wire->LookupAnyByIface($node_id1, $iface_id1);
if (defined($wire)) {
    fatal("Wire using interface one already exists: $wire\n");
}
$wire = Interface::Wire->LookupAnyByIface($node_id2, $iface_id2);
if (defined($wire)) {
    fatal("Wire using interface two already exists: $wire\n");
}
# Another check using card/port info, just to be sure.
$wire = Interface::Wire->LookupAny($node_id1, $card1, $port1);
if (defined($wire)) {
    fatal("Wire using interface two already exists: $wire\n");
}
$wire = Interface::Wire->LookupAny($node_id2, $card2, $port2);
if (defined($wire)) {
    fatal("Wire using interface two already exists: $wire\n");
}

#
# Create the wire.
#
my $wireargs = {
    "card1"  => $card1,
    "port1"  => $port1,
    "card2"  => $card2,
    "port2"  => $port2,
};
$wireargs->{"cable"}  = $cable if (defined($cable));
$wireargs->{"cablelen"} = $cablelen if (defined($cablelen));

if ($impotent || $verbose) {
    if ($verbose) {
	print "Creating interface with arguments:\n";
    }
    else {
	print "Would create interface with arguments:\n";
    }
    print Dumper($wireargs);
}
if (!$impotent) {
    Interface::Wire->Create($interface1, $interface2, $type, $wireargs)
	or fatal("Could not create wire entry");
}
exit(0);

sub fatal($)
{
    my ($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}

#
# Remove a wire.
#
sub RemoveWire($$)
{
    my ($arg1, $arg2) = @_;

    if ($arg1 =~ /^([-\w]+):(.+)$/) {
	$node_id1  = $1;
	$iface_id1 = $2;
    }
    else {
	fatal("Invalid argument for interface: " . $arg1);
    }
    if ($arg2 =~ /^([-\w]+):(.+)$/) {
	$node_id2  = $1;
	$iface_id2 = $2;
    }
    else {
	fatal("Invalid argument for interface: " . $arg2);
    }
    my $wire = Interface::Wire->LookupAnyByIfaces($node_id1, $iface_id1,
						  $node_id2, $iface_id2);
    if (!defined($wire)) {
	fatal("No such wire");
    }

    my $interface = Interface->LookupByIface($wire->node_id1(),
					     $wire->iface1());
    if (defined($interface)) {
	if (Lan->FindLansByMember($interface->node_id(), $interface->iface())) {
	    if ($force) {
		print "$interface appears to be in use; continuing anyway...\n";
	    }
	    else {
		print "warning: $interface appears to be in use; " .
		    "entering impotent mode (use -f to force removal)\n";
		$impotent = 1;
	    }
	}
    }
    $interface = Interface->LookupByIface($wire->node_id2(),
					  $wire->iface2());
    if (defined($interface)) {
	if (Lan->FindLansByMember($interface->node_id(), $interface->iface())) {
	    if ($force) {
		print "$interface appears to be in use; continuing anyway...\n";
	    }
	    else {
		print "warning: $interface appears to be in use; " .
		    "entering impotent mode (use -f to force removal)\n";
		$impotent = 1;
	    }
	}
    }
    if ($impotent) {
	print "Would delete $wire\n";
    }
    else {
	$wire->Delete(1) == 0
	    or fatal("Could not delete $wire");
    }
    return 0;
}

#
# Display a wire.
#
sub ShowWire($$)
{
    my ($arg1, $arg2) = @_;

    if ($arg1 =~ /^([-\w]+):(.+)$/) {
	$node_id1  = $1;
	$iface_id1 = $2;
    }
    else {
	fatal("Invalid argument for interface: " . $arg1);
    }
    if ($arg2 =~ /^([-\w]+):(.+)$/) {
	$node_id2  = $1;
	$iface_id2 = $2;
    }
    else {
	fatal("Invalid argument for interface: " . $arg2);
    }
    my $wire = Interface::Wire->LookupAnyByIfaces($node_id1, $iface_id1,
						  $node_id2, $iface_id2);
    if (!defined($wire)) {
	fatal("No such wire");
    }
    $wire->Dump();
    my ($interface1,$interface2) = $wire->Interfaces();
    if (defined($interface1)) {
	print "\n";
	print "Interface1:\n";
	$interface1->Dump();
    }
    if (defined($interface2)) {
	print "\n";
	print "Interface2:\n";
	$interface2->Dump();
    }
    return 0;
}

