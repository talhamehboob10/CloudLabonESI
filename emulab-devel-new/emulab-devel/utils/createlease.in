#!/usr/bin/perl -w
#
# Copyright (c) 2013 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use Date::Parse;

#
# Create a new lease.
#
sub usage()
{
    print STDERR "Usage: createlease [-hd] [-o uid] [-a attrs] -t type -e expiration name\n";
    print STDERR "   -h       This message\n";
    print STDERR "   -d       Print additional debug info\n";
    print STDERR "   -t type  Type (must be specified)\n";
    print STDERR "   -o uid   Owner (defaults to caller)\n";
    print STDERR "   -e date  Expiration date (or 'never')\n";
    print STDERR "   -a attrs comma-seperated string of key=value attributes\n";
    print STDERR "   name     Name (in the form <pid>/<id>)\n";
    exit(-1);
}
my $optlist  = "dho:t:e:a:";
my $debug = 0;
my $pid;
my $uid;
my $expire;
my $ltype;
my $lname;
my $attrstr = "";
my %attrs = ();

# Valid lease types
my %ltypes = (
    "stdataset" => "Short-term dataset",
    "ltdataset" => "Long-term dataset"
);

# Protos
sub fatal($);

#
# Configure variables
#
my $TB		 = "@prefix@";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use Lease;
use Project;
use User;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/sbin:/usr/bin:";

#
# XXX this is out of date right now, "deprecated" in favor of
# createdataset since those are the only recognized lease types right
# now. When we have other lease types, this should be updated and
# generalized to handle quotas, etc.
#
fatal("Use 'createdataset' to create dataset leases.");

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{h})) {
    usage();
}
if (defined($options{d})) {
    $debug++;
}
if (defined($options{o})) {
    $uid = $options{o};
}
if (defined($options{t})) {
    $ltype = $options{t};
}
if (defined($options{e})) {
    if ($options{e} eq "never") {
	$expire = 0;
    } else {
	$expire = str2time($options{e});
	if (!defined($expire)) {
	    fatal("Could not parse expiration date.");
	}
    }
}
if (defined($options{a})) {
    $attrstr = $options{a};
}

if (!$ltype || @ARGV != 1) {
    print STDERR "Must specify type and lease name\n";
    usage();
}

# lease name must include a project
$lname = $ARGV[0];
if ($lname =~ /^([-\w]+)\/([-\w]+)$/) {
    $pid = $1;
    $lname = $2;
} else {
    fatal("Lease name $lname not in the form <pid>/<lname>.");
}

my $this_user = User->ThisUser();
if (! defined($this_user)) {
    fatal("You ($UID) do not exist!");
}

#
# Check owner: caller must be admin or be the specified user.
#
my $user;
if ($uid) {
    $user = User->Lookup($uid);
    if (TBAdmin()) {
	if (!defined($user)) {
	    fatal("No such user $uid");
	}
    } else {
	if (!$user || !$user->SameUser($this_user)) {
	    fatal("Must be admin to act on behalf of uid $uid");
	}
    }
} else {
    $user = $this_user;
    $uid = $this_user->uid();
}

#
# Check project: caller must be admin or have local_root access in the project.
#
my $project = Project->Lookup($pid);
if (!defined($project)) {
    fatal("No such project $pid");
}
if (!TBAdmin() &&
    !$project->AccessCheck($this_user, TB_PROJECT_CREATELEASE())) {
    fatal("Must have local_root privileges in pid $pid");
}

#
# Check type: currently only two defined.
#
if (!exists($ltypes{$ltype})) {
    print STDERR "Invalid lease type $ltype, should be one of:\n";
    foreach my $l (keys %ltypes) {
	print STDERR "'$l': ", $ltypes{$l}, "\n";
    }
    exit(1);
}

#
# Check expiration: must be in the future.
#
if ($expire < time()) {
    fatal("Expiration date is in the past!");
}

#
# Check attributes: right now, must just be a well-formed string.
#
foreach my $kv (split(',', $attrstr)) {
    if ($kv =~ /^([-\w]+)=([-\w\.\+\/:]+)$/) {
	$attrs{$1} = $2;
    } else {
	fatal("Malformed attribute string '$attrstr'.");
    }
}

#
# Check name: must not already exist.
#
if (Lease->Lookup($pid, $lname)) {
    fatal("Lease $pid/$lname already exists.");
}

my $args = {
    "lease_id" => $lname,
    "pid" => $project,
    "uid" => $user,
    "type" => $ltype,
    "lease_end" => $expire,
    "state" => LEASE_STATE_UNAPPROVED()
};

if (!Lease->Create($args, \%attrs)) {
    fatal("Could not create lease $lname in $pid.");
}

exit(0);

sub fatal($)
{
    my ($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}

