#!/usr/bin/perl -w
#
# Copyright (c) 2000-2020 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use File::Temp qw(tempfile);

#
# Create a holding experiment. Always in emulab-ops, elabman is the leader.
#
sub usage()
{
    print STDOUT "Usage: mksyexp [-n] [-m <description>] pid\n";
    print STDOUT "-n     Report what would be done\n";
    print STDOUT "-h     This message\n";
    print STDOUT "-m     Optional experiment description.\n";
    exit(-1);
}
my $optlist     = "hnm:";
my $impotent    = 0;
my $short       = "System Experiment";
my $description = "$short --- DO NOT DELETE";

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBDOCBASE   = "@TBDOCBASE@";
my $BATCHEXP    = "$TB/bin/batchexp";
my $SUDO        = "/usr/local/bin/sudo";
my $WAP         = "$TB/sbin/withadminprivs";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use emdb;
use emutil;
use EmulabConstants;
use libtestbed;
use User;
use Project;
use Experiment;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/sbin:/usr/bin:";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Protos
sub fatal($);

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"h"})) {
    usage();
}
if (defined($options{"n"})) {
    $impotent = 1;
}
if (defined($options{"m"})) {
    $description = $options{"m"};
}
usage()
    if (@ARGV != 1);

my $eid = $ARGV[0];

my $this_user = User->ThisUser();
if (! defined($this_user)) {
    fatal("You ($UID) do not exist!");
}
if (!$this_user->IsAdmin()) {
    fatal("You not have permission to do this!");
}

my $project = Project->Lookup(TBOPSPID());
my $leader  = User->Lookup(PROTOUSER());

if (!defined($project)) {
    fatal("Project does not exist");
}
my $pid = $project->pid();

if (!defined($leader)) {
    fatal("User does not exist");
}
if (Experiment->Lookup(TBOPSPID(), $eid)) {
    fatal("Experiment already exists");
}
my $command = "$SUDO -u ". PROTOUSER() . " $WAP $BATCHEXP ".
    "  -q -i -k -j -w -f -n -S '$short' -L '$short' -E '$description' ".
    "  -p $pid -e $eid";
if ($impotent) {
    print "$command\n";
    exit(0);
}
system($command);
if ($?) {
    fatal("Could not create new experiment");
}
exit(0);

sub fatal($)
{
    my ($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}
