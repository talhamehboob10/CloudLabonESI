#!/usr/bin/perl -w
#
# Copyright (c) 2000-2020 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;

#
# Disable cnet watch on nodes/experiment
#
sub usage()
{
    print STDOUT "Usage: cnetwatch_disable [-h] [-r] [node ....]\n";
    print STDOUT "       cnetwatch_disable [-h] [-r] -e pid,eid\n";
    print STDOUT "-h     This message\n";
    print STDOUT "-r     Revoke disable (renable)\n";
    exit(-1);
}
my $optlist  = "hdre:";
my $debug    = 0;
my $revoke   = 0;

#
# Configure variables
#
my $TB		= "@prefix@";
my $CNETDISABLE = "cnetwatch_disable";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use emdb;
use emutil;
use libtestbed;
use User;
use Node;
use Experiment;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/sbin:/usr/bin:";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Locals
my @nodes       = ();

# Protos
sub fatal($);

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"h"})) {
    usage();
}
if (defined($options{"d"})) {
    $debug++;
}
if (defined($options{"r"})) {
    $revoke++;
}

#
# For perm checks.
#
my $this_user = User->ThisUser();
if (! defined($this_user)) {
    fatal("You ($UID) do not exist!");
}
if (!$this_user->IsAdmin()) {
    fatal("Only administrators can do this");
}

if (defined($options{"e"})) {
    if (@ARGV) {
	usage();
    }
    my $experiment = Experiment->Lookup($options{"e"});
    if (!defined($experiment)) {
	fatal("Unknown experiment!");
    }
    @nodes = $experiment->NodeList();
    if (! @nodes) {
	fatal("There are no nodes reserved in $experiment");
    }
}
else {
    if (! @ARGV) {
	usage();
    }
    foreach my $n (@ARGV) {
	my $node = Node->Lookup($n);
	if (!defined($node)) {
	    fatal("Node $n does not exist!");
	}
	if (!$node->IsReserved()) {
	    fatal("Node $n is not reserved; reserve it first!");
	}
	push(@nodes, $node);
    }
}

my $errors = 0;
foreach my $node (@nodes) {
    my $node_id = $node->node_id();
    
    if ($revoke) {
	if ($debug) {
	    print "Clearing $CNETDISABLE on $node_id\n";
	}
	$node->ClearNodeAttribute($CNETDISABLE) == 0
	    or $errors++;
    }
    else {
	if ($debug) {
	    print "Setting $CNETDISABLE on $node_id\n";
	}
	$node->SetNodeAttribute($CNETDISABLE, 1) == 0
	    or $errors++;
    }
}
exit($errors);

sub fatal($)
{
    my ($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}
