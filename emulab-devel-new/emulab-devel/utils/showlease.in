#!/usr/bin/perl -w
#
# Copyright (c) 2013-2019 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use Date::Parse;
use POSIX qw(strftime);

#
# Show all leases the caller has access to.
#
sub usage()
{
    print STDERR "Usage: showlease [-hda] [-p pid] [-u uid] lid ...\n";
    print STDERR "   -h      This message\n";
    print STDERR "   -d      Print additional debug info\n";
    print STDERR "   -a      Show all leases (admin only)\n";
    print STDERR "   -g      Show only leases in the 'grace' state\n";
    print STDERR "   -l      Long listing\n";
    print STDERR "   -U      Really long listing (include URNs)\n";
    print STDERR "   -L      Show lock holders (admin only)\n";
    print STDERR "   -D      Describe the system-wide limits on leases\n";
    print STDERR "   -p pid  Show all leases for project <pid>\n";
    print STDERR "   -u uid  Show all leases owned by user <uid>\n";
    print STDERR "   lid ... Show named leases (name is <pid>/<id>)\n";
    exit(-1);
}
my $optlist  = "dhaLDp:u:glU";
my $debug = 0;
my $pid;
my $uid;
my $showall;
my $showgrace;
my $showlockers;
my $showsitevars;
my $verbose = 0;
my @lids = ();
my %sitevars = ();

# Protos
sub fatal($);
sub datestr($);
sub showsitevars();

#
# Configure variables
#
my $TB		 = "@prefix@";
my $TBOPS        = "@TBOPSEMAIL@";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use Lease;
use Project;
use User;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/sbin:/usr/bin:";

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{h})) {
    usage();
}
if (defined($options{d})) {
    $debug++;
}
if (defined($options{a})) {
    $showall = 1;
}
if (defined($options{g})) {
    $showgrace = 1;
}
if (defined($options{l})) {
    $verbose = 1;
}
if (defined($options{U})) {
    $verbose = 2;
}
if (defined($options{L})) {
    $showlockers = 1;
}
if (defined($options{D})) {
    $showsitevars = 1;
}
if (defined($options{p})) {
    $pid = $options{p};
}
if (defined($options{u})) {
    $uid = $options{u};
}
my @lnames = @ARGV;

if ($showall) {
    if ($pid || $uid || @lnames > 0) {
	print STDERR "Cannot use -p/-u or explicit list with -a\n";
	usage();
    }
}
if ($pid && $uid) {
    print STDERR "Specify only one of -p and -u\n";
    usage();
}
if (($pid || $uid) && @lnames > 0) {
    print STDERR "Specify only one of -p/-u and explicit list of lids\n";
    usage();
}
if ($showlockers && !TBAdmin()) {
    print STDERR "Only admin can use -L\n";
    usage();
}

my $this_user = User->ThisUser();
if (! defined($this_user)) {
    fatal("You ($UID) do not exist!");
}

if ($showsitevars) {
    showsitevars();
    exit(0);
}

if ($showall) {
    # Admin can see all leases, others not so much
    foreach my $lid (Lease->AllLeases()) {
	if ($lid->AccessCheck($this_user, LEASE_ACCESS_READINFO())) {
	    push @lids, $lid;
	}
    }
}
elsif ($pid) {
    my $project = Project->Lookup($pid);
    if (!defined($project)) {
	fatal("No such project $pid\n");
    }
    # must be admin or have access to the project
    if (!TBAdmin() &&
	!$project->AccessCheck($this_user, TB_PROJECT_READINFO())) {
	fatal("You do not have access to pid $pid");
    }
    @lids = Lease->AllProjectLeases($project);
}
elsif ($uid) {
    my $user = User->Lookup($uid);
    if (!defined($user)) {
	fatal("No such user $uid\n");
    }
    # must be admin or be the specified user
    if (!TBAdmin() && !$user->SameUser($this_user)) {
	fatal("You do not have access to uid $uid");
    }
    @lids = Lease->AllUserLeases($user);
}
elsif (@lnames > 0) {
    foreach my $name (@lnames) {
	my $lid;
	# lease names must have a project context
	if ($name =~ /^([-\w]+)\/([-\w]+)$/) {
	    $lid = Lease->Lookup($1, $2);
	}
	elsif ($name =~ /^([-\w]+)\/([-\w]+)\/([-\w]+)$/) {
	    $lid = Lease->Lookup($1, $2, $3);
	}
	else {
	    fatal("Lease name $name not in the form <pid>/<lname>");
	}
	if (!defined($lid)) {
	    fatal("Could not access lease $name");
	}
	push @lids, $lid;
    }
}
# special case: no args, show all leases owned by the caller
else {
    @lids = Lease->AllUserLeases($this_user);
}

print STDERR "Found ", scalar(@lids), " leases\n"
    if ($debug);
@lids = sort { $a->pid() cmp $b->pid() || $a->lease_id() cmp $b->lease_id() } @lids;
if (@lids > 0) {
    my %states = (
	"valid" =>      'valid',
	"failed" =>     'failed',
	"unapproved" => 'unappr',
	"grace" =>      'grace',
	"locked" =>     'locked',
	"expired" =>    'expire'
    );
    my $fmt;

    if ($showlockers) {
	$fmt = "%-44s %-8s %4s %-6s %-15s %s\n";

	printf $fmt, "Pid/(Gid/)Name", "Owner", "Type", "State",
	    "Lock Time", "Locker Proc ID";
    } elsif ($showgrace) {
	$fmt = "%-44s %-8s %5s %8s %-11s %-15s %-15s %-15s %-15s %-15s\n";

	printf $fmt, "Pid/(Gid/)Name", "Owner", "Type", "Size", "Exp Policy", "Grace Start", "Grace End", "Last Checked", "Last Used", "Expiration";
    } elsif ($verbose) {
	$fmt = "%-44s %-8s %5s %8s %-6s %3s %3s %-15s %-15s %-15s %s\n";

	printf $fmt, "Pid/(Gid/)Name", "Owner", "Type", "Size", "State", "Use", "Ext",
	    "Inception", "End", "Last used", "Attrs";
    } else {
	$fmt = "%-44s %-8s %5s %8s %-6s %3s\n";

	printf $fmt, "Pid/(Gid/)Name", "Owner", "Type", "Size", "State", "Use";
    }

    foreach my $lease (@lids) {
	my $lname;
	if ($lease->pid() eq $lease->gid()) {
	    $lname = $lease->pid() . "/" . $lease->lease_id();
	} else {
	    $lname = $lease->pid() . "/" . $lease->gid() . "/" .
		$lease->lease_id();
	}

	my $ltype = $lease->type();
	if ($ltype eq "ltdataset") {
	    $ltype = "long";
	} elsif ($ltype eq "stdataset") {
	    $ltype = "short";
	}
	if ($showlockers) {
	    my $lproc = $lease->lockpid();
	    my $ltime;
	    if ($lproc != 0) {
		$ltime = datestr($lease->locktime());
	    } else {
		$ltime = "Unlocked";
		$lproc = "";
	    }
	    printf $fmt, $lname, $lease->owner(), $ltype,
	        $states{$lease->state()}, $ltime, $lproc;
	    next;
	}

	if (!$lease->AccessCheck($this_user, LEASE_ACCESS_READINFO())) {
	    print STDERR "Admin cannot access lease $lease?!\n"
		if (TBAdmin());
	    next;
	}

	#
	# Get the attributes.
	# Note that we treat size special and remove it from the attrlist.
	# Note also that we treat URNs special, only including them for -U.
	#
	my $lsize = "";
	my $attrstr = "";
	my $attrs = $lease->GetAttributes();
	if ($attrs) {
	    my $del = "";
	    foreach my $k (sort keys %{$attrs}) {
		my $v = $attrs->{$k}->{'value'};
		if ($k eq "size") {
		    $lsize = $v;
		    next;
		}
		if ($verbose < 2 && $k =~ /_urn$/) {
		    next;
		}
		$attrstr .= "$del$k=$v";
		$del = ",";
	    }
	}

	if ($showgrace) {
	    next
		if ($lease->state() ne LEASE_STATE_GRACE());

	    my $lt = $lease->type();
	    if (!exists($sitevars{$lt})) {
		$sitevars{$lt} = Lease->SiteVars($lt);
	    }
	    my $grace = $sitevars{$lt}->{'graceperiod'};
	    next
		if (!defined($grace));
	    $grace += $lease->statestamp();

	    my $policy = "none";
	    if ($sitevars{$lt}->{'maxlease'} != 0) {
		if ($sitevars{$lt}->{'maxidle'} != 0) {
		    $policy = "expire+idle";
		} else {
		    $policy = "expire";
		}
	    } elsif ($sitevars{$lt}->{'maxidle'} != 0) {
		$policy = "idle";
	    }
	    my $stime = datestr($lease->statestamp());
	    my $etime = datestr($grace);
	    my $lchecked = datestr($lease->last_checked());
	    my $lused = datestr($lease->last_used());
	    my $expire = datestr($lease->lease_end());
	    printf $fmt, $lname, $lease->owner(), $ltype, $lsize, $policy,
	        $stime, $etime, $lchecked, $lused, $expire;
	    next;
	}

	my $stime = datestr($lease->inception());
	my $etime = datestr($lease->lease_end());
	my $ltime = datestr($lease->last_used());
	my $lusers = $lease->GetReservations();
	if (!$lusers) {
	    $lusers = ();
	}
	if ($verbose) {
	    printf $fmt, $lname, $lease->owner(), $ltype, $lsize,
		$states{$lease->state()}, int(@$lusers), $lease->renewals(),
		$stime, $etime, $ltime, $attrstr;
	} else {
	    printf $fmt, $lname, $lease->owner(), $ltype, $lsize,
		$states{$lease->state()}, int(@$lusers);
	}
    }
}

exit(0);

#
# Per-type Lease sitevars:
#
# maxsize	Max size (MiB) of a dataset
#		(0 == unlimited)
# maxlease	Max time (days) from creation before lease is marked expired
#		(0 == unlimited)
# maxidle	Max time (days) from last use before lease is marked expired
#		(0 == unlimited)
# graceperiod	Time (days) before an expired dataset will be destroyed
#		(0 == no grace period, unlimited makes no sense here)
# autodestroy	If non-zero, destroy expired datasets after grace period
#		otherwise lock them
# usequotas	If non-zero, enforce per-project dataset quotas
# maxextend	Number of times a user can extend the lease
#		(0 == unlimited)
# extendperiod	Length (days) of each user-requested extension
#		(0 == do not allow extensions)
#
sub showsitevars()
{
    my %vars = ();

    foreach my $ltype ("stdataset", "ltdataset") {
	$vars{$ltype} = Lease->SiteVars($ltype);
	my $maxsize = $vars{$ltype}->{'maxsize'};
	my $maxlease = $vars{$ltype}->{'maxlease'} / (24 * 60 * 60);
	my $maxidle = $vars{$ltype}->{'maxidle'} / (24 * 60 * 60);
	my $grace = $vars{$ltype}->{'graceperiod'} / (24 * 60 * 60);
	my $autod = $vars{$ltype}->{'autodestroy'};
	my $quotas = $vars{$ltype}->{'usequotas'};
	my $maxext = $vars{$ltype}->{'maxextend'};
	my $extend = $vars{$ltype}->{'extendperiod'} / (24 * 60 * 60);
	my $v;

	print "$ltype:\n";

	print "  Maximum size:";
	if ($quotas != 0) {
	    print " determined by project quota";
	} elsif ($maxsize == 0) {
	    print " unlimited";
	} else {
	    if ($maxsize < 1024) {
		$v = sprintf("%.2f", $maxsize);
		print " $v MiB";
	    } elsif ($maxsize < (1024 * 1024)) {
		$v = sprintf("%.2f", $maxsize / 1024);
		print " $v GiB";
	    } else {
		$v = sprintf("%.2f", $maxsize / (1024 * 1024));
		print " $v TiB";
	    }
	    $v = $maxsize * 1024 * 1024;
	    print " ($v bytes)";
	}
	print ".\n";

	print "  Expiration:";
	if ($maxidle == 0 && $maxlease == 0) {
	    print " never";
	} else {
	    print " after";
	    if ($maxidle != 0) {
		if ($maxidle < 1) {
		    $v = sprintf("%.1f", $maxidle * 24);
		    print " $v hours";
		} else {
		    $v = sprintf("%.1f", $maxidle);
		    print " $v days";
		}
		print " idle";
	    }
	    if ($maxlease != 0) {
		if ($maxidle != 0) {
		    print " or after";
		}
		print " a lease-specific time period (maximum of";
		if ($maxlease < 1) {
		    $v = sprintf("%.1f", $maxlease * 24);
		    print " $v hours";
		} else {
		    $v = sprintf("%.1f", $maxlease);
		    print " $v days";
		}
		print " from creation)";
	    }
	}
	print ".\n";

	print "  Disposition:";
	if ($maxidle == 0 && $maxlease == 0) {
	    print " N/A";
	} else {
	    if ($autod) {
		print " destroyed";
	    } else {
		print " locked-down";
	    }
	    print " after expiration";
	    if ($grace != 0) {
		print " plus";
		if ($grace < 1) {
		    $v = sprintf("%.1f", $grace * 24);
		    print " $v hours";
		} else {
		    $v = sprintf("%.1f", $grace);
		    print " $v days";
		}
		print " grace period";
	    }
	}
	print ".\n";
	print "  Extensions:";
	if ($extend != 0) {
	    print " allows";
	    if ($maxext == 0) {
		print " an unlimited number of";
	    } else {
		print " up to $maxext";
	    }
	    if ($extend < 1) {
		$v = sprintf("%.1f", $extend * 24);
		print " $v hour";
	    } else {
		$v = sprintf("%.1f", $extend);
		print " $v day";
	    }
	    print " extensions during grace period";
	} else {
	    print " none";
	}
	print ".\n";
    }
}

sub datestr($)
{
    my ($date) = @_;

    if (defined($date)) {
	return strftime("%D %R", localtime($date));
    }

    return "never";
}

sub fatal($)
{
    my ($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}
