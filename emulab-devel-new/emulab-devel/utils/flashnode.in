#!/usr/bin/perl -w
#
# Copyright (c) 2008-2021 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;

sub usage()
{
    print STDERR "Usage: flashnode [-d] <node_id>\n";
    exit(-1);
}
my $optlist   = "d";
my $debug     = 0;

#
# Configure variables
#
my $TB		= "@prefix@";
my $SSHTB       = "/usr/testbed/bin/sshtb";
# This is the program on the "monitor" node.
my $FLASHUSRP   = "/usr/local/bin/flashusrp";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# We don't want to run this script unless its the real version.
#
if ($EUID != 0) {
    die("*** $0:\n".
        "    Must be root! Maybe its a development version?\n");
}

# Protos
sub fatal($);
	  
#
# Turn off line buffering on output
#
$| = 1; 

# Load the Testbed support stuff.
use lib "@prefix@/lib";
use emdb;
use EmulabConstants;
use libtestbed;
use Node;
use User;

my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 0;
}
usage()
    if (!@ARGV);
my $node_id = $ARGV[0];
my $node    = Node->Lookup($node_id);
if (!defined($node)) {
    fatal("No such node");
}
my $flashable;
$node->NodeAttribute("flashable", \$flashable);
if (!defined($flashable)) {
    fatal("Node is not flashable");
}

#
# Verify user
#
my $this_user;
if ($UID) {
    $this_user = User->ThisUser();
    if (! defined($this_user)) {
	fatal("You ($UID) do not exist!\n");
    }
}
if ($UID && !$this_user->IsAdmin()) {
    if (! $node->AccessCheck($this_user, TB_NODEACCESS_LOADIMAGE)) {
	fatal("You are not allowed to to flash $node_id!\n");
    }
}

#
# We store the flashing node and serial in node_attributes
#
my $flashnode;
$node->NodeAttribute("flashnode", \$flashnode);
if (!defined($flashnode)) {
    fatal("Node does not have a flashing node defined");
}
my $serial;
$node->NodeAttribute("serial", \$serial);
if (!defined($serial)) {
    fatal("Node does not have a serial number defined");
}

# Must flip to real root for the ssh.
$UID = 0;

my $cmd = "$SSHTB -host $flashnode $FLASHUSRP $serial ";
if ($debug) {
    print "$cmd\n";
}
open(FLASH, " $cmd |") or
    fatal("Could not invoke $FLASHUSRP on $flashnode");
while (<FLASH>) {
    print $_;
}
close(FLASH);
if ($?) {
    fatal("Could not flash $node_id ($serial) on $flashnode");
}
exit(0);

sub fatal($)
{
    my ($msg) = @_;

    die("*** $0:\n".
	"    $msg\n");
}
