#!/usr/bin/perl -wT

#
# Copyright (c) 2003-2012, 2014 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

use English;
use Getopt::Std;

#
# Grant permission to use types/class of nodes. If given a specific
# "type", then grant permission to use just that type. If its a class, then
# permission to use all of the types in that class, the class itself, and any
# aux nodetypes for the type/class (node_types_auxtypes table). 
#
sub usage()
{
    print STDERR "Usage: grantnodetype [-h] [-r] [-m] -p <pid> <type> [count]\n";
    print STDERR "       grantnodetype [-h] -R <type>\n";
    print STDERR "	-h   This message\n";
    print STDERR "	-r   Revoke access instead of grant\n";
    print STDERR "	-m   Force insert of missing minus policy\n";
    print STDERR "      -R   Remove all projects for type, and minus policy\n";
    print STDERR "   count   Overdide default count of 999999\n";
    exit(-1);
}
my $optlist  = "hp:dnrmR";
my $impotent = 0;
my $debug    = 0;
my $revoke   = 0;
my $revokeall= 0;
my $addminus = 0;
my %newtypes = ();
my $pid;
my $count    = 999999;

#
# Please do not run as root. Hard to track what has happened.
#
if ($UID == 0) {
    die("*** $0:\n".
	"    Please do not run this as root!\n");
}

#
# Configure variables
#
my $TB		 = "@prefix@";
my $update_perms = "$TB/sbin/update_permissions";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;
use Project;
use Group;

# Be careful not to exit on transient error
$libdb::DBQUERY_MAXTRIES = 30;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/sbin:/usr/bin:";

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{h})) {
    usage();
}
if (defined($options{m})) {
    $addminus = 1;
}
if (defined($options{n})) {
    $impotent = 1;
}
if (defined($options{r})) {
    $revoke = 1;
}
if (defined($options{R})) {
    $revokeall = 1;
}
if (defined($options{d})) {
    $debug = 1;
}
if (defined($options{p})) {
    $pid = $options{p};
}
if (!$revokeall &&
    (scalar(@ARGV) < 1 || scalar(@ARGV) > 2 || !defined($pid))) {
    usage();
}
my $type = $ARGV[0];
$count   = $ARGV[1] if (@ARGV == 2);

#
# Untaint the arguments.
#
if ($type =~ /^([-\w]+)$/) {
    $type = $1;
}
else {
    die("Tainted type name: $type");
}

#
# Clear the type from the group_policies table, including the minus policy,
# which allows the type to be used by everyone.
#
if ($revokeall) {
    DBQueryFatal("delete from group_policies ".
		 "where policy='type' and auxdata='$type'")
	if (!$impotent);

    system($update_perms);
    exit($? >> 8);
}

if ($pid =~ /^([-\w]+)$/) {
    $pid = $1;
}
else {
    die("Tainted pid name: $pid");
}

# Only admin types can do this.
if (!TBAdmin($UID)) {
    die("*** $0:\n".
	"    You are not allowed to grant permission to use node types!\n");
}

my $project = Project->Lookup($pid);
if (!defined($project)) {
    die("*** $0:\n".
	"    Cannot map project $pid to its object\n");
}
# Need this below.
my $pid_idx = $project->pid_idx();

#
# Check to make sure a valid type in the node_types table.
#
my $query_result =
    DBQueryFatal("select distinct type,class from node_types ".
		 "where type='$type' or class='$type'");

if (! $query_result->num_rows) {
    die("*** $0:\n".
	"    No such type/class $type in the types table!\n");
}

while (my ($nodetype,$nodeclass) = $query_result->fetchrow_array()) {
    if ($nodeclass eq $type) {
	#
	# Grant permission to this class/type, and all of the aux types for it.
	#
	$newtypes{$nodetype} = 1
	    if (!defined($newtypes{$nodetype}));
	$newtypes{$nodeclass} = 1
	    if ($nodeclass ne $nodetype && !defined($newtypes{$nodeclass}));

	my $aux_result =
	    DBQueryFatal("select auxtype from node_types_auxtypes ".
			 "where type='$nodetype' or type='$nodeclass'");

	while (my ($auxtype) = $aux_result->fetchrow_array()) {
	    $newtypes{$auxtype} = 1
		if (!defined($newtypes{$auxtype}));
	}
    }
    else {
	#
	# A single type. Just grant permission to the type itself.
	#
	$newtypes{$type} = 1
	    if (!defined($newtypes{$type}));
    }
}

#
# Run the queries.
# 
foreach my $newtype (keys(%newtypes)) {
    print STDERR
	($revoke ? "Revoking" : "Granting") . " " .
	"permission to use type $newtype\n"
	if ($debug);

    #
    # Make sure there is a minus policy in the group_policies table;
    # If not, then granting permission to use this type is silly, and
    # probably means that the group_policies table needs updating.
    #
    $query_result =
	DBQueryFatal("select * from group_policies ".
		     "where pid='-' and policy='type' and auxdata='$newtype'");
    
    exit(0)
	if (!$query_result);

    if (!$query_result->num_rows) {
	if ($addminus) {
	    DBQueryFatal("replace into group_policies ".
			 "(pid_idx,gid_idx,pid,gid,policy,auxdata,count) ".
			 "values (0, 0, '-', '-','type','$newtype', 0)")
		if (!$impotent);
	}
	else {
	    die("*** $0:\n".
		"    There is no '-' policy for node type $newtype!\n".
		"    Use the -m option if you want to add the minux policy.\n");
	}
    }

    #
    # Add generic rules that say the project is allowed to use "infinite"
    # number of nodes of each type. 
    #
    my $count = ($revoke ? 0 : $count);
    
    DBQueryFatal("replace into group_policies ".
		 "(pid_idx, gid_idx, pid, gid, policy, auxdata, count) ".
		 "values ($pid_idx, $pid_idx, '$pid', '$pid', ".
		 "        'type', '$newtype', $count)")
	if (!$impotent);
}

#
# Now update the permissions table. 
#
system($update_perms);
exit($? >> 8)
    if ($?);
exit(0);
