#!/usr/bin/perl -w
#
# Copyright (c) 2007-2013 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;
use Errno;
use strict;

#
# Set up cross browser login to Plone wikis.
#
sub usage()
{
    print "Usage: ploneproxy xlogin [-w wiki] [-p] <uid> <ip>\n";
    exit(-1);
}
my $optlist = "dw:";
my $debug   = 0;
my $wiki;

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";
my $OURDOMAIN   = "@OURDOMAIN@";
my $PLONEUSER   = "plone";
my $PLONEGROUP  = "plone";
my $COOKIEDIR   = "/var/db/plone";

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Only real root, cause the script has to read/write a pid file that
# cannot be accessed by the user.
#
if ($UID != 0) {
    die("*** $0:\n".
	"    Must be root to run this script!\n");
}

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libtestbed;
use libtbdb;

# Protos
sub xLogin(@);
sub fatal($);

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"w"})) {
    $wiki     = $options{"w"};
}
else {
    $wiki     = "emulab";
}
if (! @ARGV) {
    usage();
}

exit(xLogin(@ARGV));

#
# Backdoor Login
#
sub xLogin(@)
{
    my $priv = 0;
    
    usage()
	if (@_ < 2 || @_ > 3);

    if ($_[0] eq "-p") {
	$priv = 1;
	shift(@_);
    }
    my ($user, $IP) = @_;
    my $hash = TBGenSecretKey();

    if (! -e $COOKIEDIR) {
	system("/bin/mkdir -m 770 $COOKIEDIR") == 0
	    or fatal("Could not create $COOKIEDIR");
    }
    system("/usr/sbin/chown $PLONEUSER:$PLONEGROUP $COOKIEDIR") == 0
	or fatal("Could not chown $COOKIEDIR");

    #
    # Create a little file that holds the secret key, named by the user.
    # Use the key inside it to match against the key provided by the
    # client browser.
    #
    open(KEY, ">${COOKIEDIR}/$user") or
	fatal("Could not open ${COOKIEDIR}/$user for writing!");

    print KEY "$hash\n";
    print KEY "isadmin=$priv\n";
    close(KEY);

    # Return the hash to caller.
    print "$hash\n";
    return 0;
}

sub fatal($)
{
    my($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}
