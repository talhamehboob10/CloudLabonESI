#!/usr/bin/perl -wT
#
# Copyright (c) 2005-2007 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;

#
# Modify groups (add and subtract in DB) for a user, and then call
# other scripts that need to do something about it.
#
# Note that this script does not create accounts or groups. That should
# already have been done with other scripts.
#
sub usage()
{
    print STDOUT
	"Usage: modjabberbuddies [-a pid:gid[,pid:gid]...] ".
	                        "[-r pid:gid[,pid:gid]...] user\n";
    exit(-1);
}
my $optlist = "dr:a:";
my $debug   = 0;
my $user;
my @addlist = ();
my @remlist = ();
my $addargs = "";
my $remargs = "";

#
# Configure variables
#
my $TB		   = "@prefix@";
my $TBOPS	   = "@TBOPSEMAIL@";
my $TBLOGS	   = "@TBLOGSEMAIL@";
my $CONTROL        = "@USERNODE@";
my $BOSSNODE       = "@BOSSNODE@";
my $CHATSUPPORT    = @CHATSUPPORT@;
my $SSH            = "$TB/bin/sshtb";
my $JABBERPROXY    = "$TB/sbin/jabberproxy";

#
# Untaint the path
#
$ENV{'PATH'} = "/bin:/usr/bin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Load the Testbed support stuff.
#
use lib "@prefix@/lib";
use libaudit;
use libdb;
use libtestbed;

# Protos
sub fatal($);

#
# We don't want to run this script unless its the real version.
#
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be setuid! Maybe its a development version?\n");
}

#
# This script is setuid, so please do not run it as root. Hard to track
# what has happened.
# 
if ($UID == 0) {
    die("*** $0:\n".
	"    Please do not run this as root! Its already setuid!\n");
}

#
# If no chat support, just exit. 
#
if (! $CHATSUPPORT) {
    print "CHAT support is not enabled. Exit ...\n";
    exit(0);
}

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"a"})) {
    my @tokens = split(",", $options{"a"});

    foreach my $token (@tokens) {
	#
	# Untaint,
	#
	if ($token =~ /^([-\w]+):([-\w]+)$/) {
	    push(@addlist, "$1:$2");
	}
	else {
	    die("Bad data in token: $token.");
	}
    }
}
if (defined($options{"r"})) {
    my @tokens = split(",", $options{"r"});

    foreach my $token (@tokens) {
	#
	# Untaint,
	#
	if ($token =~ /^([-\w]+):([-\w]+)$/) {
	    push(@remlist, "$1:$2");
	}
	else {
	    die("Bad data in token: $token.");
	}
    }
}
usage()
    if (@ARGV != 1);
$user = $ARGV[0];

# Untaint the user.
if ($user =~ /^([-\w]+)$/) {
    $user = $1;
}
else {
    die("Bad user name: $user.");
}

#
# Permission checks. Do this later.
#

#
# This script is always audited. Mail is sent automatically upon exit.
#
if (AuditStart(0)) {
    #
    # Parent exits normally
    #
    exit(0);
}

#
# Add groups. Construct a command line to pass to addjabberbuddies.
#
foreach my $token (@addlist) {
    my ($pid,$gid) = split(":", $token);

    # Not going to worry about subgroups yet ...
    next
	if ($pid ne $gid);

    my $buddylist = "$pid";

    #
    # Okay, whenever a user is added to a project, add all the members
    # of the target project to the users buddy list, under the project
    #
    my $query_result =
	DBQueryFatal("select uid from group_membership ".
 		     "where pid='$pid' and gid='$gid' and uid!='$user'");

    while (my ($uid) = $query_result->fetchrow_array()) {
	$addargs = $addargs . " $uid:$buddylist";
    }
}

#
# Remove groups.  Construct a command line to pass to addjabberbuddies.
#
foreach my $token (@remlist) {
    my ($pid,$gid)  = split(":", $token);

    # Not going to worry about subgroups yet ...
    next
	if ($pid ne $gid);

    my $buddylist = "$pid";

    #
    # Okay, whenever a user is removed from a project, remove all the members
    # of the target project from the users buddy list, under the project.
    #
    my $query_result =
	DBQueryFatal("select uid from group_membership ".
 		     "where pid='$pid' and gid='$gid' and uid!='$user'");

    while (my ($uid) = $query_result->fetchrow_array()) {
	$remargs = $remargs . " $uid:$buddylist";
    }
}

#
# Now do the real work.
#
if ($CONTROL ne $BOSSNODE) {
    my $optarg = ($debug ? "-d" : "");

    # Must serialize all jabber stuff. Be sure to use the same token!
    TBScriptLock("jabber_update") == 0 or
	fatal("Could not get the lock!");

    #
    # For ssh.
    #
    $UID = $EUID;

    if ($addargs ne "") {
	print "Adding buddies for $user to the jabber DB on $CONTROL.\n";
	system("$SSH -host $CONTROL ".
	       "$JABBERPROXY $optarg addbuddies $user $addargs");
	if ($?) {
	    fatal("$JABBERPROXY '$optarg addbuddies $user $addargs' failed!");
	}
    }

    if ($remargs ne "") {
	print "Removing buddies for $user from the jabber DB on $CONTROL.\n";
	system("$SSH -host $CONTROL ".
	       "$JABBERPROXY $optarg delbuddies $user $remargs");
	if ($?) {
	    fatal("$JABBERPROXY '$optarg delbuddies $user $remargs' failed!");
	}
    }

    TBScriptUnlock();
}
exit(0);

sub fatal($) {
    my($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}
