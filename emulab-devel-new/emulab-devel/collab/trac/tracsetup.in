#!/usr/bin/perl -w
#
# Copyright (c) 2007-2011 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;

#
# Initial wiki setup. Create wiki accounts for all users and projects.
#
sub usage()
{
    print STDOUT "Usage: tracsetup\n";
    exit(-1);
}
my $optlist  = "d";
my $debug    = 0;

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";
my $TRACSUPPORT = @TRACSUPPORT@;
my $ADDTRACUSER = "$TB/sbin/tracuser";

# Protos
sub fatal($);

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/usr/bin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Load the Testbed support stuff. 
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;

#
# If no trac support, just exit. 
#
if (! $TRACSUPPORT) {
    print "Trac support is not enabled. Exit ...\n";
    exit(0);
}

#
# Only testbed admins.
#
if (!TBAdmin($UID)) {
    die("*** $0:\n".
	"    Must be a testbed admin to run this script\n");
}

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (@ARGV) {
    usage();
}

#
# Add all users to the Trac DB.
#
$query_result =
    DBQueryFatal("select uid from users ".
		 "where (status='active' or status='frozen')");
    
while (my ($uid) = $query_result->fetchrow_array()) {
    system("$ADDTRACUSER $uid") == 0
	or fatal("Could not add Trac account for $uid");
}

exit(0);

sub fatal($)
{
    my($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}
