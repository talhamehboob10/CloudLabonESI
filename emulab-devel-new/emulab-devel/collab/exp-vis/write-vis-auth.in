#!/usr/bin/perl -wT
#
# Copyright (c) 2000-2010 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use Getopt::Std;

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";
my $USERNODE    = "@USERNODE@";
my $SSH         = "$TB/bin/sshtb -l root -host $USERNODE";

my $background = 0;

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Turn off line buffering on output
$| = 1; 

#
# Capture stdout and stderr to a file so if we die we can mail the output to 
# testbed-ops
#

# XXX: Don't hardcode
my $logfile = "/tmp/write-vis-auth.$$";

use vars qw(*OLDOUT *OLDERR);
open OLDOUT, ">&STDOUT" or die "Can't dup STDOUT $!";
open OLDERR, ">&STDERR" or die "Can't dup STDERR $!";
open STDOUT, ">$logfile" or die "Can't open $logfile: $!";
open STDERR, ">&STDOUT"  or die "Can't dup STDERR $!";

$SIG{__DIE__} = sub {
    return unless defined $^S; # In Parser
    return if $^S;             # In Eval Block
    local $_ = $_[0];
    open STDOUT, ">&OLDOUT";
    open STDERR, ">&OLDERR";
    SENDMAIL($TBOPS, "write-vis-auth failed", $_, undef, undef, $logfile);
    unlink $logfile;
    TBScriptUnlock();
    print STDERR "write-vis-auth failed, see testbed-ops mail\n";
    exit(1);
};

#
# Load the Testbed support stuff. 
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;

if ((my $locked = TBScriptLock("write-vis-auth", 1)) != TBSCRIPTLOCK_OKAY()) {
    exit(0)
	if ($locked == TBSCRIPTLOCK_IGNORE);
    die("Could not get the lock after a long time!\n");
}

# become root, needed for ssh
$< = $>;

my $db_result =
    DBQueryFatal("select opskey, uid from login");

open O, "| $SSH $TB/libexec/write-vis-auth.proxy" 
    or die "ssh to ops failed: $!\n";

my $prev_opskey = '';
while (my ($opskey,$uid) = $db_result->fetchrow_array) {
    $opskey = "00000000000000000000000000000000" if $opskey eq '';
    print O "$opskey $uid\n";
}

close O;

#die "ssh to ops failed: $!\n" if $!;
die "ssh to ops failed with exit code $?\n" if $? != 0;

unlink $logfile;
TBScriptUnlock();

exit(0);

