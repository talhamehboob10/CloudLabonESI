#
# Stuff to do in order to make a fresh FC4 testbed ready
#

#
# NOTE: Not meant to be run as a script.
#       SO DON'T!
# Copy and past into bash
#

##
##

export testbed_src=/z/testbed
export etc_patches=${testbed_src}/doc/updating-RHL/etc-patches
export tarbars=/proj/utahstud/users/kevina/FC4/tarbars

expoort tz=MST7MDT

## Mount /share to make some things easier.
##
cd /
mkdir -p "/share"
mount -o hard,intr,udp "fs:/share" "/share"

## Disable kudzu at boot-time.

/sbin/chkconfig kudzu off

## Kill off CUPS.

/sbin/chkconfig cups off

## Enable ssh 1
##
patch /etc/ssh/sshd_config < $etc_patches/sshd_config.patch

## run `ntp' at run levels 2--5.  (`/etc/inittab' described the levels.)
##
/sbin/chkconfig --level 2345 ntpd on

## Install an appropriate /etc/inittab:
## - Run a getty in ttyS0
## - Do not run getty's for most virtual consoles (tty1, ...)
##
patch /etc/inittab < $etc_patches/inittab.patch

## Enable root logins on ttyS0.
##
patch /etc/securetty  < $etc_patches/securetty.patch

## Enable all wheel members to `sudo'.
##
...

## Log `ssh' logins to `users.emulab.net'.
##
patch /etc/syslog.conf < $etc_patches/syslog.conf.patch

# * /etc/localtime
#   Copy the correct file over from /usr/share/zoneinfo
# 
rm -f /etc/localtime
install -o root -g root -m 644 "/usr/share/zoneinfo/${tz}" /etc/localtime

####

# Make the default locale "C"
patch /etc/sysconfig/i18n < $etc_patches/sysconfig-i18n.patch

## Add sbin to path for all users not just root
##
patch /etc/profile < $etc_patches/profile
patch /etc/csh.login < $etc_patches/csh.login.patch

###############################################################################

## Install Keys 
## emulab-keys.tar.gz created by running 
##   sh ${testbed_src}/doc/updating-RHL/tar-keys
## on an exiting node

tar xfvz $tarbars/emulab-keys.tar.gz

# * /etc/emulab/shadow
#   Change the root password, this file will get installed by prepare.
#
#install -o root -g root -m 600 {"${image_root}",}/etc/emulab/shadow
#
#NOTE: I just had Kirk reset it manually

###############################################################################

# We must look in /usr/local/lib.
#
patch /etc/ld.so.conf < $etc_patches/ld.so.conf.patch

###############################################################################

## Install "our version of the elvin libraries."
##
cd "${local_build_root}"
wget "http://www.emulab.net/downloads/libelvin-4.0.3.tar.gz"
tar zxf libelvin-4.0.3.tar.gz
wget "http://www.emulab.net/downloads/libelvin-4.0.3.patch"
patch -p0 < libelvin-4.0.3.patch
cd libelvin-4.0.3
#
# Ancient software.  Without `-fno-strict-aliasing', the `configure' script
# dies.  It's not at all clear to me if `-fno-strict-aliasing' is required for
# elvin itself.
export CC=gcc32
export CFLAGS="-g -O2 -fno-strict-aliasing"
#
# Need these to find the Kerberos support, for SSL stuff.
export CPPFLAGS="`/usr/kerberos/bin/krb5-config --cflags`"
export LIBS="`/usr/kerberos/bin/krb5-config --libs`"
./configure
gmake
gmake install
unset CC CFLAGS CPPFLAGS LIBS

## We now also require the actual `elvind'.
##
cd "${local_build_root}"
export CC=gcc32
wget "http://www.emulab.net/downloads/elvind-4.0.3.tar.gz"
tar zxf elvind-4.0.3.tar.gz
wget "http://www.emulab.net/downloads/elvind-4.0.3.patch"
patch -p0 < elvind-4.0.3.patch
cd elvind-4.0.3
./configure
gmake
gmake install
unset CC

## Install Boost.
## See <http://www.boost.org/more/getting_started.html>
##
cd "${local_build_root}"
cp -p $tarbars/boost_1_31_0.tar.bz2 .
# wget "http://unc.dl.sourceforge.net/sourceforge/boost/boost_1_31_0.tar.bz2"
tar jxf boost_1_31_0.tar.bz2
# First, one must build their builder, `bjam'.
cd boost_1_31_0/tools/build/jam_src
sh ./build.sh
install -m 755 bin.linuxx86/bjam /usr/local/bin
ln /usr/local/bin/bjam /usr/local/bin/jam
cd "${local_build_root}"/boost_1_31_0
bjam -sTOOLS=gcc --with-python-root=/usr install
# I'm not sure if this is standard, but it is needed for the Emulab client
# stuff:
#
ln -s boost-1_31/boost /usr/local/include/boost

## Install the Emulab client stuff.  XXX --- the current way of getting the
## source is icky.
##
export CVS_RSH=ssh
cd "${local_build_root}"
# cvs -d ... co testbed
#
cd testbed
./configure
gmake client
gmake client-install

## Install `gated'.
## XXX --- compile w/o debugging?
##

#cd "${local_build_root}"
## wget http://ftp.rge.com/pub/networking/gated/gated-3-6.tar.gz
#wget http://www.funet.fi/pub/unix/tcpip/gated/gated-3-6.tar.gz
#tar zxf gated-3-6.tar.gz
#cd gated-public-3_6
#./configure
#gmake depend
#gmake
#gmake install
## Installs just `/usr/local/sbin/gated'.

# Version built from source doesn't work, install RHL7.3 RPM instead
rpm -i /share/redhat/7.3/RPMS/gated-3.6-14.i386.rpm


###############################################################################

##
## Add/remove rpms.
##

# Done manually, see FC4-rpm-remove.sh and FC4-yum-install.txt

###############################################################################

##
## Update to latest version.  Note this may also update the kernel, in
## which case you should recompile it.  See below
##

yum update

###############################################################################

##
## Install Lilo
##

cd /
tar xfz $tarbars/lilo-emulab.tar.gz
cp /z/testbed/doc/updating-RHL/FC4-lilo.conf /etc/lilo.conf
/sbin/lilo
# if lilo fails then edit /etc/lilo.conf lilo.conf and try again

#
# NOW REBOOT TO MAKE SURE IT WORKS
#

# Remove all traces of grub, but backup "/boot/grub" incase we want
# to reinstall grub at a latter date
rpm -e grub
cd /boot
tar cfvz grub.tar.gz grub/*
rm -r grub

###############################################################################

## Install pathrate.
##
cd "${local_build_root}"
wget http://www.cc.gatech.edu/fac/Constantinos.Dovrolis/pathrate.tar.gz
tar zxf pathrate.tar.gz
cd pathrate_2.4.0
./configure
# XXX Build w/o -g?
gmake
# No install target
install -o root -g root -m 755 pathrate_rcv pathrate_snd /usr/local/bin
install -d -o root -g root -m 755 /usr/local/share/doc/pathrate
install -o root -g root -m 644 CHANGES README /usr/local/share/doc/pathrate

## Install rude/crude.
##
cd "${local_build_root}"
wget http://unc.dl.sourceforge.net/sourceforge/rude/rude-0.70.tar.gz
tar zxf rude-0.70.tar.gz 
cd rude
./configure
gmake
gmake install

###############################################################################

## Install kernel

# Redhat no longer ships a seperate RPM for the kernel source.  You
# have to use the source RPM:
# Edit $testbed_src/doc/updating-RHL/fetch-kernel-source.sh
# than: "bash $testbed_src/doc/updating-RHL/"

# Now go through $testbed_src/doc/FC4-build-kernel.txt

# Once it works remove old kernel??
#   but since that is provided via the kernel rpm that might brake
#   some things
#
# It takes about 49 megs
#
# rm -r /lib/modules/2.6.11-1.1369_FC4
# rm /boot/*2.6.11-1.1369_FC4*

###############################################################################

When all done testing create a final image. 

# Drop into single user mode

init 1

# Prep the image

yum clean all
find /var/cache/man -name -type f | xargs rm
/usr/local/etc/emulab/prepare

# Create an image via the web interface.  A few seconds after
# confirming the image creation reboot the machine.  Since the machine
# is in single user mode the emulab scripts won't be able to ssh in
# to reboot.  Don't give it a change to ipod or power cycle the
# machine as the disk may get corrupted.

