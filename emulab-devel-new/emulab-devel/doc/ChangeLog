mike        2004/04/12 16:06:52 MDT

  Modified files:
    capture              capture.c 
  Log:
  Getting back ETIMEDOUT from a socket read should not be fatal to capture.
  Now it is treaded just like ECONNRESET.
  
  Also, don't clobber the read errno with the intermediate sigsetmask call
  (though it should never fail and errno should never be affected)
  
  Change warn() to warning() to avoid conflict with standard BSD library
  routine.  This showed up when statically linking capture.
  
  Revision  Changes    Path
  1.31      +24 -16    testbed/capture/capture.c

mike        2004/04/07 11:22:32 MDT

  Modified files:
    os/imagezip          global.h imagezip.c 
    os/imagezip/ntfs     ntfs_glue.c 
    os/imagezip/ntfs/libntfs ntfs.patch 
  Log:
  Get rid of the hacky code to figure out what special file was associated
  with every DOS partition.  It was only used by NTFS and has been replaced
  by equally hacky changes to the NTFS library.
  
  The benefit of the latter is that it at least works all the time on
  Linux and all FreeBSD versions.
  
  Revision  Changes    Path
  1.3       +0 -1      testbed/os/imagezip/global.h
  1.46      +1 -106    testbed/os/imagezip/imagezip.c
  1.2       +9 -14     testbed/os/imagezip/ntfs/ntfs_glue.c

mike        2004/03/30 17:27:04 MST

  Modified files:
    www/tutorial         tutorial.html 
  Added files:
    www/tutorial         ixp.html 
  Log:
  Add IXP documentation from Abhijeet
  
  Revision  Changes    Path
  1.73      +3 -0      testbed/www/tutorial/tutorial.html

mike        2004/03/30 14:44:33 MST

  Modified files:
    www/tutorial         vnodes.html 
  Log:
  Alright, I am now officially sick of writing vnode documentation.
  I have said all that I want to say.
  
  Revision  Changes    Path
  1.4       +268 -47   testbed/www/tutorial/vnodes.html

mike        2004/03/29 16:31:10 MST

  Modified files:
    www/tutorial         tutorial.html 
  Added files:
    www/tutorial         control-net.png 
  Log:
  Add a section on the control net
  
  Revision  Changes    Path
  1.72      +124 -0    testbed/www/tutorial/tutorial.html

ricci       2004/03/23 15:56:53 MST

  Added files:
    www                  widearea_nodeinfo.php3
  Log:
  New web page: widearea_nodeinfo.php3

  Intended as a replacement for the old widearea_info page, which
  was just not scaling with the number of nodes we now have in the
  database.

  Allows the user to give a set of criteria (such as node, bandwidth,
  latency, and packet loss), and grabs links that match those criteria.

mike        2004/03/23 10:51:55 MST

  Modified files:
    tmcd                 tmcd.c 
  Log:
  Move some of our "policy" about watchdog intervals from the watchdog
  client to here.  Policies are things like only plab service slices do
  rusage reports and local nodes don't check for cvsup updates, etc.
  Maybe these should all be sitevars, but I didn't really want to have
  20 different watchdog-related timeout values.
  
  Note: the detection of what is a plab service slice is a hack right
  now (string ends in "-20").  Kirk will be giving me a better way RSN.
  
  Revision  Changes    Path
  1.220     +40 -8     testbed/tmcd/tmcd.c

mike        2004/03/20 19:43:53 MST

  Modified files:
    tmcd                 tmcd.c 
  Log:
  Use setproctitle to report what we are up to.
  Now ps will show info about the request being processed,
  or the total number of requests processed when idle.
  
  Revision  Changes    Path
  1.219     +22 -13    testbed/tmcd/tmcd.c

mike        2004/03/20 01:14:07 MST

  Modified files:
    tmcd/common          watchdog 
  Log:
  Two fubars:
  1. make sure we send an immediate isalive on startup rather than waiting
     for the first interval to pass
  2. don't fall back on a tcp call on plab nodes, this just eventually hangs
     all our tmcds on flaky plab machines
  
  Revision  Changes    Path
  1.15      +13 -3     testbed/tmcd/common/watchdog

mike        2004/03/18 23:03:19 MST

  Modified files:
    tmcd/common          libtmcc.pm watchdog 
  Log:
  The new watchdog:
  	- check intervals driven by sitevars delivered by TMCD command
  	- handles rusage stats return on plab nodes
  It is now a single process and executes any auxilliary scripts synchronously.
  This may prove to be unwieldy in the face of long running scripts like
  update.  If so, we'll have to add all that fork/exec/waitpid mucky-muck.
  
  Revision  Changes    Path
  1.11      +3 -1      testbed/tmcd/common/libtmcc.pm
  1.14      +578 -83   testbed/tmcd/common/watchdog

mike        2004/03/17 14:53:46 MST

  Modified files:
    tmcd                 tmcd.c 
  Log:
  Fix problem with large ssh pubkeys.  We now malloc a special buffer
  if the pubkey is too large to fit in the default buffer.
  
  Also added a F_MAXLOG value that you can set to force maximum logging
  for a particular command.
  
  Fix an off-by-one in the OUTPUT macro
  
  Revision  Changes    Path
  1.215     +40 -7     testbed/tmcd/tmcd.c

mike        2004/03/17 09:41:59 MST

  Modified files:
    tmcd                 tmcd.c 
  Log:
  Add the "watchdog" info command to configure timeouts for the client
  watchdog process based on sitevars.
  
  Also added a command flags field to take care of a couple of misc. attributes
  like whether a command can be allowed from a remote site via UDP or whether
  we should not perform as much logging.
  
  Revision  Changes    Path
  1.214     +142 -57   testbed/tmcd/tmcd.c

ricci       2004/03/16 15:38:16 MST

  Modified files:
    db                   node_status.in
  Log:
  Use Mike's new sitevars to get timeouts for keepalives.

  Also, split out the checks for local vnodes and plab vnodes, since
  they can actually have different reporting intervals.

ricci       2004/03/16 14:48:45 MST

  Modified files:
    db                   node_status.in
  Log:
  Add another part to node_status - move plab phys nodes that have not
  checked in for a while into hwdown.

  Adding another query to do this was much simpler than trying to make the one
  monster query already in this script get what we wanted.

mike        2004/03/15 22:55:36 MST

  Modified files:
    tmcd/linux           GNUmakefile.in 
  Added files:
    tmcd/linux           mkextrafs.pl 
  Log:
  Linux version of script to make the "extra" filesystem in the 4th partition.
  Sometime we might want to offer an option on the experiment create page to
  automatically setup the 4th partition for people.
  
  For now they can run it as /usr/testbed/bin/mkextrafs
  
  Revision  Changes    Path
  1.40      +1 -0      testbed/tmcd/linux/GNUmakefile.in

mike        2004/03/12 16:10:59 MST

  Modified files:
    os/imagezip          Makefile-linux.sa Makefile.sa global.h 
                         imagedump.c imagehdr.h imageunzip.c 
                         imagezip.8 imagezip.c 
    os/imagezip/extfs    GNUmakefile.in extfs.c 
    os/imagezip/ffs      ffs.c 
  Added files:
    os/imagezip/extfs    lilo.h reloc_lilo.c 
  Log:
  Random imagezip hacking:
  
  1. Make imagezip (and imageunzip) understand LILO bootblocks.
     Imagezip will create relocation information for all the absolute
     blocks that LILO embeds in the partition.  Imageunzip will correctly
     relocate those locations when laying down the new image.  Thus
     Linux slice images can be layed down anywhere on the disk (as can
     BSD images).
  
  2. Because #1 is incompatible with the old imageunzip, I bumped the
     imagezip format version number (to 3) on images that contain relocations
     (i.e., slice images).  Make sure you have a new imageunzip to unzip
     new slice images.  Whole disk images are still created as version 2
     since they contain no relocs and thus are no different than before.
  
  3. Added -N option to imagezip to create slice images without any
     relocations.  [ We could create our Emulab images this way, since we
     don't have any mechanism for, or reason to, let the user choose which
     partition to load an image in.  Hence our slice images always wind up
     at the same offset on the disk and relocations are unnecessary. ]
     Note that there is no significant expense in either time or space for
     relocations, this option was more of a debugging thing.
  
  Revision  Changes    Path
  1.3       +1 -1      testbed/os/imagezip/Makefile-linux.sa
  1.4       +1 -1      testbed/os/imagezip/Makefile.sa
  1.2       +2 -1      testbed/os/imagezip/global.h
  1.9       +40 -10    testbed/os/imagezip/imagedump.c
  1.7       +13 -2     testbed/os/imagezip/imagehdr.h
  1.27      +61 -5     testbed/os/imagezip/imageunzip.c
  1.10      +36 -12    testbed/os/imagezip/imagezip.8
  1.44      +43 -17    testbed/os/imagezip/imagezip.c
  1.3       +3 -2      testbed/os/imagezip/extfs/GNUmakefile.in
  1.2       +16 -2     testbed/os/imagezip/extfs/extfs.c
  1.2       +5 -3      testbed/os/imagezip/ffs/ffs.c

ricci       2004/03/11 17:44:45 MST

  Modified files:
    www/cvsweb           cvsweb.cgi cvsweb.conf
  Log:
  Update to the latest version of cvsweb in the 2.0 branch. (There is
  now a 3.0 branch, but it seems substantially different.)

  This doesn't solve the problem I was hoping it would (being unable to
  grab a tarball of the top-level directory), but I've already done the
  work to update...

stoller     2004/03/09 10:43:54 MST

  Modified files:
    sql                  database-fill.sql 
    tbsetup              batchexp.in 
    www                  beginexp_xml.php3 
  Log:
  Clean up of the web to batchexp interface:
  
  * Add proper check_slot() calls to all of the user input that is going into
    the DB (already had taint checking), since batchexp is now available for
    interactive use from ops.
  
  * Remove separate DB insertions of noswap/noidleswap reasons from web
    script, and pass on the command line from web to batchexp. Now inserted
    in the backend script so that they can be provided on the command line
    when batchexp is used interactively.
  
  * Change defaults in backend script; experiments now default to swappable
    and idleswap; previously defaulted to not swappable and no idleswap.
  
  * Remove [-s] (swappable) and add [-S <reason>] option. -S sets experiment to
    not swappable, with supplied reason (text string).
  
  * Add [-L <reason>] option. -L sets experiment to no idleswap, with
    supplied reason (text string).
  
  * Add several missing table_regex entries for experiments table.
  
  Revision  Changes    Path
  1.66      +5 -0      testbed/sql/database-fill.sql
  1.47      +67 -34    testbed/tbsetup/batchexp.in
  1.8       +7 -20     testbed/www/beginexp_xml.php3

kwebb       2004/03/03 18:41:33 MST

  Modified files:
    .                    configure configure.in
    rc.d                 3.plab.sh.in
    tbsetup/plab         GNUmakefile.in libplab.py.in
                         libtestbed.py.in mod_PLC.py.in
                         mod_dslice.py.in
  Added files:
    tbsetup/plab         plabdiscover.in plabrenewd.in
  Removed files:
    tbsetup/plab         plabdaemon.in
  Log:
  More plab updates/changes

  * implemented PLC slice renewal
  * restructured daemon code/startup
    - removed getfree daemon (replaced by plabdiscover; run from cron)
    - moved generic daemonizing code into libtestbed (class)
    - created plabrenewd - small script that utilizes daemonizing class
    - removed plabdaemon file.
    - updated bossnode startup scripts
  * changed slice prefix - PLC denies permission w/ anything other than "utah"
  * Minor semantic changes to module API to be more consistent with other parts.
  * Some bug fixes.

  Revision  Changes    Path
  1.202     +3 -3      testbed/configure
  1.209     +3 -3      testbed/configure.in
  1.3       +3 -5      testbed/rc.d/3.plab.sh.in
  1.9       +2 -2      testbed/tbsetup/plab/GNUmakefile.in
  1.55      +117 -35   testbed/tbsetup/plab/libplab.py.in
  1.3       +140 -0    testbed/tbsetup/plab/libtestbed.py.in
  1.3       +34 -12    testbed/tbsetup/plab/mod_PLC.py.in
  1.3       +8 -4      testbed/tbsetup/plab/mod_dslice.py.in

kwebb       2004/03/02 18:28:45 MST

  Modified files:
    tbsetup/plab         libplab.py.in mod_PLC.py.in
                         mod_dslice.py.in
  Log:
  Some updates to plab support:

  * removed unused and not generally useful ping checking
  * reorganized node discovery and added node info updating
    - e.g., update IP, SITE, or HOSTNAME when they have changed
    - no longer part of the backend module as this is independent of
      which backend is used; may modularize it due to plab's new "trumpet"
      service, which is basically its node DB available via a decentralized
      transport/API.
  * introduced new method of getting node info - use plab sites.xml file
  * various other cleanups.

  Revision  Changes    Path
  1.54      +220 -110  testbed/tbsetup/plab/libplab.py.in
  1.2       +0 -22     testbed/tbsetup/plab/mod_PLC.py.in
  1.2       +0 -6      testbed/tbsetup/plab/mod_dslice.py.in

stoller     2004/03/08 12:44:01 MST

  Modified files:
    tbsetup              GNUmakefile.in node_reboot.in os_load.in 
                         os_setup.in 
  Added files:
    tbsetup              libosload.pm.in libreboot.pm.in 
  Log:
  Converted os_load and node_reboot into libraries. Basically that meant
  splitting the existing code between a frontend script that parses arguments
  and does taint checking, and a backend library where all the work is done
  (including permission checks). The interface to the libraries is simple
  right now (didn't want to spend a lot of time on designing interface
  without knowing if the approach would work long term).
  
  	use libreboot;
  	use libosload;
  
          nodereboot(\%reboot_args, \%reboot_results);
          osload(\%reload_args, \%reload_results);
  
  Arguments are passed to the libraries in the form of a hash. For example,
  in os_setup:
  
  	$reload_args{'debug'}     = $dbg;
  	$reload_args{'asyncmode'} = 1;
  	$reload_args{'imageid'}   = $imageid;
  	$reload_args{'nodelist'}  = [ @nodelist ];
  
  Results are passed back both as a return code (-1 means total failure right
  away, while a positive argument indicates the number of nodes that failed),
  and in the results hash which gives the status for each individual node. At
  the moment it is just success or failure (0 or 1), but in the future might
  be something more meaningful.
  
  os_setup can now find out about individual failures, both in reboot and
  reload, and alter how it operates afterwards. The main thing is to not wait
  for nodes that fail to reboot/reload, and to terminate with no retry when
  this happens, since at the moment it indicates an unusual failure, and it
  is better to terminate early. In the past an os_load failure would result
  in a tbswap retry, and another failure (multiple times). I have already
  tested this by trying to load images that have no file on disk; it is nice
  to see those failures caught early and the experiment failure to happen
  much quicker!
  
  A note about "asyncmode" above. In order to promote parallelism in
  os_setup, asyncmode tells the library to fork off a child and return
  immediately. Later, os_setup can block and wait for status by calling
  back into the library:
  
  	my $foo = nodereboot(\%reboot_args, \%reboot_results);
  	nodereboot_wait($foo);
  
  If you are wondering how the child reports individual node status back to
  the parent (so it can fill in the results hash), Perl really is a kitchen
  sink. I create a pipe with Perl's pipe function and then fork a child to so
  the work; the child writes the results to the pipe (status for each node),
  and the parent reads that back later when nodereboot_wait() is called,
  moving the results into the %reboot_results array. The parent meanwhile can
  go on and in the case of os_setup, make more calls to reboot/reload other
  nodes, later calling the wait() routines once all have been initiated.
  Also worth noting that in order to make the libraries "reentrant" I had to
  do some cleaning up and reorganizing of the code. Nothing too major though,
  just removal of lots of global variables. I also did some mild unrelated
  cleanup of code that had been run over once too many times with a tank.
  
  So how did this work out. Well, for os_setup/os_load it works rather
  nicely!
  
  node_reboot is another story. I probably should have left it alone, but
  since I had already climbed the curve on osload, I decided to go ahead and
  do reboot. The problem is that node_reboot needs to run as root (its a
  setuid script), which means it can only be used as a library from something
  that is already setuid. os_setup and os_load runs as the user. However,
  having a consistent library interface and the ability to cleanly figure out
  which individual nodes failed, is a very nice thing.
  
  So I came up with a suitable approach that is hidden in the library. When the
  library is entered without proper privs, it silently execs an instance of
  node_reboot (the setuid script), and then uses the same trick mentioned
  above to read back individual node status. I create the pipe in the parent
  before the exec, and set the no-close-on-exec flag. I pass the fileno along
  in an environment variable, and the library uses that to the write the
  results to, just like above. The result is that os_setup sees the same
  interface for both os_load and node_reboot, without having to worry that
  one or the other needs to be run setuid.
  
  Revision  Changes    Path
  1.104     +1 -1      testbed/tbsetup/GNUmakefile.in
  1.51      +85 -658   testbed/tbsetup/node_reboot.in
  1.58      +119 -344  testbed/tbsetup/os_load.in
  1.92      +98 -53    testbed/tbsetup/os_setup.in

ricci       2004/02/27 16:36:37 MST

  Modified files:
    www                  showimageid.php3 showosinfo.php3
                         showstuff.php3
  Log:
  Add a function to showstuff.php3 to display all experiments using a
  given OSID, and include this view on the image and osinfo pages.

  Revision  Changes    Path
  1.13      +37 -1     testbed/www/showimageid.php3
  1.8       +11 -1     testbed/www/showosinfo.php3
  1.127     +66 -0     testbed/www/showstuff.php3

stoller     2004/02/17 15:06:34 MST

  Modified files:
    tmcd/common          GNUmakefile.in bootvnodes libsetup.pm 
                         libtmcc.pm rc.linktest rc.slothd 
                         rc.testbed runstartup update vnodesetup 
                         watchdog 
    tmcd/freebsd         GNUmakefile.in delaysetup liblocsetup.pm 
                         mkextrafs.pl prepare rc.conf 
                         rc.delayagent rc.kname rc.mfs supfile.in 
                         testbed.sh 
    tmcd/freebsd/jail    mkjail.pl rc.injail rc.local 
    tmcd/linux           GNUmakefile.in delaysetup liblocsetup.pm 
                         prepare supfile.in testbed 
    tmcd/plab            GNUmakefile.in rc.inplab 
  Added files:
    tmcd/common          ifsetup rc.bootsetup 
    tmcd/common/config   librc.pm rc.accounts rc.config rc.delays 
                         rc.hostnames rc.ifconfig rc.keys rc.misc 
                         rc.mounts rc.progagent rc.route rc.rpms 
                         rc.simulator rc.startcmd rc.syncserver 
                         rc.tarfiles rc.template rc.trafgen 
                         rc.tunnels 
  Removed files:
    tmcd/common          bootsetup rc.agents rc.progagent rc.setup 
    tmcd/freebsd         ifsetup 
    tmcd/freebsd/jail    jailsetup 
    tmcd/plab            plabsetup 
  Log:
  Medium size cleanup of the client side code. The main impetus behind
  this was to add soft reconfig support so that nodes could be
  reconfigured without having to reboot them. This appears to work, and
  has been tested with jails getting moved around. I've also tested the
  new code on the MFS, but still no testing has been done on PLAB nodes.
  
  The main change is that most of the code moved out of libsetup.pm, and
  was split into constituent rc scripts, each of which does its own
  thing, including cleaning up and preparing for making an image. Most
  of that central knowledge has been moved out into the scripts. Still more
  to do but this was a good start.
  
  Revision  Changes    Path
  1.19      +7 -8      testbed/tmcd/common/GNUmakefile.in
  1.12      +105 -41   testbed/tmcd/common/bootvnodes
  1.97      +304 -2246 testbed/tmcd/common/libsetup.pm
  1.9       +35 -1     testbed/tmcd/common/libtmcc.pm
  1.2       +3 -0      testbed/tmcd/common/rc.linktest
  1.3       +2 -1      testbed/tmcd/common/rc.slothd
  1.2       +2 -2      testbed/tmcd/common/rc.testbed
  1.5       +11 -4     testbed/tmcd/common/runstartup
  1.7       +44 -70    testbed/tmcd/common/update
  1.20      +32 -49    testbed/tmcd/common/vnodesetup
  1.12      +4 -3      testbed/tmcd/common/watchdog
  1.43      +7 -8      testbed/tmcd/freebsd/GNUmakefile.in
  1.13      +26 -31    testbed/tmcd/freebsd/delaysetup
  1.42      +40 -15    testbed/tmcd/freebsd/liblocsetup.pm
  1.3       +3 -3      testbed/tmcd/freebsd/mkextrafs.pl
  1.27      +4 -1      testbed/tmcd/freebsd/prepare
  1.4       +4 -2      testbed/tmcd/freebsd/rc.conf
  1.9       +7 -5      testbed/tmcd/freebsd/rc.delayagent
  1.2       +7 -0      testbed/tmcd/freebsd/rc.kname
  1.6       +152 -38   testbed/tmcd/freebsd/rc.mfs
  1.4       +1 -1      testbed/tmcd/freebsd/supfile.in
  1.4       +3 -5      testbed/tmcd/freebsd/testbed.sh
  1.30      +146 -72   testbed/tmcd/freebsd/jail/mkjail.pl
  1.4       +138 -45   testbed/tmcd/freebsd/jail/rc.injail
  1.5       +2 -2      testbed/tmcd/freebsd/jail/rc.local
  1.38      +4 -4      testbed/tmcd/linux/GNUmakefile.in
  1.4       +30 -18    testbed/tmcd/linux/delaysetup
  1.24      +31 -12    testbed/tmcd/linux/liblocsetup.pm
  1.24      +4 -1      testbed/tmcd/linux/prepare
  1.5       +1 -1      testbed/tmcd/linux/supfile.in
  1.6       +1 -0      testbed/tmcd/linux/testbed
  1.10      +4 -2      testbed/tmcd/plab/GNUmakefile.in
  1.5       +214 -37   testbed/tmcd/plab/rc.inplab

stoller     2004/02/26 11:40:00 MST

  Modified files:
    www                  dbcheck.php3 nodecontrol_list.php3 
                         osiddefs.php3 
  Added files:
    www                  editnodetype.php3 
  Log:
  Add an editnodetype page to make it easier to operate on the
  node_types table, especially when setting up new testbeds. Currently,
  linked off the node summary page, when in admin mode you get the edit
  link instead of the show link.
  
  Revision  Changes    Path
  1.5       +21 -8     testbed/www/dbcheck.php3
  1.43      +6 -2      testbed/www/nodecontrol_list.php3
  1.4       +30 -0     testbed/www/osiddefs.php3


stoller     2004/02/16 08:34:35 MST

  Modified files:
    tbsetup              assign_wrapper.in tbswap.in 
  Log:
  Add new -f flag to assign_wrapper, and have tbswap use that flag when
  tbswap is doing a swapretry (this happens during a normal swapin, when
  a node fails). In this case, we want to fix all the nodes (overriding
  user setting) when replacing failed nodes!
  
  Revision  Changes    Path
  1.161     +17 -5     testbed/tbsetup/assign_wrapper.in
  1.34      +8 -5      testbed/tbsetup/tbswap.in

ricci       2004/02/13 15:42:46 MST

  Modified files:
    doc                  setup-cisco.txt 
  Log:
  Recommend turning off MAC aging for the control network.
  
  Revision  Changes    Path
  1.4       +6 -0      testbed/doc/setup-cisco.txt

stoller     2004/02/12 14:26:13 MST

  Modified files:
    tbsetup              assign_wrapper.in 
  Log:
  Fix problem with trivial links not getting lindelays. In the case that
  a 100Mb link is mapped to a trivial link, a linkdelay has to be
  inserted since the actual loopback bandwidth is much higher. The
  problem is that unlike other delays where requires_delay() will return
  true, this decision has to wait until after assign does the mapping
  and we find out that a link was mapped to a trivial link. When this
  happens, I insert a linkdelay "on the fly" when processing the link
  statements from assign.
  
  Revision  Changes    Path
  1.160     +76 -35    testbed/tbsetup/assign_wrapper.in

ricci       2004/02/12 10:46:22 MST

  Modified files:
    tbsetup              assign_wrapper.in 
  Log:
  Unbreak vtypes by putting entries for them into the %node_type_linkbw
  hash.
  
  This means we have to call LoadVirtTypes() from a slightly different
  place, so that we have the virt types before calling LoadPhysInfo(),
  where %node_type_linkbw is built.
  
  Revision  Changes    Path
  1.159     +25 -1     testbed/tbsetup/assign_wrapper.in

stoller     2004/02/12 08:43:37 MST

  Modified files:
    tbsetup              GNUmakefile.in batchexp.in endexp.in 
                         swapexp.in 
  Removed files:
    tbsetup              startexp.in webstartexp.in 
  Log:
  * Removed startexp, and merged its contents into batchexp. There has been
    no reason for the separation for a long time, and it made maintence more
    difficult cause of duplication between batchexp and startexp (batch was
    the sole user of startexp). Cleaner solution.
  
  * Check argument processing for batchexp, swapexp, endexp to make sure the
    taint checks are correct. All three of these scripts will now be
    available from ops. I especially watch the filename processing, which was
    pretty loose before and could allow some to grab a file on boss by trying
    to use it as an NS file (scripts all runs as user of course). The web
    interface generates filenames that are hard to guess, so rather then
    wrapping these scripts when invoked from ops, just allow the usual paths
    (/proj, /groups, /users) but also /tmp/$uid-XXXXXX.nsfile pattern, which
    should be hard enough to guess that users will not be able to get
    anything they are not supposed to.
  
  * Add -w (waitmode) options to all three scripts. In waitmode, the backend
    detaches, but the parent remains waiting for the child to finish so it
    can exit with the appropriate status (for scripting). The user can
    interrupt (^C), but it has no effect on the backend; it just kills the
    parent side that is waiting (backend is in a new session ID). Log outout
    still goes to the file (available from web page) and is emailed.
  
  Revision  Changes    Path
  1.103     +4 -3      testbed/tbsetup/GNUmakefile.in
  1.45      +399 -62   testbed/tbsetup/batchexp.in
  1.30      +59 -13    testbed/tbsetup/endexp.in
  1.52      +92 -15    testbed/tbsetup/swapexp.in

stoller     2004/02/12 08:37:10 MST

  Modified files:
    www                  beginexp.php3 beginexp_form.php3 
                         beginexp_xml.php3 menu.php3 plab_ez.php3 
    www/buildui          bui.php3 
  Log:
  Make the new version of beginexp_xml live now that its been through
  the paper effort for everyone. I've redirected everything to
  beginexp_html.php3 (the front end to the XML version), including the
  plab and bui pages.
  
  I've stuck a redirect in the old beginexp.php3, to make it easy to
  bring back the old version in case something goes wrong. Just comment
  out the lines at the top and reinstall, along with changing the other
  links to it.
  
  Revision  Changes    Path
  1.45      +7 -1      testbed/www/beginexp.php3
  1.30      +2 -2      testbed/www/beginexp_form.php3
  1.4       +3 -2      testbed/www/beginexp_xml.php3
  1.132     +2 -8      testbed/www/menu.php3
  1.6       +2 -2      testbed/www/plab_ez.php3
  1.11      +2 -2      testbed/www/buildui/bui.php3

ricci       2004/02/11 16:42:23 MST

  Modified files:
    tmcd                 tmcd.c 
  Log:
  Change the alias behavior in dohosts() . We used to only give aliases
  for nodes that are not directly connected if we had a route to them.
  Now, we give them to everyone.
  
  This should make hosts file generation go much faster for large
  topologies.
  
  Revision  Changes    Path
  1.208     +16 -74    testbed/tmcd/tmcd.c

stoller     2004/02/11 15:04:15 MST

  Modified files:
    db                   nfree.in 
  Log:
  Kill off all of the old osid handling that nfree did. When a node is
  released, all of def_boot_osid,temp_boot_osid,next_boot_osid is cleared.
  bootinfo currently uses the nodes free/alloc status to determine if the
  node gets PXEWAIT, but will eventually switch to looking at the osids;
  A node with no osids set (as will be when free) will go into PXEWAIT. This
  will allow os_load of free nodes!
  
  Change temporary locked pid/eid to a real pid/eid (emulab-ops/nfree-locked)
  to avoid transient problems in tmcd, where isalive would cause tmcd to
  core dump cause the reserved table had a nonexistent pid/eid setting.
  
  Revision  Changes    Path
  1.74      +12 -30    testbed/db/nfree.in

kwebb       2004/02/10 14:13:05 MST

  Modified files:
    .                    configure configure.in 
    tbsetup              GNUmakefile.in 
    tbsetup/ipassign     GNUmakefile.in README compile.sh 
    tbsetup/ipassign/src Assigner.cc Assigner.h 
                         ConservativeAssigner.cc 
                         ConservativeAssigner.h Framework.cc 
                         Framework.h GNUmakefile.in HostRouter.cc 
                         LanRouter.cc NetRouter.cc difference.cc 
                         ipassign.cc routestat.cc 
  Added files:
    tbsetup/ipassign     ipassign_wrapper.in 
    tbsetup/ipassign/etc autocheck.conf 
    tbsetup/ipassign/src FixedPartition.h Partition.h 
                         SearchPartition.h SquareRootPartition.h 
  Log:
  Merge of ipassign stuff from commvirtsig-branch into main trunk.
  
  Revision  Changes    Path
  1.199     +1 -1      testbed/configure
  1.206     +1 -1      testbed/configure.in
  1.102     +10 -3     testbed/tbsetup/GNUmakefile.in
  1.3       +8 -4      testbed/tbsetup/ipassign/GNUmakefile.in
  1.4       +12 -9     testbed/tbsetup/ipassign/README
  1.5       +10 -10    testbed/tbsetup/ipassign/compile.sh
  1.2       +0 -4      testbed/tbsetup/ipassign/src/Assigner.cc
  1.2       +3 -3      testbed/tbsetup/ipassign/src/Assigner.h
  1.2       +9 -70     testbed/tbsetup/ipassign/src/ConservativeAssigner.cc
  1.2       +4 -2      testbed/tbsetup/ipassign/src/ConservativeAssigner.h
  1.2       +52 -71    testbed/tbsetup/ipassign/src/Framework.cc
  1.2       +16 -7     testbed/tbsetup/ipassign/src/Framework.h
  1.4       +33 -16    testbed/tbsetup/ipassign/src/GNUmakefile.in
  1.2       +1 -1      testbed/tbsetup/ipassign/src/HostRouter.cc
  1.2       +1 -1      testbed/tbsetup/ipassign/src/LanRouter.cc
  1.2       +1 -1      testbed/tbsetup/ipassign/src/NetRouter.cc
  1.2       +6 -0      testbed/tbsetup/ipassign/src/difference.cc
  1.4       +3 -1      testbed/tbsetup/ipassign/src/ipassign.cc
  1.3       +28 -10    testbed/tbsetup/ipassign/src/routestat.cc

stoller     2004/02/09 16:21:02 MST

  Modified files:
    www                  newimageid_ez.php3 newosid.php3 
                         newosid_form.php3 
  Added files:
    www                  osiddefs.php3 
  Log:
  Minor cleanup of how we do features, osnames, and op_modes. Moved the
  lists to a common "header" file, and change newosid and newimageid_ez
  to grab from there. Also add notion of admin-only features (veths,
  mlinks) and op_modes (NORMALv2) while I transition to new stuff.
  
  Revision  Changes    Path
  1.29      +43 -43    testbed/www/newimageid_ez.php3
  1.14      +45 -28    testbed/www/newosid.php3
  1.9       +38 -25    testbed/www/newosid_form.php3

stoller     2004/02/09 10:31:16 MST

  Modified files:
    os/syncd             emulab-sync.c 
  Log:
  Add SIGALRM handling to cut the connection timeout from usual 60
  seconds it takes the kernel to decide the other machine is not
  responding (as will happens as machines are rebooting), down to 5
  seconds, using a SIGARLM.
  
  Revision  Changes    Path
  1.4       +37 -3     testbed/os/syncd/emulab-sync.c

stoller     2004/02/09 09:38:16 MST

  Modified files:
    os/syncd             emulab-syncd.c 
  Log:
  Add proper daemonization, which is turned off when -d (debug) flag
  used. Add .pid file creation in /var/run to kill daemon from the new
  rc.syncserver script in tmcd client code.  Add -v flag to increase
  server verbosity. Add -l argument to specify where to write the log
  file.
  
  Revision  Changes    Path
  1.3       +34 -20    testbed/os/syncd/emulab-syncd.c

duerig      2004/02/06 11:52:48 MST

  Modified files:        (Branch: commvirtsig-branch)
    tbsetup/ipassign     compile.sh 
    tbsetup/ipassign/src Assigner.cc Assigner.h 
                         ConservativeAssigner.cc 
                         ConservativeAssigner.h Framework.cc 
                         Framework.h difference.cc ipassign.cc 
                         routestat.cc 
  Added files:           (Branch: commvirtsig-branch)
    tbsetup/ipassign/src FixedPartition.h Partition.h 
                         SearchPartition.h SquareRootPartition.h 
  Log:
  * Fixed netmask calculation bug.
  * Added the option to search for a good partitioning
  * Set up a pluggable partition framework for future changes
  
  Revision  Changes    Path
  1.4.2.2   +10 -10    testbed/tbsetup/ipassign/compile.sh
  1.1.2.2   +0 -4      testbed/tbsetup/ipassign/src/Assigner.cc
  1.1.2.2   +3 -3      testbed/tbsetup/ipassign/src/Assigner.h
  1.1.2.2   +9 -70     testbed/tbsetup/ipassign/src/ConservativeAssigner.cc
  1.1.2.2   +4 -2      testbed/tbsetup/ipassign/src/ConservativeAssigner.h
  1.1.2.2   +52 -71    testbed/tbsetup/ipassign/src/Framework.cc
  1.1.2.2   +16 -7     testbed/tbsetup/ipassign/src/Framework.h
  1.1.2.2   +6 -0      testbed/tbsetup/ipassign/src/difference.cc
  1.2.6.2   +3 -1      testbed/tbsetup/ipassign/src/ipassign.cc
  1.2.2.2   +28 -10    testbed/tbsetup/ipassign/src/routestat.cc

stoller     2004/02/05 18:46:15 MST

  Modified files:        (Branch: commvirtsig-branch)
    tbsetup              os_setup.in tbswap.in 
  Log:
  Hacky changes for node reconfiguration, committed to branch only.
  When reboot not selected for swapmod, set the nodes to RES_RECONFIG in
  tbswap. In os_setup, nodes in RES_RECONFIG get a reconfig instead of
  the reboot. Note that if reconfig fails (say, cause the image has no
  reconfig script in it!), it node_reboot falls back to plain reboot
  (note, node_reboot -r does the reconfig).
  
  Problem: Not sure that pcvm nodes will always be moved out of ISUP and
  so the wait for ISUP might terminate too soon.
  
  Also some minor changes to make os_setup see the cancel flag and
  hopefully end a lot sooner. These could go into the main branch if
  desired
  
  Revision  Changes    Path
  1.88.2.2  +34 -30    testbed/tbsetup/os_setup.in
  1.32.6.2  +11 -5     testbed/tbsetup/tbswap.in

ricci       2004/02/05 15:09:32 MST

  Modified files:        (Branch: commvirtsig-branch)
    tbsetup              tbprerun.in 
  Log:
  Add the ability to run ipassign instead of staticroutes for route
  calculation.
  
  Revision  Changes    Path
  1.44.6.1  +28 -4     testbed/tbsetup/tbprerun.in

ricci       2004/02/05 10:42:14 MST

  Modified files:        (Branch: commvirtsig-branch)
    tbsetup              assign_prepass.in 
  Log:
  Several changes:
  
  Take a '-m' option to take the multiplexing factor given by the user,
  instead of my lame hardcoded default.
  
  Handle node-hints - not totally slick, we just pick one hint for the
  conglomerate and go with it.
  
  Make binpack_sort() aware of CPU and memory - this should help out
  with Tim's experiments, in which that's what he's tweaking.
  
  Data structure changes for desires so that we can do the above.
  
  Some bufixes for the parser so that we can do node-hints.
  
  Revision  Changes    Path
  1.1.2.5   +103 -49   testbed/tbsetup/assign_prepass.in

stoller     2004/02/05 09:57:15 MST

  Modified files:        (Branch: commvirtsig-branch)
    tbsetup              assign_wrapper.in 
  Log:
  Change bogus check against FBSD-STD, to a check of the osfeature list.
  The point is determine if the osid a user has selected support
  mulitplexed links and veths. This needs more work; I am currently
  requiring both veth/mlink support whenever a nonvirt node is in a link
  or lan with a virt node. This is pretty much what the code did before;
  I just changed how the support is determined. Needs more work,
  obviously.
  
  Revision  Changes    Path
  1.154.2.17 +20 -9     testbed/tbsetup/assign_wrapper.in

stoller     2004/02/05 09:14:02 MST

  Modified files:
    sql                  database-create.sql database-migrate.txt 
  Log:
  Add 'veths' and 'mlinks' to the list of possible osfeatures in
  is_info table.
  
  Revision  Changes    Path
  1.225     +1 -1      testbed/sql/database-create.sql
  1.118     +6 -0      testbed/sql/database-migrate.txt

kwebb       2004/02/04 20:36:52 MST

  Modified files:        (Branch: commvirtsig-branch)
    tbsetup/ipassign     ipassign_wrapper.in 
  Log:
  ipassign_wrapper is now ready for prime time.
  
  Fixed the nasty underconstrained clause in the virt_nodes ips column update
  SQL clause that bit me yesterday/today.
  
  Added logic to find the src ip address for a route, and fixed up a few more
  things to prepare the script for integration.
  
  Revision  Changes    Path
  1.1.2.2   +49 -16    testbed/tbsetup/ipassign/Attic/ipassign_wrapper.in

ricci       2004/02/04 17:33:56 MST

  Modified files:        (Branch: commvirtsig-branch)
    tbsetup              assign_prepass.in 
  Log:
  Handle fixed nodes. The main rule regarding fixed nodes is that we can
  fix each conglomerate to at most one physical node. So, we can
  combine:
  1) Nodes that are not fixed
  2) Nodes that are fixed, as long as they are fixed to the same place
  3) Nodes that are fixed with nodes that are not fixed
  
  Revision  Changes    Path
  1.1.2.4   +20 -5     testbed/tbsetup/assign_prepass.in

stoller     2004/02/04 17:14:41 MST

  Modified files:
    tbsetup              node_reboot.in 
  Log:
  Minor whackery. Add "-r" option to node_reboot to "reconfig" a pnode
  instead of rebooting. If the reconfig fails, fail through to reboot.
  A reconfig will "halt" the current vnodes (or remove ones that are no
  longer assigned to the node) reconfig the pnode, and then restart the
  vnodes that are still assigned to the node (or create new ones for
  newly assigned vnodes). A halt stops the vnode, but leaves the
  vnode filesystem intact.
  
  Not bothering to reconfig individual vnodes yet since thats pretty
  much like a reboot of a vnode. Difference in time is tiny.
  
  Revision  Changes    Path
  1.49      +49 -6     testbed/tbsetup/node_reboot.in

shash       2004/02/04 15:42:49 MST

  Modified files:        (Branch: commvirtsig-branch)
    www                  modifyexp.php3 
  Log:
  Added -e option to web modify to restart event system. Checked on by
  default if the experiment is active.
  
  Revision  Changes    Path
  1.11.6.1  +7 -1      testbed/www/modifyexp.php3

shash       2004/02/04 02:39:58 MST

  Modified files:        (Branch: commvirtsig-branch)
    tbsetup              assign_wrapper.in 
  Log:
  Yet another fix which causes trouble when vnodes move around pnodes
  arbitrarily. The code even though was written a long time back wasn't
  tested coz of doing fix-node during modify. Without fix-node, vnodes
  move around like crazy even if the ns file never changes in any way
  during a modify. With this fix, as many vnodes that were previously
  reserved, as possible, will be reused as long as assign ends up
  using the same PCs as were reserved before.
  
  Revision  Changes    Path
  1.154.2.14 +75 -22    testbed/tbsetup/assign_wrapper.in

kwebb       2004/02/03 16:16:30 MST

  Modified files:        (Branch: commvirtsig-branch)
    tbsetup/ipassign     GNUmakefile.in 
    tbsetup/ipassign/src GNUmakefile.in HostRouter.cc LanRouter.cc 
                         NetRouter.cc 
  Log:
  Fixes to build/install of ipassign and related tools.
  
  Revision  Changes    Path
  1.1.6.2   +2 -4      testbed/tbsetup/ipassign/GNUmakefile.in
  1.2.6.2   +33 -16    testbed/tbsetup/ipassign/src/GNUmakefile.in
  1.1.2.2   +1 -1      testbed/tbsetup/ipassign/src/HostRouter.cc
  1.1.2.2   +1 -1      testbed/tbsetup/ipassign/src/LanRouter.cc
  1.1.2.2   +1 -1      testbed/tbsetup/ipassign/src/NetRouter.cc

ricci       2004/02/03 14:29:02 MST

  Modified files:
    tbsetup              assign_prepass.in 
  Log:
  Add conglomeration of links as well as LANs - this can help assign's
  runtime quite a bit, because it has less scoring work to do.
  
  Add METIS as a coarsening algorithm - we shoot for making
  conglomerates of size 10.
  
  Revision  Changes    Path
  1.2       +397 -36   testbed/tbsetup/assign_prepass.in

ricci       2004/02/03 11:37:35 MST

  Modified files:        (Branch: commvirtsig-branch)
    tbsetup              assign_wrapper.in 
  Log:
  Two changes when doing a swap-update:
  
  Give all virtnodes the desire 'already_reserved' so that assign will
  try to place them onto nodes the experimenter already has allocated.
  
  Give assign 'node-hint's for nodes that were mapped before, so that
  we can start from something that is presumably a pretty good
  solution. Hopefully this will make assign converge faster and/or
  improve the solution.
  
  Revision  Changes    Path
  1.154.2.4 +19 -0     testbed/tbsetup/assign_wrapper.in

ricci       2004/02/03 11:04:30 MST

  Modified files:        (Branch: commvirtsig-branch)
    tbsetup              ptopgen.in 
  Log:
  Add an 'already_reserved' feature to nodes we already have reserved
  if an $exempt_eid was given - this is so that assign can use them in
  preference to allocating new nodes.
  
  Revision  Changes    Path
  1.53.6.1  +15 -2     testbed/tbsetup/ptopgen.in

stoller     2004/02/03 10:46:14 MST

  Modified files:        (Branch: commvirtsig-branch)
    tbsetup              assign_wrapper.in 
  Log:
  Two changes for the commvirtsig branch only.
  
  * Set the node cmd_line to the appropriate kernel when selecting a
    jail or delay node host. Currently, jail (and sim) phosts get
    /kernel.jail, and delay nodes get /kernel.delay. This is passed to
    pxeboot via bootinfo, which boots the proper kernel, thus avoiding
    the double reboot we all know and loathe.
  
    WARNING: You have to use new (FBSD47-UPDATE) images for this to
    actually work right, since the current default inage does not rename
    the kernel after reboot. Mostly this will not be a problem, but it
    might be.
  
    Be sure to use tb-set-jail-os and tb-set-delay-os in your NS files
    too (to FBSD47-UPDATE at least) for the same reason.
  
  * My requires_delay() change from many weeks ago that needs more
    testing before committing to main branch. Have faith all ye little
    guinea pigs.
  
  Revision  Changes    Path
  1.154.2.3 +126 -36   testbed/tbsetup/assign_wrapper.in

stoller     2004/02/03 09:46:31 MST

  Modified files:
    tbsetup/ns2ir        nstb_compat.tcl parse.tcl.in sim.tcl.in 
                         tb_compat.tcl.in 
  Log:
  Add tb-set-jail-os and tb-set-delay-os to set the experiment wide
  jail and delay node OSIDs. When set, will override anything in the
  node_types table. Use with caution.
  
  Revision  Changes    Path
  1.16      +3 -0      testbed/tbsetup/ns2ir/nstb_compat.tcl
  1.47      +4 -0      testbed/tbsetup/ns2ir/parse.tcl.in
  1.63      +11 -0     testbed/tbsetup/ns2ir/sim.tcl.in
  1.62      +28 -0     testbed/tbsetup/ns2ir/tb_compat.tcl.in

shash       2004/02/02 17:51:08 MST

  Modified files:        (Branch: commvirtsig-branch)
    tbsetup              assign_wrapper.in 
    tbsetup/ns2ir        tb_compat.tcl.in sim.tcl.in parse.tcl.in 
    db                   libdb.pm.in nalloc.in nfree.in 
                         xmlconvert.in 
  Log:
  A new tb-* command tb-fix-current-resources 0/1 tells assign_wrapper
  whether to do a fix-node of current resources or not. This is useful
  when virtual node weights are changed during a swap modify. For
  example, when a virtual node had a CPU desire of 10 and it became
  800 during a swap modify, doing a fix-node on previous allocation
  won't let assign do the correct thing and will sometimes cause
  violations.
  
  In order to support this, we need to move current reserved
  pnodes/virtnodes to a holding experiment emulab-ops/oldreserved
  and then back to current experiment. This was the solution that
  worked best in the face of UNIQUE KEY issues in the reserved
  table. The reserved table needs the combination pid-eid-vname
  to be unique.
  
  Revision  Changes    Path
  1.154.2.1 +66 -5     testbed/tbsetup/assign_wrapper.in
  1.61.2.1  +11 -0     testbed/tbsetup/ns2ir/tb_compat.tcl.in
  1.62.2.1  +3 -2      testbed/tbsetup/ns2ir/sim.tcl.in
  1.46.2.1  +3 -0      testbed/tbsetup/ns2ir/parse.tcl.in
  1.151.6.1 +80 -2     testbed/db/libdb.pm.in
  1.25.10.1 +10 -3     testbed/db/nalloc.in
  1.72.6.1  +40 -11    testbed/db/nfree.in
  1.16.2.1  +1 -0      testbed/db/xmlconvert.in

duerig      2004/02/02 13:59:57 MST

  Modified files:
    tbsetup/ipassign     INSTALL compile.sh 
    tbsetup/ipassign/src routestat.cc 
  Log:
  Modified routecalc, adding a command line option to dump all route lengths to a file for statistical analysis.
  
  Revision  Changes    Path
  1.5       +4 -0      testbed/tbsetup/ipassign/INSTALL
  1.3       +1 -1      testbed/tbsetup/ipassign/compile.sh
  1.2       +57 -1     testbed/tbsetup/ipassign/src/routestat.cc

mike        2004/02/02 10:42:57 MST

  Modified files:
    doc                  vnode-impl.txt 
  Log:
  Integrate some text I had elsewhere about the virtual control net.
  
  Revision  Changes    Path
  1.7       +82 -1     testbed/doc/vnode-impl.txt

duerig      2004/02/02 08:34:12 MST

  Modified files:
    tbsetup/ipassign     GNUmakefile.in INSTALL README 
    tbsetup/ipassign/graph kgraph3.graph kgraph4.graph 
    tbsetup/ipassign/src Exception.h GNUmakefile.in ipassign.cc 
                         lib.h top2graph.cc 
  Added files:
    tbsetup/ipassign     compile.sh 
    tbsetup/ipassign/src Assigner.cc Assigner.h 
                         ConservativeAssigner.cc 
                         ConservativeAssigner.h Framework.cc 
                         Framework.h HostRouter.cc HostRouter.h 
                         LanRouter.cc LanRouter.h NetRouter.cc 
                         NetRouter.h Router.cc Router.h bitmath.cc 
                         bitmath.h brite2graph.cc coprocess.cc 
                         coprocess.h graph2lan.cc inet2graph.cc 
                         route2lan.cc routecalc.cc routestat.cc 
  Removed files:
    tbsetup/ipassign/etc autocheck.conf 
    tbsetup/ipassign/src Graph.cc Graph.h autocheck.cc boolcmp.cc 
  Log:
  Added a more flexible framework surrounding routing and ip assignment. Added routing.
  
  Revision  Changes    Path
  1.2       +2 -1      testbed/tbsetup/ipassign/GNUmakefile.in
  1.3       +4 -1      testbed/tbsetup/ipassign/INSTALL
  1.3       +125 -64   testbed/tbsetup/ipassign/README
  1.2       +3 -3      testbed/tbsetup/ipassign/graph/kgraph3.graph
  1.2       +6 -6      testbed/tbsetup/ipassign/graph/kgraph4.graph
  1.3       +71 -9     testbed/tbsetup/ipassign/src/Exception.h
  1.3       +12 -3     testbed/tbsetup/ipassign/src/GNUmakefile.in
  1.3       +24 -176   testbed/tbsetup/ipassign/src/ipassign.cc
  1.3       +16 -0     testbed/tbsetup/ipassign/src/lib.h
  1.3       +1 -1      testbed/tbsetup/ipassign/src/top2graph.cc

mike        2004/01/30 17:28:13 MST

  Modified files:
    tmcd/freebsd/jail    mkjail.pl 
  Log:
  Setup routes inside jail in the "correct" order to avoid ARP whining.
  From the code:
          # N.B. privnet is setup first even before the default route.
          # This is because the gateway for the default route is on the
          # privnet, but our control net interface is not (because it has
          # a 255.255.255.255 netmask by virtue of being an alias on the
          # real control interface).  Thus there is no way to use the
          # default route until the privnet route is up (ARP complains
          # about "host is not on local network").
  
  Revision  Changes    Path
  1.29      +21 -6     testbed/tmcd/freebsd/jail/mkjail.pl

mike        2004/01/30 13:05:41 MST

  Modified files:
    doc                  vnode-impl.txt 
  Log:
  Document:
  - the problem with broadcast when using fake MACs instead of encapsulation
  - why ARP is hard in our environment
  
  Revision  Changes    Path
  1.6       +58 -2     testbed/doc/vnode-impl.txt

stoller     2004/01/30 10:59:53 MST

  Modified files:
    tbsetup              assign_wrapper.in 
  Log:
  Fix for when multiple vnodes in the same lan wind up on on the same
  pnode. Used to no be allowed, but with multiple routing tables this is
  now possible. My code to construct link names on the fly when delay
  nodes are inserted, was generating non-unique names which was causing
  vlans to be dropped.
  
  Revision  Changes    Path
  1.153     +9 -1      testbed/tbsetup/assign_wrapper.in

shash       2004/01/29 18:41:50 MST

  Modified files:
    tbsetup              assign_wrapper.in 
  Log:
  Fixes the bug unearthed by Tim. When a link is created between a jail
  vnode and a PC node, under normal circumstances, a real physical link
  is used. However, a user can use tb-set-multiplexed on the link that
  allows assign to map multiple vlinks over the same physical link.
  This is fine when the PC is running FBSD-STD which can use veth
  interfaces. Not so if it is running Linux or a non-standard BSD.
  This fix forces EMULATED links and VETH devices when the PC is running
  FBSD-STD and turns those attributes off otherwise so that assign
  will not give a mapping that cannot be realized on the client side.
  For the gory details of this problem, look at testbed-ops email thread
  "pcvm route problem" dated 29th Jan 2004.
  
  A problem still exists in the non-BSD router + jail vnodes in a delayed
  LAN. VLANs table is not getting the correct entries. A fix will come
  soon. Follow the testbed-ops email thread "fix for the pcvm route problem"
  dated 29th Jan 2004 for the gory details.
  
  Revision  Changes    Path
  1.152     +49 -13    testbed/tbsetup/assign_wrapper.in

ricci       2004/01/29 15:57:05 MST

  Modified files:
    .                    configure configure.in 
  Added files:
    tbsetup              assign_prepass.in 
  Log:
  New script: assign_prepass
  
  Acts as a transparent filter for assign - parses the top file given to
  assign, coarsens the graph in it, then feeds that to assign.
  Translates assign's output back into context of the original graph,
  and spits that out for parsing.
  
  Right now, only includes a single coarsening algorithm - conglomerates
  the nodes in leaf lans. Hopefully, it will soon include other
  algorithms, such as running METIS to partition the graph.
  
  Still needs a fair amount of work to be general - only works on
  certain types of topologies right now.
  
  Not called yet, but that will be trivial - just need to change
  assign_wrapper to call assign_prepass instead of assign.
  
  Revision  Changes    Path
  1.198     +1 -0      testbed/configure
  1.205     +1 -0      testbed/configure.in

mike        2004/01/29 14:30:18 MST

  Modified files:
    tmcd/common          libsetup.pm 
    tmcd/freebsd         liblocsetup.pm 
    tmcd/linux           liblocsetup.pm 
  Log:
  Changes to support optional no-encapsulation mode on veth devices.
  tmcd passes back an encapsulation flag to inform this.
  NOTE: new version (15) for tmcd!
  
  Revision  Changes    Path
  1.95      +23 -8     testbed/tmcd/common/libsetup.pm
  1.41      +11 -3     testbed/tmcd/freebsd/liblocsetup.pm
  1.23      +2 -2      testbed/tmcd/linux/liblocsetup.pm

ricci       2004/01/29 13:25:36 MST

  Modified files:
    tbsetup/ns2ir        lanlink.tcl tb_compat.tcl.in 
  Log:
  Allow tb-set-multiplexed, tb-set-noshaping, and tb-set-useveth on LANs
  as well as links.
  
  Revision  Changes    Path
  1.32      +3 -3      testbed/tbsetup/ns2ir/lanlink.tcl
  1.61      +13 -13    testbed/tbsetup/ns2ir/tb_compat.tcl.in

stoller     2004/01/29 13:19:48 MST

  Modified files:
    event/linktest       GNUmakefile.in run_linktest.pl.in 
  Log:
  Redo run_linktest.pl so that it is okay to run on boss/ops. Note that
  I am not using paperbag to run it on ops, but just installing the two
  programs that are needed. Eventually should paperbag it.
  
  This same script runs on both boss/ops and on experimental nodes to
  fire off the linktest daemon on the nodes and wait. This is icky as
  some crufty stuff has to be done so that it will run in both
  environments. ltevent is of course not needed on boss, but do not want
  to bother it now since it *is* needed on the nodes.
  
  To run it on boss script needed severe cleanup and taint checking.
  Also added the use of event keyfile, which is currently optional, but
  needs to be mandatory once the images are updated.
  
  The current problem is that run_linktest can hang waiting for the
  clients to finish?. We can use quick mode in the experiment setup
  path, but maybe we need a cancel operation?
  
  Revision  Changes    Path
  1.8       +6 -1      testbed/event/linktest/GNUmakefile.in
  1.8       +193 -69   testbed/event/linktest/run_linktest.pl.in

stoller     2004/01/28 18:03:39 MST

  Modified files:
    db                   xmlconvert.in 
    tbsetup/ns2ir        parse.tcl.in sim.tcl.in tb_compat.tcl.in 
    tmcd                 decls.h tmcd.c 
  Log:
  Add veth_encapsulate for Mike. Per experiment flag, returned for
  each veth from tmcd cause that is easy. Defaults to 1 for now.
  Add tb-set-encapsulate to front end so Mike can play with it.
  
  Revision  Changes    Path
  1.16      +2 -1      testbed/db/xmlconvert.in
  1.46      +4 -1      testbed/tbsetup/ns2ir/parse.tcl.in
  1.62      +3 -2      testbed/tbsetup/ns2ir/sim.tcl.in
  1.60      +14 -0     testbed/tbsetup/ns2ir/tb_compat.tcl.in
  1.22      +2 -2      testbed/tmcd/decls.h
  1.206     +13 -4     testbed/tmcd/tmcd.c

ricci       2004/01/28 16:19:26 MST

  Modified files:
    assign               anneal.cc 
  Log:
  Add additional criteria to pnode_is_match to take into account
  local features/desires - turns out, we are using them in a manner
  similar to types, so can save ourselves from looking at a lot of
  bad solutions by being careful about going too far over on local
  features.
  
  Revision  Changes    Path
  1.27      +37 -0     testbed/assign/anneal.cc

ricci       2004/01/28 16:16:51 MST

  Modified files:
    assign               score.cc common.h 
  Log:
  Bugfix for 'loopback' links.
  
  Do some scoring, not just violations, for stateful features and
  desires - this does a better job of nudging assign towards good
  solutions.
  
  Revision  Changes    Path
  1.49      +17 -11    testbed/assign/score.cc
  1.21      +2 -0      testbed/assign/common.h

stoller     2004/01/28 11:10:06 MST

  Modified files:
    tmcd/common          rc.setup 
  Log:
  Add startup of new linktest daemon.
  
  Revision  Changes    Path
  1.15      +14 -0     testbed/tmcd/common/rc.setup

davidand    2004/01/26 15:07:03 MST

  Modified files:
    event/linktest       GNUmakefile.in linktest.pl.in 
                         run_linktest.pl.in 
  Added files:
    event/linktest       tb_compat.tcl.in 
  Removed files:
    event/linktest       tb_compat.tcl 
  Log:
  Updated makefile to install tb_compat to client_bindir
  Removed hardcoded "boss" from linktest.pl and run_linktest.pl
  Changed historical log location.
  
  Revision  Changes    Path
  1.7       +4 -1      testbed/event/linktest/GNUmakefile.in
  1.13      +26 -11    testbed/event/linktest/linktest.pl.in
  1.6       +8 -1      testbed/event/linktest/run_linktest.pl.in

davidand    2004/01/24 21:18:22 MST

  Modified files:
    event/linktest       linktest.pl.in ltevent.c 
                         run_linktest.pl.in 
  Added files:
    event/linktest       ROADMAP 
  Log:
  Added taint checking to arguments in linktest.pl and run_linktest.pl.
  Modified ltevent.c to use keyfiles.
  Added a ROADMAP.
  Linktest is now ready for first deploy.
  
  Revision  Changes    Path
  1.12      +155 -79   testbed/event/linktest/linktest.pl.in
  1.2       +7 -4      testbed/event/linktest/ltevent.c
  1.4       +52 -15    testbed/event/linktest/run_linktest.pl.in

kwebb       2004/01/23 17:59:55 MST

  Modified files:
    www                  faq.html 
  Log:
  Added detail on setting up the last DOS partition for use as extra space
  on experimental nodes.  The Linux section was updated and expanded, and a
  FreeBSD section was written.
  
  Revision  Changes    Path
  1.94      +62 -7     testbed/www/faq.html

ricci       2004/01/23 10:18:34 MST

  Modified files:
    tbsetup              ptopgen.in 
  Log:
  When including virt goo, include the nodes' CPU speeds and RAM, which
  we can use for fine-tuning packing in assign.
  
  Revision  Changes    Path
  1.53      +13 -2     testbed/tbsetup/ptopgen.in

ricci       2004/01/21 13:06:08 MST

  Modified files:
    ssl                  GNUmakefile.in 
  Log:
  Add a 'remote-site' target and a 'remote-site-boss-install' target
  that only generate the certificates needed at remote sites.
  
  Revision  Changes    Path
  1.15      +10 -0     testbed/ssl/GNUmakefile.in

ricci       2004/01/21 11:22:11 MST

  Modified files:
    doc                  UPDATING 
    rc.d                 3.plab.sh.in 3.testbed.sh.in 
  Log:
  Update our rc.d scripts to handle the 'start' and 'stop' arguments -
  we were attempting to start up duplicate copies of everything as boss
  went down.
  
  Revision  Changes    Path
  1.4       +5 -0      testbed/doc/UPDATING
  1.2       +25 -10    testbed/rc.d/3.plab.sh.in
  1.16      +94 -73    testbed/rc.d/3.testbed.sh.in

stoller     2004/01/21 10:12:41 MST

  Modified files:
    tbsetup              node_reboot.in 
  Log:
  Minor change to RebootNode; do not fork a child until *after*
  determining if a bootinfo wakeup will suffice. This avoids a flurry
  of children trying to connect to the DB. Also, move the TBdbfork()
  until after the DoesPing() test, so that the connection flurry is
  spaced out a bit more. DoesPing() does not talk to the DB, as its name
  might not imply.
  
  Bump batchcount to 12.
  
  Revision  Changes    Path
  1.47      +35 -17    testbed/tbsetup/node_reboot.in

stoller     2004/01/21 09:37:29 MST

  Modified files:
    pxe                  bootinfo_mysql.c 
  Log:
  If none of def_boot_osid,temp_boot_osid,next_boot_osid is set, return
  PXEWAIT to node (if version >= 1, older pxeboot gets an error code).
  Free nodes still get PXEWAIT; have not done those changes yet.
  
  Revision  Changes    Path
  1.19      +10 -0     testbed/pxe/bootinfo_mysql.c

ricci       2004/01/20 18:03:53 MST

  Modified files:
    doc                  UPDATING 
    install              boss-install.in 
  Log:
  Up the buffer sizes for UNIX domain sockets to help syslogd scale
  better.
  
  Revision  Changes    Path
  1.3       +8 -0      testbed/doc/UPDATING
  1.21      +10 -0     testbed/install/boss-install.in

ricci       2004/01/20 17:22:37 MST

  Modified files:
    doc                  setup-db.txt 
    utils                firstuser.in 
  Log:
  New operation for firstuser. Now creates the 'elabman' user and
  'emulab-ops' project, instead of an account for the user running
  it. The elabman user is then used to bootstrap other accounts.
  
  Also include a list of things to do to admin's accounts on boss, like
  giving them shells.
  
  Revision  Changes    Path
  1.18      +97 -40    testbed/doc/setup-db.txt
  1.7       +62 -64    testbed/utils/firstuser.in

ricci       2004/01/20 15:07:39 MST

  Modified files:
    www                  joinproject.php3 newproject.php3 
  Log:
  Check for an account on boss with the submitted username - this will
  prevent people from asking for 'root', 'toor', etc. as usernames, and
  will hopefully help with new installations, which may have created
  accounts by hand. Note that this checks boss only, not ops.
  
  Also fixed a bug in newproject.php3 that was incorrectly letting
  through duplicate usernames.
  
  Revision  Changes    Path
  1.40      +2 -1      testbed/www/joinproject.php3
  1.88      +2 -1      testbed/www/newproject.php3

mike        2004/01/20 13:03:20 MST

  Modified files:
    tmcd/freebsd         chipset.awk control_interface nodetype 
  Log:
  Hacks to recognize rutgers node (pc2400-orbit)
  
  Revision  Changes    Path
  1.5       +27 -3     testbed/tmcd/freebsd/chipset.awk
  1.13      +4 -1      testbed/tmcd/freebsd/control_interface
  1.10      +14 -4     testbed/tmcd/freebsd/nodetype

mike        2004/01/20 12:59:58 MST

  Modified files:
    tmcd/linux           chipset.awk control_interface 
                         modules.conf nodetype 
  Log:
  Hacks to recognize rutgers node (pc2400-orbit)
  
  Revision  Changes    Path
  1.5       +17 -3     testbed/tmcd/linux/chipset.awk
  1.13      +4 -3      testbed/tmcd/linux/control_interface
  1.7       +3 -0      testbed/tmcd/linux/modules.conf
  1.11      +13 -3     testbed/tmcd/linux/nodetype

mike        2004/01/20 12:23:23 MST

  Modified files:
    tmcd/common          rc.setup 
  Log:
  Start up evproxy with an explicit server argument.
  Currently the default bossnode seems to be compiled in as "boss.emulab.net"
  which doesn't work so well at other testbeds.
  
  Revision  Changes    Path
  1.14      +7 -1      testbed/tmcd/common/rc.setup
	
ricci       2004/01/20 11:49:18 MST

  Modified files:
    install              boss-install.in 
  Log:
  Set the kernel Hz to 1000 in /boot/loader.conf .
  
  Revision  Changes    Path
  1.20      +9 -0      testbed/install/boss-install.in

mike        2004/01/20 10:27:30 MST

  Modified files:
    tbsetup              frisbeelauncher.in 
  Log:
  Add an explicit bandwidth param to the frisbeed startup.  This way we don't
  rely on the HZ rate of the boss kernel.
  
  Revision  Changes    Path
  1.16      +3 -1      testbed/tbsetup/frisbeelauncher.in

stoller     2004/01/20 08:21:20 MST

  Modified files:
    pxe                  bootinfo.c bootwhat.h 
  Log:
  Add back the cache to avoid generating spurious events when bootinfo
  packets are lost; do not send the events if a node has requested
  bootinfo within the last 10 seconds; this implies that the bootinfo
  reply packet was lost and the node is retrying. This should quiet
  things a bit from stated, although eventually this should be dealt
  with in stated instead of with this hack.
  
  Mac originally added the cache to proxydhcp. I've added a cache to
  bootinfo to solve the same problem (proxydhcp is no longer used),
  although I have changed to implementation to use the DBM backend
  rather then a one-off hash table. dbopen() with a NULL file argument
  creates an in-memory database (no backing store), and I have used the
  DB_HASH db type. So, the hash table is done with a couple of calls to
  DBM routines.
  
  Revision  Changes    Path
  1.11      +127 -20   testbed/pxe/bootinfo.c
  1.7       +1 -1      testbed/pxe/bootwhat.h

davidand    2004/01/20 02:41:23 MST

  Modified files:
    event/linktest       linktest.pl.in 
  Log:
  Enhancements to the process control, control over send speeds,
  better support for experiment failures (99% on latency and loss),
  better error messages.
  
  Revision  Changes    Path
  1.11      +477 -267  testbed/event/linktest/linktest.pl.in

davidand    2004/01/17 21:09:25 MST

  Modified files:
    event/linktest       GNUmakefile.in linktest.c linktest.h.in 
                         linktest.pl.in 
  Added files:
    event/linktest       ltevent.c 
  Removed files:
    event/linktest       run_linktest.pl.in 
  Log:
  Checkpoint commit. I've added the static-linked program "ltevent" to send
  and wait for linktest events, and integrated it into the perl scripts.
  
  At this point I'm working on small potatoes such as the rc.setup script
  to invoke linktest daemon and nailing down where to put platform-specific
  stuff such as the ns-linktest build and the customized tb-compat.
  
  Also am testing linktest in cases where I've deliberately inserted an error
  to make sure it catches it.
  
  Revision  Changes    Path
  1.6       +14 -1     testbed/event/linktest/GNUmakefile.in
  1.7       +6 -34     testbed/event/linktest/linktest.c
  1.3       +4 -0      testbed/event/linktest/linktest.h.in
  1.10      +69 -89    testbed/event/linktest/linktest.pl.in

shash       2004/01/16 18:55:51 MST

  Modified files:
    event/nsetrafgen     nse.patch 
  Log:
  Before this commit, a simulator packet that crosses pnodes was being
  decapsulated if it was determinted that the packet was destined to some
  sim node on the same pnode. This was done at the entry point of the
  packet from the live network. However, in the case of disconnected
  partitions, the packet may have to exit the pnode one or more times
  before reaching the final destination. In this case, the decapsulation
  of it early is a waste. This commit remedies that by performing the
  decapsulation in the port classifier of a node just before the packet
  is given to a traffic agent that will consume the packet.
  
  Revision  Changes    Path
  1.19      +175 -127  testbed/event/nsetrafgen/nse.patch

newbold     2004/01/15 17:21:33 MST

  Modified files:
    db                   libdb.pm.in 
    event/stated         stated.in 
    sql                  database-fill.sql 
  Log:
  libdb changes:
  
  - add functions to recursively dump hashes and arrays into a string
    suitable for printing as debugging output (great for data structures)
  
  - add three new trigger strings
  
  - add 'use strict', do corresponding cleanup
  
  stated changes:
  
  - move special-cased stuff in handleEvent for PXEBOOTING and BOOTING into
    triggers (PXEBOOTING, BOOTING, and CHECKGENISUP)
  
  - clarify (via comments) the existing kinds of triggers and which ones run
    when, and add a new kind (global "any-mode" triggers). We already had
    per-node mode-specific, per-node any-mode, and global mode-specific
    triggers. Now you can have a trigger that is good for any mode in a
    given state, that can be overridden on a mode-specific basis. This is
    great for PXEBOOTING, BOOTING, and ISUP, since they each have a trigger
    list that should be run regardless of what mode you're in. Now they only
    require 3 entries instead of 3*N that have to be maintained per mode.
  
       # A note about triggers:
       #
       # "per-node" triggers only affect their specific node in a
       # particular mode/state, and are run first of all. "global"
       # triggers are triggers for a given mode/state that affect all
       # nodes, and are run after any per-node triggers. "Any-mode"
       # triggers are tied to a state, and occur in that state in any
       # mode. The any-mode triggers are over-ridden by global triggers,
       # and if an "Any-mode" trigger for state XYZ exists as well as a
       # global trigger for mode FOOBAR state XYZ, then when I arrive in
       # XYZ any per-node triggers will be run. Then, if I'm in mode
       # FOOBAR, only the global trigger will run. If I'm in any other
       # mode, only the any-mode trigger will run.
  
       # (our "*" is stored as $TBANYMODE)
       # Per-node triggers have a specific node_id
       # Global triggers have "*" as the node_id
       # Any-mode triggers have "*" as the mode, and can be global or per-node
  
    The updated table looks like this in the accompanying change to
    database-fill.sql:
  
  +---------+----------+------------+-----------------------+
  | node_id | op_mode  | state      | trigger               |
  +---------+----------+------------+-----------------------+
  | *       | *        | BOOTING    | BOOTING, CHECKGENISUP |
  | *       | *        | ISUP       | RESET                 |
  | *       | *        | PXEBOOTING | PXEBOOT               |
  | *       | RELOAD   | RELOADDONE | RESET, RELOADDONE     |
  | *       | ALWAYSUP | SHUTDOWN   | ISUP                  |
  +---------+----------+------------+-----------------------+
  
  - I also cleaned up the functions that add, get, and delete triggers.
    Before, the get function didn't include global triggers. Now it does,
    and has an option to just get the per-node triggers. Add and delete are
    still just per-node, of course.
  
  - Also found and fixed some little bugs while I was in there. (global
    triggers not taking a list,
  
  These changes are me getting ready to re-add all the changes I made months
  ago in order to do a before-and-after experiment for my thesis. Between
  now and the end of next week I'll be working on taking before numbers,
  patching stated with the changes, and getting after numbers.
  
  The problems I'm trying to replicate are the problems and slowdowns we
  used to get when os_{load,setup} would reboot a node, thinking it had
  timed out, when it really didn't know whether it was making progress or
  not. The fix includes making os_{load,setup} depend on stated to watch for
  progress and timeouts, and do any appropriate retries. Part of that is the
  StateWait stuff, that lets programs watch for events easily, and the
  node_reboot-with-events stuff that puts stated in control of nodes as they
  reboot.
  
  Revision  Changes    Path
  1.148     +250 -182  testbed/db/libdb.pm.in
  1.57      +216 -138  testbed/event/stated/stated.in
  1.53      +5 -8      testbed/sql/database-fill.sql

shash       2004/01/15 14:53:48 MST

  Modified files:
    event/nsetrafgen     nse.patch 
  Log:
  One more bugfix. sendpkt() was being called with a wrong length even though
  the RAW_IP packet being sent had a different ip_len. This happened in the
  case of a nse topology that is disconnected due to how assign maps it. The
  encapsulated simulator packet was decapsulated even though it has to leave
  the physical node again. Under this circumstance, the decapsulated simulator
  packet size was used for RAW_IP send() instead of the size of the encapsulated
  packet.
  
  Revision  Changes    Path
  1.18      +8 -7      testbed/event/nsetrafgen/nse.patch

stoller     2004/01/15 14:45:45 MST

  Modified files:
    www                  beginexp_html.php3 beginexp_xml.php3 
  Log:
  Change beginexp_html.php3 to invoke xml backend with a POST instead of
  GET to avoid GET size limitations. This should have been easy, but PHP
  has no native support for doing this, so takes a bit of mucking around
  with a direct socket connection to the server, and sending it the
  right headers, blah, blah, blah.
  
  Will make this live soon!
  
  Revision  Changes    Path
  1.3       +50 -14    testbed/www/beginexp_html.php3
  1.3       +2 -2      testbed/www/beginexp_xml.php3

stoller     2004/01/15 09:18:41 MST
	
  Modified files:
    tbsetup              GNUmakefile.in frisbeelauncher.in 
    .                    configure configure.in 
    utils                create_image.in 
    www                  deleteimageid.php3 showstuff.php3 
  Added files:
    tbsetup              webfrisbeekiller.in 
  Log:
  Add "killmode" to frisbeelauncher to kill a running frisbee for an
  imageid.  Uses new slot in the images table (frisbee_pid) to track
  running frisbee daemon for an image so that it can be killed from
  create-image (kill before creating new image) and from the web page
  before deleting an imageid.
  
  Revision  Changes    Path
  1.100     +2 -2      testbed/tbsetup/GNUmakefile.in
  1.15      +164 -40   testbed/tbsetup/frisbeelauncher.in
  1.197     +1 -1      testbed/configure
  1.204     +1 -1      testbed/configure.in
  1.22      +11 -0     testbed/utils/create_image.in
  1.7       +7 -1      testbed/www/deleteimageid.php3
  1.125     +19 -0     testbed/www/showstuff.php3

newbold     2004/01/15 10:15:50 MST

  Modified files:
    db                   stategraph.in 
  Log:
  Minor update - nocluster option to print as one big machine.
  
  Revision  Changes    Path
  1.7       +12 -5     testbed/db/stategraph.in

davidand    2004/01/14 19:45:09 MST

  Modified files:
    event/linktest       GNUmakefile.in linktest.c linktest.pl.in 
  Added files:
    event/linktest       run_linktest.pl.in 
  Log:
  Updates to Linktest for a caller script, run_linktest.pl.
  This includes an updated client-install.
  
  However, this is not yet ready for builds due to certain libraries not
  present on the nodes and ops. For those I will be writing a static
  linked c program to handle the linktest "done" event in both linktest.pl
  and run_linktest.pl.
  
  Revision  Changes    Path
  1.5       +4 -1      testbed/event/linktest/GNUmakefile.in
  1.6       +11 -5     testbed/event/linktest/linktest.c
  1.9       +120 -78   testbed/event/linktest/linktest.pl.in

mike        2004/01/14 17:13:02 MST

  Modified files:
    os/frisbee.redux     network.c 
  Log:
  Exit if we fail to bind to the target multicast port!
  
  Revision  Changes    Path
  1.9       +4 -2      testbed/os/frisbee.redux/network.c

mike        2004/01/14 14:07:56 MST

  Modified files:
    www/tutorial         nscommands.html 
  Log:
  Document the various linkdelay related commands and tb-set-noshaping
  
  Revision  Changes    Path
  1.41      +132 -1    testbed/www/tutorial/nscommands.html

ricci       2004/01/14 12:58:40 MST

  Modified files:
    assign               anneal.cc score.cc 
  Log:
  Fix a bug that was causing problem when multiplexed nodes were being
  combined with non-multiplexed nodes.
  
  Also clear up the sense of the 'is_fixed' parameter to add_node() -
  it was being handled correctly, but was confusing because it was non-
  intuitive.
  
  Revision  Changes    Path
  1.25      +6 -6      testbed/assign/anneal.cc
  1.48      +6 -7      testbed/assign/score.cc

stoller     2004/01/14 12:12:35 MST

  Modified files:
    tmcd/common          rc.setup 
  Log:
  Add call to rc.kname to rename the kernel, if appropriate. Currently
  used on FreeBSD nodes when the boot loader boots something other then
  the default kernel.
  
  Revision  Changes    Path
  1.13      +6 -1      testbed/tmcd/common/rc.setup

stoller     2004/01/14 11:50:51 MST

  Modified files:
    www                  dbdefs.php3.in showexp.php3 
                         showstuff.php3 
  Log:
  Minor sorting changes for Mike.
  
  Revision  Changes    Path
  1.74      +1 -0      testbed/www/dbdefs.php3.in
  1.76      +8 -2      testbed/www/showexp.php3
  1.124     +57 -53    testbed/www/showstuff.php3

ricci       2004/01/12 15:41:07 MST

  Modified files:
    assign               anneal.cc anneal.h assign.cc physical.h 
                         score.cc solution.cc solution.h 
  Log:
  Several changes, mostly targeted at jail and simulation-type
  topologies.
  
  First, added a new 'summary' of the solution, when the '-u' option is
  given. It's a view of things from the physical side - prints out how
  many vnodes were mapped to each pnode, as well as how much bandwidth
  (trivial and non-trivial) was used on each node. For 'normal' nodes,
  we also print out all links used and how much bandwidth was used on
  each of them. For switches, we print only inter-switch links. This is
  amazingly helpful in getting an intuitive feel for how well assign is
  doing.
  
  Added a SIGINFO handler for the impatient (like me) to see things such
  as the current temperature, and current and best scores, while assign
  is running.
  
  Fixed a bug in which emulated links could get over-subscribed, as well
  as a few other misc. bugfixes.
  
  Changed the way assign goes through the list of a node's pclasses in
  random order - there were problems with the old way in which you could
  end up with a situation in which some pnodes were chosen with a much
  higher probability than others. Now, rather than treating the list as
  a ring and starting at a random place, we make a randomly-ordered list
  of the pclasseses, and go through it from start to finish.
  
  Did some work on dynamic pclasses so that we adjust the estimate of
  the neighborhood size to account for disabled pclasses (ie. pnodes
  that have nothing mapped to them yet.)
  
  Changed the way that find_link_to_switch() decides on the best link to
  use - the old method was doing very poorly at bin-packing emulated
  links into plinks. I now use a simple first-fit algorithm. This made a
  pretty big difference. I may try some other fast bin-packing
  approximation algorithm, but my main fear is that all of the good ones
  (such as the 'sort from largest to smallest, then do first-fit'
  algorithm) may require re-mapping other links. This might be slow,
  and/or it might make it difficult, if not impossible, to keep
  add_node() and remove_node() symmetric.
  
  Combinded direct_link() and find_link_to_switch() into
  find_best_link(), since they really do the same thing.
  
  Standardized on std::random() to get random numbers - previosuly, some
  calls were using std::rand().
  
  The big one: I added a find_pnode_connected() function that finds a
  random pnode that one of the vnode's neighbors in the virtual graph is
  assigned to. Then, with a random probability (given with the -c option
  on the command line), we try that function to find a pnode first (if
  it fails, we still call find_pnode() ). Of course, this is only really
  applicable when you have a reasonable degree of vnode-to-pnode
  multiplexing. In the test case I'm using, this managed to get 3x as
  much bandwidth into trivial links as just using find_pnode().
  
  Revision  Changes    Path
  1.24      +81 -11    testbed/assign/anneal.cc
  1.7       +1 -1      testbed/assign/anneal.h
  1.69      +40 -4     testbed/assign/assign.cc
  1.22      +4 -2      testbed/assign/physical.h
  1.47      +59 -71    testbed/assign/score.cc
  1.4       +68 -0     testbed/assign/solution.cc
  1.3       +4 -0      testbed/assign/solution.h

stoller     2004/01/12 13:44:39 MST

  Modified files:
    .                    configure configure.in 
    pxe                  GNUmakefile.in bootinfo.c bootwhat.h 
  Removed files:
    pxe                  proxydhcp.c proxydhcp.conf 
                         proxydhcp.restart.in proxydhcp_cdir.c 
                         proxydhcp_cfile.c proxydhcp_mysql.c 
  Log:
  Remove all trace of proxydhcp!
  
  Revision  Changes    Path
  1.196     +1 -1      testbed/configure
  1.203     +1 -1      testbed/configure.in
  1.14      +3 -24     testbed/pxe/GNUmakefile.in
  1.10      +3 -0      testbed/pxe/bootinfo.c
  1.6       +1 -1      testbed/pxe/bootwhat.h

mike        2004/01/12 10:20:38 MST

  Modified files:
    doc                  vnode-impl.txt 
  Log:
  Incorporate description of jail changes from Leigh's jail.html file.
  Fix a few nits.
  
  Revision  Changes    Path
  1.4       +137 -41   testbed/doc/vnode-impl.txt

mike        2004/01/12 10:23:00 MST

  Modified files:
    www/doc              jail.html 
  Log:
  I set out to make this the definitive document on vnodes, but aborted that.
  Basically, I just updated it and changed it from a chronology to a summary
  (i.e., collected all the jail features into one list).
  
  Revision  Changes    Path
  1.4       +119 -103  testbed/www/doc/jail.html

stoller     2004/01/12 09:58:11 MST

  Modified files:
    event/stated         stated.in 
  Log:
  Hmm, this file dropped from previous commit. Added support for
  handling PXEWAKUP timeouts, retrying 3 times and then forcing a power
  cycle.  Changed BOOTING event action to auto switch in and out of the
  special PXEKERNEL state machine that all local nodes use since all
  local nodes boot the same pxeboot kernel and talk to bootinfo (as
  directed to by dhcp).
  
  Revision  Changes    Path
  1.56      +158 -114  testbed/event/stated/stated.in

stoller     2004/01/12 09:18:41 MST

  Modified files:
    pxe                  GNUmakefile.in bootinfo.c 
                         bootinfo_cfile.c bootinfo_mysql.c 
                         bootinfo_null.c bootwhat.h 
    sql                  database-fill-supplemental.sql 
    tbsetup              node_control.in node_reboot.in os_load.in 
                         os_select.in 
    utils                create_image.in newnode.in node_admin.in 
    www                  nodecontrol.php3 nodecontrol_form.php3 
                         showstuff.php3 
  Added files:
    pxe                  bootinfo.h bootinfosend.c event-support.c 
  Log:
  Death to proxydhcp; one less specialized daemon. DHCP will return the
  filename to boot, and all local nodes will boot the same pxeboot kernel,
  which has been extended to allow for jumping directly into a specific MFS
  (in addition to the usual testbed boot into a partition or multiboot
  kernel).
  
  Bootinfo and the bootwhat protocol extended to tell the client node what
  MFS to jump into directly, without a reboot. pxe_boot_path and
  next_pxe_boot_path are now deprecated, with bootinfo used to control which
  MFS to boot. Nodes now boot a single pxeboot kernel, and bootinfo tells
  them what to do next.
  
  Bootinfo greatly simplifed. temp_boot_osid has been added to allow for
  temporary booting of different kernels (such as with ndoe_admin or
  create_image). Unlike next_boot_osid which is a one-shot boot,
  temp_boot_osid causes the node to boot that OS until told not too.
  
  next_boot_path and def_boot_path in the nodes table are now ignored.
  Bootinfo gets path info strictly from the os_info table entry for the osid
  given in one of def_boot_osid, temp_boot_osid, or next_boot_osid.  This
  makes the selection of what to do in bootinfo a lot simpler (and for
  TBBootWhat in libdb). The os_info table also modified to include an MFS
  flag so that bootinfo knows to tell the client that the path refers to an
  MFS and not a multiboot kernel.
  
  Change to boot sequence; free nodes no longer boot into the default OSID.
  Instead, they are told to wait in pxeboot until told what to do, which
  will typically be when the node is allocated and a specific OSID
  picked. If the node needs to be reloaded, then the node is told to jump
  directly into the Frisbee MFS, which saves one complete reboot cycle
  whether the node has the requested OS installed, or not.  New program
  added called "bootinfosend" that is used by node_reboot to "wake up" up
  nodes sitting in pxewait mode, so that they query bootinfo again and boot.
  
  node_reboot changed to look at the event state of a node, and use
  bootinfosend to wake up nodes, rather then power cycle, since pxeboot does
  not repsond to pings. Retry (if the UDP packet is lost) is handled by
  stated.
  
  Event support added to bootinfo, to replace the event generation that was
  in proxydhcp. I have not included the caching that Mac had in proxydhcp
  since it does not appear that bootinfo packets are lost very
  often. Cleaned up all of the event and DB queury code to use lib/libtb for
  DB access, and moved all of the event code into a separate file.  The
  event sequence when a node boots now looks like this:
  
  	'SHUTDOWN'    --> 'PXEBOOTING'  (BootInfo)
  	'PXEBOOTING', --> 'PXEBOOTING'  (BootInfo Retry)
  	'PXEBOOTING', --> 'BOOTING'     (Node Not Free)
  	'PXEBOOTING', --> 'PXEWAIT'     (Node is Free)
  	'PXEWAIT',    --> 'PXEWAKEUP'   (Node Allocated)
  	'PXEWAKEUP',  --> 'PXEWAKEUP'   (Bootinfo Retry)
  	'PXEWAKEUP',  --> 'PXEBOOTING'  (Node Woke Up)
  
  Change stated to support resending PXEWAKEUP events when node times out.
  After 3 tries, node is power cycled. Other minor cleanup in stated.
  
  Clean up and simplify os_select, while adding support for temp_next_boot
  and removing all trace of def_boot_path and next_boot_path processing.
  Remove all pxe_boot_path and next_pxe_boot_path processing.  Changed
  command line interface to support "clearing" fields. For example,
  node_admin changed to call os_select like this to have the node
  temporarily boot the FreeBSD MFS:
  
  	os_select -t FREEBSD-MFS pcXXX
  
  which sets temp_boot_osid. To turn admin mode off:
  
  	os_select -c -t pcXXX
  
  which says to clear temp_boot_osid.
  
  sql/database-fill-supplemental.sql modifed to add os_info table
  entries for the FreeBSD, Frisbee, and newnode MFS's.
  
  Be sure to change dhcpd config, restart dhcp, kill proxydhcp, restart
  bootinfo,
  
  Revision  Changes    Path
  1.13      +29 -10    testbed/pxe/GNUmakefile.in
  1.9       +131 -37   testbed/pxe/bootinfo.c
  1.6       +9 -18     testbed/pxe/bootinfo_cfile.c
  1.18      +219 -151  testbed/pxe/bootinfo_mysql.c
  1.5       +7 -4      testbed/pxe/bootinfo_null.c
  1.4       +43 -10    testbed/pxe/bootwhat.h
  1.2       +3 -3      testbed/sql/database-fill-supplemental.sql
  1.10      +28 -27    testbed/tbsetup/node_control.in
  1.45      +55 -5     testbed/tbsetup/node_reboot.in
  1.57      +3 -3      testbed/tbsetup/os_load.in
  1.16      +186 -200  testbed/tbsetup/os_select.in
  1.20      +5 -4      testbed/utils/create_image.in
  1.10      +2 -2      testbed/utils/newnode.in
  1.6       +6 -13     testbed/utils/node_admin.in
  1.19      +31 -19    testbed/www/nodecontrol.php3
  1.25      +44 -21    testbed/www/nodecontrol_form.php3
  1.123     +13 -16    testbed/www/showstuff.php3
  1.56      +158 -114  testbed/event/stated/stated.in

shash       2004/01/12 02:17:12 MST

  Modified files:
    event/nsetrafgen     nse.patch 
  Log:
  Another bug fix. The newly added $ns ip-connect instproc had a bug. The
  code originally tried to do a normal $ns connect between traffic agents
  attached to simnodes on the same pnode. The problem that I forgot of course
  is that partitioned topology is quite disconnected which means that a
  packet is forced to exit the pnode and come back to it (in many cases).
  In other words, a direct intra pnode path does not exist. The fix is
  to just use the IP address based routes always. A similar problem
  is encountered in pdns as well. However, since IP address based routing
  is not used, there is no simple fix unless I work on it!
  
  The 416 node topology testbed/nse416 is working alright. It mapped to
  20 pnodes and as soon as a whole bunch of traffic started up, 7 pnodes
  couldn't track real-time and caused a modify. Expt modify happened 3
  times but eventually max_retries in my re-swapping code was reached. Need
  more measuring, tuning as well as eventrate based re-swapping.
  
  Revision  Changes    Path
  1.17      +13 -23    testbed/event/nsetrafgen/nse.patch

shash       2004/01/09 00:23:39 MST

  Modified files:
    event/nsetrafgen     nseinput.tcl.in tbevent.cc tbevent.h 
    event/sched          event-sched.c 
    tbsetup              assign_wrapper.in nseswap.in ptopgen.in 
                         tbswap.in 
    tbsetup/ns2ir        sim.tcl.in 
    tbsetup/nseparse     nse.parse.tcl.in 
  Log:
  Changes to do auto re-swap of expts with simnodes when an nse on a simhost
  (or more than one simhost) is unable to keep up with real-time. It includes
  changes to assign_wrapper to handle swap modify for simnodes, the simple
  algorithm in nseswap that bumps up the nodeweight of simnodes being hosted
  on a simhost that reports "can't keep up with real-time" (aka nse violation),
  ptopgen and sim.tcl to prefer nodes that already have the FBSD-NSE image.
  Also, changes to other files to send out NSESWAP event.
  
  One unrelated change: We now have per-swapin .top files and assign.log
  files along with .ptop files. This helps in debugging across multiple
  swapins since files remain in the form of
  <pid>-<eid>-<process_id>.{top,ptop} and assign-<pid>-<eid>-<process_id>.log
  Also useful for archiving.
  
  Revision  Changes    Path
  1.19      +4 -1      testbed/event/nsetrafgen/nseinput.tcl.in
  1.5       +39 -19    testbed/event/nsetrafgen/tbevent.cc
  1.4       +3 -0      testbed/event/nsetrafgen/tbevent.h
  1.28      +4 -1      testbed/event/sched/event-sched.c
  1.149     +112 -21   testbed/tbsetup/assign_wrapper.in
  1.2       +168 -4    testbed/tbsetup/nseswap.in
  1.52      +15 -3     testbed/tbsetup/ptopgen.in
  1.32      +8 -5      testbed/tbsetup/tbswap.in
  1.60      +4 -0      testbed/tbsetup/ns2ir/sim.tcl.in
  1.2       +3 -1      testbed/tbsetup/nseparse/nse.parse.tcl.in

shash       2004/01/08 16:30:24 MST

  Modified files:
    tbsetup              swapexp.in tbswap.in 
  Log:
  Added -e option to swapexp which says "restart event system". Similarly
  added -eventsys_restart option to tbswap. These options are allowed
  only with swapexp -s modify and correspondingly for tbswap with update.
  Tested with a 1 node experiment and things seem to work fine.
  
  Revision  Changes    Path
  1.50      +12 -2     testbed/tbsetup/swapexp.in
  1.31      +7 -3      testbed/tbsetup/tbswap.in

shash       2004/01/08 12:31:54 MST

  Added files:
    www                  ssh-mime.c 
  Log:
  Since I could never get ssh-mime-windows.pl to work for me and I got tired
  of typing to log in to nodes, I wrote the same code in C.
  Compile on cygwin with gcc -mwindows -mno-cygwin -o ssh-mime ssh-mime.c .
  Set the env PUTTY_CMD to the path of where you have put putty. The compiled
  exe is in http://www.emulab.net/ssh-mime.exe

stoller     2004/01/07 13:27:12 MST

  Modified files:
    event/stated         stated.in 
  Log:
  A set of debugging changes to allow running multiple stateds. This is
  probably imperfect, but better then nothing. New option, "-t tag"
  allows you to specify an arbitrary tag to match against the stated_tag
  of the nodes table. The stated invocation will only operate on nodes
  that match the tag, ignoring all events for other nodes. If
  unspecified, stated will operate on all nodes with a NULL tag. This is
  setup up at the beginning of time (or during a reload) saving the
  per-node tag in the $nodes hash. Each time an event arrives, check the
  tag in the table, ignoring the event if not a match.
  
  On signaled reload() must also be careful to throw away timeouts from
  the queue (and be careful not to set up new timeouts for ignored
  nodes).  So, this allows you to set the tag for a node in the DB, and
  then HUP stated so that it reloads it tables. That node will now be
  ignored by that stated.
  
  Also made some changes to debug mode. In debug mode, don't worry about
  the pidfile or the lockfile or checking for other running stated
  (which causes my debug version to exit! right away). Also, added a new
  -l option to turn of syslog output and just send it all to stdout with
  the debug output. -l can be only be used with -d of course.
  
  So what can I do with all this:
  
  	update nodes set stated_tag='lbs' where node_id='pc5';
  	sudo kill -HUP `cat /var/run/stated.pid`
  	sudo stated -d -l -t lbs
  
  Which tells the main stated to ignore pc5. Then I run a debugging
  stated that operates only on pc5. Later when done:
  
  	update nodes set stated_tag=NULL where node_id='pc5';
  	sudo kill -HUP `cat /var/run/stated.pid`
  
  Which tells the main stated to operate on pc5 again.
  
  Revision  Changes    Path
  1.55      +131 -44   testbed/event/stated/stated.in

shash       2004/01/07 02:17:03 MST

  Modified files:
    event/nsetrafgen     nse.patch 
  Log:
  Yet another bugfix + code to call a function that sends NSESWAP event
  when it cannot keep up with real-time.
  
  bug: This affected encapsulated simulator packets that had to cross
  multiple physical nodes before arriving at the destination simulator
  traffic agent. This bug didnt affect live packets from traffic sources
  on real PCs.
  
  The NSESWAP event is now sent via the tevc command. The nse scheduler
  waits for the slop factor (diff between clock and event dispatch time
  that exceeds a threshold) to be crossed multiple times in a second
  before sending the NSESWAP event. Currently 5 times in 1 second.
  However, this needs more careful thought and will get modified later.
  When is it really necessary to declare that an nse is overloaded?
  i.e. what is the right slop factor? How many times can we tolerate
  that the slop factor is exceeded to ensure end-to-end performance
  is within a certain percentage of the expected?
  
  Revision  Changes    Path
  1.16      +58 -23    testbed/event/nsetrafgen/nse.patch

ricci       2004/01/06 18:24:23 MST

  Modified files:
    tbsetup              assign_wrapper.in 
    assign               anneal.cc pclass.cc pclass.h score.cc 
  Log:
  Fix dynamic pclasses, and make them the default for virtual nodes
  again.
  
  One of the fixes changes the way in which we iterate through pclasses
  in find_pnode(). We used to treat the vector like a ring buffer, and
  start (randomly) someplace in the middle. This turns out to give some
  bad statistical properties when doing dynamic pclasses, since long
  chains of disabled pclasses will cause some pclasses to be selected
  more often. My old hack of just hopping around randomly in the
  disabled-pclass case was bad, because it's hard to tell when you've
  actually tried all the pclasses - so, we were getting false negatives
  where it was looking like there was no place available where we could
  map a vnode, which turned out to have worse effects than I had
  thought.
  
  So, now, we make a list of all the indices and randomize the order,
  then just iterate through that list.
  
  We also now count the number of pclasses that are enabled at every
  temperature step, and adjust the neighborhood size to remove them.
  This makes dynamic pclasses quite a bit faster - it cuts the time
  by 30% - 50% for my test case.
  
  Cleaned up find_pnode() by removing some #ifdef's that we don't use,
  and probably will never want to again - this makes the function almost
  readable!
  
  Revision  Changes    Path
  1.148     +1 -1      testbed/tbsetup/assign_wrapper.in
  1.23      +36 -89    testbed/assign/anneal.cc
  1.22      +13 -0     testbed/assign/pclass.cc
  1.15      +2 -0      testbed/assign/pclass.h
  1.46      +1 -1      testbed/assign/score.cc

shash       2004/01/06 00:46:08 MST

  Modified files:
    event/nsetrafgen     nseinput.tcl.in 
  Log:
  Fixed a simple but showstopper bug. This script would flush the routes
  in every routing table except the main before inserting new ones
  obtained from tmcc. The problem was that even the interface routes
  that were added when the interfaces were brought up are flushed.
  Unfortunately these routes weren't getting added again.
  
  The solution is to toggle the interfaces i.e. disabling and re-enabling
  them again. It has the desired effect of flushing all the routes as well.
  I'm not sure how things worked until now. In all my previous mappings
  of the testbed/nse10 straight-line topology, things mysteriously worked!
  
  Revision  Changes    Path
  1.18      +5 -6      testbed/event/nsetrafgen/nseinput.tcl.in

stoller     2003/12/18 9:30:36 MST
	    
  Modified files:
    db                   libdb.pm.in xmlconvert.in 
    www                  dbdefs.php3.in joinproject.php3 
                         moduserinfo.php3 newproject.php3 
  Added files:
    www                  dbcheck.php3 
  Log:
  First try at solving the problem of validating user input for the
  zillions of DB fields that we have to set. My solution was to add a
  meta table that describes what is a legal value for each table/slot
  for which we take from user input. The table looks like this right
  now, but is likely to adapt as we get more experience with this
  approach (or it might get tossed if it turns out to be a pain in the
  ass!).
  
  	CREATE TABLE table_regex (
  	  table_name varchar(64) NOT NULL default '',
  	  column_name varchar(64) NOT NULL default '',
  	  column_type enum('text','int','float') default NULL,
  	  check_type enum('regex','function','redirect') default NULL,
  	  check tinytext NOT NULL,
  	  min int(11) NOT NULL default '0',
  	  max int(11) NOT NULL default '0',
  	  comment tinytext,
  	  UNIQUE KEY table_name (table_name,column_name)
  	) TYPE=MyISAM;
  
  Entries in this table look like this:
  
  	('virt_nodes','vname','text','regex','^[-\\w]+$',1,32,NULL);
  
  Which says that the vname slot of the virt_nodes table (which we trust the
  user to give us in some form) is a text field to be checked with the given
  regex (perlre of course), and that the min/max length of the text field is
  1 and 32 chars respectively.
  
  Now, you wouldn't want to write the same regex over and over, and since we
  use the same fields in many tables (like pid, eid, vname, etc) there is an
  option to redirect to another entry (recursively). So, for "PID" I do this:
  
          ('eventlist','pid','text','redirect','projects:pid',0,0,NULL);
  
  which redirects to:
  
  	('projects','pid','text','regex','^[a-zA-Z][-\\w]+$',2,12,NULL);
  
  And, for many fields you just want to describe generically what could go
  into it. For that I have defined some default fields. For example, a user
  description:
  
          ('experiment,'usr_name','text','redirect','default:tinytext',0,0,NULL);
  
  which redirects to:
  
  	('default','tinytext','text','regex','^[\\040-\\176]*$',0,256,NULL);
  
  and this says that a tinytext (in our little corner of the database
  universe) field can have printable characters (but not a newline), and
  since its a tinytext field, its maxlen is 256 chars.
  
  You also have integer fields, but these are little more irksome in the
  details.
  
  	('default','tinyint,'int,'regex','^[\\d]+$',-128,127,NULL);
  
  and you would use this anyplace you do not care about the min/max values
  being something specific in the tinyint range. The range for a float is of
  course stated as an integer, and thats kinda bogus, but we do not have many
  floats, and they generally do not take on specific values anyway.
  
  A note about the min/max fields and redirecting. If the initial entry has
  non-zero min/max fields, those are the min mac fields used. Otherwise they
  come from the default. So for example, you can do this:
  
      ('experiments','mem_usage','int','redirect','default:tinyint',0,5,NULL);
  
  So, you can redirect to the standard "tinyint" regular expression, but you
  still get to define min/max for the specific field.
  
  Isn't this is really neat and really obtuse too? Sure, you can say it.
  
  Anyway, xmlconvert now sends all of its input through these checks (its
  all wrapped up in library calls), and if a slot does not have an entry, it
  throws an error so that we are forced to define entries for new slots as we
  add them.
  
  In the web page, I have changed all of the public pages (login, join
  project, new project, and a couple of others) to also use these checks.
  As with the perl code, its all wrapped up in a library. Lots more code
  needs to be changed of course, but this is a start.
  
  Revision  Changes    Path
  1.143     +151 -1    testbed/db/libdb.pm.in
  1.12      +19 -7     testbed/db/xmlconvert.in
  1.70      +8 -66     testbed/www/dbdefs.php3.in
  1.36      +33 -19    testbed/www/joinproject.php3
  1.37      +36 -5     testbed/www/moduserinfo.php3
  1.83      +48 -27    testbed/www/newproject.php3

stoller     2003/12/17 11:29:36 MST

  Modified files:
    tmcd                 tmcd.c 
  Log:
  Remove code that required tmcd to run as root, and add the necessary
  code to run as uid/gid nobody/nobody. I had to remove dolog(), which
  was to support the oskit on the dnards, so no one will miss that!
  I also removed the tar/rpm download support since we now do that via
  the web interface. To support sfshostid, I had to chown/chgrp
  /proj/.sfs to the nobody/nobody so that tmcd willbe able to create the
  symlinks in that directory.
  
  Revision  Changes    Path
  1.199     +41 -429   testbed/tmcd/tmcd.c

stoller     2003/12/15 17:41:14 MST

  Modified files:
    www                  defs.php3.in menu.php3 nscheck.php3 
                         nscheck_form.php3 
  Added files:
    www                  beginexp_form.php3 beginexp_html.php3 
                         beginexp_xml.php3 
  Log:
  Commit functioning XML interface. At present, only isadmin people will
  see this new page. That allows me to inflict pain on testbed
  developers while we work out any kinks. These new pages implement an
  XML interface to experiment creation.
  
  Some new files:
  
  beginexp_html.php3: A wrapper for the actual beginexp form. This page
  includes the form, and then invokes the XMLRPC backend page.
  
  beginexp_form.html: The original form code, split out from beginexp
  and turned into a module that can be included into another file.  It
  is slightly reorganized to make it easier to include as a module.  The
  idea is that the plab_ez form will be recast in this model, reducing
  some redundant complexity.
  
  beginexp_xml.php3: The XML backend. The idea is that the html page
  packages up the form arguments as an XMLRPC message, and invokes this
  page with the XML goo encoded in the URL. It also passes along the
  uid/cookie so that the authentication happens properly (https of
  course). The page decodes the URL into PHP datatypes, and does much of
  the same argument checking that beginexp used to do. Errors are stored
  up in the same manner, but instead of spitting back html, it now spits
  back a "structure", encoded in XML so that the _html page can put up a
  new form. Basically, all output is sent back via an XML encoded
  structure and displayed in a form that the invoking script deems
  appropriate.
  
  This gives us a pure XMLRPC interface, which we wrap with a form interface
  so that it looks just like it did before.
  
  The next step is to provide an alternate front end, but that will require
  some certificate stuff that I have not worked out yet.
  
  Oh, one more item. The syntax check stuff has been altered a bit.
  Instead of invoking the beginexp page, which meant a zillion special
  tests, I now invoke nscheck.php3 directly from the button. Took a few
  extra lines of Javascript to do this, so watch out for problems there
  too.
  
  Revision  Changes    Path
  1.51      +30 -11    testbed/www/defs.php3.in
  1.123     +9 -3      testbed/www/menu.php3
  1.10      +5 -1      testbed/www/nscheck.php3
  1.8       +2 -1      testbed/www/nscheck_form.php3

shash       2003/12/15 19:58:47 MST

  Modified files:
    .                    configure configure.in 
    db                   xmlconvert.in 
    event/nsetrafgen     GNUmakefile.in nse-install nse.patch 
                         nseinput.tcl.in tbevent.cc 
    event/sched          event-sched.c 
    tbsetup              GNUmakefile.in assign_wrapper.in 
                         ptopgen.in 
    tbsetup/ns2ir        sim.tcl.in traffic.tcl 
    tmcd                 decls.h libsetup.pm 
    tmcd/common          libtmcc.pm rc.setup 
  Added files:
    event/nsetrafgen     ns_files_modified.txt 
    tbsetup/nseparse     GNUmakefile.in nse.agent.tcl nse.node.tcl 
                         nse.null.tcl nse.parse.proxy.in 
                         nse.parse.tcl.in nse.sim.tcl parse-nse.in 
  Log:
  Distributed NSE changes. In other words, simulation resources are
  now mapped to more than one PC if required. The simnode_capacity
  column in the node_types table determines how many sim nodes can
  be packed on one PC. The packing factor can also be controlled via
  tb-set-colocate-factor to be smaller than simnode_capacity.
  
  - No frontend code changes. To summarize:
    $ns make-simulated {
      ...
    }
    is still the easy way to put a whole bunch of Tcl code to be
    in simulation.
    One unrelated fix in the frontend code is to fix the
    xmlencode() function which prior to this would knock off
    newlines from columns in the XML output. This affected
    nseconfigs since it is one of the few columns with embedded
    newlines. Also changed the event type and event object type
    in traffic.tcl from TRAFGEN/MODIFY to NSE/NSEEVENT.
  
  - More Tcl code in a new directory tbsetup/nseparse
    -> Runs on ops similar to the main parser. This is invoked
       from assign_wrapper in the end if there are simnodes
    -> Partitions the Tcl code into multiple Tcl specifications
       and updates the nseconfigs table via xmlconvert
    -> Comes with a lot of caveats. Arbitrary Tcl code such as user
       specified objects or procedures will not be re-generated. For
       example, if a user wanted a procedure to be included in Tcl
       code for all partitions, there is no way for code in nseparse
       to do that. Besides that, it needs to be tested more thoroughly.
  
  - xmlconvert has a new option -s. When invoked with this option,
    the experiments table is not allowed to be modified. Also,
    virtual tables are just updated (as opposed to deleting
    all rows in the first invocation before inserting new rows)
  
  - nse.patch has all the IP address related changes committed in
    iversion 1.11 + 2 other changes. 1) MTU discovery support in
    the ICMP agent 2) "$ns rlink" mechanism for sim node to real
    node links
  
  - nseinput.tcl includes several client side changes to add IP
    routes in NSE and the kernel routing table for packets crossing
    pnodes. Also made the parsing of tmcc command output more robust
    to new changes. Other client side changes in libsetup.pm and other
    scripts to run nse, are also in this commit
  
  - Besides the expected changes in assign_wrapper for simulated nodes,
    the interfaces and veth_interfaces tables are updated with
    routing table identifiers (rtabid). The tmcd changes are already
    committed. This field is used only by sim hosts on the client side.
    Of course, they can be used by jails as well if desired.
  
  Revision  Changes    Path
  1.191     +5 -2      testbed/configure
  1.198     +4 -1      testbed/configure.in
  1.11      +36 -21    testbed/db/xmlconvert.in
  1.6       +16 -14    testbed/event/nsetrafgen/GNUmakefile.in
  1.10      +2 -0      testbed/event/nsetrafgen/nse-install
  1.14      +3372 -2308testbed/event/nsetrafgen/nse.patch
  1.16      +206 -137  testbed/event/nsetrafgen/nseinput.tcl.in
  1.4       +7 -5      testbed/event/nsetrafgen/tbevent.cc
  1.27      +3 -1      testbed/event/sched/event-sched.c
  1.97      +9 -1      testbed/tbsetup/GNUmakefile.in
  1.144     +78 -210   testbed/tbsetup/assign_wrapper.in
  1.50      +25 -13    testbed/tbsetup/ptopgen.in
  1.58      +10 -10    testbed/tbsetup/ns2ir/sim.tcl.in
  1.27      +28 -10    testbed/tbsetup/ns2ir/traffic.tcl
  1.21      +1 -1      testbed/tmcd/decls.h
  1.92      +138 -73   testbed/tmcd/libsetup.pm
  1.6       +6 -1      testbed/tmcd/common/libtmcc.pm
  1.11      +5 -0      testbed/tmcd/common/rc.setup

ricci       2003/12/02 17:20:12 MST

  Added files:
    www                  plab_ez.php3 plab_ez_footnote1.html
                         plab_ez_footnote2.html
                         plab_ez_footnote3.html
                         plab_ez_footnote4.html
                         plab_ez_footnote5.html
                         plab_ez_footnote6.html
                         plab_ez_footnote7.html
                         plab_ez_footnote8.html
  Log:
  New form: plab_ez.php3 .

  Provides a simple interface to create an NS file, and then an
  experiment, for use on PlanetLab.

ricci       2003/12/01 13:48:18 MST

  Modified files:
    .                    configure configure.in
    tbsetup              GNUmakefile.in assign_wrapper.in
                         tbswap.in
    tbsetup/ns2ir        tb_compat.tcl.in
  Added files:
    tbsetup              fetchtar.proxy.in tarfiles_setup.in
                         webtarfiles_setup.in
  Log:
  New scripts: tarfiles_setup, fetchtar.proxy, and webtarfiles_setup .

  The idea is to give us hooks for grabbing experimenters' tarballs (and
  RPMs) from locations other than files on ops. Mainly, to remove
  another dependance on users having shells on ops.

  tarfiles_setup supports fetching files from http and ftp URLs right
  now, through wget. It places them into the experiment directory, so
  that they'll go away when the experiment is terminated, and the rest
  of the chain (ie. downloading to clients and os_setup's checks)
  remains unchaged.  It is now tarfiles_setup's job to copy tarballs and
  RPMs from the virt_nodes table to the nodes table for allocated nodes.
  This way, it can translate URLs into the local filenames it
  constructs. It get invoked from tbswap.

  Does the actual fetching over on ops, running as the user, with
  fetchtar.proxy.

  Should be idempotent, so we should be able to give the user a button
  to run webtarfiles_setup (none exists yet) yet to 'freshen' their
  tarballs. (We'd also have to somehow let the experiment's nodes know
  they need to re-fetch their tarballs.)

ricci       2003/11/20 18:37:34 MST

  Added files:
    utils/nsgen          lan.xml nsgen planetlab.xml
  Log:
  New script: nsgen - Generates an NS file from some supplied values
  and a template. The idea is that it's a general tool for generating
  NS files for standard topologies (ie. LANs), filling in some
  user-supplied values. Has some features that are useful for NS files,
  like default values and skipping or commenting out sections if values
  for variables are not given.

stoller     2003/11/17 17:30:37 MST

  Modified files:
    db                   libdb.pm.in 
    sql                  database-fill.sql 
    tbsetup              assign_wrapper.in batch_daemon.in 
                         batchexp.in endexp.in eventsys_control.in 
                         mkexpdir.in node_update.in os_setup.in 
                         startexp.in swapexp.in tbend.in 
                         tbprerun.in tbreport.in tbswap.in 
                         vnode_setup.in 
    utils                delay_config.in 
    www                  beginexp.php3 dbdefs.php3.in 
                         delaycontrol.php3 editexp.php3 
                         modifyexp.php3 showexp.php3 
                         showexp_list.php3 showstuff.php3 
                         swapexp.php3 
  Log:
  Merge the two state machines (batchstate and state) into a single
  state machine (state). All of the stuff that was previously handled by
  using batchstate is now embedded into the one state machine. Of
  course, these mostly overlapped, so its not that much of a change,
  except that we also redid the machine, adding more states (for
  example, modify phases are now explicit. To get a picture of the
  actual state machine, on boss:
  
  		stategraph -o newstates EXPTSTATE
  		gv newstates.ps
  
  Things to note:
  
  * The "batchstate" slot of the experiments table is now used solely to
    provide a lock for batch daemon. A secondary change will be to
    change the slot name to something more appropriate, but it can
    happen anytime after this new stuff is installed.
  
  * I have left expt_locked for now, but another later change will be to remove
    expt_locked, and change it to active_busy or some such new state name in
    the state machine. I have removed most uses of expt_locked, except those
    that were necessary until there is a new state to replace it.
  
  * These new changes are an implementation of the new state machine,
    but I have not done anything fancy. Most of the code is the same as
    it was before.
  
  * I suspect that there are races with the batch daemon now, but they
    are going to be rare, and the end result is probably that a
    cancelation is delayed a little bit.
  
  Revision  Changes    Path
  1.138     +30 -77    testbed/db/libdb.pm.in
  1.35      +26 -31    testbed/sql/database-fill.sql
  1.138     +5 -5      testbed/tbsetup/assign_wrapper.in
  1.41      +76 -95    testbed/tbsetup/batch_daemon.in
  1.41      +19 -41    testbed/tbsetup/batchexp.in
  1.29      +101 -57   testbed/tbsetup/endexp.in
  1.12      +1 -0      testbed/tbsetup/eventsys_control.in
  2.5       +8 -7      testbed/tbsetup/mkexpdir.in
  1.13      +4 -22     testbed/tbsetup/node_update.in
  1.86      +2 -0      testbed/tbsetup/os_setup.in
  1.59      +45 -39    testbed/tbsetup/startexp.in
  1.45      +220 -182  testbed/tbsetup/swapexp.in
  1.34      +6 -23     testbed/tbsetup/tbend.in
  1.42      +21 -40    testbed/tbsetup/tbprerun.in
  1.46      +5 -11     testbed/tbsetup/tbreport.in
  1.28      +93 -226   testbed/tbsetup/tbswap.in
  1.35      +2 -1      testbed/tbsetup/vnode_setup.in
  1.12      +6 -11     testbed/utils/delay_config.in
  1.41      +6 -1      testbed/www/beginexp.php3
  1.65      +1 -28     testbed/www/dbdefs.php3.in
  1.7       +7 -7      testbed/www/delaycontrol.php3
  1.5       +4 -4      testbed/www/editexp.php3
  1.11      +7 -1      testbed/www/modifyexp.php3
  1.75      +14 -15    testbed/www/showexp.php3
  1.80      +2 -2      testbed/www/showexp_list.php3
  1.121     +51 -63    testbed/www/showstuff.php3
  1.21      +3 -3      testbed/www/swapexp.php3

stoller     2003/11/17 15:35:33 MST

  Modified files:
    www                  tbauth.php3 toggle.php 
  Log:
  Add web login attack detection/prevention. Two changes:
  
  * Add slots to users table to track number of failures in the last N
    seconds. If a threshold is passed (currently 4 failures in the last
    minute), the web login is disabled. Note that I do not disable the
    ops shell login at this time. Aging is passive; the values are cleared
    when login is successful, or when more then one minute has passed
    since the last failure. In other words, a burst of failures will
    disable the login, but failures over time are okay.
  
  * Add login_failures table to do exactly the same as above, except it
    is on an IP basis (REMOTE_ADDR in the server). Currently the
    threshold is 8 failures in the last two minutes, at which time all
    logins from that IP are disabled.
  
  In both cases email is sent to tbops (and the user).
  
  The constants are defined at the top of www/tbauth.in, rather then as
  site variables, to avoid pounding the DB when an attack is being
  launched.
  
  To clear a user freeze, go to the user profile page and use the
  "toggle" near the bottom.
  
  To clear an IP freeze: delete from login_failures were IP='1.1.1.1'
  
  Revision  Changes    Path
  1.40      +144 -17   testbed/www/tbauth.php3
  1.13      +18 -3     testbed/www/toggle.php

	
stoller     2003/11/05 10:53:00 MST

  Modified files:
    db                   libdb.pm.in xmlconvert.in 
    tbsetup              batchexp.in eventsys_control.in 
    tbsetup/ns2ir        program.tcl sim.tcl.in 
  Log:
  Frontend and parser portion of two event system changes:
  
  * Generate a shared secret key for the event system. This key is
    stored into the DB, and passed to the node via tmcd. It is also
    stashed into a file in the experiment directory (can be accessed
    only by the project/group members). The key is used to attach a
    HMAC (hashed message authentication) to each event, which is checked
    by the receivers to ensure that the event is not bogus. More details
    on this later when I commit the event library/client changes.
  
  * Added "virt_programs" table to store info about each program object
    defined by the user. The intent is to no longer send the command
    string in the event, but to fix it in the DB, and transfer it via
    tmcd. This removes our "remote execution facility" which was always
    a bad idea (we have ssh for that, and that is a lot more secure then
    the event system!).
  
    Note that for the time being we need to continue send the command in
    the event because of old images, but the new images will now ignore
    that part of the event.
  
  Revision  Changes    Path
  1.137     +5 -1      testbed/db/libdb.pm.in
  1.8       +1 -0      testbed/db/xmlconvert.in
  1.40      +19 -6     testbed/tbsetup/batchexp.in
  1.11      +11 -13    testbed/tbsetup/eventsys_control.in
  1.7       +3 -0      testbed/tbsetup/ns2ir/program.tcl
  1.54      +2 -0      testbed/tbsetup/ns2ir/sim.tcl.in


stoller     2003/11/05 11:37:44 MST

  Modified files:
    event                GNUmakefile.in 
    event/delay-agent    GNUmakefile.in main.c 
    event/example        GNUmakefile.in tbrecv.c tbsend.c 
    event/lib            GNUmakefile.in event.c event.h 
    event/linktest       GNUmakefile.in 
    event/program-agent  GNUmakefile.in program-agent.c 
    event/proxy          GNUmakefile.in 
    event/sched          event-sched.c 
    event/tbgen          GNUmakefile.in tevc.c 
    event/trafgen        GNUmakefile.in event.c 
  Added files:
    event/lib            README 
  Log:
  Middle part of the event system changes. The main part of this change
  is to add HMACs to events to ensure they that events cannot be
  injected into an experiment by an unauthorized client.
  
  * The frontend now generates a secret key for each experiment and
    stores that into a file and in the DB.
  
  * Each of the event clients, as well as the event producers
    (scheduler, tevc) have a new -k option to specify the name of the
    file. Two new event library functions were added for clients to give
    the key:
  
      event_handle_t
      event_register_withkeyfile(char *name, int threaded, char *keyfile);
  
      event_handle_t
      event_register_withkeydata(char *name, int threaded,
  	   		       unsigned char *keydata, int keylen);
  
  * When the library is in possesion of a key, it will generate an HMAC
    and attach it to outgoing notifications. A client receiving a
    notification will compute an HMAC and compare it against the HMAC in
    the notification. If they do not compare, the notification is
    dropped with a warning message printed (the client callback never
    gets the notification). If the client has not provided a key, then
    the HMAC in the incoming notification is ignored.
  
  * The scheduler also takes a -k option, and will compute HMACs for all
    of the static events ahead of time. That keeps it off the critical
    path.
  
  * The tevc client also takes a -k option. However, tevc will always
    try to find the keyfile (default path) so that it can attach the
    HMAC to dynamic events before sending them to the scheduler (which
    will check to make sure it matches). The scheduler will not accept
    dynamic events without unless the HMAC is present and matches.
  
  * I have rebuilt the elvin librarys, removing all of the X goop and
    the SSL goop. Smaller binaries. So, I had to add -lcrypto to all of
    the client makefiles to that programs link.
  
  * The program-agent got a few more changes. The command string is no
    longer passed inside the event; it comes in when the program agent
    is started, via a config file generated from tmcd data. This gets
    rid of our mostly insecure remote execution facility.
  
  Revision  Changes    Path
  1.17      +5 -8      testbed/event/GNUmakefile.in
  1.7       +2 -2      testbed/event/delay-agent/GNUmakefile.in
  1.10      +8 -3      testbed/event/delay-agent/main.c
  1.5       +5 -1      testbed/event/example/GNUmakefile.in
  1.3       +7 -3      testbed/event/example/tbrecv.c
  1.2       +7 -3      testbed/event/example/tbsend.c
  1.12      +14 -8     testbed/event/lib/GNUmakefile.in
  1.24      +308 -48   testbed/event/lib/event.c
  1.17      +14 -1     testbed/event/lib/event.h
  1.2       +1 -1      testbed/event/linktest/GNUmakefile.in
  1.5       +1 -1      testbed/event/program-agent/GNUmakefile.in
  1.7       +141 -92   testbed/event/program-agent/program-agent.c
  1.2       +29 -8     testbed/event/proxy/GNUmakefile.in
  1.25      +22 -8     testbed/event/sched/event-sched.c
  1.15      +1 -1      testbed/event/tbgen/GNUmakefile.in
  1.6       +48 -13    testbed/event/tbgen/tevc.c
  1.8       +1 -1      testbed/event/trafgen/GNUmakefile.in
  1.18      +7 -3      testbed/event/trafgen/event.c

stoller     2003/11/05 12:00:51 MST

  Modified files:
    tmcd                 decls.h libsetup.pm tmcd.c 
    tmcd/common          libtmcc.pm rc.progagent 
    tmcd/freebsd         rc.delayagent 
    tmcd/linux           GNUmakefile.in testbed 
  Added files:
    tmcd/linux           elvin.sh 
  Log:
  Client side of the event system changes.
  
  * Download the eventkey with new tmcd call.
  
  * Pass -k option to various agents so that they can verify the HMACs
    in the incoming notifications.
  
  * Change program agent; The list of agents from tmcd now includes the
    command, which is written to a config file for the program-agent to
    read in. The command string in the event is now ignored.
  
  * Build the local proxy for linux, and add the goo to start the local
    elvind and use the proxy. It has been this way on FreeBSD for a
    while, but I never got it installed for Linux before now.
  
  Revision  Changes    Path
  1.20      +1 -1      testbed/tmcd/decls.h
  1.88      +14 -13    testbed/tmcd/libsetup.pm
  1.193     +7 -7      testbed/tmcd/tmcd.c
  1.5       +4 -0      testbed/tmcd/common/libtmcc.pm
  1.5       +7 -36     testbed/tmcd/common/rc.progagent
  1.8       +5 -10     testbed/tmcd/freebsd/rc.delayagent
  1.37      +4 -0      testbed/tmcd/linux/GNUmakefile.in
  1.4       +2 -1      testbed/tmcd/linux/testbed

	
mike        2003/10/24 10:24:08 MDT

  Modified files:
    os/imagezip          GNUmakefile.in TODO imageunzip.c 
                         imagezip.8 imagezip.c 
    os/imagezip/fat      fat_boot.c fat_fat.c fat_glue.c 
                         fat_glue.h 
    os/imagezip/ntfs     GNUmakefile.in 
    os/imagezip/ntfs/libntfs GNUmakefile.in 
  Added files:
    os/imagezip          global.h sliceinfo.h 
    os/imagezip/extfs    GNUmakefile.in ext2_fs.h extfs.c 
                         linux_types.h 
    os/imagezip/fat      GNUmakefile.in 
    os/imagezip/ffs      GNUmakefile.in disklabel.h ffs.c ffs.h 
                         fs.h 
    os/imagezip/ntfs     ntfs_glue.c 
  Removed files:
    os/imagezip          ext2_fs.h linux_types.h 
  Log:
  Introducing imagezip redux!
  
  Ok, not really any fundamental changes, mostly a source reorganization,
  but some new features as well:
  
  1. Split off FS specific code for all FS types into subdirectories.
     imagezip.c was just getting unwieldy.  You can now (in theory, I
     haven't enabled this in any easy way) build a version of imagezip
     with only the FSes you care about.
  
  2. As part of the above, localize the filesystem specific headers in
     the subdirs instead of relying on the installed system headers.
     This allows easy building of, for example, BSD FS support under
     Linux.
  
  3. Hacked up the GNUmakefiles some so that imagezip with all FS support
     will build (in the Emulab context) under Linux and FreeBSD 5.1 as
     well as FreeBSD 4.x.  Still a hack, for Linux you need to first do:
        setenv LINUX 1
        setenv HAVE_GCC3 1
        setenv HAVE_LOCALE 1
     and for FreeBSD 5.x:
        setenv HAVE_GCC3 1
        setenv HAVE_LOCALE 1
     these trigger ifdefs in some of the Makefiles to DTRT.  Imagezip
     and frisbee still need a standalone configure...
  
  4. Added support for UFS2 (aka FreeBSD 5.x default filesystems).
  
  5. Added "-S dos-type" option to imagezip.  This is the general form
     of the -b, -l, and -n options to force imagezip to treat the device
     as though it contains a filesystem of the indicated type.
  
Revision  Changes    Path
  1.26      +48 -21    testbed/os/imagezip/GNUmakefile.in
  1.4       +1 -0      testbed/os/imagezip/TODO
  1.25      +3 -12     testbed/os/imagezip/imageunzip.c
  1.9       +19 -4     testbed/os/imagezip/imagezip.8
  1.42      +131 -1190 testbed/os/imagezip/imagezip.c
  1.2       +4 -1      testbed/os/imagezip/fat/fat_boot.c
  1.2       +4 -1      testbed/os/imagezip/fat/fat_fat.c
  1.2       +4 -1      testbed/os/imagezip/fat/fat_glue.c
  1.2       +5 -0      testbed/os/imagezip/fat/fat_glue.h
  1.4       +23 -4     testbed/os/imagezip/ntfs/GNUmakefile.in
  1.3       +22 -11    testbed/os/imagezip/ntfs/libntfs/GNUmakefile.in

kwebb       2003/10/23 15:37:17 MDT

  Modified files:
    tbsetup              libtestbed.pm.in vnode_setup.in 
    tbsetup/plab         libplab.py.in plabdaemon.in 
                         plabmonitord.in plabnode.in 
  Log:
  Well, here it is:  The checkin implementing robust recovery/retry and
  asynchronous safe termination in plab allocation/deallocation/setup.
  
  Here are some of the more prominent changes/additions:
  
  * Bounded plab agent communication
    Scripts should never hang waiting for plab xmlrpc commands to complete;
    they have their own internal timeouts.  Node.create() in libplab is an
    exception, but is always run under a timeout constraint in vnode_setup
    and can be changed easily if the need arises.
  
  * Wrote functions in libplab to do the retry/recovery/timeout of remote
    command exection.
  
  * Wrapped critical sections with a signal watcher.
  
  * Added code to handle various error conditions properly
  
  * Added a libtestbed function, TBForkCmd, which runs a given program in
    a child process, and can optionally catch incoming SIGTERMs and terminate
    the child (then exit itself).
  
  * Fixed up vnode_setup to batch the 'plabnode free' operation along with
    a few other cleanups.  This should alleviate Jay's concern about how
    long it used to take to teardown a plab expt.
  
  * Whacked plabmonitord into better shape; fixed a couple bugs, taught it how
    to daemonize, and implemented a priority list for testing broken plab nodes.
    This list causes new (as yet unseen) nodes to be tried first over ones that
    have been tested already.
  
  Revision  Changes    Path
  2.15      +50 -1     testbed/tbsetup/libtestbed.pm.in
  1.34      +17 -25    testbed/tbsetup/vnode_setup.in
  1.24      +611 -198  testbed/tbsetup/plab/libplab.py.in
  1.4       +34 -2     testbed/tbsetup/plab/plabdaemon.in
  1.3       +85 -17    testbed/tbsetup/plab/plabmonitord.in
  1.8       +13 -28    testbed/tbsetup/plab/plabnode.in

ricci       2003/10/23 14:57:45 MDT

  Modified files:
    doc                  setup-nodes.txt
  Log:
  Turn this file from a simple desription of what we do to the BIOS into
  a full-out explanation of the new way we add nodes to the testbed,
  the new (well, not that new anymore) newnode MFS, web page, etc.

  Revision  Changes    Path
  1.2       +213 -6    testbed/doc/setup-nodes.txt

ricci       2003/10/22 18:17:36 MDT

  Modified files:
    www                  nodessh.php3 nodetipacl.php3
  Log:
  Remove the Content-Disposition header - this forces the browser to
  pop up a save dialog box, no matter what the user's settings for the
  mime type are.

  Revision  Changes    Path
  1.3       +0 -1      testbed/www/nodessh.php3
  1.7       +0 -1      testbed/www/nodetipacl.php3

ricci       2003/10/22 16:11:30 MDT

  Modified files:
    sql                  database-migrate.txt
    tbsetup              checkports.in snmpit.in snmpit_cisco.pm
                         snmpit_cisco_stack.pm snmpit_intel.pm
                         snmpit_intel_stack.pm snmpit_lib.pm
                         switchmac.in                                                              
  Log:
  Change the way the switch modules for snmpit get their configuration
  information. Rather than pass it all in, which was getting very
  cumbersome, and inconsistent between Cisco and Intel switches, the
  modules query the database themselves (via a new function in
  snmpit_lib.pm).

  Also in this commit are two new options for switch stacks - the
  ability to specify minimum and maximum VLAN number to use.

  Revision  Changes    Path
  1.83      +6 -0      testbed/sql/database-migrate.txt
  1.4       +2 -2      testbed/tbsetup/checkports.in
  2.48      +3 -16     testbed/tbsetup/snmpit.in
  1.45      +30 -18    testbed/tbsetup/snmpit_cisco.pm
  2.33      +3 -7      testbed/tbsetup/snmpit_cisco_stack.pm
  1.21      +24 -1     testbed/tbsetup/snmpit_intel.pm
  1.12      +2 -3      testbed/tbsetup/snmpit_intel_stack.pm
  1.32      +48 -2     testbed/tbsetup/snmpit_lib.pm
  1.5       +1 -1      testbed/tbsetup/switchmac.in

stoller     2003/10/16 12:06:44 MDT

  Modified files:
    tmcd                 libsetup.pm tmcd.c 
    tmcd/common          libtmcc.pm tmcc.pl update 
    tmcd/freebsd         delaysetup liblocsetup.pm 
    tmcd/freebsd/jail    mkjail.pl 
  Log:
  Brave new world of tmcc client side caching. The goal is to reduce the
  number of connections to tmcd, and the resulting number of DB queries.
  Currently thats about 24 per node when it boots. Each vnode adds
  another 24 or so. The new approach is to use the "fullconfig" command,
  which dumps the entire config in one shot, saving about 20 of those
  connections. We still need to do the status/state commands for real of
  course. When a node boots, it requests the fullconfig; the client side
  takes this fullconfig, and dumps the individual sections to
  /var/emulab/boot/tmcc/section_name. Subsequent requests first look for
  it locally in the above named files, falling back to real tmcc if none
  exists. The update command also refreshes the cache.
  
  Tested for jails and plab node vservers as well.
  
  Revision  Changes    Path
  1.84      +50 -39    testbed/tmcd/libsetup.pm
  1.190     +0 -1      testbed/tmcd/tmcd.c
  1.3       +185 -39   testbed/tmcd/common/libtmcc.pm
  1.3       +3 -1      testbed/tmcd/common/tmcc.pl
  1.6       +1 -0      testbed/tmcd/common/update
  1.11      +10 -8     testbed/tmcd/freebsd/delaysetup
  1.38      +2 -1      testbed/tmcd/freebsd/liblocsetup.pm
  1.25      +3 -0      testbed/tmcd/freebsd/jail/mkjail.pl


stoller     2003/10/13 11:59:28 MDT

  Modified files:
    tbsetup              assign_wrapper.in 
  Log:
  Aside from another round of cleanup, there is a significant change.
  I have implemented the suggestion Jay made a couple of weeks ago
  about allowing partial allocation in assign_wrapper, and retrying with a
  modified set of "fixed" nodes.
  
  My basic approach was to change nalloc to optionally allow partial
  allocations, returning the number of nodes that could not be allocated as
  its return value. In assign_wrapper, I determine which nodes we were able
  to get (in each loop), set their allocstate to INIT_DIRTY, augment the
  fixed_node set, and recreate the top file. Then I try again, up to the
  current number of maxtries. If assign fails with an unretryable error, or
  if we could not nalloc a user directed fixed node, then I stop right away
  since the experiment is not going to map (in the near term) if the fixed
  node list cannot be allocated.
  
  I am confident that this works okay, although testing is a little
  difficult. The main problem is how this interacts with experiment modify.
  Chad's implementation is that a modify can be reverted (recovered from)
  only as long as the DB is not modified by assign_wrapper. Well, a partial
  allocation, followed by failure, obviously modifies the DB, and so is
  deemed not recoverable. I am still trying to figure out the effects of
  this, and whether I can relax this requirement, but in the meantime
  lets install it and see what happens (won't affect many people).
  
  Revision  Changes    Path
  1.131     +468 -347  testbed/tbsetup/assign_wrapper.in


newbold     2003/10/10 08:44:15 MDT

  Modified files:
    db                   libdb.pm.in 
    event/stated         StateWait.pm stated.in waitForState.in 
    tbsetup              node_reboot.in os_load.in os_setup.in 
                         tbrestart.in 
  Log:
  New StateWait changes - the main point of all this is to move to our new
  model of waiting for state changes. Before we were watching the database
  (which means we can only watch for terminal/stable/long-lived states, and
  have to poll the db). Now things that are waiting for states to change
  become event listeners, and watch the stream of events flow by, and don't
  have to do any polling. They can now watch for any state, and even
  sequences of states (ie a Shutdown followed by an Isup).
  
  To do this, there is now a cool StateWait.pm library that encapsulates the
  functionality needed. To use it, you call initStateWait before you start
  the chain of events (ie before you call node reboot). Then do your stuff,
  and call waitForState() when you're ready to wait. It can be told to
  return periodically with the results so far, and you can cancel waiting
  for things. An example program called waitForState is in
  testbed/event/stated/ , and can also be used nicely as a command line tool
  that wraps up the library functionality.
  
  This also required the introduction of a TBFAILED event that can be sent
  when a node isn't going to make it to the state that someone may be
  waiting for. Ie if it gets wedged coming up, and stated retries, but
  eventually gives up on it, it sends this to let things know that the node
  is hozed and won't ever come up.
  
  Another thing that is part of this is that node_reboot moves (back) to the
  fully-event-driven model, where users call node reboot, and it does some
  checks and sends some events. Then stated calls node_reboot in "real mode"
  to actually do the work, and handles doing the appropriate retries until
  the node either comes up or is deemed "failed" and stated gives up on it.
  This means stated is also the gatekeeper of when you can and cannot reboot
  a node. (See mail archives for extensive discussions of the details.)

  A big part of the motivation for this was to get uninformed timeouts and
  retries out of os_load/os_setup and put them in stated where we can make a
  wiser choice. So os_load and os_setup now use this new stuff and don't
  have to worry about timing out on nodes and rebooting. Stated makes sure
  that they either come up, get retried, or fail to boot. tbrestart also
  underwent a similar change.
  
  Revision  Changes    Path
  1.135     +159 -208  testbed/db/libdb.pm.in
  1.5       +37 -14    testbed/event/stated/StateWait.pm
  1.52      +41 -18    testbed/event/stated/stated.in
  1.4       +4 -3      testbed/event/stated/waitForState.in
  1.43      +42 -11    testbed/tbsetup/node_reboot.in
  1.54      +22 -97    testbed/tbsetup/os_load.in
  1.81      +212 -157  testbed/tbsetup/os_setup.in
  1.5       +63 -19    testbed/tbsetup/tbrestart.in


stoller     2003/10/09 14:03:10 MDT

  Modified files:
    db                   libdb.pm.in 
    os                   GNUmakefile.in install-rpm 
                         install-tarfile 
    tbsetup              GNUmakefile.in node_update.in 
                         spewrpmtar.in 
    tmcd/common          update watchdog 
    www                  dbdefs.php3.in showexp.php3 
                         showimageid_list.php3 shownode.php3 
                         showstuff.php3 spewrpmtar.php3 
                         swapexp.php3 updateaccounts.php3 
  Log:
  Reorg of two aspects of node update.
  
  * install-rpm, install-tarfile, spewrpmtar.php3, spewrpmtar.in: Pumped
    up even more! The db file we store in /var/db now records both the
    timestamp (of the file, or if remote the install time) and the MD5
    of the file that was installed. Locally, we can get this info when
    accessing the file via NFS (copymode on or off). Remote, we use wget
    to get the file, and so pass the timestamp along in the URL request,
    and let spewrpmtar.in determine if the file has changed. If the
    timestamp it gets is >= to the timestamp of the file, an error code
    of 304 (Not Modifed) is returned. Otherwise the file is returned.
  
    If the timestamps are different (remote, server sends back an actual
    file), the MD5 of the file is compared against the value stored. If
    they are equal, update the timestamp in the db file to avoid
    repeated MD5s (or server downloads) in the future. If the MD5 is
    different, then reinstall the tarball or rpm, and update the db file
    with the new timestamp and MD5. Presto, we have auto update capability!
  
    Caveat: I pass along the old MD5 in the URL, but it is currently
    ignored. I do not know if doing the MD5 on the server is a good
    idea, but obviously it is easy to add later. At the moment it
    happens on the node, which means wasted bandwidth when the timestamp
    has changed, but the file has not (probably not something that will
    happen in typical usage).
  
    Caveat: The timestamp used on remote nodes is the time the tarfile
    is installed (GM time of course). We could arrange to return the
    timestamp of the local file back to the node, but that would mean
    complicating the protocol (or using an http header) and I was not in
    the mood for that. In typical usage, I do not think that people will
    be changing tarfiles and rpms so rapidly that this will make a
    difference, but if it does, we can change it.
  
  * node_update.in, client side watchdog, and various web pages:
    Deflated node_update, removing all of the older ssh code. We now
    assume that all nodes will auto update on a periodic basis, via the
    watchdog that runs on all client nodes, including plab nodes.
  
    Changed the permission check to look for new UPDATE permission (used
    to be UPDATEACCOUNT). As before, it requires local_root or better.
    The reason for this is that node_update now implies more than just
    updating the accounts/mounts. The web pages have been changed to
    explain that in addition to mounts/accounts, rpms and tarfiles will
    also be updated. At the moment, this is still tied to a single
    variable (update_accounts) in the nodes table, but as Kirk requested
    at the meeting, it will probably be nice to split these out in the
    future.
  
    Added the ability to node_update a single node in an experiment (in
    addition to all nodes option on the showexp page). This has been
    added to the shownode webpage menu options.
  
    Changed locking code to use the newer wrapper states, and to move
    the experiment to RUNNING_LOCKED until the update completes. This is
    to prevent mayhem in the rest of the system (which could be dealt
    with, but is not worth the trouble; people have to wait until their
    initiated update is complete, before they can swap out the
    experiment).
  
    Added "short" mode to shownode routine, equiv to the recently added
    short mode for showexp. I use this on the confirmation page for
    updating a single node, giving the user a couple of pertinent (feel
    good) facts before they comfirm.
  
  Revision  Changes    Path
  1.134     +3 -2      testbed/db/libdb.pm.in
  1.17      +3 -0      testbed/os/GNUmakefile.in
  1.5       +222 -33   testbed/os/install-rpm
  1.11      +223 -32   testbed/os/install-tarfile
  1.92      +0 -2      testbed/tbsetup/GNUmakefile.in
  1.12      +112 -214  testbed/tbsetup/node_update.in
  1.2       +51 -14    testbed/tbsetup/spewrpmtar.in
  1.5       +37 -3     testbed/tmcd/common/update
  1.9       +1 -1      testbed/tmcd/common/watchdog
  1.60      +4 -3      testbed/www/dbdefs.php3.in
  1.72      +2 -2      testbed/www/showexp.php3
  1.15      +1 -1      testbed/www/showimageid_list.php3
  1.14      +5 -0      testbed/www/shownode.php3
  1.118     +191 -189  testbed/www/showstuff.php3
  1.3       +22 -3     testbed/www/spewrpmtar.php3
  1.20      +37 -17    testbed/www/swapexp.php3
  1.5       +97 -62    testbed/www/updateaccounts.php3


stoller     2003/10/06 14:27:46 MDT

  Modified files:
    tmcd                 libsetup.pm 
    tmcd/common          GNUmakefile.in bootsubnodes bootvnodes 
                         ntpstart rc.progagent sendevent update 
                         vnodesetup watchdog 
    tmcd/freebsd         GNUmakefile.in delaysetup rc.delayagent 
                         tbshutdown 
    tmcd/linux           GNUmakefile.in delaysetup ixpboot 
                         supfile.in 
    tmcd/plab            GNUmakefile.in 
    tmcd/ron             GNUmakefile.in emulabctl webserver.pl 
  Added files:
    tmcd/common          libtmcc.pm tmcc.pl 
    tmcd/ron             makefile 
  Log:
  * New libtmcc.pm module that encapsulates the tmcc interface. Most of the
    code that was in libsetup has moved into this library, and underwent a
    giant cleaning and pumping up. The interface from your typical perl
    script now looks like this:
  
    use libtmcc;
  
    if (tmcc(TMCCCMD_STATUS, "optional arguments", \@tmccresults) < 0) {
        warn("*** WARNING: Could not get status from server!\n");
        return -1;
    }
    foreach my $me (@tmccresults) {
  	print "bite $me";
    }
  
    The arguments and results are optional values. There is a fourth optional
    value that is a hash of config options (basically converted to command
    line switches passed to tmcc). For example, to set the timeout on an
    individual call, pass a fourth argument like:
  
  	("timeout" => 5)
  
    There is also a way to set global options so that all subsequent tmcc
    calls are affected:
  
  	configtmcc("timeout", 5);
  
    I'll probably clean this up a bit to avoid the direct strings.
  
    The result list is a list of strings. Since we are trending away from
    using tmcc to transfer large amounts of data, I think this is okay.
  
  * A new tmcc.pl which does little more than load libtmcc and use it.
    This will become the new tmcc, with the existing C version becoming a
    backend binary for it.
  
  * All of the perl scripts in tmcd have been changed to use the new
    library. I left the few uses of tmcc in shell scripts alone since they
    were of the simple variety (mostly "state" command).
  
  * And again, if you have read this far, you will learn why I bothered with
    all this. Well, the existing code was really bad and it was getting out
    of control. Sort of like a squid that was getting harder to control as
    its rotting tenticles slithered into more and more scripts. Anyway ...
  
    More important, my goal is to use the libtmcc library to add caching.  I
    have not worked out the details yet, but I am envisioning a configuration
    file, perhaps generated initially by tmcd, of all of the config
    values. If the library finds that file, it sucks the info out of the file
    instead of going to tmcd. Eventually, this config file would be generated
    as part of experiment swapping and stored in the DB, but thats a longer
    term project, and perhaps orthogonal (how we fill the cache is not as
    important as adding the ability to use a cache, right?).
  
    Note that certain operations (like "state" and "ready") are flagged by
    the library to always bypass the "cache".
  
  Revision  Changes    Path
  1.83      +322 -446  testbed/tmcd/libsetup.pm
  1.14      +2 -0      testbed/tmcd/common/GNUmakefile.in
  1.2       +14 -10    testbed/tmcd/common/bootsubnodes
  1.10      +13 -9     testbed/tmcd/common/bootvnodes
  1.4       +17 -13    testbed/tmcd/common/ntpstart
  1.4       +2 -1      testbed/tmcd/common/rc.progagent
  1.2       +4 -3      testbed/tmcd/common/sendevent
  1.4       +1 -1      testbed/tmcd/common/update
  1.18      +10 -7     testbed/tmcd/common/vnodesetup
  1.8       +17 -11    testbed/tmcd/common/watchdog
  1.40      +1 -1      testbed/tmcd/freebsd/GNUmakefile.in
  1.10      +18 -13    testbed/tmcd/freebsd/delaysetup
  1.7       +2 -1      testbed/tmcd/freebsd/rc.delayagent
  1.3       +4 -2      testbed/tmcd/freebsd/tbshutdown
  1.36      +1 -1      testbed/tmcd/linux/GNUmakefile.in
  1.2       +12 -8     testbed/tmcd/linux/delaysetup
  1.5       +23 -12    testbed/tmcd/linux/ixpboot
  1.3       +1 -1      testbed/tmcd/linux/supfile.in
  1.4       +5 -2      testbed/tmcd/plab/GNUmakefile.in
  1.9       +1 -1      testbed/tmcd/ron/GNUmakefile.in
  1.7       +4 -3      testbed/tmcd/ron/emulabctl
  1.4       +49 -12    testbed/tmcd/ron/webserver.pl


stoller     2003/09/30 09:30:09 MDT

  Modified files:
    db                   libdb.pm.in 
    tbsetup              assign_wrapper.in batch_daemon.in 
                         batchexp.in endexp.in nscheck.in 
                         startexp.in swapexp.in tbswap.in 
    www                  beginexp.php3 boot.php3 dbdefs.php3.in 
                         defs.php3.in delaycontrol.php3 
                         editexp.php3 endexp.php3 modifyexp.php3 
                         nscheck.php3 showexp.php3 showstuff.php3 
                         swapexp.php3 
  Log:
  Up to now we have had two state variables associated with an experiment,
  plus a lock field. The lock field was a simple "experiment locked, go away"
  slot that is easy to use when you do not care about the actual state that
  an experiment is in, just that it is in "transition" and should not be
  messed with.
  
  The other two state variables are "state" and "batchstate". The former
  (state) is the original variable that Chris added, and was used by the tb*
  scripts to make sure that the experiment was in the state each particular
  script wanted them to be in. But over time (and with the addition of so
  much wrapper goo around them), "state" has leaked out all over the place to
  determine what operations on an experiment are allowed, and if/when it
  should be displayed in various web pages. There are a set of transition
  states in addition to the usual "active", "swapped", etc like "swapping"
  that make testing state a pain in the butt.
  
  I added the other state variable ("batchstate") when I did the batch
  system, obviously! It was intended as a wrapper state to control access to
  the batch queue, and to prevent batch experiments from being messed with
  except when it was really okay (for example, its okay to terminate a
  swapped out batch experiment, but not a swapped in batch experiment since
  that would confuse the batch daemon). There are fewer of these states, plus
  one additional state for "modifying" experiments.
  
  So what I have done is change the system to use "batchstate" for all
  experiments to control entry into the swap system, from the web interface,
  from the command line, and from the batch daemon. The other state variable
  still exists, and will be brutally pushed back under the surface until its
  just a vague memory, used only by the original tb* scripts. This will
  happen over time, and the "batchstate" variable will be renamed once I am
  convinced that this was the right thing to do and that my changes actually
  work as intended.
  
  Only people who have bothered to read this far will know that I also added
  the ability to cancel experiment swapin in progress. For that I am using
  the "canceled" flag (ah, this one was named properly from the start!), and
  I test that at various times in assign_wrapper and tbswap. A minor downside
  right now is that a canceled swapin looks too much like a failed swapin,
  and so tbops gets email about it. I'll fix that at some point (sometime
  after the boss complains).
  
  I also cleaned up various bits of code, replacing direct calls to exec
  with calls to the recently improved SUEXEC interface. This removes
  some cruft from each script that calls an external script.
  
  Cleaned up modifyexp.ph3 quite a bit, reformatting and indenting.
  Also fixed to not run the parser directly! This was very wrong; should
  call nscheck instead. Changed to use "nobody" group instead of group
  flux (made the same change in nscheck).
  
  There is a script in the sql directory called newstates.pl. It needs
  to be run to initialize the batchstate slot of the experiments table
  for all existing experiments.
  
  Revision  Changes    Path
  1.131     +49 -18    testbed/db/libdb.pm.in
  1.128     +30 -1     testbed/tbsetup/assign_wrapper.in
  1.39      +108 -39   testbed/tbsetup/batch_daemon.in
  1.38      +19 -8     testbed/tbsetup/batchexp.in
  1.27      +74 -59    testbed/tbsetup/endexp.in
  1.8       +16 -5     testbed/tbsetup/nscheck.in
  1.57      +50 -46    testbed/tbsetup/startexp.in
  1.42      +200 -82   testbed/tbsetup/swapexp.in
  1.27      +17 -6     testbed/tbsetup/tbswap.in
  1.37      +29 -58    testbed/www/beginexp.php3
  1.7       +2 -2      testbed/www/boot.php3
  1.59      +10 -10    testbed/www/dbdefs.php3.in
  1.44      +32 -23    testbed/www/defs.php3.in
  1.6       +2 -2      testbed/www/delaycontrol.php3
  1.3       +7 -7      testbed/www/editexp.php3
  1.34      +44 -67    testbed/www/endexp.php3
  1.10      +174 -151  testbed/www/modifyexp.php3
  1.9       +22 -19    testbed/www/nscheck.php3
  1.71      +20 -12    testbed/www/showexp.php3
  1.116     +137 -123  testbed/www/showstuff.php3
  1.19      +36 -53    testbed/www/swapexp.php3


stoller     2003/09/24 17:23:40 MDT

  Modified files:
    .                    configure configure.in 
    db                   libdb.pm.in 
    tbsetup              os_setup.in 
    tbsetup/plab         GNUmakefile.in 
  Added files:
    tbsetup/plab         plabmonitord.in 
  Log:
  Commit my daemon to monitor the status of plab physnodes in hwdown,
  trying to bring them back from the dead periodically by trying to
  instantiate a vserver/vnode on them, and then tearing it down. If we
  can do that, then the node is usable, and it gets moved back into the
  normal holding experiment so that ptopgen will add it to ptop files.
  
  This deamon is not turned on yet; waiting for other little bits and
  pieces to be done.
  
  There is an equiv change in os_setup that moves physnodes into hwdown
  when a setup on a vnode fails.
  
  Lbs
  
  Revision  Changes    Path
  1.174     +2 -1      testbed/configure
  1.181     +2 -1      testbed/configure.in
  1.126     +32 -3     testbed/db/libdb.pm.in
  1.78      +6 -0      testbed/tbsetup/os_setup.in
  1.5       +2 -1      testbed/tbsetup/plab/GNUmakefile.in


stoller     2003/09/24 16:43:43 MDT

  Modified files:
    .                    configure configure.in 
    os                   install-rpm install-tarfile 
    tmcd                 libsetup.pm 
    www                  dbdefs.php3.in 
  Added files:
    www                  spewrpmtar.php3 
    tbsetup              spewrpmtar.in 
  Log:
  Convert install-rpm/install-tarfile to use the web server instead of
  tmcd (which is bad, since tying up the tmcd threads blocks all nodes
  in the testbed). The old functionality is left in tmcd for now.
  
  On the server side, a new web page (www/spewrpmtar.php3) receives a
  request for a file, along with the nodeid (pcXXX) making the request,
  and the secret key that is generated for each new experiment and
  transfered to the node via tmcd. If the key matches, the operation is
  handed off to tbsetup/spewrpmtar.in which verifies that the file is in
  the list of rpm/tar files for that node, and then spits it out to
  stdout. The web page uses fpassthru() to send the file out to the
  client. The client is using wget, and is required to use https (the
  web page checks).
  
  At present, the external script is run as the creator of the
  experiment, and gid of the experiment. Perhaps this is not a good
  idea. In any event, the file must be in the list of rpm/tarfiles,
  either owned by the experiment creator or with a group of the
  experiment, and the file must reside in either /proj or /groups.
  I use the realpath() function to make sure there are no symlink tricks
  pointing to outside those filesystems. I use the standard NFS read goo to
  prevent transient mount problems that we all know and love.
  
  Revision  Changes    Path
  1.173     +1 -0      testbed/configure
  1.180     +1 -0      testbed/configure.in
  1.2       +122 -81   testbed/os/install-rpm
  1.8       +126 -83   testbed/os/install-tarfile
  1.80      +100 -14   testbed/tmcd/libsetup.pm
  1.58      +19 -0     testbed/www/dbdefs.php3.in


mike        2003/09/23 16:50:23 MDT

  Modified files:
    tmcd/freebsd         control_interface cpuspeed.awk nodetype 
    tmcd/linux           chipset.awk control_interface 
                         cpuspeed.awk nodetype 
  Log:
  Prototype changes for Aero 2.4Ghz boxes.
  Also change awk scripts to exit after printing something.
  
  Revision  Changes    Path
  1.12      +3 -0      testbed/tmcd/freebsd/control_interface
  1.8       +17 -12    testbed/tmcd/freebsd/cpuspeed.awk
  1.8       +3 -0      testbed/tmcd/freebsd/nodetype
  1.4       +4 -4      testbed/tmcd/linux/chipset.awk
  1.12      +1 -1      testbed/tmcd/linux/control_interface
  1.7       +14 -10    testbed/tmcd/linux/cpuspeed.awk
  1.9       +3 -0      testbed/tmcd/linux/nodetype


stoller     2003/09/22 09:35:54 MDT

  Modified files:
    www                  plabmetrics.php3 
  Log:
  Pump up linecount with sorting by each metric.
  
  Revision  Changes    Path
  1.2       +122 -29   testbed/www/plabmetrics.php3


stoller     2003/09/22 07:56:18 MDT

  Modified files:
    tbsetup              os_setup.in vnode_setup.in 
  Log:
  Minor allocstate changes to try and cope with plab nodes that either
  fail in "plabnode alloc" or in the remote vnodesetup call. In the
  former case, we do not want to "plabnode free" it later. In the later,
  we want to plabnode free it right away, and make sure we do not try to
  remote vnode teardown or plabfree it later. In either case, os_setup
  needs to check so that it does not bother waiting for the node since
  it is wasted time. I use an alternate dead state for this, but the
  real solution is to move much of the vnode specific code from os_setup
  to vnode_setup.
  
  Note that this stuff is mostly untested since I need nodes to fail!
  The normal path works fine though.
  
  Revision  Changes    Path
  1.77      +21 -12    testbed/tbsetup/os_setup.in
  1.28      +70 -31    testbed/tbsetup/vnode_setup.in


stoller     2003/09/19 14:37:12 MDT

  Modified files:
    www                  nodecontrol_list.php3 
  Added files:
    www                  plabmetrics.php3 
  Log:
  Add very primitive plabmetrics page. Needs a bunch of work (mostly
  sorting options).
  
  Revision  Changes    Path
  1.37      +2 -1      testbed/www/nodecontrol_list.php3


ricci       2003/09/19 12:40:21 MDT

  Modified files:
    assign               anneal.cc score.cc score.h 
  Log:
  Some new behavior - features and desires do not generate violations
  when mapping fixed nodes.
  
  Revision  Changes    Path
  1.17      +5 -5      testbed/assign/anneal.cc
  1.38      +12 -10    testbed/assign/score.cc
  1.18      +1 -1      testbed/assign/score.h


stoller     2003/09/19 09:15:51 MDT

  Modified files:
    www                  dbdefs.php3.in showexp.php3 
                         showstuff.php3 toggle.php 
  Added files:
    www                  editexp.php3 
  Log:
  Redo the Edit Experiment Metadata page; turned it into a standard form
  based page that looks like the original Begin Experiment page. Be sure
  to look at the page in both admin mode and non-admin mode since I had
  some trouble determining how swappable is treated these days.
  
  Oh, added the ability to convert non-batch experiments into batch, and
  back. The experiment must be unlocked and in the swapped state to go
  in either direction.
  
  Also added the cpu_usage and mem_usage slots for editing. I added a
  comment about planetlab only, since otherwise we would just confuse
  normal users who have no idea what they mean. I could conditionalize
  them on having plab nodes, but thats difficult to figure out in the
  web page when the experiment is swapped out, so lets not worry about
  it.
  
  Revision  Changes    Path
  1.56      +12 -0     testbed/www/dbdefs.php3.in
  1.70      +2 -131    testbed/www/showexp.php3
  1.115     +28 -103   testbed/www/showstuff.php3
  1.11      +2 -73     testbed/www/toggle.php


mike        2003/09/18 23:23:04 MDT

  Modified files:
    tbsetup/plab         GNUmakefile.in 
  Added files:
    tbsetup/plab         plabstats.in 
  Log:
  First whack at a per-node stats program that will make a stats web page go.
  
  Usage: plabstats [-dfh] [-CDHILMS]
    -d    print debug diagnostics
    -f    fetch new data, else use what is in /tmp/plabxml
    -h    this help message
    -i    print IP address along with metrics
    -n    do not print hostname with metrics
  
    -C    print Ganglia CPU metrics, sorted by %CPU usage
    -D    print Ganglia disk metrics, sorted by %disk usage
    -L    print Ganglia load metrics, sorted by one minute load
    -M    print Ganglia memory metrics, sorted by %mem usage
    -S    print Emulab state info, summarizing per-node availability
  
  Default is to print a terse summary of per-node resource usage.
  Use "plabstats -f" to get fresh data or try something whacky like:
  	plabstats -S | grep accept_3
  to get the list of nodes which are currently available for mapping
  by a "level 3" (aka, average) resource consuming experiment, or:
  	plabstats -S | grep reject
  to get info about the nodes that cannot be used along with the reason(s) why.
  
  Needs some refinement:
    plabmetrics should store raw info into the DB where plabstats can get it
    presentation of Emulab state info should be improved
  
  Revision  Changes    Path
  1.3       +1 -1      testbed/tbsetup/plab/GNUmakefile.in


kwebb       2003/09/18 18:36:13 MDT

  Modified files:
    tbsetup/plab         libplab.py.in 
  Log:
  A couple of enhancements to libplab:
  
  - new SENDMAIL function that mirrors the perl lib's
  - retry logic for communicating with the dslice agent when a slice/sliver is
    being deleted (plabnode free)
  
  One thing I'd like to do is write a wrapper class around agent and node
  manager communication since it can be flaky - would clean up a and simplify
  things.  Maybe just wait since we're going to have to port over to dynamic
  slices soon enough.
  
  Revision  Changes    Path
  1.16      +75 -1     testbed/tbsetup/plab/libplab.py.in


stoller     2003/09/18 15:13:59 MDT

  Modified files:
    tbsetup              tbswap.in vnode_setup.in 
  Log:
  Changes to the allocstate machine to support swapmod on widearea nodes
  in general, and plab nodes in particular.
  
  Revision  Changes    Path
  1.26      +14 -9     testbed/tbsetup/tbswap.in
  1.27      +21 -11    testbed/tbsetup/vnode_setup.in


stoller     2003/09/18 14:04:35 MDT

  Modified files:
    tbsetup/ns2ir        sim.tcl.in 
  Log:
  Add a LINKTEST agent, that fires to all nodes. This is to support the
  link testing stuff, and will eventually be under user control, but for
  now we stick this agent into every experiment, although most of the
  time no one will be listening for it.
  
  Revision  Changes    Path
  1.52      +3 -0      testbed/tbsetup/ns2ir/sim.tcl.in


ricci       2003/09/18 11:18:28 MDT

  Modified files:
    assign               score.cc score.h 
  Log:
  Add some new ways to treat features.
  
  Features that begin with a '*' have some kind of global scope. Since
  that, by itself, doesn't mean much, the second character of the
  feature name must tell us what type of global feature it is. The two
  currently supported are:
  
  '&' - 'one is okay' - don't penalize the first pnode that has this
      feature, but penalize subsequent ones. Will be used to prefer
      not to give people multiple nodes at the sime widearea site.
  '!' - 'more than one is okay' - penalize the first pnode that has
      this feature, but not subsequent ones. This could be used to let
      assign pick experiments to swap out in order to let the current
      experiment map. The idea being that once you've decided that one
      of the experiment's nodes is getting stolen, you might as well
      swap the whole thing.
  
  For now, these global features should not have corresponding desires,
  because it's not clear what the right thing to do would be. But, we may
  decide to add these semantics someday.
  
  Revision  Changes    Path
  1.37      +86 -10    testbed/assign/score.cc
  1.17      +0 -1      testbed/assign/score.h


kwebb       2003/09/17 02:56:24 MDT

  Modified files:
    tbsetup/plab         libplab.py.in plabnode.in 
  Log:
  Several updates to libplab.py and plabnode.in
  
  - getfree daemon doesn't die anymore when communcation with the plab dslice
    agent fails.
  
  - the link classifier logic has been changed slightly to allow nodes
    to be classified as inet2 even if they don't reverse resolve.  The problem
    here is that intl nodes that don't resolve, but which go through abilene
    will look like inet2 nodes, which is wrong.  Manual verification of the
    node_auxtypes table is still recommended.
  
  - The fping verifier has been disabled for now (since some plab nodes
    block ICMP traffic).
  
  - made some error messages more descriptive
  
  - plabnodes script now handles more agent communication errors gracefully
   (retries when if encounters them).
  
  - rearranged plabnode's retry loops to be a little easier to read, and
    more general.
  
  Revision  Changes    Path
  1.12      +30 -19    testbed/tbsetup/plab/libplab.py.in
  1.4       +29 -19    testbed/tbsetup/plab/plabnode.in


stoller     2003/09/16 16:03:17 MDT

  Modified files:
    tmcd/linux           ixpboot rc.ixp 
  Log:
  More IXP changes:
  
  * Put a hosts file in /opt/config, which gets copied to /etc/hosts on
    the IXP.
  * Put a resolv.conf in /opt/config, which gets copied to /etc on
    the IXP.
  * Add support for startcmd, which will override the default boot.
  * Do not squash root in the /opt export.
  
  Revision  Changes    Path
  1.2       +88 -31    testbed/tmcd/linux/ixpboot
  1.2       +8 -6      testbed/tmcd/linux/rc.ixp


ricci       2003/09/16 15:54:01 MDT

  Modified files:
    tbsetup              vnode_setup.in 
  Log:
  Add some paralelism - do up to $MAX_CHILDREN (currently 8) vnodes at
  a time.
  
  Revision  Changes    Path
  1.24      +130 -41   testbed/tbsetup/vnode_setup.in


kwebb       2003/09/16 15:15:10 MDT

  Modified files:
    tbsetup/plab         libplab.py.in 
  Log:
  Small change to libplab to have it try to pull the plab rootball from
  a little local loopback httpd server which now runs on all slivers of
  the static utah1 slice.
  
  It falls back to pushing the tarball from Emulab central if the local
  fetch fails.  Also introduced the notion of versioning for the plab rootball.
  For now, just chang the ROOTBALL_NAME def at the beginning of this file; I'd
  like to move this into autoconf or the makefile eventually.
  
  Revision  Changes    Path
  1.11      +33 -15    testbed/tbsetup/plab/libplab.py.in


stoller     2003/09/16 14:00:33 MDT

  Modified files:
    tbsetup              named_setup.in 
  Log:
  Changes to allow for exporting subnodes/vnodes that have their own
  properly routable IPs addresses in the interfaces table.
  
  Revision  Changes    Path
  1.30      +69 -15    testbed/tbsetup/named_setup.in


mike        2003/09/16 12:31:10 MDT

  Modified files:
    tbsetup/plab         plabmetrics.in 
  Log:
  Don't use nodes with less than 10% free disk
  
  Revision  Changes    Path
  1.3       +68 -14    testbed/tbsetup/plab/plabmetrics.in


kwebb       2003/09/15 20:01:06 MDT

  Modified files:
    tbsetup/plab         libplab.py.in plabnode.in 
  Added files:
    tbsetup/plab/etc     fixsudo.sh 
  Log:
  Some PLAB dslice manager updates:
  
  - in addition to asking the dslice agent (on plab) for a list of available
    nodes, we now also fping them all to weed out unresponsive ones.  One
    problem here is that several plab nodes block ICMP; could be
    solved by pinging with nmap (tries both a ICMP, and TCP ping).  This
    affects the plabdaemon getfree command, and subsequently which plab nodes
    appear as "up" in the DB
  
  - Changed slice naming scheme:  we now append the experiment index onto the
    slice name to try to ensure uniqueness (emulab_<pid>_<eid>_<idx>)
  
  - Modified plabnode to try to cope with flaky nodes - there is some retry
    code in there now
  
  - Added the "fixsudo" shell script which is run very first as root (via the
    cumbersome "su" command) to fix sudoers for later sudo use on plab nodes.
  
  Revision  Changes    Path
  1.9       +39 -1     testbed/tbsetup/plab/libplab.py.in
  1.3       +52 -11    testbed/tbsetup/plab/plabnode.in


ricci       2003/09/15 19:19:45 MDT

  Modified files:
    assign               parse_ptop.cc physical.h score.cc 
  Log:
  Some fixes aimed at vnodes:
  
  Don't allow intraswitch links to vnodes on switches - they'll get
  scored as direct links. Since LANs are now directly on switches, there
  were situations where we could have scored the same link as either
  direct or intraswitch, which results in two different scores. This can
  cause those 'contact calfeld' warnings, and might have caused some
  strange scoring fluxuations as assign ran.
  
  When picking a link to a switch, for emulated links, pick the least
  loaded link, not the one with the fewest users. This helps in situations
  where the link bandwidths are heterogenous.
  
  Revision  Changes    Path
  1.30      +1 -0      testbed/assign/parse_ptop.cc
  1.21      +4 -1      testbed/assign/physical.h
  1.36      +46 -13    testbed/assign/score.cc


mike        2003/09/15 16:20:06 MDT

  Modified files:
    tbsetup/plab         plabmetrics.in 
  Log:
  Default to using 15-minute loadave and a cap of 5.0.
  Change to make nodes with stale data unusable (give em a loadave of 999)
  
  Revision  Changes    Path
  1.2       +36 -8     testbed/tbsetup/plab/plabmetrics.in


kwebb       2003/09/12 16:51:14 MDT

  Modified files:
    tbsetup/plab         libplab.py.in 
  Log:
  Several changes to support plab nodes on the mainbed:
  
  1) put linktype in the node_auxtypes table instead of having separate classes
  of vnodes (now they're all one type).
  
  2) Code added to emulabify() to fix the sudoers file pre-overlay.
     - turns out that only "su" is available to supply initial root access
  
  3) uncapped eligibility to allow all plab nodes to filter in.
  
  Other minor things too.
  
  Revision  Changes    Path
  1.8       +29 -23    testbed/tbsetup/plab/libplab.py.in


ricci       2003/09/12 13:08:31 MDT

  Modified files:
    assign               assign.cc anneal.cc solution.h 
                         solution.cc 
  Log:
  Add a new function to test for equality of two scores - just make
  sure they're within some tolerance of each other. Use this so that
  cumulative float point errors don't cause us to spit out scary
  looking false positive warnings.
  
  Revision  Changes    Path
  1.59      +1 -1      testbed/assign/assign.cc
  1.14      +1 -1      testbed/assign/anneal.cc
  1.2       +8 -0      testbed/assign/solution.h
  1.3       +8 -0      testbed/assign/solution.cc


ricci       2003/09/12 11:21:55 MDT

  Modified files:
    assign               anneal.cc 
  Log:
  Fix an infinite loop bug - could only show up in some unlikely
  circumstances with vnodes, but I managed to run into it.
  
  Revision  Changes    Path
  1.13      +13 -7     testbed/assign/anneal.cc


stoller     2003/09/12 10:14:58 MDT

  Modified files:
    tbsetup/plab         GNUmakefile.in 
  Added files:
    tbsetup/plab         plabmetrics.in 
  Log:
  New script to query the plab web site, download the gmetad XML file,
  and push load data into the node_features table. Once every 5 minutes
  from cron on boss.
  
  Revision  Changes    Path
  1.2       +1 -1      testbed/tbsetup/plab/GNUmakefile.in


ricci       2003/09/11 17:48:09 MDT

  Modified files:
    sql                  database-create.sql database-migrate.txt 
    tbsetup              ptopgen.in 
  Log:
  Add a node_features table - just like the node_type_features table,
  but it's per node, not per type. Will initially be used to store
  inforomation about planetlab nodes.
  
  Revision  Changes    Path
  1.181     +12 -2     testbed/sql/database-create.sql
  1.71      +8 -0      testbed/sql/database-migrate.txt
  1.44      +21 -6     testbed/tbsetup/ptopgen.in


ricci       2003/09/11 17:30:52 MDT

  Modified files:
    assign               parse_ptop.cc pclass.cc physical.h 
  Log:
  Add a new 'unique' flag to the ptop file - tells assign that there is
  some reason, which is invisible to assign, that a node should never
  be considered the same as another. This is for scoring, so that assign
  doesn't prefer to give you 2 DSL nodes if you ask for 1 DSL and one
  generic wide-area.
  
  Revision  Changes    Path
  1.29      +4 -0      testbed/assign/parse_ptop.cc
  1.20      +9 -0      testbed/assign/pclass.cc
  1.20      +6 -1      testbed/assign/physical.h


stoller     2003/09/11 14:23:18 MDT

  Modified files:
    tbsetup              assign_wrapper.in 
  Log:
  Widearea changes, mostly started for plab but affects all widearea
  nodes. The intent is to better support last mile types, which right
  now are a total mess cause the types are associated with the virtual
  nodes, and a node can have just a single type. This info has now been
  moved in the node_types_auxtypes table and the node_types table.
  
  Anyway, we no longer use wanassign on unconnected widearea nodes, but
  use assign directly, much like we use assign to allocate virtual nodes
  on local physical nodes. ptopgen inserts the physical widearea nodes
  (even though they are allocated), and the proper counts for the types
  that are available on them. assign will pick the nodes, and
  assign_wrapper will allocate the necessary vnodes on the pnodes (but
  in the case of wideare nodes, the underlying physical node does not
  need to be allocated).
  
  Also added some fixes for dealing with vtypes when used in conjunction
  with widearea nodes. Rather then generating an error like it used to,
  you can create a vtype in your NS file:
  
  	tb-make-soft-vtype mytype {pcvroninet pcvwainet}
  	tb-set-hardware $v0 mytype
  
  and assign_wrapper now looks at the underlying types to figure out
  what it needs. Note: No consistency checking yet; mixing a remote/virt
  and a local/real type will break.
  
  Revision  Changes    Path
  1.120     +94 -34    testbed/tbsetup/assign_wrapper.in


kwebb       2003/09/11 13:35:55 MDT

  Modified files:
    tbsetup/plab         libplab.py.in 
  Log:
  Small change to insertion of PLAB nodes into the DB.  We no longer classify
  the plab vnodes according to link type (they are all of generic "pcplab"
  type and class now), but add the linktype to the node_auxtypes field.  This
  data in this table is then used to tell assign what kinds of types/roles the
  node can take on.
  
  Revision  Changes    Path
  1.7       +6 -1      testbed/tbsetup/plab/libplab.py.in


stoller     2003/09/11 13:06:14 MDT

  Modified files:
    tbsetup              ptopgen.in 
  Log:
  Split out the widearea code, and rework. Added new option, -r, which
  says to include widearea physnodes, with the types set to those listed
  in the node_auxtypes table. Those types will include the last mile
  types that a vnode on a pnode can take on. The :count value for the
  types is set to the min of the number of *free* vnodes on the pnode,
  and the virtnode_capacity in the node_types table. Obviously, if all
  the vnodes are allocated, the physnode will not appear in the ptop
  file. For plab, virtnode_capacity will get set to one in the
  node_types table, thereby preventing "revisitation" of a plab physnode
  in an experiment.
  
  Revision  Changes    Path
  1.43      +91 -34    testbed/tbsetup/ptopgen.in


mike        2003/09/11 12:43:32 MDT

  Modified files:
    tbsetup              batchexp.in 
  Log:
  Use new sitevar that controls how long we let a batch job be idle before
  swapping.
  
  This is primarily for the "queue an interactive job" form of batching,
  but applies to all batch jobs at the moment.
  
  Revision  Changes    Path
  1.36      +12 -1     testbed/tbsetup/batchexp.in


ricci       2003/09/10 18:32:11 MDT

  Modified files:
    www                  newnode-defs.php3 newnodecheckin.php 
                         newnodes_list.php3 
  Log:
  Add support for Wisconsin's naming scheme, or more generally, any
  naming scheme that ends in -A, where A is a letter, not a number.
  
  Revision  Changes    Path
  1.5       +18 -2     testbed/www/newnode-defs.php3
  1.5       +105 -64   testbed/www/newnodecheckin.php
  1.4       +17 -4     testbed/www/newnodes_list.php3


ricci       2003/09/10 13:55:32 MDT

  Modified files:
    assign               pclass.cc 
  Log:
  Fix a bug/memory leak - assign should now stay at a constant memory
  footprint as it runs. All the credit for this one goes to Tim!
  
  Revision  Changes    Path
  1.19      +0 -2      testbed/assign/pclass.cc


stoller     2003/09/10 11:09:05 MDT

  Modified files:
    sql                  database-create.sql database-migrate.txt 
  Log:
  Add new table for mapping auxtypes back to their parent in the
  node_types table. This should make it easier to assign last mile
  types to widearea nodes since a given type can now have as many
  subtypes as you like.
  
  Also add cpu_usage and mem_usage to the experiments table. The
  user will be able to specify these in the NS file. Currently a
  tinyint, where the default is zero, which means ignore.
  
  Revision  Changes    Path
  1.180     +13 -0     testbed/sql/database-create.sql
  1.70      +16 -0     testbed/sql/database-migrate.txt


mike        2003/09/09 15:41:55 MDT

  Modified files:
    os                   install-tarfile 
  Log:
  "Fix" to deal with NFS hup-to-mountd-screws-us-all race:
  add -c option to force copying file over locally before untaring,
  the copy code knows how to retry read operations that fail
  
  Revision  Changes    Path
  1.6       +90 -33    testbed/os/install-tarfile


ricci       2003/09/09 14:44:48 MDT

  Modified files:
    sql                  database-create.sql database-migrate.txt 
    tbsetup              ptopgen.in 
  Log:
  Add a new table, node_auxtypes - this table contains additional types
  that should be associated with a node when it is put into the ptop
  file.
  
  Revision  Changes    Path
  1.179     +12 -1     testbed/sql/database-create.sql
  1.69      +5 -0      testbed/sql/database-migrate.txt
  1.42      +18 -0     testbed/tbsetup/ptopgen.in


ricci       2003/09/04 17:16:50 MDT

  Modified files:
    assign               anneal.cc common.h parse_ptop.cc 
                         parse_top.cc pclass.cc physical.h 
                         score.cc score.h virtual.h 
  Log:
  Teach assign about subnode relationships - on node lines in both the
  top and ptop files, you can put
  subnode_of:nodename
  Any vnode that is a subnode must be mapped to a pnode that is a a
  subnode of the pnode the vnode's parent is mapped to. Read that a few
  times slowly, I swear it makes sense.
  
  Revision  Changes    Path
  1.12      +1 -1      testbed/assign/anneal.cc
  1.19      +5 -0      testbed/assign/common.h
  1.27      +18 -0     testbed/assign/parse_ptop.cc
  1.27      +20 -6     testbed/assign/parse_top.cc
  1.17      +8 -0      testbed/assign/pclass.cc
  1.17      +7 -1      testbed/assign/physical.h
  1.33      +77 -2     testbed/assign/score.cc
  1.16      +4 -2      testbed/assign/score.h
  1.18      +8 -1      testbed/assign/virtual.h


stoller     2003/09/04 08:30:38 MDT

  Modified files:
    tbsetup/ns2ir        lanlink.tcl node.tcl parse-ns.in 
                         sim.tcl.in tb_compat.tcl.in 
  Log:
  Add variable netmask support to the parser so that we can handle lots
  more subnets; with vnodes and 1000 node experiments, we running out of
  subnets really quick with just 255 networks (255.255.255.0).
  You can now do this in your NS file:
  
  	tb-set-netmask $lan0  "255.255.240.0"
  	tb-set-netmask $link0 "255.255.255.248"
  	tb-set-netmask $link1 "255.255.255.240"
  
  Yep, more rope for the user to hang himself with. Notes:
  
  * You are restricted to 255.255.XXX.XXX. I did not see a reason to
    allow the user that much rope.
  
  * get_subnet can handle 10 or 192.168 addresses so that other sites
    can continue to operate without changing to 10 addresses, although
    they will still be able to change the netmask.
  
  * I've changed the handling for widearea networks to use 192.168, but
    I force the netmask to 255.255.255.248 so that we are not restricted
    to just 255 networks (not that it really matters). To avoid possible
    confusion, the user is not allowed to choose their own IPs for
    widearea networks, and I actually set them to 1.1.x.x, and then
    patch it up later. This is to avoid conflict with existing
    experiments where people may have used tb-set-ip in their NS files.
  
  * There are tmcd and staticroutes and image changes that are required
    to make this all work right!
  
  Revision  Changes    Path
  1.29      +61 -12    testbed/tbsetup/ns2ir/lanlink.tcl
  1.39      +8 -5      testbed/tbsetup/ns2ir/node.tcl
  1.13      +26 -13    testbed/tbsetup/ns2ir/parse-ns.in
  1.50      +75 -13    testbed/tbsetup/ns2ir/sim.tcl.in
  1.51      +25 -0     testbed/tbsetup/ns2ir/tb_compat.tcl.in

stoller     2003/08/05 11:41:09 MDT

  Modified files:
    .                    configure configure.in 
    db                   xmlconvert.in 
    os                   GNUmakefile.in 
    tbsetup/ns2ir        parse.tcl.in sim.tcl.in tb_compat.tcl.in 
    tmcd                 libsetup.pm 
    tmcd/common          rc.setup watchdog 
    www                  showstuff.php3 
  Added files:
    os/syncd             GNUmakefile.in decls.h emulab-sync.c 
                         emulab-syncd.c 
  Log:
  The rest of the sync server additions:
  
  * Parser: Added new tb command to set the name of the sync server:
  
  	tb-set-sync-server <node>
  
    This initializes the sync_server slot of the experiment entry to the
    *vname* of the node that should run the sync server for that
    experiment. In other words, the sync server is per-experiment, runs
    on a node in the experiment, and the user gets to chose which node
    it runs on.
  
  * tmcd and client side setup. Added new syncserver command which
    returns the name of the syncserver and whether the requesting node
    is the lucky one to run the daemon:
  
      SYNCSERVER SERVER='nodeG.syncserver.testbed.emulab.net' ISSERVER=1
  
    The name of the syncserver is written to /var/emulab/boot/syncserver
    on the nodes so that clients can easily figure out where the server
    is.
  
    Aside: The ready bits are now ignored (no DB accesses are made) for
    virtual nodes; they are forced to use the new sync server.
  
  * New os/syncd directory containing the daemon and the client. The
    daemon is pretty simple. It waits for TCP (and UDP, although that
    path is not complete yet) connections, and reads in a little
    structure that gives the name of the "barrier" to wait for, and an
    optional count of clients in the group (this would be used by the
    "master" who initializes barriers for clients). The socket is saved
    (no reply is made, so the client is blocked) until the count reaches
    zero. Then all clients are released by writting back to the
    sockets, and the sockets are closed. Obviously, the number of
    clients is limited by the numbed of FDs (open sockets), hence the
    need for a UDP variant, but that will take more work.
  
    The client has a simple command line interface:
  
      usage: emulab-sync [options]
      -n <name>         Optional barrier name; must be less than 64 bytes long
      -d                Turn on debugging
      -s server         Specify a sync server to connect to
      -p portnum        Specify a port number to connect to
      -i count          Initialize named barrier to count waiters
      -u                Use UDP instead of TCP
  
      The client figures out the server by looking for the file created
      above by libsetup (/var/emulab/boot/syncserver). If you do not
      specify a barrier "name", it uses an internal default. Yes, the
      server can handle multiple barriers (differently named of course)
      at once (non-overlapping clients obviously).
  
      Clients can wait before a barrier in "initialized." The count on
      the barrier just goes negative until someone initializes the
      barrier using the -i option, which increments the count by the
      count. Therefore, the master does not have to arrange to get there
      "first." As an example, consider a master and one client:
  
  	nodeA> /usr/local/etc/emulab/emulab-sync -n mybarrier
  	nodeB> /usr/local/etc/emulab/emulab-sync -n mybarrier -i 1
  
      Node A waits until Node B initializes the barrier (gives it a
      count).  The count is the number of *waiters*, not including the
      master. The master is also blocked until all of the waiters have
      checked in.
  
      I have not made an provision for timeouts or crashed clients. Lets
      see how it goes.
  
  Revision  Changes    Path
  1.166     +1 -0      testbed/configure
  1.173     +1 -0      testbed/configure.in
  1.5       +2 -1      testbed/db/xmlconvert.in
  1.14      +10 -2     testbed/os/GNUmakefile.in
  1.42      +3 -0      testbed/tbsetup/ns2ir/parse.tcl.in
  1.49      +6 -0      testbed/tbsetup/ns2ir/sim.tcl.in
  1.47      +14 -0     testbed/tbsetup/ns2ir/tb_compat.tcl.in
  1.60      +72 -2     testbed/tmcd/libsetup.pm
  1.9       +5 -0      testbed/tmcd/common/rc.setup
  1.5       +2 -1      testbed/tmcd/common/watchdog
  1.103     +8 -0      testbed/www/showstuff.php3

kwebb       2003/07/22 18:48:44 MDT

  Modified files:
    tmcd/linux           GNUmakefile.in 
  Added files:
    tmcd/linux           delaysetup 
  Log:
  Here we have the Linux delaysetup startup script - first revision.  This
  uses iproute2+tc, modprobe, and iptables to setup traffic shaping.
  A few notes are warranted:
  
  1) [g]red is not yet supported
     - need to make these modules classful in the kernel first
  
  2) sysctls are used here to up the amount of buffer space available for
     sk_bufs (socket buffers).  Couldn't see a place to do this in the kernel
     config.
  
  3) Only linkdelay support is implemented
     - probably could add normal delay-node support without too much trouble.
  
  4) reverse pipe numbers are (currently) ignored
     - not needed since the IMQ device used to shape incoming traffic
       is distinct from the actual interface - no namespace collision.
  
  5) Kernel selection is similar to FBSD: check running kernel, and reboot
     if the kernel version isn't what we expect (have to rerun lilo too)
  
kwebb       2003/07/22 18:40:34 MDT

  Added files:
    delay/linux          README 
    delay/linux/iptables_mods iptables-1.2.6a-imq.diff-3 
    delay/linux/kmods    patch-combined-linkdelays-2.4.18 
    delay/linux/tc_mods  
                         patch-combined-iproute2-2.4.7-now-ss020116-try 
  Log:
  This commit represents the culmination of my work on linux traffic shaping.
  Both changes to the kernel, and to userland control applications are included
  in this checkin.  At present, these files are combined patches; I'll be
  separating out the Emulab specific additions/changes in the near future.
  
  The best resource (currently) for understanding the Linux traffic control
  mechanisms is at the Linux Diffserv project home page (under Documentation):
  http://diffserv.sourceforge.net/
  
  The most noteworthy contributions I've made are the PLR module and DELAY
  module port and enhancement.  These two modules are classful (though they
  don't use classification filters) and can be chained together with other
  modules such as the Heirarchical Token Bucket (used for limiting bandwith).
  See: http://luxik.cdi.cz/~devik/qos/htb/
  
  Note that this checkin also includes the patches necessary to obtain
  Intermediate Queueing Devices (IMQ) and HTB control under iproute2+tc.  The
  IMQ devices allow the attachment of qdiscs on the incoming side of a real
  interface (can't do this without them). See: http://trash.net/~kaber/imq/
  
  The Linux Advanced Routing HOWTO is another good source of information:
  http://lartc.org

stoller     2003/07/15 15:25:03 MDT

  Modified files:
    db                   libdb.pm.in 
    tbsetup              assign_wrapper.in os_setup.in tbswap.in 
                         vnode_setup.in 
  Log:
  A set of changes to make swapmod work on jailed nodes (note, swapmod
  does not yet work with remove virtual nodes; that will take even more
  work).
  
  Added a new allocstate called RES_TEARDOWN. assign_wrapper no longer
  deallocates unused nodes, but rather moves them into the new state for
  the wrapper (tbswap) to deal with. Thats cause deleted vnodes need to
  be torn down, since its possible that the node on which they were
  living will not be deallocated (say, if there are other vnodes on
  it). We do not want to be doing that from assign_wrapper, so tbswap
  looks for those nodes.
  
  Made vnode_setup allocstate aware in the same way that os_setup is;
  do not reboot vnodes or try to set up vnodes when they are already in
  the RES_READY state, as they will be when doing a swapmod. In
  addition, if os_setup is going to reboot the underlying physnode, move
  the vnodes on that node into RES_READY too, since there they will
  setup automatically. Might need an interim state here, for correctness.
  
ricci       2003/07/14 18:27:27 MDT
  Modified files:
    utils                newnode.in
    www                  newnodecheckin.php
  Added files:
    www                  newnode-defs.php3 newnode_edit.php3
                         newnodes_list.php3
  Log:
  Web interface for autoconfiguring nodes. This consisits of two pages,
  one that lists and allows operations on a number of nodes at once, and
  another that allows editing of an individual node.

  Split much of the functionality of newnodecheckin.php into a new
  library, so it can get re-called from newnodes_list.php3 later.

  Move where we look for MACs on the switches - instead of doing in in
  newnode, call it from newnodecheckin.php - this provides the admins
  more feedback as to what's going on, and allows them to call it again
  later or put the information in by hand.

stoller     2003/07/08 17:34:42 MDT

  Modified files:
    tbsetup              GNUmakefile.in 
  Log:
  Turn off mainbed exclusion of ns2ir build/install, now that parser
  has been working on minibed okay for a while. In other words, the new
  parser really is going to be installed on mainbed, any moment!
  
ricci       2003/07/01 10:14:42 MDT

  Modified files:
    assign               anneal.cc anneal.h assign.cc 
                         assign_todo.txt pclass.cc pclass.h 
                         physical.h score.cc 
  Log:
  Give assign the ability to make dynamic pclasses. Here's how it works:
  After building the set of pclasses normally, we make another pass
  through the vnodes. The goal to create a pclass for each individual
  node. We disable the node's 'own' pclass to begin with. Then, the
  _first_ time it gets a vnode mapped to it, we remove it from the
  'regular' pclass it belongs to, and enable it's own pclass. Then, if
  it goes empty, we put it back in its regular pclass and disable it's
  own.
  
  The point of this is to replace -p for use with multiplexed nodes.
  Instead of disabling pclasses altogheter, which has serious
  performance implications, we can instead be smart about which pnodes
  remain equivalent (because nothing's been mapped to them), and which
  are now different. The result is that on my test topoloy, the time to
  get a good mapping has gone from over 3 minutes to about 6 seconds.
  
  This feature is enabled with the -d option, and the -P option is
  pretty much mandatory when using it, since it greatly exacerbates the
  problem of cruft in the ptop file.
  
  This satisfies #14 from the todo file:
  14.  do dynamic pclasses
  
  Also bumped up the minimum neighborhood size from 500 to 1000. In some
  tests I was doing, this resulted in better solutions.
  
ricci       2003/06/26 13:13:16 MDT

  Modified files:
    assign               anneal.cc anneal.h assign.cc 
                         assign_internals.txt parse_ptop.cc 
                         pclass.cc physical.h score.cc solution.cc 
    tbsetup              assign_wrapper.in ptopgen.in 
  Log:
  Major changes to the way assign handles LAN nodes.
  
  LAN nodes are no longer treated specially. Instead, I've introduced
  the idea of 'static' types (old-style types retroactively become
  'dynamic' types). While a pnode can only satisfy one dynamic type at a
  time, it can always satisfy its static types (assuming it has enough
  capacity left.) Static types are flagged by prepending them with a '*'
  in the ptop file. So, for example, you may give switches the
  '*lan:10000' type so that they can satisfy virtual LAN nodes. Of
  course, other pnodes can have this type too, so that we can get
  'trivial LANs'.
  
  Actually, removing special treatment for LANs cleans up a lot of code.
  However, it may have some negative impacts on solutions, since we're
  not as smart about where to place LAN nodes as we used to be (they get
  annealed along with everything else, and not migrated.) I haven't seen
  any evidence of this yet, however.
  
  This leaves us with a single type of special pnode, a switch.
  
  Also added a new bit of syntax in ptop files - when '*' is given as a
  the maxiumum load for a type, the node is allowed to take on an
  infinite (well, actually, just a really big number of) vnodes of that
  type.
  
  ptopgen was modified to always report switches as being capable of
  hosting LANs, and assign_wrapper now understands direct links to LANs,
  which is what we get when the LAN is hosted directly on a switch.
  
  Fixed a bug in scoring direct links, in which the penatly was being
  added once when a direct link was mapped, but subtracted only once
  when it was freed.
  
  Added a '-T' option for doing simple self-testing. When adding a node
  to the solution, assign records the score, adds the node, removes it
  again, and checks to make sure that the resulting score is the same as
  the original score. The usefulness of this feature in debugging
  scoring problems cannot be understated...


stoller     2003/06/30 11:33:58 MDT

  Modified files:
    .                    GNUmakefile.in configure configure.in 
    db                   xmlconvert.in 
    tbsetup              GNUmakefile.in batchexp.in nscheck.in 
    tbsetup/ns2ir        GNUmakefile.in lanlink.tcl node.tcl 
                         parse-ns.in parse.tcl.in program.tcl 
                         sim.tcl.in tb_compat.tcl.in traffic.tcl 
                         vtype.tcl 
    testsuite/tests/db1  test 
  Added files:
    tbsetup/ns2ir        parse.proxy.in 
  Log:
  Make the new parser live on mini. New parser ssh'es over to ops to
  do the actual parse, as the user. The parser now spits out XML instead of
  DB queries, and the wrapper on boss converts that to DB insertions after
  verification, using the new xmlconvert script. There are some makefile
  changes as well to install the new parser on ops via NFS, since
  otherwise the parser could intolerably out of date on ops!


stoller     2003/06/26 15:30:02 MDT

  Modified files:
    db                   GNUmakefile.in 
  Added files:
    db                   xmlconvert.in 
  Log:
  New script. Convert experiment to "well formed" XML, and back again.
  The conversion from XML to an experiment representation updates the
  DB, although the experiment has to exist, and only certain fields can
  be updated. For the rest of the virtual toplogy, the old toplogy is
  deleted, and the new one installed. Use with caution. This is intended
  to be hooked to the parser, and later to the vis tool so that it does
  not need to have to do its own NS parsing, but can simply interpret the
  XML. 
  

stoller     2003/06/23 13:55:30 MDT

  Modified files:
    cdrom/waboot         netbed-setup.pl register.pl waipconfig.pl 
  Log:
  Add support for DHCP to the NetBed CDROM.
  
  Revision  Changes    Path
  1.5       +19 -8     testbed/cdrom/waboot/netbed-setup.pl
  1.11      +17 -0     testbed/cdrom/waboot/register.pl
  1.8       +77 -4     testbed/cdrom/waboot/waipconfig.pl

stoller     2003/05/22 15:35:51 MDT

  Modified files:
    db                   libdb.pm.in 
    tbsetup              batch_daemon.in batchexp.in endexp.in 
                         swapexp.in 
    www                  beginexp.php3 swapexp.php3 
  Log:
  Reorg the batch system slightly as per Eric's request that batch mode
  experiments look more like regular experiments. Batch mode experiments
  can now be preloaded and swapped. When preloaded, they go into a
  "Pause" state. Swapping a batch mode experiment in puts them into the
  "posted" state so the batch daemon will see them. Swapping out a
  batchmode experiment does the expected; it puts them back into the
  Pause state. Terminating a batch mode experiment does the expected;
  its gone. When a batch mode experiment finishes normally, it goes back
  into the pause state, which allows batches to be reinjected as many
  times as Eric likes.
	
stoller     2003/05/1 09:09:12 MDT
	
  Modified files:
    event/sched          event-sched.c event-sched.h 
    lib/libtb            tbdefs.c tbdefs.h 
    sql                  database-fill.sql 
    tbsetup              eventsys_control.in 
    tbsetup/ns2ir        sim.tcl.in 
  Log:
  Add the long desired halt/swap event directives. You can now put this
  in your NS file:
  
  	$ns at 2000.0 "$ns halt" (or terminate)
  or
  	$ns at 2000.0 "$ns swapout"
  
  The first causes the experiment to terminate, the later causes it to
  swap out. The units are seconds, as are all "at" statements.

  NOTE: You can use halt (terminate) to cancel a batch experiment, but you
	cannot schedule a swapout.

stoller     2003/04/16 11:41:12 MDT

  Modified files:
    .                    configure configure.in 
    tbsetup              GNUmakefile.in swapexp.in 
    www                  showexp.php3 swapexp.php3 
  Added files:
    tbsetup              idleswap.in webidleswap.in 
  Log:
  Add support for idleswapping an experiment as the creator of the
  experiment, rather than as an administrator, which presents group
  permission problems when the experiment is in a subgroup (requires two
  additional group, whereas suexec adds only one group). That aside, the
  correct approach is to run the swap as the creator. To do that, must
  flip to the user (from the admin person) in the backend using the new
  idleswap script, and then run the normal swapexp. Add new option to
  swapexp (-i) which changes the email slightly to make it clear that
  the experiment was idleswapped, and so that the From: is tbops not the
  user (again, to make it more clear).
  
newbold     2003/04/09 16:07:12 MDT

  Modified files:
    .                    configure configure.in defs-barb-emulab 
                         defs-barb-mini defs-calfeld-emulab 
                         defs-default defs-example 
                         defs-kwebb-emulab defs-mini 
                         defs-newbold-emulab defs-newbold-macdb 
                         defs-newbold-mini defs-rchriste-emulab 
                         defs-ricci-emulab defs-ricci-mini 
                         defs-shash-emulab defs-shash-mini 
                         defs-stoller-emulab defs-stoller-home 
                         defs-stoller-mini defs-uky defs-wide 
  Added files:
    account              quotamail.in 
  Log:
  Add new script to notify users when they are over their quota. Runs from
  cron daily, on the fs node (ops) as root. Uses lots of configure variables
  so that it does the right thing in any installation, without any
  customization.
  
  One possible caveat regarding quotas: If FS_NODE != USERNODE, they don't
  have a login on the fs machine. So checking their quota won't work unless
  the rpc.rquotad(8) daemon is running on FS_NODE, which we currently don't
  do.
  
  In order to do this right, I had to add a new configure var,
  FS_WITH_QUOTAS, that has a space separated list of file systems that have
  quotas enabled. (Ie the default is 'FS_WITH_QUOTAS="/q /users"'.) It
  doesn't have any default, since I couldn't come up with a reasonable one.
  All the defs files have been updated appropriately to define this new
  variable.


mike        2003/04/09 15:18:00 MDT
	
  Semi-major frisbee overhaul:

  Implement PREQUEST message which passes a bit map of desired blocks.
  We still use the REQUEST message (start block + number of blocks) for
  full chunk requests as that is more efficient.

  Allow dynamic number of variable-sized write buffers.  Total memory
  not to exceed the writebufmem limit.

  Eliminate a complete copy of the uncompressed data in the client.

  Fix a bug in the client where we would not keep our request-ahead window full.

  Fix a bug in the server where we would not merge incoming requests with
  the request currently being serviced.
	
  The above changes/bugfixes gave us about a 5% improvement in run time locally.

  Add some client/server convenience options.  For the server, -W allows 
  specification of a target bandwidth.  For the client, -C, -W and -M
  give various ways of specifying how much memory to use for net/disk
  buffering.

  Security: -S option tells client to only accept packets from a specific
  IP address.
	
stoller     2003/04/08 03:03:01 MDT

  Update Linux image to Redhat 7.3. The old image is still available to
  users by using the OSID RHL71-STD in their NS files. 
	    
newbold     2003/04/08 12:32:01 MDT

  Modified files:
    .                    configure configure.in 
    db                   GNUmakefile.in 
  Added files:
    db                   idlemail.in idletimes.in webidlemail.in 
  Removed files:
    db                   idlecheck.in 
  Log:
  Remove idlecheck. Add idletimes and idlemail (and webidlemail).
  (webidlecheck was removed in a separate commit.)
  
  idletimes is the new commandline tool for checking idleness. It shows a
  table like this:
  
 PID          EID          Nodes  HrsIdle     Last Activity     Act. type
 ------------------------------------------------------------------------
 AVQ          Tunnel           4   15.18   2003-04-07 21:18:20  tty
 pces         toy              1    3.92   2003-04-08 08:34:02  tty
 Spinglass    fawaz            1   13.76   2003-04-07 22:43:48  tty
 TempleSCTP   FTP-REAL         1   26.40   2003-04-07 10:05:18  tty,net
 testbed      bvclass          4   24.58   2003-04-07 11:54:13  net
 testbed      ltest            1   14.37   2003-04-07 22:07:02  tty
 testbed      ron-image        1  501.88   2003-03-18 13:36:28  cpu,ext,tty,net
 testbed      Tone             1  501.88   2003-03-18 13:36:30  cpu,ext,tty,net
  
  By default it only shows things that are over an idleness threshold. It
  also has a mode to show all expts. Also can show idleness/activity by node
  instead of by expt, which has a slightly different table. (s/Nodes/NodeID/)
  
  idlemail isn't finished yet, but I don't want it to hold up idletimes and
  the other changes any longer. It doesn't get used by anything yet, of
  course.

stoller     2003/04/04 10:20:31 MST

  Modified files:
    sql                  database-migrate.txt 
    www                  approveproject_list.php3 
                         approveuser_form.php3 joinproject.php3 
                         moduserinfo.php3 newproject.php3 
                         showstuff.php3 verifyusr.php3 
                         widearea_register.php 
  Log:
  Add "Address Line 2", City, State, and Zip as independent entities,
  finally! These have been in the DB for a long time, but never used.
  As Eric pointed out, its easier to get realistic address info from
  people if we provide the right forms. The downside is that all current
  users will have to adjust their info the next time they edit their
  info. Thats okay. I thought about forcing all users to do it the next
  time they log in, but I figured people would scream.

newbold     2003/04/02 15:24:48 MST

  Modified files:
    .                    configure configure.in defs-barb-emulab 
                         defs-barb-mini defs-calfeld-emulab 
                         defs-default defs-example 
                         defs-kwebb-emulab defs-mini 
                         defs-newbold-emulab defs-newbold-macdb 
                         defs-newbold-mini defs-rchriste-emulab 
                         defs-ricci-emulab defs-ricci-mini 
                         defs-shash-emulab defs-shash-mini 
                         defs-stoller-emulab defs-stoller-home 
                         defs-stoller-mini defs-wide 
    www                  defs.php3.in 
  Removed files:
    www                  barb-emulab-defs.php3 barb-mini-defs.php3 
                         default-defs.php3 example-defs.php3 
                         kwebb-emulab-defs.php3 mini-defs.php3 
                         newbold-emulab-defs.php3 
                         newbold-mini-defs.php3 
                         ricci-emulab-defs.php3 
                         ricci-mini-defs.php3 
                         shash-emulab-defs.php3 
                         shash-mini-defs.php3 
                         stoller-emulab-defs.php3 
                         stoller-home-defs.php3 
                         stoller-mini-defs.php3 wide-defs.php3 
  Log:
  Massive reworking of our structure for defs files.
  
  Before:
  The main defs file (ie for configure) had an entry for WWWDEFS that
  pointed to a <@WWWDEFS@>-defs.php3 file in the www/ directory. The www
  defs file loaded some values about web pages, URLs, and some web
  configuration parameters.
  
  Problem:
  Anything that was only in the www defs file was not accessible in the rest
  of the universe (ie perl, C, and any other non-web-page scripts). For
  instance, you couldn't have a perl script send an email to a user with a
  link to the web site.
  
  Solution:
  Nuke all the www-defs files, move any important values into the main
  configure, and change the web defs infrastructure to respect that. This
  also meant adding about 3 lines each to all of the configure defs files.
  (There really are about 10 new values you can change in your defs file,
  but in almost all cases, the default values are the right thing.)
  
  Upgrading:
  External sites will need to move a few variables from their www-defs file
  into their configure defs file. The example file should make it pretty
  obvious. They may also want to customize some of the other vars that are
  mentioned in configure.in and www/defs.php3.in .

stoller     2003/03/29 10:23:30 MST

  Modified files:
    www                  approveproject.php3 joinproject.php3 
                         login.php3 newgroup.php3 newproject.php3 
                         reqaccount.php3 
  Log:
  Add target_pid,target_gid arguments to joinproject page so that
  we can send links that cause those fields to be filled in for people.
  Add those links to email generated by newproject and newgroup pages
  so that they can be saved by the leaders.
  
  Add a bit of referrer magic to login page. When clicked from the join
  or new project pages, tell login page to pass along the referrer page
  so that when login is complete, user is zapped back to the original
  page. This is especially nice when combined with the above change to
  joinproject, whereby we send along the target pid/gid, but the user
  has not yet logged in and remembers to do so via the link at the top
  of the page.

stoller     2003/03/27 17:01:52 MST

  Modified files:
    db                   libdb.pm.in 
    www                  dbdefs.php3.in 
  Log:
  Changes to permission checks for nodes, experiments, and images.
  In addition to the usual checks, project_root and group_root (in the
  project) get the same permission as if they were in the subgroups with
  group_root permission. This means they can swap/terminate/reboot etc
  in subgroups even though they are not members of the subgroups.
  There is still some copy problems with files, but leaving that till
  later to deal with.
  

