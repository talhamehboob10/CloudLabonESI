#!/usr/bin/perl -w
#
# Copyright (c) 2010-2021 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use Data::Dumper;
use Fcntl;

#
# Setup accounts/projects/group stuff on ops/fs. This is installed on
# op/fs and invoked from boss by tbacct and the proj/group scripts.
#
sub usage()
{
    print "Usage: accountsetup adduser ...\n";
    print "       accountsetup deluser ...\n";
    print "       accountsetup moduser ...\n";
    print "       accountsetup setgroups ...\n";
    print "       accountsetup chpass ...\n";
    print "       accountsetup addproject ...\n";
    print "       accountsetup addgroup ...\n";
    print "       accountsetup delproject ...\n";
    print "       accountsetup delgroup ...\n";
    print "       accountsetup checkdotfiles ...\n";
    print "       accountsetup createsshkey ...\n";
    print "       accountsetup dropfile ...\n";
    print "       accountsetup deactivateuser ...\n";
    print "       accountsetup reactivateuser ...\n";
    exit(1);
}
my $optlist    = "dnf";
my $debug      = 0;
my $force      = 0;
my $impotent   = 0;

# XXX make this a sitevar
my $RENAMEDIRS = 1;

#
# Configure variables
#
my $TB		      = "@prefix@";
my $USERPATH          = "$TB/bin";
my $WITHZFS	      = @WITHZFS@;
my $ZFS_NOEXPORT      = @ZFS_NOEXPORT@;
my $OPSVM_ENABLE      = @OPSVM_ENABLE@;
my $OURDOMAIN         = "@OURDOMAIN@";
my $ZFS_ROOT          = "@ZFS_ROOT@";
my $ZFS_QUOTA_USER    = "@ZFS_QUOTA_USER@";
my $ZFS_QUOTA_PROJECT = "@ZFS_QUOTA_PROJECT@";
my $ZFS_QUOTA_GROUP   = "@ZFS_QUOTA_GROUP@";
my $ZFS_QUOTA_USER_X  = "@ZFS_QUOTA_USER_X@";
my $ZFS_QUOTA_PROJECT_X = "@ZFS_QUOTA_PROJECT_X@";
my $ZFS_QUOTA_GROUP_X = "@ZFS_QUOTA_GROUP_X@";
my $PW		      = "/usr/sbin/pw";
my $USERADD	      = "/usr/sbin/pw useradd";
my $USERDEL	      = "/usr/sbin/pw userdel";
my $USERMOD	      = "/usr/sbin/pw usermod";
my $GROUPADD          = "/usr/sbin/pw groupadd";
my $GROUPDEL          = "/usr/sbin/pw groupdel";
my $CHPASS	      = "/usr/bin/chpass";
my $CHOWN	      = "/usr/sbin/chown";
my $CHMOD	      = "/bin/chmod";
my $MKDIR	      = "/bin/mkdir";
my $CHFLAGS	      = "/bin/chflags";
my $NOLOGIN	      = "/sbin/nologin";
my $MV		      = "/bin/mv";
my $ZFS		      = "/sbin/zfs";
my $KEYGEN	      = "/usr/bin/ssh-keygen";
my $SKEL	      = "/usr/share/skel";
my $PIDFILE           = "/var/run/mountd.pid";
my $TSFILE	      = "/var/run/mountd.ts";
my $DISABLEFLAGS      = @DISABLE_FSNODE_CHFLAGS@;
my $USEFLAGS          = 0;

# XXX
my $NOSUCHUSER  = 67;
my $USEREXISTS  = 65;

# We use flags to prevent deletion of certain dirs, on FreeBSD 10 or greater.
# Note that when OPSVM_ENABLE=1, the file systems are actually back over
# on boss, so cannot do the chflags here. Hmm.
if (!$OPSVM_ENABLE) {
    if (`uname -r` =~ /^(\d+)\.(\d+)/) {
	if ($1 >= 10) {
	    $USEFLAGS = 1 unless ($DISABLEFLAGS);
	}
    }
}

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libtestbed;

# Generic (mounted) names for filesystems
my $USERROOT    = USERROOT();
my $PROJROOT    = PROJROOT();
my $GROUPROOT   = GROUPROOT();
my $SCRATCHROOT = SCRATCHROOT();

# XXX we need the real fs mountpoints too
my $FSUSERROOT    = "@FSDIR_USERS@";
my $FSPROJROOT    = "@FSDIR_PROJ@";
my $FSGROUPROOT   = "@FSDIR_GROUPS@";
my $FSSCRATCHROOT = "@FSDIR_SCRATCH@";

# These are duplicated in db/Project.pm.in ...
# Project subdir list
my @DIRLIST  = ("exp", "images", "logs", "deltas", "tarfiles", "rpms",
		"groups", "tiplogs", "images/sigs", "templates");
# Groups subdir list
my @GDIRLIST = ("exp", "images", "logs", "tarfiles", "rpms", "tiplogs");

#
# Function prototypes
#
sub AddUser();
sub DeleteUser();
sub SetGroups();
sub ModifyUser();
sub ChangePassword();
sub AddProject();
sub AddGroup();
sub DelProject();
sub DelGroup();
sub DropFile();
sub CheckDotFiles();
sub CreateSSHKey();
sub ReactivateUser();
sub DeactivateUser();
sub fatal($);
sub SetDotGroup($$);
sub ZFSexists($);
sub MakeDir($$);
sub WhackDir($$);
sub mysystem($);
sub runBusyLoop($);
sub SetNoDelete($);
sub ClearNoDelete($);

#
# Check args.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"f"})) {
    $force = 1;
}
if (defined($options{"n"})) {
    $impotent = 1;
}
usage()
    if (@ARGV < 1);

my $cmd = shift(@ARGV);

#
# Now dispatch operation.
#
SWITCH: for ($cmd) {
    /^adduser$/ && do {
	AddUser();
	last SWITCH;
    };
    /^deluser$/ && do {
	DeleteUser();
	last SWITCH;
    };
    /^moduser$/ && do {
	ModifyUser();
	last SWITCH;
    };
    /^setgroups$/ && do {
	SetGroups();
	last SWITCH;
    };
    /^chpass$/ && do {
	ChangePassword();
	last SWITCH;
    };
    /^addproject$/ && do {
	AddProject();
	last SWITCH;
    };
    /^addgroup$/ && do {
	AddGroup();
	last SWITCH;
    };
    /^delproject$/ && do {
	DelProject();
	last SWITCH;
    };
    /^delgroup$/ && do {
	DelGroup();
	last SWITCH;
    };
    /^dropfile$/ && do {
	DropFile();
	last SWITCH;
    };
    /^checkdotfiles$/ && do {
	CheckDotFiles();
	last SWITCH;
    };
    /^createsshkey$/ && do {
	CreateSSHKey();
	last SWITCH;
    };
    /^deactivateuser$/ && do {
	DeactivateUser();
	last SWITCH;
    };
    /^reactivateuser$/ && do {
	ReactivateUser();
	last SWITCH;
    };
    # Default
    usage();
}
exit(0);

#
# Usage: adduser username unix_uid full_name homedir unix_gid shell [ phash ]
#
sub AddUser()
{
    if (@ARGV < 6) {
	fatal("adduser: Wrong number of arguments");
    }
    
    my $user  = shift(@ARGV);
    my $uid   = shift(@ARGV);
    my $name  = shift(@ARGV);
    my $hdir  = shift(@ARGV);
    my $gid   = shift(@ARGV);
    my $shell = shift(@ARGV);

    if (! -d "$hdir") {
	# XXX we only handle homedirs of the form /users/$user here...
	if ($hdir ne "$USERROOT/$user" || MakeDir($USERROOT, $user)) {
	    fatal("Could not create $user homedir $hdir");
	}
    }

    if (mysystem("egrep -q -s '^${user}:' /etc/passwd") &&
	runBusyLoop("$USERADD $user -u $uid -c \"$name\" ".
		    "-k $SKEL -h - -d $hdir -g $gid -s $shell")) {
	if (($? >> 8) != $USEREXISTS) {
	    fatal("$USERADD: could not add account");
	}
    }

    #
    # Since we do not populate the new homedir with the useradd call,
    # we need to copy the skeleton files over.
    #
    if (! -e "$hdir/.cshrc") {
	opendir(DIR, "$SKEL") or
	    fatal("Unable to open skeleton directory");
	while (my $file = readdir(DIR)) {
	    if ($file =~ /^dot(.*)$/) {
		mysystem("/bin/cp -fp $SKEL/$file $hdir/$1") == 0
		    or fatal("Could not copy $SKEL/$file to $hdir/$1");
	    }
	}

	#
	# And set the owner and group right on everything
	#
	mysystem("/usr/sbin/chown -R $user:$gid $hdir") == 0
	    or fatal("Could not chown $hdir");
    }
    #
    # Some directories we need, with proper owner/group/mode
    #
    foreach my $dir (".ssl", ".ssh") {
	if (! -e "$hdir/$dir" &&
	    !mkdir("$hdir/$dir", 0700)) {
	    fatal("Could not make directory '$hdir/$dir': $!");
	}
	mysystem("$CHOWN -R $user:$gid $hdir/$dir") == 0
	    or fatal("Could not chown $hdir/$dir to $user:$gid");

	chmod(0700, "$hdir/$dir")
	    or fatal("Could not chmod '$hdir/$dir' to 0700: $!");
    }
    return 0;
}

#
# Usage: deluser username homedir
#
sub DeleteUser()
{
    if (@ARGV != 2) {
	fatal("deluser: Wrong number of arguments");
    }
    my $user  = shift(@ARGV);
    my $hdir  = shift(@ARGV);

    #
    # Note that this does NOT remove the user's homedir.
    # We remove/rename it below...
    #
    if (runBusyLoop("$USERDEL $user")) {
	if (($? >> 8) != $NOSUCHUSER) {
	    fatal("Could not remove user $user");
	}
    }

    # XXX we only handle homedirs of the form /users/$user here...
    if ($hdir ne "$USERROOT/$user" ||
	(-e $hdir && WhackDir($USERROOT, $user))) {
	fatal("Could not destroy $user homedir $hdir");
    }

    return 0;
}

#
# Usage: moduser username shell full_name
#
sub ModifyUser()
{
    if (@ARGV != 3) {
	fatal("moduser: Wrong number of arguments");
    }
    
    my $user  = shift(@ARGV);
    my $shell = shift(@ARGV);
    my $name  = shift(@ARGV);

    if (runBusyLoop("$USERMOD $user -c \"$name\" -s $shell")) {
	fatal("$USERMOD: could not modify account");
    }
    return 0;
}

#
# Usage: username group1 [ group2 ... groupN ]
# XXX this is specific to what is required by setgroups.
#
sub SetGroups()
{
    if (@ARGV < 2) {
	fatal("setgroups: Wrong number of arguments");
    }
    my $user  = shift(@ARGV);
    my $pgroup  = shift(@ARGV);
    my $grouplist = "''";
    if (@ARGV > 0) {
	$grouplist = "-G '" . join(',', @ARGV) . "'";
    }
    if (runBusyLoop("$USERMOD $user -g $pgroup $grouplist")) {
	fatal("Could not modify user $user to add groups!\n");
    }
    SetDotGroup($user, $pgroup);
    return 0;
}

sub ChangePassword()
{
    if (@ARGV != 2) {
	fatal("chpass: Wrong number of arguments");
    }
    my $user  = shift(@ARGV);
    my $hash  = shift(@ARGV);

    if (runBusyLoop("$CHPASS -p '$hash' $user")) {
	fatal("Could not change password");
    }
    return 0;
}

#
# Usage: deactivate username
#
sub DeactivateUser()
{
    if (@ARGV != 1) {
	fatal("deactivateuser: Wrong number of arguments");
    }
    my $user = shift(@ARGV);

    if ($WITHZFS) {
	my $zfsdir = $ZFS_ROOT . USERROOT() . "/$user";
	if (ZFSexists($zfsdir) &&
	    mysystem("$ZFS set mountpoint=none $zfsdir")) {
	    fatal("Could not set ZFS dir $zfsdir to mountpoint=none");
	}
    }
    if (runBusyLoop("$USERMOD $user -d /var/empty -s $NOLOGIN")) {
	fatal("Could not set shell to $NOLOGIN");
    }
    return 0;
}

#
# Usage: reactivate username
#
# The shell is changed via ModifyUser (we do not know the correct
# shell here), this is just for ZFS.
#
sub ReactivateUser()
{
    if (@ARGV != 1) {
	fatal("reactivateuser: Wrong number of arguments");
    }
    my $user = shift(@ARGV);
    my $hdir = USERROOT() . "/$user";

    if ($WITHZFS) {
	my $zfsdir = $ZFS_ROOT . USERROOT() . "/$user";
	if (ZFSexists($zfsdir) &&
	    mysystem("$ZFS set mountpoint=$hdir $zfsdir")) {
	    fatal("Could not set ZFS dir $zfsdir to mountpoint=$hdir");
	}
    }
    if (runBusyLoop("$USERMOD $user -d $hdir")) {
	fatal("Could not set home directory back to $hdir");
    }
    #
    # Make dot files are in the right group, since while the user was
    # inactive, we skipped doing that cause the home dir was unmounted
    # (ZFS). Need the current default group for that.
    #
    my (undef,undef,undef,$gid) = getpwnam($user);
    if (!defined($gid)) {
	fatal("Could not get gid for $user");
    }
    SetDotGroup($user,$gid);
    return 0;
}

#
# Usage: addproject projname unix_gname unix_gid unix_uid
#
sub AddProject()
{
    if (@ARGV != 4) {
	fatal("addproject: Wrong number of arguments");
    }
    my $name      = shift(@ARGV);
    my $unix_name = shift(@ARGV);
    my $unix_gid  = shift(@ARGV);
    my $unix_uid  = shift(@ARGV);

    # Create the project unix group
    if (system("egrep -q -s '^${unix_name}:' /etc/group")) {
	print "Adding group $unix_name ...\n";

	if (runBusyLoop("$GROUPADD $unix_name -g $unix_gid")) {
	    fatal("Could not add group $unix_name ($unix_gid)!\n");
	}
    }

    # Create the /proj directory
    my $path = "$PROJROOT/$name";
    if (! -d "$path" && MakeDir($PROJROOT, $name)) {
	fatal("Could not make directory '$path'");
    }
    if (! chmod(0770, "$path")) {
	fatal("Could not chmod '$path' to 0770: $!");
    }
    if (! chown($unix_uid, $unix_gid, "$path")) {
	fatal("Could not chown '$path' to $unix_uid/$unix_gid: $!");
    }
    if (SetNoDelete($path)) {
	fatal("Could not set no delete on '$path'!\n");
    }

    # Create required /proj subdirs
    foreach my $dir (@DIRLIST) {
	$path = "$PROJROOT/$name/$dir";
	if (! -d "$path" && !mkdir("$path", 0770)) {
	    fatal("Could not make directory '$path': $!");
	}
	if (! chmod(0770, "$path")) {
	    fatal("Could not chmod '$path' to 0770: $!");
	}
	if (! chown($unix_uid, $unix_gid, "$path")) {
	    fatal("Could not chown '$path' to $unix_uid/$unix_gid: $!");
	}
	if (SetNoDelete($path)) {
	    fatal("Could not set no delete on '$path'!\n");
	}
    }

    # Create the /groups directory
    $path = "$GROUPROOT/$name";
    if (! -d "$path" && MakeDir($GROUPROOT, $name)) {
	fatal("Could not make directory '$path'");
    }
    if (! chmod(0770, "$path")) {
	fatal("Could not chmod '$path' to 0770: $!");
    }
    if (! chown($unix_uid, $unix_gid, "$path")) {
	fatal("Could not chown '$path'  to $unix_uid/$unix_gid: $!");
    }
    if (SetNoDelete($path)) {
	fatal("Could not set no delete on '$path'!\n");
    }

    # Create a symlink for the default group
    $path = "$GROUPROOT/$name/$name";
    if (! -e "$path") {    
	if (mysystem("ln -s $PROJROOT/$name $path")) {
	    fatal("Could not symlink $PROJROOT/$name to $path");
	}
    }
    if (SetNoDelete($path)) {
	fatal("Could not set no delete on '$path'!\n");
    }

    # Finally, create /scratch dir if supported
    if ($SCRATCHROOT) {
	$path = "$SCRATCHROOT/$name";
	if (! -d "$path" && MakeDir($SCRATCHROOT, $name)) {
	    fatal("Could not make directory '$path'");
	}
	if (! chmod(0770, "$path")) {
	    fatal("Could not chmod '$path' to 0770: $!");
	}
	if (! chown($unix_uid, $unix_gid, "$path")) {
	    fatal("Could not chown '$path'  to $unix_uid/$unix_gid: $!");
	}
	if (SetNoDelete($path)) {
	    fatal("Could not set no delete on '$path'!\n");
	}
    }

    return 0;
}

#
# Usage: addgroup groupname unix_gname unix_gid unix_uid projname
#
sub AddGroup()
{
    if (@ARGV != 5) {
	fatal("addgroup: Wrong number of arguments");
    }
    my $name      = shift(@ARGV);
    my $unix_name = shift(@ARGV);
    my $unix_gid  = shift(@ARGV);
    my $unix_uid  = shift(@ARGV);
    my $projname  = shift(@ARGV);

    # Create the group unix group
    if (system("egrep -q -s '^${unix_name}:' /etc/group")) {
	print "Adding group $unix_name ...\n";

	if (runBusyLoop("$GROUPADD $unix_name -g $unix_gid")) {
	    fatal("Could not add group $unix_name ($unix_gid)!\n");
	}
    }

    # Create the /groups/gid directory
    my $path = "$GROUPROOT/$projname/$name";
    # XXX note that this is always a regular directory, not a filesystem
    if (! -d "$path" && !mkdir("$path", 0770)) {
	fatal("Could not make directory '$path': $!");
    }
    if (! chmod(0770, "$path")) {
	fatal("Could not chmod '$path' to 0770: $!");
    }
    if (! chown($unix_uid, $unix_gid, "$path")) {
	fatal("Could not chown '$path' to $unix_uid/$unix_gid: $!");
    }
    if (SetNoDelete($path)) {
	fatal("Could not set no delete on '$path'!\n");
    }

    # Create required /groups/gid subdirs
    foreach my $dir (@GDIRLIST) {
	$path = "$GROUPROOT/$projname/$name/$dir";
	if (! -d "$path" && !mkdir("$path", 0770)) {
	    fatal("Could not make directory '$path': $!");
	}
	if (! chmod(0770, "$path")) {
	    fatal("Could not chmod '$path' to 0770: $!");
	}
	if (! chown($unix_uid, $unix_gid, "$path")) {
	    fatal("Could not chown '$path' to $unix_uid/$unix_gid: $!");
	}
	if (SetNoDelete($path)) {
	    fatal("Could not set no delete on '$path'!\n");
	}
    }

    return 0;
}

#
# Usage: delproject projname unix_gname
#
sub DelProject()
{
    if (@ARGV != 2) {
	fatal("delproject: Wrong number of arguments");
    }
    my $name       = shift(@ARGV);
    my $unix_name  = shift(@ARGV);

    if ((-d "$PROJROOT/$name" && WhackDir($PROJROOT, $name)) ||
	(-d "$GROUPROOT/$name" && WhackDir($GROUPROOT, $name)) ||
	($SCRATCHROOT && -d "$SCRATCHROOT/$name" &&
	 WhackDir($SCRATCHROOT, $name))) {
	fatal("Could not destroy project '$name' related directories");
    }

    if (mysystem("egrep -q -s '^${unix_name}:' /etc/group") == 0) {
	print "Deleting project $unix_name ...\n";

	if (runBusyLoop("$GROUPDEL $unix_name")) {
	    fatal("Could not delete group $unix_name!\n");
	}
    }
    return 0;
}

#
# Usage: delgroup groupname unix_gname projname
#
sub DelGroup()
{
    if (@ARGV != 3) {
	fatal("delgroup: Wrong number of arguments");
    }
    my $name      = shift(@ARGV);
    my $unix_name = shift(@ARGV);
    my $projname   = shift(@ARGV);

    #
    # XXX groups are different because they are a subdirectory under
    # /groups/<pid>/.
    #
    if (-d "$GROUPROOT/$projname/$name" &&
	WhackDir($GROUPROOT, "$projname/$name")) {
	fatal("Could not destroy project group '$name' related directories");
    }

    if (mysystem("egrep -q -s '^${unix_name}:' /etc/group") == 0) {
	print "Deleting group $unix_name ...\n";

	if (runBusyLoop("$GROUPDEL $unix_name")) {
	    fatal("Could not delete group $unix_name!\n");
	}
    }
    return 0;
}

#
# Drop a file into place. The file is piped into STDIN from boss.
#
sub DropFile()
{
    if (@ARGV != 5) {
	fatal("dropfile: Wrong number of arguments");
    }
    my $user  = shift(@ARGV);
    my $gid   = shift(@ARGV);
    my $mode  = shift(@ARGV);
    my $dir   = shift(@ARGV);
    my $fname = shift(@ARGV);
    my $file  = "$dir/$fname";

    # Default the directory creation to 770. Might need to specify this too.
    if (! -d "$dir" && mysystem("$MKDIR -m 770 -p $dir")) {
	fatal("Could not make directory '$dir'");
    }
    #
    # We want the file to have the proper mode before we try to write it,
    # to avoid a race that allows someone to see the contents.
    #
    if (-e $file && mysystem("$MV -f $file ${file}.save")) {
	fatal("Could not rename $file to ${file}.save");
    }
    sysopen(HANDLE, $file, O_WRONLY|O_CREAT|O_EXCL, 0600)
	or fatal("sysopen $file: $!");
    while (<STDIN>) {
	print HANDLE $_;
    }
    close(HANDLE);
    mysystem("$CHOWN $user:$gid $file") == 0
	or fatal("Could not chown $file to $user:$gid");
    mysystem("$CHMOD $mode $file") == 0
	or fatal("Could not chmod '$file' to $mode");
    return 0;
}

#
# Check the dot files.
#
sub CheckDotFiles()
{
    if (@ARGV != 3) {
	fatal("checkdotfiles: Wrong number of arguments");
    }
    my $user  = shift(@ARGV);
    my $gid   = shift(@ARGV);
    my $email = shift(@ARGV);

    my $forward = "$USERROOT/$user/.forward";
    my $cshrc   = "$USERROOT/$user/.cshrc";
    my $profile = "$USERROOT/$user/.profile";

    # Just in case we got called before account created.
    return 0
	if (! -d "$USERROOT/$user");

    #
    # Set up a .forward file so that any email to them gets forwarded off.
    #
    print "Setting up .forward file for $user.\n";

    sysopen(HANDLE, $forward, O_WRONLY|O_CREAT|O_TRUNC, 0600)
	or fatal("sysopen $forward: $!");
    print HANDLE "$email\n";
    close(HANDLE);
    mysystem("$CHOWN $user:$gid $forward") == 0
	or fatal("Could not chown $forward to $user:$gid");
    mysystem("$CHMOD 644 $forward") == 0
	or fatal("Could not chmod '$forward' to 644");

    #
    # Add testbed path to .cshrc and .profile.
    # Plus a conditional Cygwin section for the Windows system path.
    #
    my $cpathstr = "set path = ($USERPATH \$path)\n" .
    'if ( `uname -s` =~ CYGWIN* ) then' . "\n" .
    '    setenv PATH "${PATH}:/cygdrive/c/WINDOWS/system32:/cygdrive/c/WINDOWS"' . "\n" .
    'endif';
    if (-e $cshrc && system("egrep -q -s '$USERPATH' $cshrc")) {
	system("echo '$cpathstr' >> $cshrc");
    }

    my $spathstr = "PATH=$USERPATH:\$PATH\n" .
    'if [[ `uname -s` == CYGWIN* ]]; then' . "\n" .
    '    PATH="$PATH":/cygdrive/c/WINDOWS/system32:/cygdrive/c/WINDOWS' . "\n" .
    'fi';
    if (-e $profile && system("egrep -q -s '$USERPATH' $profile")) {
	system("echo '$spathstr' >> $profile");
    }
    return 0;
}

#
# Create ssh keys for user, sending back the pub part. This is a little
# incovenient since we generate two keys (V1 and V2) but can send back
# just one at a time via STDOUT (do not want to parse anything).
#
sub CreateSSHKey()
{
    if (@ARGV != 3) {
	fatal("createsshkey: Wrong number of arguments");
    }
    my $user   = shift(@ARGV);
    my $gid    = shift(@ARGV);
    my $type   = shift(@ARGV);
    my $sshdir = "$USERROOT/$user/.ssh";
    my $sshkey = "$sshdir/";

    if ($type eq "rsa1") {
	$sshkey .= "identity";
    }
    elsif ($type eq "rsa") {
	$sshkey .= "id_rsa";
    }
    else {
	fatal("Bad key type: $type");
    }
    unlink($sshkey)
	if (-e $sshkey);
    #
    # Since we send the key back via STDOUT, make sure all output
    # goes to STDERR.
    #
    mysystem("$KEYGEN -t $type -P '' -f $sshkey ".
	     "-C '${type}" . "\@" . ${OURDOMAIN} . "' 1>&2") == 0
	or fatal("Failure in ssh-keygen!");
    mysystem("$CHOWN $user:$gid $sshkey ${sshkey}.pub") == 0
	or fatal("Could not chown $sshkey to $user:$gid");
    
    # Return the key via STDOUT to boss.
    my $ident = `cat ${sshkey}.pub`;
    print STDOUT $ident;
    return 0;
}

#
# Make sure the users dot files and other critical files/dirs
# are in the correct group. I looked at the source code to
# chown, and it does not do anything to files that are already
# set correctly. Thank you chown.
#
sub SetDotGroup($$)
{
    my ($user, $gid) = @_;

    my @dots = (".login", ".profile", ".cshrc", ".ssl", ".ssh");
    my $homedir = USERROOT() . "/$user";

    if (! -e $homedir) {
	print STDERR "$homedir does not exist, skipping dots chown\n";
	return 0;
    }
    print "Changing dot files group for $user to $gid\n";
    
    mysystem("$CHOWN $user:$gid $homedir") == 0
	or fatal("Could not chown home dir to $user:$gid");

    foreach my $dot (@dots) {
	if (-e "$homedir/$dot") {
	    mysystem("$CHOWN -R $user:$gid $homedir/$dot") == 0
		or fatal("Could not chown $homedir/$dot to $user:$gid");
	}
    }
}

#
# Check for ZFS existence.
#
sub ZFSexists($)
{
    my ($path) = @_;

    mysystem("$ZFS list $path >/dev/null 2>&1");
    return ($? ? 0 : 1);
}

sub MakeDir($$)
{
    my ($fs,$dir) = @_;
    my ($cmd,$cmdarg,$path);

    # XXX right now we assume that WITHZFS means per-user/proj FSes
    if ($WITHZFS) {
	$cmd = "$ZFS create";
	$path = "${ZFS_ROOT}${fs}/$dir";

	# XXX quotas
	my ($refquota,$mult);
	if ($fs eq $USERROOT) {
	    $refquota = $ZFS_QUOTA_USER;
	    $mult = $ZFS_QUOTA_USER_X;
	} elsif ($fs eq $PROJROOT) {
	    $refquota = $ZFS_QUOTA_PROJECT;
	    $mult = $ZFS_QUOTA_PROJECT_X;
	} elsif ($fs eq $GROUPROOT) {
	    $refquota = $ZFS_QUOTA_GROUP;
	    $mult = $ZFS_QUOTA_GROUP_X;
	}
	if (defined($refquota) && $refquota =~ /^(\d+(?:\.\d+)?)([MGT]?)$/) {
	    my ($num,$unit) = ($1,$2);
	    $unit = "" if (!defined($unit));
	    $num = sprintf "%.1f", $num * $mult;
	    $cmdarg = "-o refquota=$refquota -o quota=$num$unit";
	} else {
	    $cmdarg = "";
	}
    } else {
	$cmd = "mkdir";
	$cmdarg = "";
	$path = "$fs/$dir";
    }
    #
    # If we are relying on ZFS to HUP mountd (!ZFS_NOEXPORT), then we have to
    # give mountd a chance to finish its work before we return. This is because
    # it is likely that our caller (on boss) will try to access the directory
    # via NFS after we return and if mountd is not done, that will fail.
    # If ZFS_NOEXPORT is set, then our caller will do the HUPing and waiting.
    #
    my $waitforit = 0;
    if (!$ZFS_NOEXPORT) {
	#
	# Note that "waiting for mountd" involves a Utah hack to mountd to
	# make it record a timestamp in a file when it is done. If there is
	# no timestamp file, assume we are not running the hacked mountd and
	# don't sleep. If the file exists, remove it and wait for it to
	# reappear as a sign mountd is done.
	#
	# XXX since we cannot guarantee that mountd gets HUP'ed when we
	# call zfs (i.e., the command fails or the nfsshare attribute is
	# not set correctly) we save the old timestamp and put it back
	# on failures. Otherwise, the next call to us or exports_setup will
	# not properly wait for mountd.
	#
	if (-e "$TSFILE" && rename("$TSFILE", "$TSFILE.bak") != 0) {
	    $waitforit = 1;
	}
    }

    if (mysystem("$cmd $cmdarg $path")) {
	my $stat = $?;
	if ($waitforit && !rename("$TSFILE.bak", "$TSFILE")) {
	    print STDERR "accountsetup: could not replace $TSFILE;".
		" You must HUP mountd\n";
	}
	return $stat;
    }

    if ($waitforit) {
	# With potentially thousands of mount points, this can take 15 seconds!
	my $wtime = 15;
	my $i;

	for ($i = 0; $i < $wtime; $i++) {
	    if (-e "$TSFILE") {
		print "accountsetup: mountd done.\n"
		    if ($i > 0);
		last;
	    }
	    print "accountsetup: waiting for mountd to finish ($i)...\n";
	    sleep(1);
	}
	if ($i == $wtime) {
	    print STDERR "accountsetup: mountd not finished after $i seconds;".
		"Perhaps ZFS sharenfs attribute not set on $path?\n";
	    if (!rename("$TSFILE.bak", "$TSFILE")) {
		print STDERR "accountsetup: could not replace $TSFILE;".
		    " You must HUP mountd\n";
	    }
	} else {
	    unlink("$TSFILE.bak");
	}
    }

    # should we be setting permissions or ownership here?

    return 0;
}

sub WhackDir($$)
{
    my ($fs,$dir) = @_;
    my $zfsfs = "";

    if (ClearNoDelete("$fs/$dir")) {
	fatal("Could not clear no delete on '$fs/$dir'!\n");
    }

    if ($WITHZFS) {
	my $path = "${ZFS_ROOT}${fs}/$dir";
	$zfsfs = $path
	    if (ZFSexists($path));
    }
    if ($RENAMEDIRS) {
	my ($cmd, $path, $npath);
	my $suffix = "-D" . time();

	if ($zfsfs) {
	    $cmd = "$ZFS rename";
	    $path = $zfsfs;
	    $npath = "${ZFS_ROOT}${fs}/$dir$suffix";
	} else {
	    $cmd = "mv";
	    $path = "$fs/$dir";
	    $npath = "$fs/$dir$suffix";
	}
	if (mysystem("$cmd $path $npath")) {
	    return $?;
	}

	# Since we reuse uid/gids let's make the dir root/0700
	$path = "$fs/$dir$suffix";
	if (!chown(0, 0, $path) || !chmod(0700, $path)) {
	    print STDERR "WARNING: could not chown/chmod '$path': $!\n";
	}
	#
	# And then unmount, we do not need it around. The empty subdir
	# will still be there, so we have some clue ... maybe we should
	# drop a file into the empty dir?
	#
	if ($zfsfs && mysystem("$ZFS set mountpoint=none $npath")) {
	    print STDERR "Could not set ZFS dir $npath to mountpoint=none\n";
	}
    }
    #
    # XXX maybe we should do this in the background since it could
    # take a really long time!
    #
    else {
	my ($cmd, $path);

	if ($zfsfs) {
	    $cmd = "$ZFS destroy -f";
	    $path = $zfsfs;
	} else {
	    $cmd = "rm -rf";
	    $path = "$fs/$dir";
	}
	if (mysystem("$cmd $path")) {
	    return $?;
	}
    }
    return 0;
}

#
# HUP Mountd after changes to ZFS volumes. Not used, Mike says we
# can do "zfs share -a" instead, but I will leave this code here
# for now.
#
sub HUPMountd()
{
    if (! -e $PIDFILE) {
	fatal("$PIDFILE does not exist. Is mountd running?");
    }
    my $daemonpid = `cat $PIDFILE`;
    chomp($daemonpid);
    # untaint
    if ($daemonpid =~ /^([-\@\w.]+)$/) {
	$daemonpid = $1;
    }
    if (kill('HUP', $daemonpid) == 0) {
	fatal("Could not kill(HUP) process $daemonpid (mountd): $!");
    }
    # Give mountd time to react.
    sleep(1);
}

# XXX temporary while debugging
sub mysystem($)
{
    my $cmd = shift;

    print STDERR "accountsetup: '$cmd'\n";

    if (open(FD, ">>/usr/testbed/log/accountsetup.log")) {
	my $tstamp = POSIX::strftime("%b %e %H:%M:%S", localtime());
	print FD "$tstamp: $cmd\n";
	close(FD);
    }
    return system($cmd);
}

#
# Run pw/chpass, checking for a locked passwd/group file. The pw routines
# exit with non specific error code 1 for everything, so there is no way
# to tell that its a busy file except by looking at the error message. Then
# wait for a bit and try again. Silly.
#
sub runBusyLoop($)
{
    my $command   = shift;
    my $maxtries  = 20;
    my $stime     = time();

    print STDERR "accountsetup: '$command'\n";

    if (open(FD, ">>/usr/testbed/log/accountsetup.log")) {
	my $tstamp = POSIX::strftime("%b %e %H:%M:%S", localtime($stime));
	print FD "$tstamp: $command\n";
	close(FD);
    }

    while ($maxtries--) {
	my $output    = "";
    
	#
	# This open implicitly forks a child, which goes on to execute the
	# command. The parent is going to sit in this loop and capture the
	# output of the child. We do this so that we have better control
	# over the descriptors.
	#
	my $pid = open(PIPE, "-|");
	if (!defined($pid)) {
	    print STDERR "runBusyLoop; popen failed!\n";
	    return -1;
	}
	if ($pid) {
	    while (<PIPE>) {
		$output .= $_;
	    }
	    close(PIPE);
	    print $output;
	    if (!$?) {
		if ($command =~ /^$PW .*/) {
		    if (open(FD, ">>/usr/testbed/log/accountsetup.log")) {
			my $etime = time();
			my $tstamp = POSIX::strftime("%b %e %H:%M:%S",
						     localtime($etime));
			$etime -= $stime;
			print FD "$tstamp: $PW done in $etime seconds\n";
			close(FD);
		    }
		}
		return 0
	    }
	    if ($output =~ /(group|db) file is busy/m) {
		print "runBusyLoop; waiting a few seconds before trying again\n";
		sleep(3);
	    }
	}
	else {
	    open(STDERR, ">&STDOUT");
	    exec($command);
	}
    }
    return -1;
}

sub fatal($) {
    my ($msg) = @_;

    print STDERR "$msg\n";
    exit(-1);
}

#
# Use chflags on certain directories to prevent users from deleting things.
# Just a bandaid on the real problem.
#
sub SetNoDelete($)
{
    my ($filename) = @_;

    return 0
	if (!$USEFLAGS);

    system("$CHFLAGS sunlink $filename");
    return ($? ? -1 : 0);
}
sub ClearNoDelete($)
{
    my ($filename) = @_;
    
    return 0
	if (!$USEFLAGS);

    # Do a recursive change here since we tend to do deletions on the
    # top level directories.
    system("$CHFLAGS -R nosunlink $filename");
    return ($? ? -1 : 0);
}
