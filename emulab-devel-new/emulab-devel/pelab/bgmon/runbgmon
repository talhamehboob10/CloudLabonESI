#!/usr/bin/perl
#
# Copyright (c) 2006 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

use Getopt::Std;

my $expt;
my $iperfport = 5002;

sub usage {
	warn "Usage: $0 [-e pid/eid] <bin_path>\n";
	return 1;
}

my %opt = ();

if (!getopts("e:i:", \%opt)) {
    exit &usage;
}

if ($opt{i}) { $iperfport = $opt{i}; }

if ($opt{e}) { 
    $expt = $opt{e}; 
} else {
    open(NID, "</var/emulab/boot/nickname")
        or die "Can't open nodeid file!";
    my $nid = <NID>;
    close(NID);
    chomp $nid;
    my (undef, $eid, $pid) = split /\./, $nid;
    $expt = "$pid/$eid";
}

if( @ARGV < 1 ){
    exit &usage;
}

my $path = $ARGV[0];

# Find out what version of Fedora Core this node is running
open(FR, "</etc/fedora-release")
        or die "Unable to open fedora-release file: $!\n";
my $release_string = <FR>;
my $fc_version;
my $os_string;
if ($release_string =~ /Fedora Core release (\d+)/) {
    $fc_version = "$1";
    $os_string = "FC$1";
} else {
    die "Unable to determine Fedora release version from '$release_string'\n";
}

print "Running on OS $os_string\n";

# Symlink each binary to the appropriate version
foreach my $bin ("iperf", "iperfd", "fping") {
    my $destbin = "$path/$bin";
    my $sourcebin = "$path/$bin-$os_string";
    if (-e $destbin) {
        unlink $destbin or die "Unable to remove old $destbin: $!\n";
    }
    if (!-e $sourcebin) {
        die "Missing required binary: $sourcebin\n";
    }
    if (!link($sourcebin, $destbin)) {
        die "Unable to link $sourcebin to $destbin\n";
    }
}

#system "sudo perl $path/bgmon.pl -e $expt -i $iperfport -d $path/ >/tmp/bgmon.log&";
system "sudo perl -I$path $path/bgmon.pl -e $expt -i $iperfport -d $path/&";
system "sudo rm $path/iperfd.out $path/iperfd.err";
system "sudo $path/iperfd -s -p $iperfport >& $path/iperfd.err > $path/iperfd.out &";

exit 0;
