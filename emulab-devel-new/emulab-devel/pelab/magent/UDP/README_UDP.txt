/*
 * Copyright (c) 2006 University of Utah and the Flux Group.
 * 
 * {{{EMULAB-LICENSE
 * 
 * This file is part of the Emulab network testbed software.
 * 
 * This file is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or (at
 * your option) any later version.
 * 
 * This file is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
 * License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this file.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * }}}
 */
				ACIM for UDP applications 
				-------------------------

Contact: pramod@cs.utah.edu

Overview:
---------

UDP for Flexlab is implemented as two stand alone programs as of now - 
it will soon be integrated into the exisiting Magent code.

The client applications sends UDP packets to the server at a specified rate. The
client records a timestamp for each packet sent and for each ACK received. The
server sends acknowledgements ( with some redundancy built in ) back to the client.

Based on the time taken for these acks to get back, since the original packets were
sent out: the client calculates the RTT,
the minimum delay ( which is interpreted as all delay except queuing ) ,the maximum
queuing delay, and the achieved throughput.

It has been tested in Emulab, with background cross traffic generated by IPerf TCP and
UDP sessions. I will check in the resulting throughput graphs soon.

How to run it:
--------------

Start the server program first:

1) cd to 'UdpServerDir'
2) Type 'make -f Makefile.server'
3) ./runServer.sh

Then start the client app ( on a different host ):

1) cd to 'UdpClientDir'
2) Type 'make -f Makefile.client'
3) ./runClient.sh

Depending on the arguments given in 'runClient.sh', the client app sends
some number of UDP packets to the server and calculates the achieved throughput values.

The client runs in an infinite loop and (as of now) does not terminate on its own, so 
kill it after it stops printing to stdout.

4) Then type './showTputGraph.sh' in 'UdpClientDir'. This displayes a graph
of the throughput values for the session. ( Make sure that gnuplot is present on the system ).


Results and graphs:
------------------

Coming soon.

